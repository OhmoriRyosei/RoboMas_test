
RoboMas_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e00  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a0  08008000  08008000  00018000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080081a0  080081a0  000201b4  2**0
                  CONTENTS
  4 .ARM          00000008  080081a0  080081a0  000181a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080081a8  080081a8  000201b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080081a8  080081a8  000181a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080081ac  080081ac  000181ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080081b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000074  08008224  00020074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000114  080082c4  00020114  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00004b8c  200001b8  08008364  000201b8  2**3
                  ALLOC
 12 ._user_heap_stack 00000604  20004d44  08008364  00024d44  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000201b4  2**0
                  CONTENTS, READONLY
 14 .debug_info   00019ffb  00000000  00000000  000201e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003549  00000000  00000000  0003a1dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001218  00000000  00000000  0003d728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000010f0  00000000  00000000  0003e940  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002ae1d  00000000  00000000  0003fa30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000160d5  00000000  00000000  0006a84d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001002ea  00000000  00000000  00080922  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  00180c0c  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000053c8  00000000  00000000  00180c5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001b8 	.word	0x200001b8
 800021c:	00000000 	.word	0x00000000
 8000220:	08007fe8 	.word	0x08007fe8

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001bc 	.word	0x200001bc
 800023c:	08007fe8 	.word	0x08007fe8

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_frsub>:
 80002e0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__addsf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_fsub>:
 80002e8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080002ec <__addsf3>:
 80002ec:	0042      	lsls	r2, r0, #1
 80002ee:	bf1f      	itttt	ne
 80002f0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80002f4:	ea92 0f03 	teqne	r2, r3
 80002f8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80002fc:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000300:	d06a      	beq.n	80003d8 <__addsf3+0xec>
 8000302:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000306:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800030a:	bfc1      	itttt	gt
 800030c:	18d2      	addgt	r2, r2, r3
 800030e:	4041      	eorgt	r1, r0
 8000310:	4048      	eorgt	r0, r1
 8000312:	4041      	eorgt	r1, r0
 8000314:	bfb8      	it	lt
 8000316:	425b      	neglt	r3, r3
 8000318:	2b19      	cmp	r3, #25
 800031a:	bf88      	it	hi
 800031c:	4770      	bxhi	lr
 800031e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000322:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000326:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800032a:	bf18      	it	ne
 800032c:	4240      	negne	r0, r0
 800032e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000332:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000336:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800033a:	bf18      	it	ne
 800033c:	4249      	negne	r1, r1
 800033e:	ea92 0f03 	teq	r2, r3
 8000342:	d03f      	beq.n	80003c4 <__addsf3+0xd8>
 8000344:	f1a2 0201 	sub.w	r2, r2, #1
 8000348:	fa41 fc03 	asr.w	ip, r1, r3
 800034c:	eb10 000c 	adds.w	r0, r0, ip
 8000350:	f1c3 0320 	rsb	r3, r3, #32
 8000354:	fa01 f103 	lsl.w	r1, r1, r3
 8000358:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800035c:	d502      	bpl.n	8000364 <__addsf3+0x78>
 800035e:	4249      	negs	r1, r1
 8000360:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000364:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000368:	d313      	bcc.n	8000392 <__addsf3+0xa6>
 800036a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800036e:	d306      	bcc.n	800037e <__addsf3+0x92>
 8000370:	0840      	lsrs	r0, r0, #1
 8000372:	ea4f 0131 	mov.w	r1, r1, rrx
 8000376:	f102 0201 	add.w	r2, r2, #1
 800037a:	2afe      	cmp	r2, #254	; 0xfe
 800037c:	d251      	bcs.n	8000422 <__addsf3+0x136>
 800037e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000382:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000386:	bf08      	it	eq
 8000388:	f020 0001 	biceq.w	r0, r0, #1
 800038c:	ea40 0003 	orr.w	r0, r0, r3
 8000390:	4770      	bx	lr
 8000392:	0049      	lsls	r1, r1, #1
 8000394:	eb40 0000 	adc.w	r0, r0, r0
 8000398:	3a01      	subs	r2, #1
 800039a:	bf28      	it	cs
 800039c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80003a0:	d2ed      	bcs.n	800037e <__addsf3+0x92>
 80003a2:	fab0 fc80 	clz	ip, r0
 80003a6:	f1ac 0c08 	sub.w	ip, ip, #8
 80003aa:	ebb2 020c 	subs.w	r2, r2, ip
 80003ae:	fa00 f00c 	lsl.w	r0, r0, ip
 80003b2:	bfaa      	itet	ge
 80003b4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80003b8:	4252      	neglt	r2, r2
 80003ba:	4318      	orrge	r0, r3
 80003bc:	bfbc      	itt	lt
 80003be:	40d0      	lsrlt	r0, r2
 80003c0:	4318      	orrlt	r0, r3
 80003c2:	4770      	bx	lr
 80003c4:	f092 0f00 	teq	r2, #0
 80003c8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80003cc:	bf06      	itte	eq
 80003ce:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80003d2:	3201      	addeq	r2, #1
 80003d4:	3b01      	subne	r3, #1
 80003d6:	e7b5      	b.n	8000344 <__addsf3+0x58>
 80003d8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80003dc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80003e0:	bf18      	it	ne
 80003e2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80003e6:	d021      	beq.n	800042c <__addsf3+0x140>
 80003e8:	ea92 0f03 	teq	r2, r3
 80003ec:	d004      	beq.n	80003f8 <__addsf3+0x10c>
 80003ee:	f092 0f00 	teq	r2, #0
 80003f2:	bf08      	it	eq
 80003f4:	4608      	moveq	r0, r1
 80003f6:	4770      	bx	lr
 80003f8:	ea90 0f01 	teq	r0, r1
 80003fc:	bf1c      	itt	ne
 80003fe:	2000      	movne	r0, #0
 8000400:	4770      	bxne	lr
 8000402:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000406:	d104      	bne.n	8000412 <__addsf3+0x126>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	bf28      	it	cs
 800040c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000410:	4770      	bx	lr
 8000412:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000416:	bf3c      	itt	cc
 8000418:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 800041c:	4770      	bxcc	lr
 800041e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000422:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000426:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800042a:	4770      	bx	lr
 800042c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000430:	bf16      	itet	ne
 8000432:	4608      	movne	r0, r1
 8000434:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000438:	4601      	movne	r1, r0
 800043a:	0242      	lsls	r2, r0, #9
 800043c:	bf06      	itte	eq
 800043e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000442:	ea90 0f01 	teqeq	r0, r1
 8000446:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800044a:	4770      	bx	lr

0800044c <__aeabi_ui2f>:
 800044c:	f04f 0300 	mov.w	r3, #0
 8000450:	e004      	b.n	800045c <__aeabi_i2f+0x8>
 8000452:	bf00      	nop

08000454 <__aeabi_i2f>:
 8000454:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000458:	bf48      	it	mi
 800045a:	4240      	negmi	r0, r0
 800045c:	ea5f 0c00 	movs.w	ip, r0
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000468:	4601      	mov	r1, r0
 800046a:	f04f 0000 	mov.w	r0, #0
 800046e:	e01c      	b.n	80004aa <__aeabi_l2f+0x2a>

08000470 <__aeabi_ul2f>:
 8000470:	ea50 0201 	orrs.w	r2, r0, r1
 8000474:	bf08      	it	eq
 8000476:	4770      	bxeq	lr
 8000478:	f04f 0300 	mov.w	r3, #0
 800047c:	e00a      	b.n	8000494 <__aeabi_l2f+0x14>
 800047e:	bf00      	nop

08000480 <__aeabi_l2f>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800048c:	d502      	bpl.n	8000494 <__aeabi_l2f+0x14>
 800048e:	4240      	negs	r0, r0
 8000490:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000494:	ea5f 0c01 	movs.w	ip, r1
 8000498:	bf02      	ittt	eq
 800049a:	4684      	moveq	ip, r0
 800049c:	4601      	moveq	r1, r0
 800049e:	2000      	moveq	r0, #0
 80004a0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80004a4:	bf08      	it	eq
 80004a6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80004aa:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80004ae:	fabc f28c 	clz	r2, ip
 80004b2:	3a08      	subs	r2, #8
 80004b4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80004b8:	db10      	blt.n	80004dc <__aeabi_l2f+0x5c>
 80004ba:	fa01 fc02 	lsl.w	ip, r1, r2
 80004be:	4463      	add	r3, ip
 80004c0:	fa00 fc02 	lsl.w	ip, r0, r2
 80004c4:	f1c2 0220 	rsb	r2, r2, #32
 80004c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004cc:	fa20 f202 	lsr.w	r2, r0, r2
 80004d0:	eb43 0002 	adc.w	r0, r3, r2
 80004d4:	bf08      	it	eq
 80004d6:	f020 0001 	biceq.w	r0, r0, #1
 80004da:	4770      	bx	lr
 80004dc:	f102 0220 	add.w	r2, r2, #32
 80004e0:	fa01 fc02 	lsl.w	ip, r1, r2
 80004e4:	f1c2 0220 	rsb	r2, r2, #32
 80004e8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80004ec:	fa21 f202 	lsr.w	r2, r1, r2
 80004f0:	eb43 0002 	adc.w	r0, r3, r2
 80004f4:	bf08      	it	eq
 80004f6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80004fa:	4770      	bx	lr

080004fc <__aeabi_uldivmod>:
 80004fc:	b953      	cbnz	r3, 8000514 <__aeabi_uldivmod+0x18>
 80004fe:	b94a      	cbnz	r2, 8000514 <__aeabi_uldivmod+0x18>
 8000500:	2900      	cmp	r1, #0
 8000502:	bf08      	it	eq
 8000504:	2800      	cmpeq	r0, #0
 8000506:	bf1c      	itt	ne
 8000508:	f04f 31ff 	movne.w	r1, #4294967295
 800050c:	f04f 30ff 	movne.w	r0, #4294967295
 8000510:	f000 b974 	b.w	80007fc <__aeabi_idiv0>
 8000514:	f1ad 0c08 	sub.w	ip, sp, #8
 8000518:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800051c:	f000 f806 	bl	800052c <__udivmoddi4>
 8000520:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000524:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000528:	b004      	add	sp, #16
 800052a:	4770      	bx	lr

0800052c <__udivmoddi4>:
 800052c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000530:	9d08      	ldr	r5, [sp, #32]
 8000532:	4604      	mov	r4, r0
 8000534:	468e      	mov	lr, r1
 8000536:	2b00      	cmp	r3, #0
 8000538:	d14d      	bne.n	80005d6 <__udivmoddi4+0xaa>
 800053a:	428a      	cmp	r2, r1
 800053c:	4694      	mov	ip, r2
 800053e:	d969      	bls.n	8000614 <__udivmoddi4+0xe8>
 8000540:	fab2 f282 	clz	r2, r2
 8000544:	b152      	cbz	r2, 800055c <__udivmoddi4+0x30>
 8000546:	fa01 f302 	lsl.w	r3, r1, r2
 800054a:	f1c2 0120 	rsb	r1, r2, #32
 800054e:	fa20 f101 	lsr.w	r1, r0, r1
 8000552:	fa0c fc02 	lsl.w	ip, ip, r2
 8000556:	ea41 0e03 	orr.w	lr, r1, r3
 800055a:	4094      	lsls	r4, r2
 800055c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000560:	0c21      	lsrs	r1, r4, #16
 8000562:	fbbe f6f8 	udiv	r6, lr, r8
 8000566:	fa1f f78c 	uxth.w	r7, ip
 800056a:	fb08 e316 	mls	r3, r8, r6, lr
 800056e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000572:	fb06 f107 	mul.w	r1, r6, r7
 8000576:	4299      	cmp	r1, r3
 8000578:	d90a      	bls.n	8000590 <__udivmoddi4+0x64>
 800057a:	eb1c 0303 	adds.w	r3, ip, r3
 800057e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000582:	f080 811f 	bcs.w	80007c4 <__udivmoddi4+0x298>
 8000586:	4299      	cmp	r1, r3
 8000588:	f240 811c 	bls.w	80007c4 <__udivmoddi4+0x298>
 800058c:	3e02      	subs	r6, #2
 800058e:	4463      	add	r3, ip
 8000590:	1a5b      	subs	r3, r3, r1
 8000592:	b2a4      	uxth	r4, r4
 8000594:	fbb3 f0f8 	udiv	r0, r3, r8
 8000598:	fb08 3310 	mls	r3, r8, r0, r3
 800059c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80005a0:	fb00 f707 	mul.w	r7, r0, r7
 80005a4:	42a7      	cmp	r7, r4
 80005a6:	d90a      	bls.n	80005be <__udivmoddi4+0x92>
 80005a8:	eb1c 0404 	adds.w	r4, ip, r4
 80005ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80005b0:	f080 810a 	bcs.w	80007c8 <__udivmoddi4+0x29c>
 80005b4:	42a7      	cmp	r7, r4
 80005b6:	f240 8107 	bls.w	80007c8 <__udivmoddi4+0x29c>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80005c2:	1be4      	subs	r4, r4, r7
 80005c4:	2600      	movs	r6, #0
 80005c6:	b11d      	cbz	r5, 80005d0 <__udivmoddi4+0xa4>
 80005c8:	40d4      	lsrs	r4, r2
 80005ca:	2300      	movs	r3, #0
 80005cc:	e9c5 4300 	strd	r4, r3, [r5]
 80005d0:	4631      	mov	r1, r6
 80005d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005d6:	428b      	cmp	r3, r1
 80005d8:	d909      	bls.n	80005ee <__udivmoddi4+0xc2>
 80005da:	2d00      	cmp	r5, #0
 80005dc:	f000 80ef 	beq.w	80007be <__udivmoddi4+0x292>
 80005e0:	2600      	movs	r6, #0
 80005e2:	e9c5 0100 	strd	r0, r1, [r5]
 80005e6:	4630      	mov	r0, r6
 80005e8:	4631      	mov	r1, r6
 80005ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ee:	fab3 f683 	clz	r6, r3
 80005f2:	2e00      	cmp	r6, #0
 80005f4:	d14a      	bne.n	800068c <__udivmoddi4+0x160>
 80005f6:	428b      	cmp	r3, r1
 80005f8:	d302      	bcc.n	8000600 <__udivmoddi4+0xd4>
 80005fa:	4282      	cmp	r2, r0
 80005fc:	f200 80f9 	bhi.w	80007f2 <__udivmoddi4+0x2c6>
 8000600:	1a84      	subs	r4, r0, r2
 8000602:	eb61 0303 	sbc.w	r3, r1, r3
 8000606:	2001      	movs	r0, #1
 8000608:	469e      	mov	lr, r3
 800060a:	2d00      	cmp	r5, #0
 800060c:	d0e0      	beq.n	80005d0 <__udivmoddi4+0xa4>
 800060e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000612:	e7dd      	b.n	80005d0 <__udivmoddi4+0xa4>
 8000614:	b902      	cbnz	r2, 8000618 <__udivmoddi4+0xec>
 8000616:	deff      	udf	#255	; 0xff
 8000618:	fab2 f282 	clz	r2, r2
 800061c:	2a00      	cmp	r2, #0
 800061e:	f040 8092 	bne.w	8000746 <__udivmoddi4+0x21a>
 8000622:	eba1 010c 	sub.w	r1, r1, ip
 8000626:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800062a:	fa1f fe8c 	uxth.w	lr, ip
 800062e:	2601      	movs	r6, #1
 8000630:	0c20      	lsrs	r0, r4, #16
 8000632:	fbb1 f3f7 	udiv	r3, r1, r7
 8000636:	fb07 1113 	mls	r1, r7, r3, r1
 800063a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800063e:	fb0e f003 	mul.w	r0, lr, r3
 8000642:	4288      	cmp	r0, r1
 8000644:	d908      	bls.n	8000658 <__udivmoddi4+0x12c>
 8000646:	eb1c 0101 	adds.w	r1, ip, r1
 800064a:	f103 38ff 	add.w	r8, r3, #4294967295
 800064e:	d202      	bcs.n	8000656 <__udivmoddi4+0x12a>
 8000650:	4288      	cmp	r0, r1
 8000652:	f200 80cb 	bhi.w	80007ec <__udivmoddi4+0x2c0>
 8000656:	4643      	mov	r3, r8
 8000658:	1a09      	subs	r1, r1, r0
 800065a:	b2a4      	uxth	r4, r4
 800065c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000660:	fb07 1110 	mls	r1, r7, r0, r1
 8000664:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000668:	fb0e fe00 	mul.w	lr, lr, r0
 800066c:	45a6      	cmp	lr, r4
 800066e:	d908      	bls.n	8000682 <__udivmoddi4+0x156>
 8000670:	eb1c 0404 	adds.w	r4, ip, r4
 8000674:	f100 31ff 	add.w	r1, r0, #4294967295
 8000678:	d202      	bcs.n	8000680 <__udivmoddi4+0x154>
 800067a:	45a6      	cmp	lr, r4
 800067c:	f200 80bb 	bhi.w	80007f6 <__udivmoddi4+0x2ca>
 8000680:	4608      	mov	r0, r1
 8000682:	eba4 040e 	sub.w	r4, r4, lr
 8000686:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800068a:	e79c      	b.n	80005c6 <__udivmoddi4+0x9a>
 800068c:	f1c6 0720 	rsb	r7, r6, #32
 8000690:	40b3      	lsls	r3, r6
 8000692:	fa22 fc07 	lsr.w	ip, r2, r7
 8000696:	ea4c 0c03 	orr.w	ip, ip, r3
 800069a:	fa20 f407 	lsr.w	r4, r0, r7
 800069e:	fa01 f306 	lsl.w	r3, r1, r6
 80006a2:	431c      	orrs	r4, r3
 80006a4:	40f9      	lsrs	r1, r7
 80006a6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80006aa:	fa00 f306 	lsl.w	r3, r0, r6
 80006ae:	fbb1 f8f9 	udiv	r8, r1, r9
 80006b2:	0c20      	lsrs	r0, r4, #16
 80006b4:	fa1f fe8c 	uxth.w	lr, ip
 80006b8:	fb09 1118 	mls	r1, r9, r8, r1
 80006bc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80006c0:	fb08 f00e 	mul.w	r0, r8, lr
 80006c4:	4288      	cmp	r0, r1
 80006c6:	fa02 f206 	lsl.w	r2, r2, r6
 80006ca:	d90b      	bls.n	80006e4 <__udivmoddi4+0x1b8>
 80006cc:	eb1c 0101 	adds.w	r1, ip, r1
 80006d0:	f108 3aff 	add.w	sl, r8, #4294967295
 80006d4:	f080 8088 	bcs.w	80007e8 <__udivmoddi4+0x2bc>
 80006d8:	4288      	cmp	r0, r1
 80006da:	f240 8085 	bls.w	80007e8 <__udivmoddi4+0x2bc>
 80006de:	f1a8 0802 	sub.w	r8, r8, #2
 80006e2:	4461      	add	r1, ip
 80006e4:	1a09      	subs	r1, r1, r0
 80006e6:	b2a4      	uxth	r4, r4
 80006e8:	fbb1 f0f9 	udiv	r0, r1, r9
 80006ec:	fb09 1110 	mls	r1, r9, r0, r1
 80006f0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80006f4:	fb00 fe0e 	mul.w	lr, r0, lr
 80006f8:	458e      	cmp	lr, r1
 80006fa:	d908      	bls.n	800070e <__udivmoddi4+0x1e2>
 80006fc:	eb1c 0101 	adds.w	r1, ip, r1
 8000700:	f100 34ff 	add.w	r4, r0, #4294967295
 8000704:	d26c      	bcs.n	80007e0 <__udivmoddi4+0x2b4>
 8000706:	458e      	cmp	lr, r1
 8000708:	d96a      	bls.n	80007e0 <__udivmoddi4+0x2b4>
 800070a:	3802      	subs	r0, #2
 800070c:	4461      	add	r1, ip
 800070e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000712:	fba0 9402 	umull	r9, r4, r0, r2
 8000716:	eba1 010e 	sub.w	r1, r1, lr
 800071a:	42a1      	cmp	r1, r4
 800071c:	46c8      	mov	r8, r9
 800071e:	46a6      	mov	lr, r4
 8000720:	d356      	bcc.n	80007d0 <__udivmoddi4+0x2a4>
 8000722:	d053      	beq.n	80007cc <__udivmoddi4+0x2a0>
 8000724:	b15d      	cbz	r5, 800073e <__udivmoddi4+0x212>
 8000726:	ebb3 0208 	subs.w	r2, r3, r8
 800072a:	eb61 010e 	sbc.w	r1, r1, lr
 800072e:	fa01 f707 	lsl.w	r7, r1, r7
 8000732:	fa22 f306 	lsr.w	r3, r2, r6
 8000736:	40f1      	lsrs	r1, r6
 8000738:	431f      	orrs	r7, r3
 800073a:	e9c5 7100 	strd	r7, r1, [r5]
 800073e:	2600      	movs	r6, #0
 8000740:	4631      	mov	r1, r6
 8000742:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000746:	f1c2 0320 	rsb	r3, r2, #32
 800074a:	40d8      	lsrs	r0, r3
 800074c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000750:	fa21 f303 	lsr.w	r3, r1, r3
 8000754:	4091      	lsls	r1, r2
 8000756:	4301      	orrs	r1, r0
 8000758:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800075c:	fa1f fe8c 	uxth.w	lr, ip
 8000760:	fbb3 f0f7 	udiv	r0, r3, r7
 8000764:	fb07 3610 	mls	r6, r7, r0, r3
 8000768:	0c0b      	lsrs	r3, r1, #16
 800076a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800076e:	fb00 f60e 	mul.w	r6, r0, lr
 8000772:	429e      	cmp	r6, r3
 8000774:	fa04 f402 	lsl.w	r4, r4, r2
 8000778:	d908      	bls.n	800078c <__udivmoddi4+0x260>
 800077a:	eb1c 0303 	adds.w	r3, ip, r3
 800077e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000782:	d22f      	bcs.n	80007e4 <__udivmoddi4+0x2b8>
 8000784:	429e      	cmp	r6, r3
 8000786:	d92d      	bls.n	80007e4 <__udivmoddi4+0x2b8>
 8000788:	3802      	subs	r0, #2
 800078a:	4463      	add	r3, ip
 800078c:	1b9b      	subs	r3, r3, r6
 800078e:	b289      	uxth	r1, r1
 8000790:	fbb3 f6f7 	udiv	r6, r3, r7
 8000794:	fb07 3316 	mls	r3, r7, r6, r3
 8000798:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800079c:	fb06 f30e 	mul.w	r3, r6, lr
 80007a0:	428b      	cmp	r3, r1
 80007a2:	d908      	bls.n	80007b6 <__udivmoddi4+0x28a>
 80007a4:	eb1c 0101 	adds.w	r1, ip, r1
 80007a8:	f106 38ff 	add.w	r8, r6, #4294967295
 80007ac:	d216      	bcs.n	80007dc <__udivmoddi4+0x2b0>
 80007ae:	428b      	cmp	r3, r1
 80007b0:	d914      	bls.n	80007dc <__udivmoddi4+0x2b0>
 80007b2:	3e02      	subs	r6, #2
 80007b4:	4461      	add	r1, ip
 80007b6:	1ac9      	subs	r1, r1, r3
 80007b8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80007bc:	e738      	b.n	8000630 <__udivmoddi4+0x104>
 80007be:	462e      	mov	r6, r5
 80007c0:	4628      	mov	r0, r5
 80007c2:	e705      	b.n	80005d0 <__udivmoddi4+0xa4>
 80007c4:	4606      	mov	r6, r0
 80007c6:	e6e3      	b.n	8000590 <__udivmoddi4+0x64>
 80007c8:	4618      	mov	r0, r3
 80007ca:	e6f8      	b.n	80005be <__udivmoddi4+0x92>
 80007cc:	454b      	cmp	r3, r9
 80007ce:	d2a9      	bcs.n	8000724 <__udivmoddi4+0x1f8>
 80007d0:	ebb9 0802 	subs.w	r8, r9, r2
 80007d4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80007d8:	3801      	subs	r0, #1
 80007da:	e7a3      	b.n	8000724 <__udivmoddi4+0x1f8>
 80007dc:	4646      	mov	r6, r8
 80007de:	e7ea      	b.n	80007b6 <__udivmoddi4+0x28a>
 80007e0:	4620      	mov	r0, r4
 80007e2:	e794      	b.n	800070e <__udivmoddi4+0x1e2>
 80007e4:	4640      	mov	r0, r8
 80007e6:	e7d1      	b.n	800078c <__udivmoddi4+0x260>
 80007e8:	46d0      	mov	r8, sl
 80007ea:	e77b      	b.n	80006e4 <__udivmoddi4+0x1b8>
 80007ec:	3b02      	subs	r3, #2
 80007ee:	4461      	add	r1, ip
 80007f0:	e732      	b.n	8000658 <__udivmoddi4+0x12c>
 80007f2:	4630      	mov	r0, r6
 80007f4:	e709      	b.n	800060a <__udivmoddi4+0xde>
 80007f6:	4464      	add	r4, ip
 80007f8:	3802      	subs	r0, #2
 80007fa:	e742      	b.n	8000682 <__udivmoddi4+0x156>

080007fc <__aeabi_idiv0>:
 80007fc:	4770      	bx	lr
 80007fe:	bf00      	nop

08000800 <PopSendTx8Bytes>:
	}

	return HAL_OK;
}

HAL_StatusTypeDef PopSendTx8Bytes(CAN_HandleTypeDef* phcan){
 8000800:	b580      	push	{r7, lr}
 8000802:	b08a      	sub	sp, #40	; 0x28
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
	CAN_TxHeaderTypeDef txHeader;
	uint32_t txMailbox;

	txHeader.RTR = CAN_RTR_DATA; // Data frame
 8000808:	2300      	movs	r3, #0
 800080a:	61bb      	str	r3, [r7, #24]
	txHeader.IDE = CAN_ID_EXT;	 // CAN Extend ID
 800080c:	2304      	movs	r3, #4
 800080e:	617b      	str	r3, [r7, #20]
	txHeader.TransmitGlobalTime = DISABLE;
 8000810:	2300      	movs	r3, #0
 8000812:	f887 3020 	strb.w	r3, [r7, #32]

	while (HAL_CAN_GetTxMailboxesFreeLevel(phcan) > 0){
 8000816:	e039      	b.n	800088c <PopSendTx8Bytes+0x8c>
		if (isfull == 0 && readpoint == writepoint)break;
 8000818:	4b23      	ldr	r3, [pc, #140]	; (80008a8 <PopSendTx8Bytes+0xa8>)
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	2b00      	cmp	r3, #0
 800081e:	d105      	bne.n	800082c <PopSendTx8Bytes+0x2c>
 8000820:	4b22      	ldr	r3, [pc, #136]	; (80008ac <PopSendTx8Bytes+0xac>)
 8000822:	681a      	ldr	r2, [r3, #0]
 8000824:	4b22      	ldr	r3, [pc, #136]	; (80008b0 <PopSendTx8Bytes+0xb0>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	429a      	cmp	r2, r3
 800082a:	d036      	beq.n	800089a <PopSendTx8Bytes+0x9a>

		txHeader.DLC = buffer[readpoint].DLC;
 800082c:	4b1f      	ldr	r3, [pc, #124]	; (80008ac <PopSendTx8Bytes+0xac>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	4a20      	ldr	r2, [pc, #128]	; (80008b4 <PopSendTx8Bytes+0xb4>)
 8000832:	011b      	lsls	r3, r3, #4
 8000834:	4413      	add	r3, r2
 8000836:	3304      	adds	r3, #4
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	61fb      	str	r3, [r7, #28]
		txHeader.ExtId = buffer[readpoint].ExtId;
 800083c:	4b1b      	ldr	r3, [pc, #108]	; (80008ac <PopSendTx8Bytes+0xac>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	4a1c      	ldr	r2, [pc, #112]	; (80008b4 <PopSendTx8Bytes+0xb4>)
 8000842:	011b      	lsls	r3, r3, #4
 8000844:	4413      	add	r3, r2
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	613b      	str	r3, [r7, #16]

		HAL_StatusTypeDef ret = HAL_CAN_AddTxMessage(phcan, &txHeader, buffer[readpoint].bytes, &txMailbox);
 800084a:	4b18      	ldr	r3, [pc, #96]	; (80008ac <PopSendTx8Bytes+0xac>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	011b      	lsls	r3, r3, #4
 8000850:	3308      	adds	r3, #8
 8000852:	4a18      	ldr	r2, [pc, #96]	; (80008b4 <PopSendTx8Bytes+0xb4>)
 8000854:	441a      	add	r2, r3
 8000856:	f107 0308 	add.w	r3, r7, #8
 800085a:	f107 010c 	add.w	r1, r7, #12
 800085e:	6878      	ldr	r0, [r7, #4]
 8000860:	f001 feb8 	bl	80025d4 <HAL_CAN_AddTxMessage>
 8000864:	4603      	mov	r3, r0
 8000866:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (ret != HAL_OK)return ret;
 800086a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800086e:	2b00      	cmp	r3, #0
 8000870:	d002      	beq.n	8000878 <PopSendTx8Bytes+0x78>
 8000872:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000876:	e012      	b.n	800089e <PopSendTx8Bytes+0x9e>

		readpoint = (readpoint + 1) & (CAN_TXBUFFER_SIZE - 1);
 8000878:	4b0c      	ldr	r3, [pc, #48]	; (80008ac <PopSendTx8Bytes+0xac>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	3301      	adds	r3, #1
 800087e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000882:	4a0a      	ldr	r2, [pc, #40]	; (80008ac <PopSendTx8Bytes+0xac>)
 8000884:	6013      	str	r3, [r2, #0]
		isfull = 0;
 8000886:	4b08      	ldr	r3, [pc, #32]	; (80008a8 <PopSendTx8Bytes+0xa8>)
 8000888:	2200      	movs	r2, #0
 800088a:	701a      	strb	r2, [r3, #0]
	while (HAL_CAN_GetTxMailboxesFreeLevel(phcan) > 0){
 800088c:	6878      	ldr	r0, [r7, #4]
 800088e:	f001 ff71 	bl	8002774 <HAL_CAN_GetTxMailboxesFreeLevel>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d1bf      	bne.n	8000818 <PopSendTx8Bytes+0x18>
 8000898:	e000      	b.n	800089c <PopSendTx8Bytes+0x9c>
		if (isfull == 0 && readpoint == writepoint)break;
 800089a:	bf00      	nop
	}

	return HAL_OK;
 800089c:	2300      	movs	r3, #0
}
 800089e:	4618      	mov	r0, r3
 80008a0:	3728      	adds	r7, #40	; 0x28
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	200021e0 	.word	0x200021e0
 80008ac:	200021d8 	.word	0x200021d8
 80008b0:	200021dc 	.word	0x200021dc
 80008b4:	200001d8 	.word	0x200001d8

080008b8 <CANLib_WhenTxMailbox0_1_2CompleteCallbackCalled>:

void CANLib_WhenTxMailbox0_1_2CompleteCallbackCalled(CAN_HandleTypeDef *phcan){
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b082      	sub	sp, #8
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
	if(phcan != _canlib_phcan)return;
 80008c0:	4b07      	ldr	r3, [pc, #28]	; (80008e0 <CANLib_WhenTxMailbox0_1_2CompleteCallbackCalled+0x28>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	687a      	ldr	r2, [r7, #4]
 80008c6:	429a      	cmp	r2, r3
 80008c8:	d105      	bne.n	80008d6 <CANLib_WhenTxMailbox0_1_2CompleteCallbackCalled+0x1e>
    PopSendTx8Bytes(_canlib_phcan);
 80008ca:	4b05      	ldr	r3, [pc, #20]	; (80008e0 <CANLib_WhenTxMailbox0_1_2CompleteCallbackCalled+0x28>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	4618      	mov	r0, r3
 80008d0:	f7ff ff96 	bl	8000800 <PopSendTx8Bytes>
 80008d4:	e000      	b.n	80008d8 <CANLib_WhenTxMailbox0_1_2CompleteCallbackCalled+0x20>
	if(phcan != _canlib_phcan)return;
 80008d6:	bf00      	nop
}
 80008d8:	3708      	adds	r7, #8
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	200001d4 	.word	0x200001d4

080008e4 <CANLib_WhenTxMailbox0_1_2AbortCallbackCalled>:

void CANLib_WhenTxMailbox0_1_2AbortCallbackCalled(CAN_HandleTypeDef *phcan){
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
    if(phcan != _canlib_phcan)return;
 80008ec:	4b07      	ldr	r3, [pc, #28]	; (800090c <CANLib_WhenTxMailbox0_1_2AbortCallbackCalled+0x28>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	687a      	ldr	r2, [r7, #4]
 80008f2:	429a      	cmp	r2, r3
 80008f4:	d105      	bne.n	8000902 <CANLib_WhenTxMailbox0_1_2AbortCallbackCalled+0x1e>
	PopSendTx8Bytes(_canlib_phcan);
 80008f6:	4b05      	ldr	r3, [pc, #20]	; (800090c <CANLib_WhenTxMailbox0_1_2AbortCallbackCalled+0x28>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	4618      	mov	r0, r3
 80008fc:	f7ff ff80 	bl	8000800 <PopSendTx8Bytes>
 8000900:	e000      	b.n	8000904 <CANLib_WhenTxMailbox0_1_2AbortCallbackCalled+0x20>
    if(phcan != _canlib_phcan)return;
 8000902:	bf00      	nop
}
 8000904:	3708      	adds	r7, #8
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	200001d4 	.word	0x200001d4

08000910 <C620_PID_Ctrl_init>:

float clip_f(float value, float min, float max){
    return fminf(max, fmaxf(value, min));
}

void C620_PID_Ctrl_init(C620_PID_StructTypedef *params) {
 8000910:	b480      	push	{r7}
 8000912:	b083      	sub	sp, #12
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
    params->_integral = 0.0f;
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	f04f 0200 	mov.w	r2, #0
 800091e:	611a      	str	r2, [r3, #16]
    params->_prev_value = 0.0f;
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	f04f 0200 	mov.w	r2, #0
 8000926:	615a      	str	r2, [r3, #20]
}
 8000928:	bf00      	nop
 800092a:	370c      	adds	r7, #12
 800092c:	46bd      	mov	sp, r7
 800092e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000932:	4770      	bx	lr

08000934 <C620_Ctrl_Struct_init>:
int16_t c620_current_f2int(float current) {
    return (int16_t) (current * 16384.0f / 20.0f);
}


void C620_Ctrl_Struct_init(C620_Ctrl_StructTypedef *ctrl_struct) {
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
    ctrl_struct->_target_value = 0.0f;
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	f04f 0200 	mov.w	r2, #0
 8000942:	63da      	str	r2, [r3, #60]	; 0x3c
    ctrl_struct->_enable_flag = 0;
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	2200      	movs	r2, #0
 8000948:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    C620_PID_Ctrl_init(&(ctrl_struct->pid));
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	4618      	mov	r0, r3
 8000950:	f7ff ffde 	bl	8000910 <C620_PID_Ctrl_init>
    C620_PID_Ctrl_init(&(ctrl_struct->pid_vel));
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	3318      	adds	r3, #24
 8000958:	4618      	mov	r0, r3
 800095a:	f7ff ffd9 	bl	8000910 <C620_PID_Ctrl_init>
}
 800095e:	bf00      	nop
 8000960:	3708      	adds	r7, #8
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}

08000966 <C620_Init>:

void C620_Init(C620_DeviceInfo dev_info_array[], uint8_t size) {
 8000966:	b580      	push	{r7, lr}
 8000968:	b084      	sub	sp, #16
 800096a:	af00      	add	r7, sp, #0
 800096c:	6078      	str	r0, [r7, #4]
 800096e:	460b      	mov	r3, r1
 8000970:	70fb      	strb	r3, [r7, #3]
    for (uint8_t i = 0; i < size; i++) {
 8000972:	2300      	movs	r3, #0
 8000974:	73fb      	strb	r3, [r7, #15]
 8000976:	e00c      	b.n	8000992 <C620_Init+0x2c>
        C620_Ctrl_Struct_init(&(dev_info_array[i].ctrl_param));
 8000978:	7bfb      	ldrb	r3, [r7, #15]
 800097a:	224c      	movs	r2, #76	; 0x4c
 800097c:	fb02 f303 	mul.w	r3, r2, r3
 8000980:	687a      	ldr	r2, [r7, #4]
 8000982:	4413      	add	r3, r2
 8000984:	3304      	adds	r3, #4
 8000986:	4618      	mov	r0, r3
 8000988:	f7ff ffd4 	bl	8000934 <C620_Ctrl_Struct_init>
    for (uint8_t i = 0; i < size; i++) {
 800098c:	7bfb      	ldrb	r3, [r7, #15]
 800098e:	3301      	adds	r3, #1
 8000990:	73fb      	strb	r3, [r7, #15]
 8000992:	7bfa      	ldrb	r2, [r7, #15]
 8000994:	78fb      	ldrb	r3, [r7, #3]
 8000996:	429a      	cmp	r2, r3
 8000998:	d3ee      	bcc.n	8000978 <C620_Init+0x12>
    }
}
 800099a:	bf00      	nop
 800099c:	bf00      	nop
 800099e:	3710      	adds	r7, #16
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}

080009a4 <C620_WaitForConnect>:
    }
    if (flag_1)C620_SendBytes(phcan, 0x200, (uint8_t *) data1, sizeof(data1));
    if (flag_2)C620_SendBytes(phcan, 0x1FF, (uint8_t *) data2, sizeof(data2));
}

void C620_WaitForConnect(C620_DeviceInfo dev_info_array[], uint8_t size) {
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b088      	sub	sp, #32
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
 80009ac:	460b      	mov	r3, r1
 80009ae:	70fb      	strb	r3, [r7, #3]
    uint8_t flag = 0;
 80009b0:	2300      	movs	r3, #0
 80009b2:	77fb      	strb	r3, [r7, #31]
    printf("[C620] Wait for Connection...\n");
 80009b4:	4815      	ldr	r0, [pc, #84]	; (8000a0c <C620_WaitForConnect+0x68>)
 80009b6:	f006 fac3 	bl	8006f40 <puts>
    while (!flag) {
 80009ba:	e01d      	b.n	80009f8 <C620_WaitForConnect+0x54>
        flag = 1;
 80009bc:	2301      	movs	r3, #1
 80009be:	77fb      	strb	r3, [r7, #31]
        for (uint8_t i = 0; i < size; i++) {
 80009c0:	2300      	movs	r3, #0
 80009c2:	77bb      	strb	r3, [r7, #30]
 80009c4:	e014      	b.n	80009f0 <C620_WaitForConnect+0x4c>
            if (!Get_C620_FeedbackData(&dev_info_array[i]).get_flag) {
 80009c6:	7fbb      	ldrb	r3, [r7, #30]
 80009c8:	224c      	movs	r2, #76	; 0x4c
 80009ca:	fb02 f303 	mul.w	r3, r2, r3
 80009ce:	687a      	ldr	r2, [r7, #4]
 80009d0:	441a      	add	r2, r3
 80009d2:	f107 030c 	add.w	r3, r7, #12
 80009d6:	4611      	mov	r1, r2
 80009d8:	4618      	mov	r0, r3
 80009da:	f000 fafb 	bl	8000fd4 <Get_C620_FeedbackData>
 80009de:	7b7b      	ldrb	r3, [r7, #13]
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d102      	bne.n	80009ea <C620_WaitForConnect+0x46>
                flag = 0;
 80009e4:	2300      	movs	r3, #0
 80009e6:	77fb      	strb	r3, [r7, #31]
                break;
 80009e8:	e006      	b.n	80009f8 <C620_WaitForConnect+0x54>
        for (uint8_t i = 0; i < size; i++) {
 80009ea:	7fbb      	ldrb	r3, [r7, #30]
 80009ec:	3301      	adds	r3, #1
 80009ee:	77bb      	strb	r3, [r7, #30]
 80009f0:	7fba      	ldrb	r2, [r7, #30]
 80009f2:	78fb      	ldrb	r3, [r7, #3]
 80009f4:	429a      	cmp	r2, r3
 80009f6:	d3e6      	bcc.n	80009c6 <C620_WaitForConnect+0x22>
    while (!flag) {
 80009f8:	7ffb      	ldrb	r3, [r7, #31]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d0de      	beq.n	80009bc <C620_WaitForConnect+0x18>
            }
        }
    }
    printf("[C620] All Connected!\n");
 80009fe:	4804      	ldr	r0, [pc, #16]	; (8000a10 <C620_WaitForConnect+0x6c>)
 8000a00:	f006 fa9e 	bl	8006f40 <puts>
}
 8000a04:	bf00      	nop
 8000a06:	3720      	adds	r7, #32
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	08008024 	.word	0x08008024
 8000a10:	08008044 	.word	0x08008044

08000a14 <C620_SetTarget>:
void C620_ChangeControl(C620_DeviceInfo *dev_info, C620_CTRL_TYPE new_ctrl_type) {
    C620_Ctrl_Struct_init(&(dev_info->ctrl_param));
    dev_info->ctrl_param.ctrl_type = new_ctrl_type;
}

void C620_SetTarget(C620_DeviceInfo *device_info, float target_value) {
 8000a14:	b480      	push	{r7}
 8000a16:	b083      	sub	sp, #12
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
 8000a1c:	ed87 0a00 	vstr	s0, [r7]
    device_info->ctrl_param._target_value = target_value;
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	683a      	ldr	r2, [r7, #0]
 8000a24:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000a26:	bf00      	nop
 8000a28:	370c      	adds	r7, #12
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr

08000a32 <C620_ControlEnable>:

void C620_ControlEnable(C620_DeviceInfo *dev_info) {
 8000a32:	b480      	push	{r7}
 8000a34:	b083      	sub	sp, #12
 8000a36:	af00      	add	r7, sp, #0
 8000a38:	6078      	str	r0, [r7, #4]
    dev_info->ctrl_param._enable_flag = 1;
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
}
 8000a42:	bf00      	nop
 8000a44:	370c      	adds	r7, #12
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr

08000a4e <_C620_PopSendTx8Bytes>:
        p_can_ring->is_full = 1;
    }
    return HAL_OK;
}

HAL_StatusTypeDef _C620_PopSendTx8Bytes(CAN_HandleTypeDef *phcan, CAN_RingBuf *p_can_ring) {
 8000a4e:	b580      	push	{r7, lr}
 8000a50:	b08a      	sub	sp, #40	; 0x28
 8000a52:	af00      	add	r7, sp, #0
 8000a54:	6078      	str	r0, [r7, #4]
 8000a56:	6039      	str	r1, [r7, #0]
    CAN_TxHeaderTypeDef txHeader;
    uint32_t txMailbox;

    txHeader.RTR = CAN_RTR_DATA;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	61bb      	str	r3, [r7, #24]
    txHeader.IDE = CAN_ID_STD;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	617b      	str	r3, [r7, #20]
    txHeader.TransmitGlobalTime = DISABLE;
 8000a60:	2300      	movs	r3, #0
 8000a62:	f887 3020 	strb.w	r3, [r7, #32]
    while (HAL_CAN_GetTxMailboxesFreeLevel(phcan) > 0) {
 8000a66:	e04d      	b.n	8000b04 <_C620_PopSendTx8Bytes+0xb6>
        if ((p_can_ring->is_full == 0) && (p_can_ring->read_point == p_can_ring->write_point))break;
 8000a68:	683b      	ldr	r3, [r7, #0]
 8000a6a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8000a6e:	7a1b      	ldrb	r3, [r3, #8]
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d109      	bne.n	8000a88 <_C620_PopSendTx8Bytes+0x3a>
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8000a7a:	681a      	ldr	r2, [r3, #0]
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8000a82:	685b      	ldr	r3, [r3, #4]
 8000a84:	429a      	cmp	r2, r3
 8000a86:	d044      	beq.n	8000b12 <_C620_PopSendTx8Bytes+0xc4>

        txHeader.DLC = p_can_ring->buffer[p_can_ring->read_point].DLC;
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	683a      	ldr	r2, [r7, #0]
 8000a92:	011b      	lsls	r3, r3, #4
 8000a94:	4413      	add	r3, r2
 8000a96:	3304      	adds	r3, #4
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	61fb      	str	r3, [r7, #28]
        txHeader.StdId = p_can_ring->buffer[p_can_ring->read_point].StdId;
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	683a      	ldr	r2, [r7, #0]
 8000aa6:	011b      	lsls	r3, r3, #4
 8000aa8:	4413      	add	r3, r2
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	60fb      	str	r3, [r7, #12]
        txHeader.ExtId = 0;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	613b      	str	r3, [r7, #16]

        HAL_StatusTypeDef ret = HAL_CAN_AddTxMessage(phcan, &txHeader, p_can_ring->buffer[p_can_ring->read_point].bytes,
 8000ab2:	683b      	ldr	r3, [r7, #0]
 8000ab4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	011b      	lsls	r3, r3, #4
 8000abc:	3308      	adds	r3, #8
 8000abe:	683a      	ldr	r2, [r7, #0]
 8000ac0:	441a      	add	r2, r3
 8000ac2:	f107 0308 	add.w	r3, r7, #8
 8000ac6:	f107 010c 	add.w	r1, r7, #12
 8000aca:	6878      	ldr	r0, [r7, #4]
 8000acc:	f001 fd82 	bl	80025d4 <HAL_CAN_AddTxMessage>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                                                     &txMailbox);
        if (ret != HAL_OK)return ret;
 8000ad6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d002      	beq.n	8000ae4 <_C620_PopSendTx8Bytes+0x96>
 8000ade:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000ae2:	e018      	b.n	8000b16 <_C620_PopSendTx8Bytes+0xc8>
        p_can_ring->read_point = ((p_can_ring->read_point) + 1) & (CAN_TXBUFFER_SIZE - 1);
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	3301      	adds	r3, #1
 8000aee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000af2:	683a      	ldr	r2, [r7, #0]
 8000af4:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8000af8:	6013      	str	r3, [r2, #0]
        p_can_ring->is_full = 0;
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8000b00:	2200      	movs	r2, #0
 8000b02:	721a      	strb	r2, [r3, #8]
    while (HAL_CAN_GetTxMailboxesFreeLevel(phcan) > 0) {
 8000b04:	6878      	ldr	r0, [r7, #4]
 8000b06:	f001 fe35 	bl	8002774 <HAL_CAN_GetTxMailboxesFreeLevel>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d1ab      	bne.n	8000a68 <_C620_PopSendTx8Bytes+0x1a>
 8000b10:	e000      	b.n	8000b14 <_C620_PopSendTx8Bytes+0xc6>
        if ((p_can_ring->is_full == 0) && (p_can_ring->read_point == p_can_ring->write_point))break;
 8000b12:	bf00      	nop
    }
    return HAL_OK;
 8000b14:	2300      	movs	r3, #0
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	3728      	adds	r7, #40	; 0x28
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
	...

08000b20 <C620_WhenTxMailboxCompleteCallbackCalled>:
    }
    return HAL_OK;
}


void C620_WhenTxMailboxCompleteCallbackCalled(CAN_HandleTypeDef *phcan) {
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
    if (_c620_phcan_global != phcan)return;
 8000b28:	4b06      	ldr	r3, [pc, #24]	; (8000b44 <C620_WhenTxMailboxCompleteCallbackCalled+0x24>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	687a      	ldr	r2, [r7, #4]
 8000b2e:	429a      	cmp	r2, r3
 8000b30:	d104      	bne.n	8000b3c <C620_WhenTxMailboxCompleteCallbackCalled+0x1c>
    _C620_PopSendTx8Bytes(phcan, &_can_buf_ring1);
 8000b32:	4905      	ldr	r1, [pc, #20]	; (8000b48 <C620_WhenTxMailboxCompleteCallbackCalled+0x28>)
 8000b34:	6878      	ldr	r0, [r7, #4]
 8000b36:	f7ff ff8a 	bl	8000a4e <_C620_PopSendTx8Bytes>
 8000b3a:	e000      	b.n	8000b3e <C620_WhenTxMailboxCompleteCallbackCalled+0x1e>
    if (_c620_phcan_global != phcan)return;
 8000b3c:	bf00      	nop
}
 8000b3e:	3708      	adds	r7, #8
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	200021e4 	.word	0x200021e4
 8000b48:	200021e8 	.word	0x200021e8

08000b4c <C620_WhenTxMailboxAbortCallbackCalled>:

void C620_WhenTxMailboxAbortCallbackCalled(CAN_HandleTypeDef *phcan) {
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
    if (_c620_phcan_global != phcan)return;
 8000b54:	4b06      	ldr	r3, [pc, #24]	; (8000b70 <C620_WhenTxMailboxAbortCallbackCalled+0x24>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	687a      	ldr	r2, [r7, #4]
 8000b5a:	429a      	cmp	r2, r3
 8000b5c:	d104      	bne.n	8000b68 <C620_WhenTxMailboxAbortCallbackCalled+0x1c>
    _C620_PopSendTx8Bytes(phcan, &_can_buf_ring1);
 8000b5e:	4905      	ldr	r1, [pc, #20]	; (8000b74 <C620_WhenTxMailboxAbortCallbackCalled+0x28>)
 8000b60:	6878      	ldr	r0, [r7, #4]
 8000b62:	f7ff ff74 	bl	8000a4e <_C620_PopSendTx8Bytes>
 8000b66:	e000      	b.n	8000b6a <C620_WhenTxMailboxAbortCallbackCalled+0x1e>
    if (_c620_phcan_global != phcan)return;
 8000b68:	bf00      	nop
}
 8000b6a:	3708      	adds	r7, #8
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	200021e4 	.word	0x200021e4
 8000b74:	200021e8 	.word	0x200021e8

08000b78 <_set_fb_data_raw>:


void _set_fb_data_raw(const uint8_t rxData[], uint8_t device_id) {
 8000b78:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 8000b7c:	b085      	sub	sp, #20
 8000b7e:	af00      	add	r7, sp, #0
 8000b80:	6078      	str	r0, [r7, #4]
 8000b82:	460b      	mov	r3, r1
 8000b84:	70fb      	strb	r3, [r7, #3]
    if (device_id > 9 || device_id <= 0)return;
 8000b86:	78fb      	ldrb	r3, [r7, #3]
 8000b88:	2b09      	cmp	r3, #9
 8000b8a:	f200 80f5 	bhi.w	8000d78 <_set_fb_data_raw+0x200>
 8000b8e:	78fb      	ldrb	r3, [r7, #3]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	f000 80f1 	beq.w	8000d78 <_set_fb_data_raw+0x200>

    _c620_feedback_data_raw_global[device_id]._get_counter += 1;
 8000b96:	78fb      	ldrb	r3, [r7, #3]
 8000b98:	4a7a      	ldr	r2, [pc, #488]	; (8000d84 <_set_fb_data_raw+0x20c>)
 8000b9a:	015b      	lsls	r3, r3, #5
 8000b9c:	4413      	add	r3, r2
 8000b9e:	781a      	ldrb	r2, [r3, #0]
 8000ba0:	78fb      	ldrb	r3, [r7, #3]
 8000ba2:	3201      	adds	r2, #1
 8000ba4:	b2d1      	uxtb	r1, r2
 8000ba6:	4a77      	ldr	r2, [pc, #476]	; (8000d84 <_set_fb_data_raw+0x20c>)
 8000ba8:	015b      	lsls	r3, r3, #5
 8000baa:	4413      	add	r3, r2
 8000bac:	460a      	mov	r2, r1
 8000bae:	701a      	strb	r2, [r3, #0]
    if (_c620_feedback_data_raw_global[device_id]._get_counter > 128) {
 8000bb0:	78fb      	ldrb	r3, [r7, #3]
 8000bb2:	4a74      	ldr	r2, [pc, #464]	; (8000d84 <_set_fb_data_raw+0x20c>)
 8000bb4:	015b      	lsls	r3, r3, #5
 8000bb6:	4413      	add	r3, r2
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	2b80      	cmp	r3, #128	; 0x80
 8000bbc:	d905      	bls.n	8000bca <_set_fb_data_raw+0x52>
        _c620_feedback_data_raw_global[device_id]._get_counter = 128;  // overflow対策
 8000bbe:	78fb      	ldrb	r3, [r7, #3]
 8000bc0:	4a70      	ldr	r2, [pc, #448]	; (8000d84 <_set_fb_data_raw+0x20c>)
 8000bc2:	015b      	lsls	r3, r3, #5
 8000bc4:	4413      	add	r3, r2
 8000bc6:	2280      	movs	r2, #128	; 0x80
 8000bc8:	701a      	strb	r2, [r3, #0]
    }

    if (_c620_feedback_data_raw_global[device_id]._get_counter < 50) {  // M3508のEncoderの初期位置を取得
 8000bca:	78fb      	ldrb	r3, [r7, #3]
 8000bcc:	4a6d      	ldr	r2, [pc, #436]	; (8000d84 <_set_fb_data_raw+0x20c>)
 8000bce:	015b      	lsls	r3, r3, #5
 8000bd0:	4413      	add	r3, r2
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	2b31      	cmp	r3, #49	; 0x31
 8000bd6:	d836      	bhi.n	8000c46 <_set_fb_data_raw+0xce>
        _c620_feedback_data_raw_global[device_id]._internal_offset_pos = (uint16_t) (rxData[0] << 8 | rxData[1]);
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	021b      	lsls	r3, r3, #8
 8000bde:	b21a      	sxth	r2, r3
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	3301      	adds	r3, #1
 8000be4:	781b      	ldrb	r3, [r3, #0]
 8000be6:	b21b      	sxth	r3, r3
 8000be8:	4313      	orrs	r3, r2
 8000bea:	b21a      	sxth	r2, r3
 8000bec:	78fb      	ldrb	r3, [r7, #3]
 8000bee:	b291      	uxth	r1, r2
 8000bf0:	4a64      	ldr	r2, [pc, #400]	; (8000d84 <_set_fb_data_raw+0x20c>)
 8000bf2:	015b      	lsls	r3, r3, #5
 8000bf4:	4413      	add	r3, r2
 8000bf6:	3312      	adds	r3, #18
 8000bf8:	460a      	mov	r2, r1
 8000bfa:	801a      	strh	r2, [r3, #0]
        _c620_feedback_data_raw_global[device_id].pos_pre = (uint16_t) (rxData[0] << 8 | rxData[1]);
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	021b      	lsls	r3, r3, #8
 8000c02:	b21a      	sxth	r2, r3
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	3301      	adds	r3, #1
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	b21b      	sxth	r3, r3
 8000c0c:	4313      	orrs	r3, r2
 8000c0e:	b21a      	sxth	r2, r3
 8000c10:	78fb      	ldrb	r3, [r7, #3]
 8000c12:	b291      	uxth	r1, r2
 8000c14:	4a5b      	ldr	r2, [pc, #364]	; (8000d84 <_set_fb_data_raw+0x20c>)
 8000c16:	015b      	lsls	r3, r3, #5
 8000c18:	4413      	add	r3, r2
 8000c1a:	3314      	adds	r3, #20
 8000c1c:	460a      	mov	r2, r1
 8000c1e:	801a      	strh	r2, [r3, #0]
        _c620_feedback_data_raw_global[device_id].pos = (uint16_t) (rxData[0] << 8 | rxData[1]);
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	021b      	lsls	r3, r3, #8
 8000c26:	b21a      	sxth	r2, r3
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	3301      	adds	r3, #1
 8000c2c:	781b      	ldrb	r3, [r3, #0]
 8000c2e:	b21b      	sxth	r3, r3
 8000c30:	4313      	orrs	r3, r2
 8000c32:	b21a      	sxth	r2, r3
 8000c34:	78fb      	ldrb	r3, [r7, #3]
 8000c36:	b291      	uxth	r1, r2
 8000c38:	4a52      	ldr	r2, [pc, #328]	; (8000d84 <_set_fb_data_raw+0x20c>)
 8000c3a:	015b      	lsls	r3, r3, #5
 8000c3c:	4413      	add	r3, r2
 8000c3e:	3310      	adds	r3, #16
 8000c40:	460a      	mov	r2, r1
 8000c42:	801a      	strh	r2, [r3, #0]
        return;
 8000c44:	e099      	b.n	8000d7a <_set_fb_data_raw+0x202>
    }

    // dataの設定
    _c620_feedback_data_raw_global[device_id].pos_pre = _c620_feedback_data_raw_global[device_id].pos;
 8000c46:	78fa      	ldrb	r2, [r7, #3]
 8000c48:	78fb      	ldrb	r3, [r7, #3]
 8000c4a:	494e      	ldr	r1, [pc, #312]	; (8000d84 <_set_fb_data_raw+0x20c>)
 8000c4c:	0152      	lsls	r2, r2, #5
 8000c4e:	440a      	add	r2, r1
 8000c50:	3210      	adds	r2, #16
 8000c52:	8811      	ldrh	r1, [r2, #0]
 8000c54:	4a4b      	ldr	r2, [pc, #300]	; (8000d84 <_set_fb_data_raw+0x20c>)
 8000c56:	015b      	lsls	r3, r3, #5
 8000c58:	4413      	add	r3, r2
 8000c5a:	3314      	adds	r3, #20
 8000c5c:	460a      	mov	r2, r1
 8000c5e:	801a      	strh	r2, [r3, #0]
    _c620_feedback_data_raw_global[device_id].pos = (uint16_t) (rxData[0] << 8 | rxData[1]);
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	021b      	lsls	r3, r3, #8
 8000c66:	b21a      	sxth	r2, r3
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	3301      	adds	r3, #1
 8000c6c:	781b      	ldrb	r3, [r3, #0]
 8000c6e:	b21b      	sxth	r3, r3
 8000c70:	4313      	orrs	r3, r2
 8000c72:	b21a      	sxth	r2, r3
 8000c74:	78fb      	ldrb	r3, [r7, #3]
 8000c76:	b291      	uxth	r1, r2
 8000c78:	4a42      	ldr	r2, [pc, #264]	; (8000d84 <_set_fb_data_raw+0x20c>)
 8000c7a:	015b      	lsls	r3, r3, #5
 8000c7c:	4413      	add	r3, r2
 8000c7e:	3310      	adds	r3, #16
 8000c80:	460a      	mov	r2, r1
 8000c82:	801a      	strh	r2, [r3, #0]
    _c620_feedback_data_raw_global[device_id].vel = (int16_t) (rxData[2] << 8 | rxData[3]);
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	3302      	adds	r3, #2
 8000c88:	781b      	ldrb	r3, [r3, #0]
 8000c8a:	021b      	lsls	r3, r3, #8
 8000c8c:	b219      	sxth	r1, r3
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	3303      	adds	r3, #3
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	b21a      	sxth	r2, r3
 8000c96:	78fb      	ldrb	r3, [r7, #3]
 8000c98:	430a      	orrs	r2, r1
 8000c9a:	b211      	sxth	r1, r2
 8000c9c:	4a39      	ldr	r2, [pc, #228]	; (8000d84 <_set_fb_data_raw+0x20c>)
 8000c9e:	015b      	lsls	r3, r3, #5
 8000ca0:	4413      	add	r3, r2
 8000ca2:	3316      	adds	r3, #22
 8000ca4:	460a      	mov	r2, r1
 8000ca6:	801a      	strh	r2, [r3, #0]
    _c620_feedback_data_raw_global[device_id].cur = (int16_t) (rxData[4] << 8 | rxData[5]);
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	3304      	adds	r3, #4
 8000cac:	781b      	ldrb	r3, [r3, #0]
 8000cae:	021b      	lsls	r3, r3, #8
 8000cb0:	b219      	sxth	r1, r3
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	3305      	adds	r3, #5
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	b21a      	sxth	r2, r3
 8000cba:	78fb      	ldrb	r3, [r7, #3]
 8000cbc:	430a      	orrs	r2, r1
 8000cbe:	b211      	sxth	r1, r2
 8000cc0:	4a30      	ldr	r2, [pc, #192]	; (8000d84 <_set_fb_data_raw+0x20c>)
 8000cc2:	015b      	lsls	r3, r3, #5
 8000cc4:	4413      	add	r3, r2
 8000cc6:	3318      	adds	r3, #24
 8000cc8:	460a      	mov	r2, r1
 8000cca:	801a      	strh	r2, [r3, #0]

    // 回転数の計算
    int32_t diff_pos = (int32_t) (_c620_feedback_data_raw_global[device_id].pos) -
 8000ccc:	78fb      	ldrb	r3, [r7, #3]
 8000cce:	4a2d      	ldr	r2, [pc, #180]	; (8000d84 <_set_fb_data_raw+0x20c>)
 8000cd0:	015b      	lsls	r3, r3, #5
 8000cd2:	4413      	add	r3, r2
 8000cd4:	3310      	adds	r3, #16
 8000cd6:	881b      	ldrh	r3, [r3, #0]
 8000cd8:	4619      	mov	r1, r3
                       (int32_t) (_c620_feedback_data_raw_global[device_id].pos_pre);
 8000cda:	78fb      	ldrb	r3, [r7, #3]
 8000cdc:	4a29      	ldr	r2, [pc, #164]	; (8000d84 <_set_fb_data_raw+0x20c>)
 8000cde:	015b      	lsls	r3, r3, #5
 8000ce0:	4413      	add	r3, r2
 8000ce2:	3314      	adds	r3, #20
 8000ce4:	881b      	ldrh	r3, [r3, #0]
    int32_t diff_pos = (int32_t) (_c620_feedback_data_raw_global[device_id].pos) -
 8000ce6:	1acb      	subs	r3, r1, r3
 8000ce8:	60fb      	str	r3, [r7, #12]
    if (diff_pos > 4096) {
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000cf0:	dd1f      	ble.n	8000d32 <_set_fb_data_raw+0x1ba>
        if (_c620_feedback_data_raw_global[device_id]._rot_num != -(INT64_MAX / 10)) {
 8000cf2:	78fb      	ldrb	r3, [r7, #3]
 8000cf4:	4a23      	ldr	r2, [pc, #140]	; (8000d84 <_set_fb_data_raw+0x20c>)
 8000cf6:	015b      	lsls	r3, r3, #5
 8000cf8:	4413      	add	r3, r2
 8000cfa:	3308      	adds	r3, #8
 8000cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d00:	4921      	ldr	r1, [pc, #132]	; (8000d88 <_set_fb_data_raw+0x210>)
 8000d02:	428b      	cmp	r3, r1
 8000d04:	bf08      	it	eq
 8000d06:	f112 3fcc 	cmneq.w	r2, #3435973836	; 0xcccccccc
 8000d0a:	d036      	beq.n	8000d7a <_set_fb_data_raw+0x202>
            _c620_feedback_data_raw_global[device_id]._rot_num -= 1;
 8000d0c:	78fb      	ldrb	r3, [r7, #3]
 8000d0e:	4a1d      	ldr	r2, [pc, #116]	; (8000d84 <_set_fb_data_raw+0x20c>)
 8000d10:	015b      	lsls	r3, r3, #5
 8000d12:	4413      	add	r3, r2
 8000d14:	3308      	adds	r3, #8
 8000d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d1a:	78f9      	ldrb	r1, [r7, #3]
 8000d1c:	f112 38ff 	adds.w	r8, r2, #4294967295
 8000d20:	f143 39ff 	adc.w	r9, r3, #4294967295
 8000d24:	4a17      	ldr	r2, [pc, #92]	; (8000d84 <_set_fb_data_raw+0x20c>)
 8000d26:	014b      	lsls	r3, r1, #5
 8000d28:	4413      	add	r3, r2
 8000d2a:	3308      	adds	r3, #8
 8000d2c:	e9c3 8900 	strd	r8, r9, [r3]
 8000d30:	e023      	b.n	8000d7a <_set_fb_data_raw+0x202>
        }  // overflow対策
    } else if (diff_pos < -4096) {
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	f513 5f80 	cmn.w	r3, #4096	; 0x1000
 8000d38:	da1f      	bge.n	8000d7a <_set_fb_data_raw+0x202>
        if (_c620_feedback_data_raw_global[device_id]._rot_num != (INT64_MAX / 10)) {
 8000d3a:	78fb      	ldrb	r3, [r7, #3]
 8000d3c:	4a11      	ldr	r2, [pc, #68]	; (8000d84 <_set_fb_data_raw+0x20c>)
 8000d3e:	015b      	lsls	r3, r3, #5
 8000d40:	4413      	add	r3, r2
 8000d42:	3308      	adds	r3, #8
 8000d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d48:	4910      	ldr	r1, [pc, #64]	; (8000d8c <_set_fb_data_raw+0x214>)
 8000d4a:	428b      	cmp	r3, r1
 8000d4c:	bf08      	it	eq
 8000d4e:	f1b2 3fcc 	cmpeq.w	r2, #3435973836	; 0xcccccccc
 8000d52:	d012      	beq.n	8000d7a <_set_fb_data_raw+0x202>
            _c620_feedback_data_raw_global[device_id]._rot_num += 1;
 8000d54:	78fb      	ldrb	r3, [r7, #3]
 8000d56:	4a0b      	ldr	r2, [pc, #44]	; (8000d84 <_set_fb_data_raw+0x20c>)
 8000d58:	015b      	lsls	r3, r3, #5
 8000d5a:	4413      	add	r3, r2
 8000d5c:	3308      	adds	r3, #8
 8000d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d62:	78f9      	ldrb	r1, [r7, #3]
 8000d64:	1c54      	adds	r4, r2, #1
 8000d66:	f143 0500 	adc.w	r5, r3, #0
 8000d6a:	4a06      	ldr	r2, [pc, #24]	; (8000d84 <_set_fb_data_raw+0x20c>)
 8000d6c:	014b      	lsls	r3, r1, #5
 8000d6e:	4413      	add	r3, r2
 8000d70:	3308      	adds	r3, #8
 8000d72:	e9c3 4500 	strd	r4, r5, [r3]
 8000d76:	e000      	b.n	8000d7a <_set_fb_data_raw+0x202>
    if (device_id > 9 || device_id <= 0)return;
 8000d78:	bf00      	nop
        }  // overflow対策
    }
}
 8000d7a:	3714      	adds	r7, #20
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 8000d82:	4770      	bx	lr
 8000d84:	200041f8 	.word	0x200041f8
 8000d88:	f3333333 	.word	0xf3333333
 8000d8c:	0ccccccc 	.word	0x0ccccccc

08000d90 <C620_WhenCANRxFifo1MsgPending>:

void C620_WhenCANRxFifo1MsgPending(CAN_HandleTypeDef *phcan) {
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b08c      	sub	sp, #48	; 0x30
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
    // Fifo0はCANLibで使うので、Fifo1を使う事。
    if (_c620_phcan_global != phcan)return;
 8000d98:	4b15      	ldr	r3, [pc, #84]	; (8000df0 <C620_WhenCANRxFifo1MsgPending+0x60>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	687a      	ldr	r2, [r7, #4]
 8000d9e:	429a      	cmp	r2, r3
 8000da0:	d121      	bne.n	8000de6 <C620_WhenCANRxFifo1MsgPending+0x56>
    CAN_RxHeaderTypeDef rxHeader;
    uint8_t rxData[8];
    if (HAL_CAN_GetRxMessage(phcan, CAN_RX_FIFO1, &rxHeader, rxData) != HAL_OK) {
 8000da2:	f107 030c 	add.w	r3, r7, #12
 8000da6:	f107 0214 	add.w	r2, r7, #20
 8000daa:	2101      	movs	r1, #1
 8000dac:	6878      	ldr	r0, [r7, #4]
 8000dae:	f001 fd16 	bl	80027de <HAL_CAN_GetRxMessage>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d004      	beq.n	8000dc2 <C620_WhenCANRxFifo1MsgPending+0x32>
        // Reception Error
        printf("GetRxMessage error\n\r");
 8000db8:	480e      	ldr	r0, [pc, #56]	; (8000df4 <C620_WhenCANRxFifo1MsgPending+0x64>)
 8000dba:	f006 f83b 	bl	8006e34 <iprintf>
        Error_Handler();
 8000dbe:	f000 fd47 	bl	8001850 <Error_Handler>
    }

    if (((rxHeader.StdId - 0x200) < 9) && ((rxHeader.StdId - 0x200) >= 1)) {
 8000dc2:	697b      	ldr	r3, [r7, #20]
 8000dc4:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8000dc8:	2b08      	cmp	r3, #8
 8000dca:	d80d      	bhi.n	8000de8 <C620_WhenCANRxFifo1MsgPending+0x58>
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000dd2:	d009      	beq.n	8000de8 <C620_WhenCANRxFifo1MsgPending+0x58>
        _set_fb_data_raw(rxData, rxHeader.StdId - 0x200);  // fb_data_rawにデータを入力
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	b2da      	uxtb	r2, r3
 8000dd8:	f107 030c 	add.w	r3, r7, #12
 8000ddc:	4611      	mov	r1, r2
 8000dde:	4618      	mov	r0, r3
 8000de0:	f7ff feca 	bl	8000b78 <_set_fb_data_raw>
 8000de4:	e000      	b.n	8000de8 <C620_WhenCANRxFifo1MsgPending+0x58>
    if (_c620_phcan_global != phcan)return;
 8000de6:	bf00      	nop
    }
}
 8000de8:	3730      	adds	r7, #48	; 0x30
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	200021e4 	.word	0x200021e4
 8000df4:	0800805c 	.word	0x0800805c

08000df8 <Init_C620_CAN_System>:


void Init_C620_CAN_System(CAN_HandleTypeDef *phcan) {  //CAN初期化
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b08e      	sub	sp, #56	; 0x38
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
    _c620_phcan_global = phcan;
 8000e00:	4a6c      	ldr	r2, [pc, #432]	; (8000fb4 <Init_C620_CAN_System+0x1bc>)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	6013      	str	r3, [r2, #0]
    CAN_FilterTypeDef sFilterConfig;

    //フィルタバンク設定
    sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000e06:	2300      	movs	r3, #0
 8000e08:	627b      	str	r3, [r7, #36]	; 0x24
    sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	62bb      	str	r3, [r7, #40]	; 0x28
    sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO1;
 8000e0e:	2301      	movs	r3, #1
 8000e10:	61fb      	str	r3, [r7, #28]
    sFilterConfig.FilterActivation = ENABLE;
 8000e12:	2301      	movs	r3, #1
 8000e14:	62fb      	str	r3, [r7, #44]	; 0x2c
    sFilterConfig.SlaveStartFilterBank = 14;
 8000e16:	230e      	movs	r3, #14
 8000e18:	633b      	str	r3, [r7, #48]	; 0x30

    // CAN2をつかうならSlaveStartFilterBank以上の値をFilterBankに設定する必要がある
    // FIFO1に初期化用のフィルタを設定
    sFilterConfig.FilterBank = 10; // CANLibで6まで使ってる
 8000e1a:	230a      	movs	r3, #10
 8000e1c:	623b      	str	r3, [r7, #32]
    sFilterConfig.FilterIdHigh = (0x200 | 0b1000) << 5;
 8000e1e:	f44f 4382 	mov.w	r3, #16640	; 0x4100
 8000e22:	60fb      	str	r3, [r7, #12]
    sFilterConfig.FilterMaskIdHigh = ((1 << 12) - 1) << 5;
 8000e24:	4b64      	ldr	r3, [pc, #400]	; (8000fb8 <Init_C620_CAN_System+0x1c0>)
 8000e26:	617b      	str	r3, [r7, #20]
    sFilterConfig.FilterIdLow = 0b000; // 下16bit
 8000e28:	2300      	movs	r3, #0
 8000e2a:	613b      	str	r3, [r7, #16]
    sFilterConfig.FilterMaskIdLow = (1 << 16) - 1;  // Standard ID
 8000e2c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e30:	61bb      	str	r3, [r7, #24]
    if (HAL_CAN_ConfigFilter(phcan, &sFilterConfig) != HAL_OK) {
 8000e32:	f107 030c 	add.w	r3, r7, #12
 8000e36:	4619      	mov	r1, r3
 8000e38:	6878      	ldr	r0, [r7, #4]
 8000e3a:	f001 fa9b 	bl	8002374 <HAL_CAN_ConfigFilter>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d001      	beq.n	8000e48 <Init_C620_CAN_System+0x50>
        Error_Handler();
 8000e44:	f000 fd04 	bl	8001850 <Error_Handler>
    }

    sFilterConfig.FilterBank = 11; // CANLibで6まで使ってる
 8000e48:	230b      	movs	r3, #11
 8000e4a:	623b      	str	r3, [r7, #32]
    sFilterConfig.FilterIdHigh = (0x200 | 0b0001) << 5;
 8000e4c:	f244 0320 	movw	r3, #16416	; 0x4020
 8000e50:	60fb      	str	r3, [r7, #12]
    sFilterConfig.FilterMaskIdHigh = (((1 << 12) - 1) ^ 0b0110) << 5;
 8000e52:	4b5a      	ldr	r3, [pc, #360]	; (8000fbc <Init_C620_CAN_System+0x1c4>)
 8000e54:	617b      	str	r3, [r7, #20]
    sFilterConfig.FilterIdLow = 0b000; // 下16bit
 8000e56:	2300      	movs	r3, #0
 8000e58:	613b      	str	r3, [r7, #16]
    sFilterConfig.FilterMaskIdLow = (1 << 16) - 1;  // Standard ID
 8000e5a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e5e:	61bb      	str	r3, [r7, #24]
    if (HAL_CAN_ConfigFilter(phcan, &sFilterConfig) != HAL_OK) {
 8000e60:	f107 030c 	add.w	r3, r7, #12
 8000e64:	4619      	mov	r1, r3
 8000e66:	6878      	ldr	r0, [r7, #4]
 8000e68:	f001 fa84 	bl	8002374 <HAL_CAN_ConfigFilter>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <Init_C620_CAN_System+0x7e>
        Error_Handler();
 8000e72:	f000 fced 	bl	8001850 <Error_Handler>
    }

    sFilterConfig.FilterBank = 12; // CANLibで6まで使ってる
 8000e76:	230c      	movs	r3, #12
 8000e78:	623b      	str	r3, [r7, #32]
    sFilterConfig.FilterIdHigh = (0x200 | 0b0010) << 5;
 8000e7a:	f244 0340 	movw	r3, #16448	; 0x4040
 8000e7e:	60fb      	str	r3, [r7, #12]
    sFilterConfig.FilterMaskIdHigh = (((1 << 12) - 1) ^ 0b0100) << 5;
 8000e80:	4b4f      	ldr	r3, [pc, #316]	; (8000fc0 <Init_C620_CAN_System+0x1c8>)
 8000e82:	617b      	str	r3, [r7, #20]
    sFilterConfig.FilterIdLow = 0b000; // 下16bit
 8000e84:	2300      	movs	r3, #0
 8000e86:	613b      	str	r3, [r7, #16]
    sFilterConfig.FilterMaskIdLow = (1 << 16) - 1;  // Standard ID
 8000e88:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e8c:	61bb      	str	r3, [r7, #24]
    if (HAL_CAN_ConfigFilter(phcan, &sFilterConfig) != HAL_OK) {
 8000e8e:	f107 030c 	add.w	r3, r7, #12
 8000e92:	4619      	mov	r1, r3
 8000e94:	6878      	ldr	r0, [r7, #4]
 8000e96:	f001 fa6d 	bl	8002374 <HAL_CAN_ConfigFilter>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d001      	beq.n	8000ea4 <Init_C620_CAN_System+0xac>
        Error_Handler();
 8000ea0:	f000 fcd6 	bl	8001850 <Error_Handler>
    }

    sFilterConfig.FilterBank = 13; // CANLibで6まで使ってる
 8000ea4:	230d      	movs	r3, #13
 8000ea6:	623b      	str	r3, [r7, #32]
    sFilterConfig.FilterIdHigh = (0x200 | 0b0100) << 5;
 8000ea8:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000eac:	60fb      	str	r3, [r7, #12]
    sFilterConfig.FilterMaskIdHigh = ((1 << 12) - 1) << 5;
 8000eae:	4b42      	ldr	r3, [pc, #264]	; (8000fb8 <Init_C620_CAN_System+0x1c0>)
 8000eb0:	617b      	str	r3, [r7, #20]
    sFilterConfig.FilterIdLow = 0b000; // 下16bit
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	613b      	str	r3, [r7, #16]
    sFilterConfig.FilterMaskIdLow = (1 << 16) - 1;  // Standard ID
 8000eb6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000eba:	61bb      	str	r3, [r7, #24]
    if (HAL_CAN_ConfigFilter(phcan, &sFilterConfig) != HAL_OK) {
 8000ebc:	f107 030c 	add.w	r3, r7, #12
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	6878      	ldr	r0, [r7, #4]
 8000ec4:	f001 fa56 	bl	8002374 <HAL_CAN_ConfigFilter>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <Init_C620_CAN_System+0xda>
        Error_Handler();
 8000ece:	f000 fcbf 	bl	8001850 <Error_Handler>
    }

    if (HAL_CAN_Start(phcan) != HAL_OK) {
 8000ed2:	6878      	ldr	r0, [r7, #4]
 8000ed4:	f001 fb3a 	bl	800254c <HAL_CAN_Start>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d004      	beq.n	8000ee8 <Init_C620_CAN_System+0xf0>
        printf(" -> Start Error CAN_C620\n");
 8000ede:	4839      	ldr	r0, [pc, #228]	; (8000fc4 <Init_C620_CAN_System+0x1cc>)
 8000ee0:	f006 f82e 	bl	8006f40 <puts>
        Error_Handler();
 8000ee4:	f000 fcb4 	bl	8001850 <Error_Handler>
    }

    if (HAL_CAN_ActivateNotification(phcan, CAN_IT_RX_FIFO1_MSG_PENDING) != HAL_OK) {
 8000ee8:	2110      	movs	r1, #16
 8000eea:	6878      	ldr	r0, [r7, #4]
 8000eec:	f001 fd89 	bl	8002a02 <HAL_CAN_ActivateNotification>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d004      	beq.n	8000f00 <Init_C620_CAN_System+0x108>
        printf(" -> FIFO1 CAN_Activation error1\n\r");
 8000ef6:	4834      	ldr	r0, [pc, #208]	; (8000fc8 <Init_C620_CAN_System+0x1d0>)
 8000ef8:	f005 ff9c 	bl	8006e34 <iprintf>
        Error_Handler();
 8000efc:	f000 fca8 	bl	8001850 <Error_Handler>
    }

    if (HAL_CAN_ActivateNotification(phcan, CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK) {
 8000f00:	2101      	movs	r1, #1
 8000f02:	6878      	ldr	r0, [r7, #4]
 8000f04:	f001 fd7d 	bl	8002a02 <HAL_CAN_ActivateNotification>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d004      	beq.n	8000f18 <Init_C620_CAN_System+0x120>
        printf(" -> CAN_Activation error2\n\r");
 8000f0e:	482f      	ldr	r0, [pc, #188]	; (8000fcc <Init_C620_CAN_System+0x1d4>)
 8000f10:	f005 ff90 	bl	8006e34 <iprintf>
        Error_Handler();
 8000f14:	f000 fc9c 	bl	8001850 <Error_Handler>
    }

    for (uint8_t i = 0; i < 9; i++) {  // init fb_data_raw
 8000f18:	2300      	movs	r3, #0
 8000f1a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000f1e:	e040      	b.n	8000fa2 <Init_C620_CAN_System+0x1aa>
        _c620_feedback_data_raw_global[i].pos = 0;
 8000f20:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000f24:	4a2a      	ldr	r2, [pc, #168]	; (8000fd0 <Init_C620_CAN_System+0x1d8>)
 8000f26:	015b      	lsls	r3, r3, #5
 8000f28:	4413      	add	r3, r2
 8000f2a:	3310      	adds	r3, #16
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	801a      	strh	r2, [r3, #0]
        _c620_feedback_data_raw_global[i].pos_pre = 0;
 8000f30:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000f34:	4a26      	ldr	r2, [pc, #152]	; (8000fd0 <Init_C620_CAN_System+0x1d8>)
 8000f36:	015b      	lsls	r3, r3, #5
 8000f38:	4413      	add	r3, r2
 8000f3a:	3314      	adds	r3, #20
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	801a      	strh	r2, [r3, #0]
        _c620_feedback_data_raw_global[i]._rot_num = 0;
 8000f40:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000f44:	4a22      	ldr	r2, [pc, #136]	; (8000fd0 <Init_C620_CAN_System+0x1d8>)
 8000f46:	015b      	lsls	r3, r3, #5
 8000f48:	4413      	add	r3, r2
 8000f4a:	f103 0108 	add.w	r1, r3, #8
 8000f4e:	f04f 0200 	mov.w	r2, #0
 8000f52:	f04f 0300 	mov.w	r3, #0
 8000f56:	e9c1 2300 	strd	r2, r3, [r1]
        _c620_feedback_data_raw_global[i].vel = 0;
 8000f5a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000f5e:	4a1c      	ldr	r2, [pc, #112]	; (8000fd0 <Init_C620_CAN_System+0x1d8>)
 8000f60:	015b      	lsls	r3, r3, #5
 8000f62:	4413      	add	r3, r2
 8000f64:	3316      	adds	r3, #22
 8000f66:	2200      	movs	r2, #0
 8000f68:	801a      	strh	r2, [r3, #0]
        _c620_feedback_data_raw_global[i].cur = 0;
 8000f6a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000f6e:	4a18      	ldr	r2, [pc, #96]	; (8000fd0 <Init_C620_CAN_System+0x1d8>)
 8000f70:	015b      	lsls	r3, r3, #5
 8000f72:	4413      	add	r3, r2
 8000f74:	3318      	adds	r3, #24
 8000f76:	2200      	movs	r2, #0
 8000f78:	801a      	strh	r2, [r3, #0]
        _c620_feedback_data_raw_global[i]._get_counter = 0;
 8000f7a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000f7e:	4a14      	ldr	r2, [pc, #80]	; (8000fd0 <Init_C620_CAN_System+0x1d8>)
 8000f80:	015b      	lsls	r3, r3, #5
 8000f82:	4413      	add	r3, r2
 8000f84:	2200      	movs	r2, #0
 8000f86:	701a      	strb	r2, [r3, #0]
        _c620_feedback_data_raw_global[i]._internal_offset_pos = 0;
 8000f88:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000f8c:	4a10      	ldr	r2, [pc, #64]	; (8000fd0 <Init_C620_CAN_System+0x1d8>)
 8000f8e:	015b      	lsls	r3, r3, #5
 8000f90:	4413      	add	r3, r2
 8000f92:	3312      	adds	r3, #18
 8000f94:	2200      	movs	r2, #0
 8000f96:	801a      	strh	r2, [r3, #0]
    for (uint8_t i = 0; i < 9; i++) {  // init fb_data_raw
 8000f98:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000f9c:	3301      	adds	r3, #1
 8000f9e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000fa2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000fa6:	2b08      	cmp	r3, #8
 8000fa8:	d9ba      	bls.n	8000f20 <Init_C620_CAN_System+0x128>
    }
}
 8000faa:	bf00      	nop
 8000fac:	bf00      	nop
 8000fae:	3738      	adds	r7, #56	; 0x38
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	200021e4 	.word	0x200021e4
 8000fb8:	0001ffe0 	.word	0x0001ffe0
 8000fbc:	0001ff20 	.word	0x0001ff20
 8000fc0:	0001ff60 	.word	0x0001ff60
 8000fc4:	08008074 	.word	0x08008074
 8000fc8:	08008090 	.word	0x08008090
 8000fcc:	080080b4 	.word	0x080080b4
 8000fd0:	200041f8 	.word	0x200041f8

08000fd4 <Get_C620_FeedbackData>:


C620_FeedbackData Get_C620_FeedbackData(C620_DeviceInfo *device_info) {
 8000fd4:	b590      	push	{r4, r7, lr}
 8000fd6:	ed2d 8b02 	vpush	{d8}
 8000fda:	b08b      	sub	sp, #44	; 0x2c
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	6039      	str	r1, [r7, #0]
    uint8_t device_id = device_info->device_id;
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (device_id >= 9)device_id = 0;
 8000fea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000fee:	2b08      	cmp	r3, #8
 8000ff0:	d902      	bls.n	8000ff8 <Get_C620_FeedbackData+0x24>
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    C620_FeedbackData fb_data;
    fb_data.device_id = device_id;
 8000ff8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000ffc:	733b      	strb	r3, [r7, #12]
    c620_feedback_data_raw *data = &(_c620_feedback_data_raw_global[device_id]);
 8000ffe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001002:	015b      	lsls	r3, r3, #5
 8001004:	4a49      	ldr	r2, [pc, #292]	; (800112c <Get_C620_FeedbackData+0x158>)
 8001006:	4413      	add	r3, r2
 8001008:	623b      	str	r3, [r7, #32]

    int32_t offset_pos = (int32_t) (data->pos) - (int32_t) (data->_internal_offset_pos);
 800100a:	6a3b      	ldr	r3, [r7, #32]
 800100c:	8a1b      	ldrh	r3, [r3, #16]
 800100e:	461a      	mov	r2, r3
 8001010:	6a3b      	ldr	r3, [r7, #32]
 8001012:	8a5b      	ldrh	r3, [r3, #18]
 8001014:	1ad3      	subs	r3, r2, r3
 8001016:	61fb      	str	r3, [r7, #28]
    if (device_info->ctrl_param.use_internal_offset != C620_USE_OFFSET_POS_DISABLE) {
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800101e:	2b00      	cmp	r3, #0
 8001020:	d016      	beq.n	8001050 <Get_C620_FeedbackData+0x7c>
        fb_data.position = ((float)offset_pos) / 8192.0f + (float) (data->_rot_num);
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	ee07 3a90 	vmov	s15, r3
 8001028:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800102c:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8001130 <Get_C620_FeedbackData+0x15c>
 8001030:	ee87 8a87 	vdiv.f32	s16, s15, s14
 8001034:	6a3b      	ldr	r3, [r7, #32]
 8001036:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800103a:	4610      	mov	r0, r2
 800103c:	4619      	mov	r1, r3
 800103e:	f7ff fa1f 	bl	8000480 <__aeabi_l2f>
 8001042:	ee07 0a90 	vmov	s15, r0
 8001046:	ee78 7a27 	vadd.f32	s15, s16, s15
 800104a:	edc7 7a04 	vstr	s15, [r7, #16]
 800104e:	e016      	b.n	800107e <Get_C620_FeedbackData+0xaa>
    } else {
        fb_data.position = ((float)data->pos) / 8192.0f + (float) (data->_rot_num);
 8001050:	6a3b      	ldr	r3, [r7, #32]
 8001052:	8a1b      	ldrh	r3, [r3, #16]
 8001054:	ee07 3a90 	vmov	s15, r3
 8001058:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800105c:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8001130 <Get_C620_FeedbackData+0x15c>
 8001060:	ee87 8a87 	vdiv.f32	s16, s15, s14
 8001064:	6a3b      	ldr	r3, [r7, #32]
 8001066:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800106a:	4610      	mov	r0, r2
 800106c:	4619      	mov	r1, r3
 800106e:	f7ff fa07 	bl	8000480 <__aeabi_l2f>
 8001072:	ee07 0a90 	vmov	s15, r0
 8001076:	ee78 7a27 	vadd.f32	s15, s16, s15
 800107a:	edc7 7a04 	vstr	s15, [r7, #16]
    }
    fb_data.velocity = ((float) (data->vel)) / 60.0f;
 800107e:	6a3b      	ldr	r3, [r7, #32]
 8001080:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001084:	ee07 3a90 	vmov	s15, r3
 8001088:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800108c:	eddf 6a29 	vldr	s13, [pc, #164]	; 8001134 <Get_C620_FeedbackData+0x160>
 8001090:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001094:	edc7 7a05 	vstr	s15, [r7, #20]
    fb_data.current = ((float) (data->cur * 20)) / 16384.0f;
 8001098:	6a3b      	ldr	r3, [r7, #32]
 800109a:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800109e:	461a      	mov	r2, r3
 80010a0:	4613      	mov	r3, r2
 80010a2:	009b      	lsls	r3, r3, #2
 80010a4:	4413      	add	r3, r2
 80010a6:	009b      	lsls	r3, r3, #2
 80010a8:	ee07 3a90 	vmov	s15, r3
 80010ac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010b0:	eddf 6a21 	vldr	s13, [pc, #132]	; 8001138 <Get_C620_FeedbackData+0x164>
 80010b4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010b8:	edc7 7a06 	vstr	s15, [r7, #24]
    fb_data.get_flag = (data->_get_counter > 50);
 80010bc:	6a3b      	ldr	r3, [r7, #32]
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	2b32      	cmp	r3, #50	; 0x32
 80010c2:	bf8c      	ite	hi
 80010c4:	2301      	movhi	r3, #1
 80010c6:	2300      	movls	r3, #0
 80010c8:	b2db      	uxtb	r3, r3
 80010ca:	737b      	strb	r3, [r7, #13]

    fb_data.velocity *= device_info->ctrl_param.quant_per_rot;
 80010cc:	ed97 7a05 	vldr	s14, [r7, #20]
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80010d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010da:	edc7 7a05 	vstr	s15, [r7, #20]
    fb_data.position *= device_info->ctrl_param.quant_per_rot;
 80010de:	ed97 7a04 	vldr	s14, [r7, #16]
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80010e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010ec:	edc7 7a04 	vstr	s15, [r7, #16]
    if(device_info->ctrl_param.rotation == C620_ROT_CW){  // TODO: 反転処理(確認)
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 80010f6:	2b01      	cmp	r3, #1
 80010f8:	d10b      	bne.n	8001112 <Get_C620_FeedbackData+0x13e>
        fb_data.velocity *= -1.0f;
 80010fa:	edd7 7a05 	vldr	s15, [r7, #20]
 80010fe:	eef1 7a67 	vneg.f32	s15, s15
 8001102:	edc7 7a05 	vstr	s15, [r7, #20]
        fb_data.position *= -1.0f;
 8001106:	edd7 7a04 	vldr	s15, [r7, #16]
 800110a:	eef1 7a67 	vneg.f32	s15, s15
 800110e:	edc7 7a04 	vstr	s15, [r7, #16]
    }
    return fb_data;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	461c      	mov	r4, r3
 8001116:	f107 030c 	add.w	r3, r7, #12
 800111a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800111c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8001120:	6878      	ldr	r0, [r7, #4]
 8001122:	372c      	adds	r7, #44	; 0x2c
 8001124:	46bd      	mov	sp, r7
 8001126:	ecbd 8b02 	vpop	{d8}
 800112a:	bd90      	pop	{r4, r7, pc}
 800112c:	200041f8 	.word	0x200041f8
 8001130:	46000000 	.word	0x46000000
 8001134:	42700000 	.word	0x42700000
 8001138:	46800000 	.word	0x46800000

0800113c <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(uint8_t ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */

PUTCHAR_PROTOTYPE {
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	4603      	mov	r3, r0
 8001144:	71fb      	strb	r3, [r7, #7]
    HAL_UART_Transmit(&huart3, &ch, 1, 500);
 8001146:	1df9      	adds	r1, r7, #7
 8001148:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800114c:	2201      	movs	r2, #1
 800114e:	4804      	ldr	r0, [pc, #16]	; (8001160 <__io_putchar+0x24>)
 8001150:	f004 faf6 	bl	8005740 <HAL_UART_Transmit>
    return ch;
 8001154:	79fb      	ldrb	r3, [r7, #7]
}
 8001156:	4618      	mov	r0, r3
 8001158:	3708      	adds	r7, #8
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	20004450 	.word	0x20004450

08001164 <HAL_CAN_TxMailbox0CompleteCallback>:


#if defined(mcmd) || defined(c620)
void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan){
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
    C620_WhenTxMailboxCompleteCallbackCalled(hcan);
 800116c:	6878      	ldr	r0, [r7, #4]
 800116e:	f7ff fcd7 	bl	8000b20 <C620_WhenTxMailboxCompleteCallbackCalled>
    CANLib_WhenTxMailbox0_1_2CompleteCallbackCalled(hcan);
 8001172:	6878      	ldr	r0, [r7, #4]
 8001174:	f7ff fba0 	bl	80008b8 <CANLib_WhenTxMailbox0_1_2CompleteCallbackCalled>
}
 8001178:	bf00      	nop
 800117a:	3708      	adds	r7, #8
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}

08001180 <HAL_CAN_TxMailbox0AbortCallback>:

void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan){
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
    C620_WhenTxMailboxAbortCallbackCalled(hcan);
 8001188:	6878      	ldr	r0, [r7, #4]
 800118a:	f7ff fcdf 	bl	8000b4c <C620_WhenTxMailboxAbortCallbackCalled>
    CANLib_WhenTxMailbox0_1_2AbortCallbackCalled(hcan);
 800118e:	6878      	ldr	r0, [r7, #4]
 8001190:	f7ff fba8 	bl	80008e4 <CANLib_WhenTxMailbox0_1_2AbortCallbackCalled>
}
 8001194:	bf00      	nop
 8001196:	3708      	adds	r7, #8
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}

0800119c <HAL_CAN_TxMailbox1CompleteCallback>:

void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan){
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
    C620_WhenTxMailboxCompleteCallbackCalled(hcan);
 80011a4:	6878      	ldr	r0, [r7, #4]
 80011a6:	f7ff fcbb 	bl	8000b20 <C620_WhenTxMailboxCompleteCallbackCalled>
    CANLib_WhenTxMailbox0_1_2CompleteCallbackCalled(hcan);
 80011aa:	6878      	ldr	r0, [r7, #4]
 80011ac:	f7ff fb84 	bl	80008b8 <CANLib_WhenTxMailbox0_1_2CompleteCallbackCalled>
}
 80011b0:	bf00      	nop
 80011b2:	3708      	adds	r7, #8
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}

080011b8 <HAL_CAN_TxMailbox1AbortCallback>:

void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan){
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
    C620_WhenTxMailboxAbortCallbackCalled(hcan);
 80011c0:	6878      	ldr	r0, [r7, #4]
 80011c2:	f7ff fcc3 	bl	8000b4c <C620_WhenTxMailboxAbortCallbackCalled>
    CANLib_WhenTxMailbox0_1_2AbortCallbackCalled(hcan);
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	f7ff fb8c 	bl	80008e4 <CANLib_WhenTxMailbox0_1_2AbortCallbackCalled>
}
 80011cc:	bf00      	nop
 80011ce:	3708      	adds	r7, #8
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}

080011d4 <HAL_CAN_TxMailbox2CompleteCallback>:

void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan){
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
    C620_WhenTxMailboxCompleteCallbackCalled(hcan);
 80011dc:	6878      	ldr	r0, [r7, #4]
 80011de:	f7ff fc9f 	bl	8000b20 <C620_WhenTxMailboxCompleteCallbackCalled>
    CANLib_WhenTxMailbox0_1_2CompleteCallbackCalled(hcan);
 80011e2:	6878      	ldr	r0, [r7, #4]
 80011e4:	f7ff fb68 	bl	80008b8 <CANLib_WhenTxMailbox0_1_2CompleteCallbackCalled>
}
 80011e8:	bf00      	nop
 80011ea:	3708      	adds	r7, #8
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}

080011f0 <HAL_CAN_TxMailbox2AbortCallback>:

void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan){
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
    C620_WhenTxMailboxAbortCallbackCalled(hcan);
 80011f8:	6878      	ldr	r0, [r7, #4]
 80011fa:	f7ff fca7 	bl	8000b4c <C620_WhenTxMailboxAbortCallbackCalled>
    CANLib_WhenTxMailbox0_1_2AbortCallbackCalled(hcan);
 80011fe:	6878      	ldr	r0, [r7, #4]
 8001200:	f7ff fb70 	bl	80008e4 <CANLib_WhenTxMailbox0_1_2AbortCallbackCalled>
}
 8001204:	bf00      	nop
 8001206:	3708      	adds	r7, #8
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}

0800120c <HAL_CAN_RxFifo1MsgPendingCallback>:
    WhenCANRxFifo0MsgPending(hcan, &num_of_devices);
}
#endif

#ifdef c620
void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan){
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
    C620_WhenCANRxFifo1MsgPending(hcan);
 8001214:	6878      	ldr	r0, [r7, #4]
 8001216:	f7ff fdbb 	bl	8000d90 <C620_WhenCANRxFifo1MsgPending>
}
 800121a:	bf00      	nop
 800121c:	3708      	adds	r7, #8
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
	...

08001224 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001224:	b590      	push	{r4, r7, lr}
 8001226:	b087      	sub	sp, #28
 8001228:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800122a:	f000 ff26 	bl	800207a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800122e:	f000 f8c5 	bl	80013bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001232:	f000 fa6b 	bl	800170c <MX_GPIO_Init>
  MX_DMA_Init();
 8001236:	f000 fa4b 	bl	80016d0 <MX_DMA_Init>
  MX_USART3_UART_Init();
 800123a:	f000 f9eb 	bl	8001614 <MX_USART3_UART_Init>
  MX_ETH_Init();
 800123e:	f000 f99b 	bl	8001578 <MX_ETH_Init>
  MX_CAN1_Init();
 8001242:	f000 f92d 	bl	80014a0 <MX_CAN1_Init>
  MX_CAN2_Init();
 8001246:	f000 f961 	bl	800150c <MX_CAN2_Init>
  MX_USB_OTG_FS_PCD_Init();
 800124a:	f000 fa13 	bl	8001674 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  setbuf(stdout, NULL);
 800124e:	4b4f      	ldr	r3, [pc, #316]	; (800138c <main+0x168>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	689b      	ldr	r3, [r3, #8]
 8001254:	2100      	movs	r1, #0
 8001256:	4618      	mov	r0, r3
 8001258:	f005 fe7a 	bl	8006f50 <setbuf>
  setbuf(stderr, NULL);
 800125c:	4b4b      	ldr	r3, [pc, #300]	; (800138c <main+0x168>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	68db      	ldr	r3, [r3, #12]
 8001262:	2100      	movs	r1, #0
 8001264:	4618      	mov	r0, r3
 8001266:	f005 fe73 	bl	8006f50 <setbuf>
//
//   printf("Start Initializing CAN System for C620:End\n\r");
//   HAL_Delay(100);
//   C620_WaitForConnect(c620_dev_info_global, num_of_c620);  // C620の接続待ち

    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);  // LD1 (GREEN) ON
 800126a:	2101      	movs	r1, #1
 800126c:	4848      	ldr	r0, [pc, #288]	; (8001390 <main+0x16c>)
 800126e:	f002 ff5a 	bl	8004126 <HAL_GPIO_TogglePin>
    Init_C620_CAN_System(&hcan1);  // Init CAN System for C620
 8001272:	4848      	ldr	r0, [pc, #288]	; (8001394 <main+0x170>)
 8001274:	f7ff fdc0 	bl	8000df8 <Init_C620_CAN_System>
    C620_Init(c620_dev_info_global, num_of_c620);
 8001278:	4b47      	ldr	r3, [pc, #284]	; (8001398 <main+0x174>)
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	4619      	mov	r1, r3
 800127e:	4847      	ldr	r0, [pc, #284]	; (800139c <main+0x178>)
 8001280:	f7ff fb71 	bl	8000966 <C620_Init>

   c620_dev_info_global[0].device_id = 1;  // 1スタートな事に注意
 8001284:	4b45      	ldr	r3, [pc, #276]	; (800139c <main+0x178>)
 8001286:	2201      	movs	r2, #1
 8001288:	701a      	strb	r2, [r3, #0]
   c620_dev_info_global[0].ctrl_param.accel_limit = C620_ACCEL_LIMIT_ENABLE;
 800128a:	4b44      	ldr	r3, [pc, #272]	; (800139c <main+0x178>)
 800128c:	2200      	movs	r2, #0
 800128e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
//   c620_dev_info_global[0].ctrl_param.use_internal_offset = C620_USE_OFFSET_POS_DISABLE;
//   c620_dev_info_global[0].ctrl_param.use_internal_offset = C620_USE_OFFSET_POS_INTERNAL;
   c620_dev_info_global[0].ctrl_param.use_internal_offset = C620_USE_OFFSET_POS_CALIB;
 8001292:	4b42      	ldr	r3, [pc, #264]	; (800139c <main+0x178>)
 8001294:	2202      	movs	r2, #2
 8001296:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
   c620_dev_info_global[0].ctrl_param.ctrl_type = C620_CTRL_POS;
 800129a:	4b40      	ldr	r3, [pc, #256]	; (800139c <main+0x178>)
 800129c:	2200      	movs	r2, #0
 800129e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
   c620_dev_info_global[0].ctrl_param.accel_limit_size = 15.0f;
 80012a2:	4b3e      	ldr	r3, [pc, #248]	; (800139c <main+0x178>)
 80012a4:	4a3e      	ldr	r2, [pc, #248]	; (80013a0 <main+0x17c>)
 80012a6:	639a      	str	r2, [r3, #56]	; 0x38
   c620_dev_info_global[0].ctrl_param.quant_per_rot = 1.0f/19.0f / 3.0f * 3.141592f * 2.0f;  //M3508は19:1
 80012a8:	4b3c      	ldr	r3, [pc, #240]	; (800139c <main+0x178>)
 80012aa:	4a3e      	ldr	r2, [pc, #248]	; (80013a4 <main+0x180>)
 80012ac:	63da      	str	r2, [r3, #60]	; 0x3c
   c620_dev_info_global[0].ctrl_param.rotation = C620_ROT_ACW;  // 半時計周り
 80012ae:	4b3b      	ldr	r3, [pc, #236]	; (800139c <main+0x178>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37

   c620_dev_info_global[0].ctrl_param.pid_vel.kp = 4.5f;  // 位置制御の場合はpid_velに速度制御用のgainを設定する
 80012b6:	4b39      	ldr	r3, [pc, #228]	; (800139c <main+0x178>)
 80012b8:	4a3b      	ldr	r2, [pc, #236]	; (80013a8 <main+0x184>)
 80012ba:	61da      	str	r2, [r3, #28]
   c620_dev_info_global[0].ctrl_param.pid_vel.ki = 0.0f;
 80012bc:	4b37      	ldr	r3, [pc, #220]	; (800139c <main+0x178>)
 80012be:	f04f 0200 	mov.w	r2, #0
 80012c2:	621a      	str	r2, [r3, #32]
   c620_dev_info_global[0].ctrl_param.pid_vel.kd = 0.0f;
 80012c4:	4b35      	ldr	r3, [pc, #212]	; (800139c <main+0x178>)
 80012c6:	f04f 0200 	mov.w	r2, #0
 80012ca:	625a      	str	r2, [r3, #36]	; 0x24
   c620_dev_info_global[0].ctrl_param.pid_vel.kff = 0.0f;
 80012cc:	4b33      	ldr	r3, [pc, #204]	; (800139c <main+0x178>)
 80012ce:	f04f 0200 	mov.w	r2, #0
 80012d2:	629a      	str	r2, [r3, #40]	; 0x28

   c620_dev_info_global[0].ctrl_param.pid.kp = 10.0f;  // 位置制御用
 80012d4:	4b31      	ldr	r3, [pc, #196]	; (800139c <main+0x178>)
 80012d6:	4a35      	ldr	r2, [pc, #212]	; (80013ac <main+0x188>)
 80012d8:	605a      	str	r2, [r3, #4]
   c620_dev_info_global[0].ctrl_param.pid.ki = 0.16f;
 80012da:	4b30      	ldr	r3, [pc, #192]	; (800139c <main+0x178>)
 80012dc:	4a34      	ldr	r2, [pc, #208]	; (80013b0 <main+0x18c>)
 80012de:	609a      	str	r2, [r3, #8]
   c620_dev_info_global[0].ctrl_param.pid.kd = 0.0f;
 80012e0:	4b2e      	ldr	r3, [pc, #184]	; (800139c <main+0x178>)
 80012e2:	f04f 0200 	mov.w	r2, #0
 80012e6:	60da      	str	r2, [r3, #12]
   c620_dev_info_global[0].ctrl_param.pid.kff = 0.0f;
 80012e8:	4b2c      	ldr	r3, [pc, #176]	; (800139c <main+0x178>)
 80012ea:	f04f 0200 	mov.w	r2, #0
 80012ee:	611a      	str	r2, [r3, #16]




// TODO:Init,Calibrationの必要性
   C620_SetTarget(&c620_dev_info_global[0], 10.0f);
 80012f0:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 80012f4:	4829      	ldr	r0, [pc, #164]	; (800139c <main+0x178>)
 80012f6:	f7ff fb8d 	bl	8000a14 <C620_SetTarget>
   HAL_Delay(10);
 80012fa:	200a      	movs	r0, #10
 80012fc:	f000 ff1a 	bl	8002134 <HAL_Delay>
   if(!DISABLE_C620_WAIT_CONNECT)C620_WaitForConnect(c620_dev_info_global, num_of_c620);
 8001300:	4b25      	ldr	r3, [pc, #148]	; (8001398 <main+0x174>)
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	4619      	mov	r1, r3
 8001306:	4825      	ldr	r0, [pc, #148]	; (800139c <main+0x178>)
 8001308:	f7ff fb4c 	bl	80009a4 <C620_WaitForConnect>
   HAL_Delay(10);
 800130c:	200a      	movs	r0, #10
 800130e:	f000 ff11 	bl	8002134 <HAL_Delay>
//   C620_Calibration(&c620_dev_info_global[0], -1.0f, 1, GPIOG, GPIO_PIN_1, &hcan1);
//   HAL_Delay(1000);

 //   c620_send_current(&c620_dev_info_global[0], 1.0f, &hcan1);

   C620_ControlEnable(&c620_dev_info_global[0]);
 8001312:	4822      	ldr	r0, [pc, #136]	; (800139c <main+0x178>)
 8001314:	f7ff fb8d 	bl	8000a32 <C620_ControlEnable>
   HAL_Delay(10);
 8001318:	200a      	movs	r0, #10
 800131a:	f000 ff0b 	bl	8002134 <HAL_Delay>
   C620_SetTarget(&c620_dev_info_global[0], 1.0f);  // 目標値を設定
 800131e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001322:	481e      	ldr	r0, [pc, #120]	; (800139c <main+0x178>)
 8001324:	f7ff fb76 	bl	8000a14 <C620_SetTarget>
	  printf("value of mcmd3 %d\r\n",(int)(mcmd_fb.value));
	  HAL_Delay(5);
#endif

#ifdef c620
	  for(int i=0;i<num_of_c620;i++){
 8001328:	2300      	movs	r3, #0
 800132a:	617b      	str	r3, [r7, #20]
 800132c:	e027      	b.n	800137e <main+0x15a>
		  c620_fb[i] = Get_C620_FeedbackData(&c620_dev_info_global[i]);
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	224c      	movs	r2, #76	; 0x4c
 8001332:	fb02 f303 	mul.w	r3, r2, r3
 8001336:	4a19      	ldr	r2, [pc, #100]	; (800139c <main+0x178>)
 8001338:	441a      	add	r2, r3
 800133a:	491e      	ldr	r1, [pc, #120]	; (80013b4 <main+0x190>)
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	011b      	lsls	r3, r3, #4
 8001340:	18cc      	adds	r4, r1, r3
 8001342:	463b      	mov	r3, r7
 8001344:	4611      	mov	r1, r2
 8001346:	4618      	mov	r0, r3
 8001348:	f7ff fe44 	bl	8000fd4 <Get_C620_FeedbackData>
 800134c:	463b      	mov	r3, r7
 800134e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001350:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		  printf("value of c620[%d] %d\r\n",i,(int)(c620_fb[i].position));
 8001354:	4a17      	ldr	r2, [pc, #92]	; (80013b4 <main+0x190>)
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	011b      	lsls	r3, r3, #4
 800135a:	4413      	add	r3, r2
 800135c:	3304      	adds	r3, #4
 800135e:	edd3 7a00 	vldr	s15, [r3]
 8001362:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001366:	ee17 2a90 	vmov	r2, s15
 800136a:	6979      	ldr	r1, [r7, #20]
 800136c:	4812      	ldr	r0, [pc, #72]	; (80013b8 <main+0x194>)
 800136e:	f005 fd61 	bl	8006e34 <iprintf>
		  HAL_Delay(5);
 8001372:	2005      	movs	r0, #5
 8001374:	f000 fede 	bl	8002134 <HAL_Delay>
	  for(int i=0;i<num_of_c620;i++){
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	3301      	adds	r3, #1
 800137c:	617b      	str	r3, [r7, #20]
 800137e:	4b06      	ldr	r3, [pc, #24]	; (8001398 <main+0x174>)
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	461a      	mov	r2, r3
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	4293      	cmp	r3, r2
 8001388:	dbd1      	blt.n	800132e <main+0x10a>
 800138a:	e7cd      	b.n	8001328 <main+0x104>
 800138c:	20000010 	.word	0x20000010
 8001390:	40020400 	.word	0x40020400
 8001394:	20004350 	.word	0x20004350
 8001398:	20000000 	.word	0x20000000
 800139c:	20004a40 	.word	0x20004a40
 80013a0:	41700000 	.word	0x41700000
 80013a4:	3de1c0f3 	.word	0x3de1c0f3
 80013a8:	40900000 	.word	0x40900000
 80013ac:	41200000 	.word	0x41200000
 80013b0:	3e23d70a 	.word	0x3e23d70a
 80013b4:	20004ca0 	.word	0x20004ca0
 80013b8:	080080d0 	.word	0x080080d0

080013bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b094      	sub	sp, #80	; 0x50
 80013c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013c2:	f107 031c 	add.w	r3, r7, #28
 80013c6:	2234      	movs	r2, #52	; 0x34
 80013c8:	2100      	movs	r1, #0
 80013ca:	4618      	mov	r0, r3
 80013cc:	f005 fd2a 	bl	8006e24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013d0:	f107 0308 	add.w	r3, r7, #8
 80013d4:	2200      	movs	r2, #0
 80013d6:	601a      	str	r2, [r3, #0]
 80013d8:	605a      	str	r2, [r3, #4]
 80013da:	609a      	str	r2, [r3, #8]
 80013dc:	60da      	str	r2, [r3, #12]
 80013de:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80013e0:	f003 f804 	bl	80043ec <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013e4:	4b2c      	ldr	r3, [pc, #176]	; (8001498 <SystemClock_Config+0xdc>)
 80013e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e8:	4a2b      	ldr	r2, [pc, #172]	; (8001498 <SystemClock_Config+0xdc>)
 80013ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013ee:	6413      	str	r3, [r2, #64]	; 0x40
 80013f0:	4b29      	ldr	r3, [pc, #164]	; (8001498 <SystemClock_Config+0xdc>)
 80013f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013f8:	607b      	str	r3, [r7, #4]
 80013fa:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80013fc:	4b27      	ldr	r3, [pc, #156]	; (800149c <SystemClock_Config+0xe0>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001404:	4a25      	ldr	r2, [pc, #148]	; (800149c <SystemClock_Config+0xe0>)
 8001406:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800140a:	6013      	str	r3, [r2, #0]
 800140c:	4b23      	ldr	r3, [pc, #140]	; (800149c <SystemClock_Config+0xe0>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001414:	603b      	str	r3, [r7, #0]
 8001416:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001418:	2301      	movs	r3, #1
 800141a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800141c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001420:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001422:	2302      	movs	r3, #2
 8001424:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001426:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800142a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 800142c:	2304      	movs	r3, #4
 800142e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001430:	2360      	movs	r3, #96	; 0x60
 8001432:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001434:	2302      	movs	r3, #2
 8001436:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001438:	2304      	movs	r3, #4
 800143a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800143c:	2302      	movs	r3, #2
 800143e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001440:	f107 031c 	add.w	r3, r7, #28
 8001444:	4618      	mov	r0, r3
 8001446:	f003 f831 	bl	80044ac <HAL_RCC_OscConfig>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001450:	f000 f9fe 	bl	8001850 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001454:	f002 ffda 	bl	800440c <HAL_PWREx_EnableOverDrive>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800145e:	f000 f9f7 	bl	8001850 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001462:	230f      	movs	r3, #15
 8001464:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001466:	2302      	movs	r3, #2
 8001468:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800146a:	2300      	movs	r3, #0
 800146c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800146e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001472:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001474:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001478:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800147a:	f107 0308 	add.w	r3, r7, #8
 800147e:	2103      	movs	r1, #3
 8001480:	4618      	mov	r0, r3
 8001482:	f003 fac1 	bl	8004a08 <HAL_RCC_ClockConfig>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800148c:	f000 f9e0 	bl	8001850 <Error_Handler>
  }
}
 8001490:	bf00      	nop
 8001492:	3750      	adds	r7, #80	; 0x50
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	40023800 	.word	0x40023800
 800149c:	40007000 	.word	0x40007000

080014a0 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80014a4:	4b17      	ldr	r3, [pc, #92]	; (8001504 <MX_CAN1_Init+0x64>)
 80014a6:	4a18      	ldr	r2, [pc, #96]	; (8001508 <MX_CAN1_Init+0x68>)
 80014a8:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 80014aa:	4b16      	ldr	r3, [pc, #88]	; (8001504 <MX_CAN1_Init+0x64>)
 80014ac:	2206      	movs	r2, #6
 80014ae:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80014b0:	4b14      	ldr	r3, [pc, #80]	; (8001504 <MX_CAN1_Init+0x64>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80014b6:	4b13      	ldr	r3, [pc, #76]	; (8001504 <MX_CAN1_Init+0x64>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_6TQ;
 80014bc:	4b11      	ldr	r3, [pc, #68]	; (8001504 <MX_CAN1_Init+0x64>)
 80014be:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 80014c2:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80014c4:	4b0f      	ldr	r3, [pc, #60]	; (8001504 <MX_CAN1_Init+0x64>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80014ca:	4b0e      	ldr	r3, [pc, #56]	; (8001504 <MX_CAN1_Init+0x64>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80014d0:	4b0c      	ldr	r3, [pc, #48]	; (8001504 <MX_CAN1_Init+0x64>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80014d6:	4b0b      	ldr	r3, [pc, #44]	; (8001504 <MX_CAN1_Init+0x64>)
 80014d8:	2200      	movs	r2, #0
 80014da:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80014dc:	4b09      	ldr	r3, [pc, #36]	; (8001504 <MX_CAN1_Init+0x64>)
 80014de:	2200      	movs	r2, #0
 80014e0:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80014e2:	4b08      	ldr	r3, [pc, #32]	; (8001504 <MX_CAN1_Init+0x64>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = ENABLE;
 80014e8:	4b06      	ldr	r3, [pc, #24]	; (8001504 <MX_CAN1_Init+0x64>)
 80014ea:	2201      	movs	r2, #1
 80014ec:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80014ee:	4805      	ldr	r0, [pc, #20]	; (8001504 <MX_CAN1_Init+0x64>)
 80014f0:	f000 fe44 	bl	800217c <HAL_CAN_Init>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 80014fa:	f000 f9a9 	bl	8001850 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80014fe:	bf00      	nop
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	20004350 	.word	0x20004350
 8001508:	40006400 	.word	0x40006400

0800150c <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8001510:	4b17      	ldr	r3, [pc, #92]	; (8001570 <MX_CAN2_Init+0x64>)
 8001512:	4a18      	ldr	r2, [pc, #96]	; (8001574 <MX_CAN2_Init+0x68>)
 8001514:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 6;
 8001516:	4b16      	ldr	r3, [pc, #88]	; (8001570 <MX_CAN2_Init+0x64>)
 8001518:	2206      	movs	r2, #6
 800151a:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 800151c:	4b14      	ldr	r3, [pc, #80]	; (8001570 <MX_CAN2_Init+0x64>)
 800151e:	2200      	movs	r2, #0
 8001520:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001522:	4b13      	ldr	r3, [pc, #76]	; (8001570 <MX_CAN2_Init+0x64>)
 8001524:	2200      	movs	r2, #0
 8001526:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_6TQ;
 8001528:	4b11      	ldr	r3, [pc, #68]	; (8001570 <MX_CAN2_Init+0x64>)
 800152a:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 800152e:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001530:	4b0f      	ldr	r3, [pc, #60]	; (8001570 <MX_CAN2_Init+0x64>)
 8001532:	2200      	movs	r2, #0
 8001534:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8001536:	4b0e      	ldr	r3, [pc, #56]	; (8001570 <MX_CAN2_Init+0x64>)
 8001538:	2200      	movs	r2, #0
 800153a:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 800153c:	4b0c      	ldr	r3, [pc, #48]	; (8001570 <MX_CAN2_Init+0x64>)
 800153e:	2200      	movs	r2, #0
 8001540:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8001542:	4b0b      	ldr	r3, [pc, #44]	; (8001570 <MX_CAN2_Init+0x64>)
 8001544:	2200      	movs	r2, #0
 8001546:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8001548:	4b09      	ldr	r3, [pc, #36]	; (8001570 <MX_CAN2_Init+0x64>)
 800154a:	2200      	movs	r2, #0
 800154c:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 800154e:	4b08      	ldr	r3, [pc, #32]	; (8001570 <MX_CAN2_Init+0x64>)
 8001550:	2200      	movs	r2, #0
 8001552:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = ENABLE;
 8001554:	4b06      	ldr	r3, [pc, #24]	; (8001570 <MX_CAN2_Init+0x64>)
 8001556:	2201      	movs	r2, #1
 8001558:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 800155a:	4805      	ldr	r0, [pc, #20]	; (8001570 <MX_CAN2_Init+0x64>)
 800155c:	f000 fe0e 	bl	800217c <HAL_CAN_Init>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <MX_CAN2_Init+0x5e>
  {
    Error_Handler();
 8001566:	f000 f973 	bl	8001850 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 800156a:	bf00      	nop
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	20004378 	.word	0x20004378
 8001574:	40006800 	.word	0x40006800

08001578 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 800157c:	4b1f      	ldr	r3, [pc, #124]	; (80015fc <MX_ETH_Init+0x84>)
 800157e:	4a20      	ldr	r2, [pc, #128]	; (8001600 <MX_ETH_Init+0x88>)
 8001580:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8001582:	4b20      	ldr	r3, [pc, #128]	; (8001604 <MX_ETH_Init+0x8c>)
 8001584:	2200      	movs	r2, #0
 8001586:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8001588:	4b1e      	ldr	r3, [pc, #120]	; (8001604 <MX_ETH_Init+0x8c>)
 800158a:	2280      	movs	r2, #128	; 0x80
 800158c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800158e:	4b1d      	ldr	r3, [pc, #116]	; (8001604 <MX_ETH_Init+0x8c>)
 8001590:	22e1      	movs	r2, #225	; 0xe1
 8001592:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8001594:	4b1b      	ldr	r3, [pc, #108]	; (8001604 <MX_ETH_Init+0x8c>)
 8001596:	2200      	movs	r2, #0
 8001598:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800159a:	4b1a      	ldr	r3, [pc, #104]	; (8001604 <MX_ETH_Init+0x8c>)
 800159c:	2200      	movs	r2, #0
 800159e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80015a0:	4b18      	ldr	r3, [pc, #96]	; (8001604 <MX_ETH_Init+0x8c>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80015a6:	4b15      	ldr	r3, [pc, #84]	; (80015fc <MX_ETH_Init+0x84>)
 80015a8:	4a16      	ldr	r2, [pc, #88]	; (8001604 <MX_ETH_Init+0x8c>)
 80015aa:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80015ac:	4b13      	ldr	r3, [pc, #76]	; (80015fc <MX_ETH_Init+0x84>)
 80015ae:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80015b2:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80015b4:	4b11      	ldr	r3, [pc, #68]	; (80015fc <MX_ETH_Init+0x84>)
 80015b6:	4a14      	ldr	r2, [pc, #80]	; (8001608 <MX_ETH_Init+0x90>)
 80015b8:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80015ba:	4b10      	ldr	r3, [pc, #64]	; (80015fc <MX_ETH_Init+0x84>)
 80015bc:	4a13      	ldr	r2, [pc, #76]	; (800160c <MX_ETH_Init+0x94>)
 80015be:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80015c0:	4b0e      	ldr	r3, [pc, #56]	; (80015fc <MX_ETH_Init+0x84>)
 80015c2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80015c6:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80015c8:	480c      	ldr	r0, [pc, #48]	; (80015fc <MX_ETH_Init+0x84>)
 80015ca:	f002 f8c1 	bl	8003750 <HAL_ETH_Init>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80015d4:	f000 f93c 	bl	8001850 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80015d8:	2238      	movs	r2, #56	; 0x38
 80015da:	2100      	movs	r1, #0
 80015dc:	480c      	ldr	r0, [pc, #48]	; (8001610 <MX_ETH_Init+0x98>)
 80015de:	f005 fc21 	bl	8006e24 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80015e2:	4b0b      	ldr	r3, [pc, #44]	; (8001610 <MX_ETH_Init+0x98>)
 80015e4:	2221      	movs	r2, #33	; 0x21
 80015e6:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80015e8:	4b09      	ldr	r3, [pc, #36]	; (8001610 <MX_ETH_Init+0x98>)
 80015ea:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80015ee:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80015f0:	4b07      	ldr	r3, [pc, #28]	; (8001610 <MX_ETH_Init+0x98>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80015f6:	bf00      	nop
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	200043a0 	.word	0x200043a0
 8001600:	40028000 	.word	0x40028000
 8001604:	20004d20 	.word	0x20004d20
 8001608:	20000114 	.word	0x20000114
 800160c:	20000074 	.word	0x20000074
 8001610:	20004318 	.word	0x20004318

08001614 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001618:	4b14      	ldr	r3, [pc, #80]	; (800166c <MX_USART3_UART_Init+0x58>)
 800161a:	4a15      	ldr	r2, [pc, #84]	; (8001670 <MX_USART3_UART_Init+0x5c>)
 800161c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800161e:	4b13      	ldr	r3, [pc, #76]	; (800166c <MX_USART3_UART_Init+0x58>)
 8001620:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001624:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001626:	4b11      	ldr	r3, [pc, #68]	; (800166c <MX_USART3_UART_Init+0x58>)
 8001628:	2200      	movs	r2, #0
 800162a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800162c:	4b0f      	ldr	r3, [pc, #60]	; (800166c <MX_USART3_UART_Init+0x58>)
 800162e:	2200      	movs	r2, #0
 8001630:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001632:	4b0e      	ldr	r3, [pc, #56]	; (800166c <MX_USART3_UART_Init+0x58>)
 8001634:	2200      	movs	r2, #0
 8001636:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001638:	4b0c      	ldr	r3, [pc, #48]	; (800166c <MX_USART3_UART_Init+0x58>)
 800163a:	220c      	movs	r2, #12
 800163c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800163e:	4b0b      	ldr	r3, [pc, #44]	; (800166c <MX_USART3_UART_Init+0x58>)
 8001640:	2200      	movs	r2, #0
 8001642:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001644:	4b09      	ldr	r3, [pc, #36]	; (800166c <MX_USART3_UART_Init+0x58>)
 8001646:	2200      	movs	r2, #0
 8001648:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800164a:	4b08      	ldr	r3, [pc, #32]	; (800166c <MX_USART3_UART_Init+0x58>)
 800164c:	2200      	movs	r2, #0
 800164e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001650:	4b06      	ldr	r3, [pc, #24]	; (800166c <MX_USART3_UART_Init+0x58>)
 8001652:	2200      	movs	r2, #0
 8001654:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001656:	4805      	ldr	r0, [pc, #20]	; (800166c <MX_USART3_UART_Init+0x58>)
 8001658:	f004 f824 	bl	80056a4 <HAL_UART_Init>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001662:	f000 f8f5 	bl	8001850 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001666:	bf00      	nop
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	20004450 	.word	0x20004450
 8001670:	40004800 	.word	0x40004800

08001674 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001678:	4b14      	ldr	r3, [pc, #80]	; (80016cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 800167a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800167e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001680:	4b12      	ldr	r3, [pc, #72]	; (80016cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001682:	2206      	movs	r2, #6
 8001684:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001686:	4b11      	ldr	r3, [pc, #68]	; (80016cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001688:	2202      	movs	r2, #2
 800168a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800168c:	4b0f      	ldr	r3, [pc, #60]	; (80016cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 800168e:	2200      	movs	r2, #0
 8001690:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001692:	4b0e      	ldr	r3, [pc, #56]	; (80016cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001694:	2202      	movs	r2, #2
 8001696:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001698:	4b0c      	ldr	r3, [pc, #48]	; (80016cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 800169a:	2201      	movs	r2, #1
 800169c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800169e:	4b0b      	ldr	r3, [pc, #44]	; (80016cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80016a4:	4b09      	ldr	r3, [pc, #36]	; (80016cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80016aa:	4b08      	ldr	r3, [pc, #32]	; (80016cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016ac:	2201      	movs	r2, #1
 80016ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80016b0:	4b06      	ldr	r3, [pc, #24]	; (80016cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80016b6:	4805      	ldr	r0, [pc, #20]	; (80016cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016b8:	f002 fd4f 	bl	800415a <HAL_PCD_Init>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80016c2:	f000 f8c5 	bl	8001850 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80016c6:	bf00      	nop
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	20004538 	.word	0x20004538

080016d0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80016d6:	4b0c      	ldr	r3, [pc, #48]	; (8001708 <MX_DMA_Init+0x38>)
 80016d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016da:	4a0b      	ldr	r2, [pc, #44]	; (8001708 <MX_DMA_Init+0x38>)
 80016dc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80016e0:	6313      	str	r3, [r2, #48]	; 0x30
 80016e2:	4b09      	ldr	r3, [pc, #36]	; (8001708 <MX_DMA_Init+0x38>)
 80016e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016ea:	607b      	str	r3, [r7, #4]
 80016ec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 80016ee:	2200      	movs	r2, #0
 80016f0:	2100      	movs	r1, #0
 80016f2:	200e      	movs	r0, #14
 80016f4:	f001 fc79 	bl	8002fea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80016f8:	200e      	movs	r0, #14
 80016fa:	f001 fc92 	bl	8003022 <HAL_NVIC_EnableIRQ>

}
 80016fe:	bf00      	nop
 8001700:	3708      	adds	r7, #8
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	40023800 	.word	0x40023800

0800170c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b08c      	sub	sp, #48	; 0x30
 8001710:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001712:	f107 031c 	add.w	r3, r7, #28
 8001716:	2200      	movs	r2, #0
 8001718:	601a      	str	r2, [r3, #0]
 800171a:	605a      	str	r2, [r3, #4]
 800171c:	609a      	str	r2, [r3, #8]
 800171e:	60da      	str	r2, [r3, #12]
 8001720:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001722:	4b47      	ldr	r3, [pc, #284]	; (8001840 <MX_GPIO_Init+0x134>)
 8001724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001726:	4a46      	ldr	r2, [pc, #280]	; (8001840 <MX_GPIO_Init+0x134>)
 8001728:	f043 0304 	orr.w	r3, r3, #4
 800172c:	6313      	str	r3, [r2, #48]	; 0x30
 800172e:	4b44      	ldr	r3, [pc, #272]	; (8001840 <MX_GPIO_Init+0x134>)
 8001730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001732:	f003 0304 	and.w	r3, r3, #4
 8001736:	61bb      	str	r3, [r7, #24]
 8001738:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800173a:	4b41      	ldr	r3, [pc, #260]	; (8001840 <MX_GPIO_Init+0x134>)
 800173c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173e:	4a40      	ldr	r2, [pc, #256]	; (8001840 <MX_GPIO_Init+0x134>)
 8001740:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001744:	6313      	str	r3, [r2, #48]	; 0x30
 8001746:	4b3e      	ldr	r3, [pc, #248]	; (8001840 <MX_GPIO_Init+0x134>)
 8001748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800174e:	617b      	str	r3, [r7, #20]
 8001750:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001752:	4b3b      	ldr	r3, [pc, #236]	; (8001840 <MX_GPIO_Init+0x134>)
 8001754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001756:	4a3a      	ldr	r2, [pc, #232]	; (8001840 <MX_GPIO_Init+0x134>)
 8001758:	f043 0301 	orr.w	r3, r3, #1
 800175c:	6313      	str	r3, [r2, #48]	; 0x30
 800175e:	4b38      	ldr	r3, [pc, #224]	; (8001840 <MX_GPIO_Init+0x134>)
 8001760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001762:	f003 0301 	and.w	r3, r3, #1
 8001766:	613b      	str	r3, [r7, #16]
 8001768:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800176a:	4b35      	ldr	r3, [pc, #212]	; (8001840 <MX_GPIO_Init+0x134>)
 800176c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176e:	4a34      	ldr	r2, [pc, #208]	; (8001840 <MX_GPIO_Init+0x134>)
 8001770:	f043 0302 	orr.w	r3, r3, #2
 8001774:	6313      	str	r3, [r2, #48]	; 0x30
 8001776:	4b32      	ldr	r3, [pc, #200]	; (8001840 <MX_GPIO_Init+0x134>)
 8001778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177a:	f003 0302 	and.w	r3, r3, #2
 800177e:	60fb      	str	r3, [r7, #12]
 8001780:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001782:	4b2f      	ldr	r3, [pc, #188]	; (8001840 <MX_GPIO_Init+0x134>)
 8001784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001786:	4a2e      	ldr	r2, [pc, #184]	; (8001840 <MX_GPIO_Init+0x134>)
 8001788:	f043 0308 	orr.w	r3, r3, #8
 800178c:	6313      	str	r3, [r2, #48]	; 0x30
 800178e:	4b2c      	ldr	r3, [pc, #176]	; (8001840 <MX_GPIO_Init+0x134>)
 8001790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001792:	f003 0308 	and.w	r3, r3, #8
 8001796:	60bb      	str	r3, [r7, #8]
 8001798:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800179a:	4b29      	ldr	r3, [pc, #164]	; (8001840 <MX_GPIO_Init+0x134>)
 800179c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179e:	4a28      	ldr	r2, [pc, #160]	; (8001840 <MX_GPIO_Init+0x134>)
 80017a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80017a4:	6313      	str	r3, [r2, #48]	; 0x30
 80017a6:	4b26      	ldr	r3, [pc, #152]	; (8001840 <MX_GPIO_Init+0x134>)
 80017a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017ae:	607b      	str	r3, [r7, #4]
 80017b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80017b2:	2200      	movs	r2, #0
 80017b4:	f244 0181 	movw	r1, #16513	; 0x4081
 80017b8:	4822      	ldr	r0, [pc, #136]	; (8001844 <MX_GPIO_Init+0x138>)
 80017ba:	f002 fc9b 	bl	80040f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80017be:	2200      	movs	r2, #0
 80017c0:	2140      	movs	r1, #64	; 0x40
 80017c2:	4821      	ldr	r0, [pc, #132]	; (8001848 <MX_GPIO_Init+0x13c>)
 80017c4:	f002 fc96 	bl	80040f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80017c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80017ce:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80017d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d4:	2300      	movs	r3, #0
 80017d6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80017d8:	f107 031c 	add.w	r3, r7, #28
 80017dc:	4619      	mov	r1, r3
 80017de:	481b      	ldr	r0, [pc, #108]	; (800184c <MX_GPIO_Init+0x140>)
 80017e0:	f002 fadc 	bl	8003d9c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80017e4:	f244 0381 	movw	r3, #16513	; 0x4081
 80017e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017ea:	2301      	movs	r3, #1
 80017ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ee:	2300      	movs	r3, #0
 80017f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f2:	2300      	movs	r3, #0
 80017f4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017f6:	f107 031c 	add.w	r3, r7, #28
 80017fa:	4619      	mov	r1, r3
 80017fc:	4811      	ldr	r0, [pc, #68]	; (8001844 <MX_GPIO_Init+0x138>)
 80017fe:	f002 facd 	bl	8003d9c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001802:	2340      	movs	r3, #64	; 0x40
 8001804:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001806:	2301      	movs	r3, #1
 8001808:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180a:	2300      	movs	r3, #0
 800180c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800180e:	2300      	movs	r3, #0
 8001810:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001812:	f107 031c 	add.w	r3, r7, #28
 8001816:	4619      	mov	r1, r3
 8001818:	480b      	ldr	r0, [pc, #44]	; (8001848 <MX_GPIO_Init+0x13c>)
 800181a:	f002 fabf 	bl	8003d9c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800181e:	2380      	movs	r3, #128	; 0x80
 8001820:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001822:	2300      	movs	r3, #0
 8001824:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001826:	2300      	movs	r3, #0
 8001828:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800182a:	f107 031c 	add.w	r3, r7, #28
 800182e:	4619      	mov	r1, r3
 8001830:	4805      	ldr	r0, [pc, #20]	; (8001848 <MX_GPIO_Init+0x13c>)
 8001832:	f002 fab3 	bl	8003d9c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001836:	bf00      	nop
 8001838:	3730      	adds	r7, #48	; 0x30
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	40023800 	.word	0x40023800
 8001844:	40020400 	.word	0x40020400
 8001848:	40021800 	.word	0x40021800
 800184c:	40020800 	.word	0x40020800

08001850 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001854:	b672      	cpsid	i
}
 8001856:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001858:	e7fe      	b.n	8001858 <Error_Handler+0x8>
	...

0800185c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001862:	4b0f      	ldr	r3, [pc, #60]	; (80018a0 <HAL_MspInit+0x44>)
 8001864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001866:	4a0e      	ldr	r2, [pc, #56]	; (80018a0 <HAL_MspInit+0x44>)
 8001868:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800186c:	6413      	str	r3, [r2, #64]	; 0x40
 800186e:	4b0c      	ldr	r3, [pc, #48]	; (80018a0 <HAL_MspInit+0x44>)
 8001870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001872:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001876:	607b      	str	r3, [r7, #4]
 8001878:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800187a:	4b09      	ldr	r3, [pc, #36]	; (80018a0 <HAL_MspInit+0x44>)
 800187c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800187e:	4a08      	ldr	r2, [pc, #32]	; (80018a0 <HAL_MspInit+0x44>)
 8001880:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001884:	6453      	str	r3, [r2, #68]	; 0x44
 8001886:	4b06      	ldr	r3, [pc, #24]	; (80018a0 <HAL_MspInit+0x44>)
 8001888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800188a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800188e:	603b      	str	r3, [r7, #0]
 8001890:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001892:	bf00      	nop
 8001894:	370c      	adds	r7, #12
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr
 800189e:	bf00      	nop
 80018a0:	40023800 	.word	0x40023800

080018a4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b08c      	sub	sp, #48	; 0x30
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ac:	f107 031c 	add.w	r3, r7, #28
 80018b0:	2200      	movs	r2, #0
 80018b2:	601a      	str	r2, [r3, #0]
 80018b4:	605a      	str	r2, [r3, #4]
 80018b6:	609a      	str	r2, [r3, #8]
 80018b8:	60da      	str	r2, [r3, #12]
 80018ba:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a55      	ldr	r2, [pc, #340]	; (8001a18 <HAL_CAN_MspInit+0x174>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d149      	bne.n	800195a <HAL_CAN_MspInit+0xb6>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 80018c6:	4b55      	ldr	r3, [pc, #340]	; (8001a1c <HAL_CAN_MspInit+0x178>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	3301      	adds	r3, #1
 80018cc:	4a53      	ldr	r2, [pc, #332]	; (8001a1c <HAL_CAN_MspInit+0x178>)
 80018ce:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80018d0:	4b52      	ldr	r3, [pc, #328]	; (8001a1c <HAL_CAN_MspInit+0x178>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	2b01      	cmp	r3, #1
 80018d6:	d10b      	bne.n	80018f0 <HAL_CAN_MspInit+0x4c>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80018d8:	4b51      	ldr	r3, [pc, #324]	; (8001a20 <HAL_CAN_MspInit+0x17c>)
 80018da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018dc:	4a50      	ldr	r2, [pc, #320]	; (8001a20 <HAL_CAN_MspInit+0x17c>)
 80018de:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80018e2:	6413      	str	r3, [r2, #64]	; 0x40
 80018e4:	4b4e      	ldr	r3, [pc, #312]	; (8001a20 <HAL_CAN_MspInit+0x17c>)
 80018e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018ec:	61bb      	str	r3, [r7, #24]
 80018ee:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80018f0:	4b4b      	ldr	r3, [pc, #300]	; (8001a20 <HAL_CAN_MspInit+0x17c>)
 80018f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f4:	4a4a      	ldr	r2, [pc, #296]	; (8001a20 <HAL_CAN_MspInit+0x17c>)
 80018f6:	f043 0308 	orr.w	r3, r3, #8
 80018fa:	6313      	str	r3, [r2, #48]	; 0x30
 80018fc:	4b48      	ldr	r3, [pc, #288]	; (8001a20 <HAL_CAN_MspInit+0x17c>)
 80018fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001900:	f003 0308 	and.w	r3, r3, #8
 8001904:	617b      	str	r3, [r7, #20]
 8001906:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001908:	2303      	movs	r3, #3
 800190a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800190c:	2302      	movs	r3, #2
 800190e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001910:	2300      	movs	r3, #0
 8001912:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001914:	2303      	movs	r3, #3
 8001916:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001918:	2309      	movs	r3, #9
 800191a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800191c:	f107 031c 	add.w	r3, r7, #28
 8001920:	4619      	mov	r1, r3
 8001922:	4840      	ldr	r0, [pc, #256]	; (8001a24 <HAL_CAN_MspInit+0x180>)
 8001924:	f002 fa3a 	bl	8003d9c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8001928:	2200      	movs	r2, #0
 800192a:	2100      	movs	r1, #0
 800192c:	2013      	movs	r0, #19
 800192e:	f001 fb5c 	bl	8002fea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8001932:	2013      	movs	r0, #19
 8001934:	f001 fb75 	bl	8003022 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001938:	2200      	movs	r2, #0
 800193a:	2100      	movs	r1, #0
 800193c:	2014      	movs	r0, #20
 800193e:	f001 fb54 	bl	8002fea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001942:	2014      	movs	r0, #20
 8001944:	f001 fb6d 	bl	8003022 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8001948:	2200      	movs	r2, #0
 800194a:	2100      	movs	r1, #0
 800194c:	2015      	movs	r0, #21
 800194e:	f001 fb4c 	bl	8002fea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8001952:	2015      	movs	r0, #21
 8001954:	f001 fb65 	bl	8003022 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8001958:	e05a      	b.n	8001a10 <HAL_CAN_MspInit+0x16c>
  else if(hcan->Instance==CAN2)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a32      	ldr	r2, [pc, #200]	; (8001a28 <HAL_CAN_MspInit+0x184>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d155      	bne.n	8001a10 <HAL_CAN_MspInit+0x16c>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8001964:	4b2e      	ldr	r3, [pc, #184]	; (8001a20 <HAL_CAN_MspInit+0x17c>)
 8001966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001968:	4a2d      	ldr	r2, [pc, #180]	; (8001a20 <HAL_CAN_MspInit+0x17c>)
 800196a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800196e:	6413      	str	r3, [r2, #64]	; 0x40
 8001970:	4b2b      	ldr	r3, [pc, #172]	; (8001a20 <HAL_CAN_MspInit+0x17c>)
 8001972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001974:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001978:	613b      	str	r3, [r7, #16]
 800197a:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 800197c:	4b27      	ldr	r3, [pc, #156]	; (8001a1c <HAL_CAN_MspInit+0x178>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	3301      	adds	r3, #1
 8001982:	4a26      	ldr	r2, [pc, #152]	; (8001a1c <HAL_CAN_MspInit+0x178>)
 8001984:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001986:	4b25      	ldr	r3, [pc, #148]	; (8001a1c <HAL_CAN_MspInit+0x178>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	2b01      	cmp	r3, #1
 800198c:	d10b      	bne.n	80019a6 <HAL_CAN_MspInit+0x102>
      __HAL_RCC_CAN1_CLK_ENABLE();
 800198e:	4b24      	ldr	r3, [pc, #144]	; (8001a20 <HAL_CAN_MspInit+0x17c>)
 8001990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001992:	4a23      	ldr	r2, [pc, #140]	; (8001a20 <HAL_CAN_MspInit+0x17c>)
 8001994:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001998:	6413      	str	r3, [r2, #64]	; 0x40
 800199a:	4b21      	ldr	r3, [pc, #132]	; (8001a20 <HAL_CAN_MspInit+0x17c>)
 800199c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800199e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019a2:	60fb      	str	r3, [r7, #12]
 80019a4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019a6:	4b1e      	ldr	r3, [pc, #120]	; (8001a20 <HAL_CAN_MspInit+0x17c>)
 80019a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019aa:	4a1d      	ldr	r2, [pc, #116]	; (8001a20 <HAL_CAN_MspInit+0x17c>)
 80019ac:	f043 0302 	orr.w	r3, r3, #2
 80019b0:	6313      	str	r3, [r2, #48]	; 0x30
 80019b2:	4b1b      	ldr	r3, [pc, #108]	; (8001a20 <HAL_CAN_MspInit+0x17c>)
 80019b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b6:	f003 0302 	and.w	r3, r3, #2
 80019ba:	60bb      	str	r3, [r7, #8]
 80019bc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_6;
 80019be:	f44f 5382 	mov.w	r3, #4160	; 0x1040
 80019c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c4:	2302      	movs	r3, #2
 80019c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c8:	2300      	movs	r3, #0
 80019ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019cc:	2303      	movs	r3, #3
 80019ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 80019d0:	2309      	movs	r3, #9
 80019d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019d4:	f107 031c 	add.w	r3, r7, #28
 80019d8:	4619      	mov	r1, r3
 80019da:	4814      	ldr	r0, [pc, #80]	; (8001a2c <HAL_CAN_MspInit+0x188>)
 80019dc:	f002 f9de 	bl	8003d9c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_TX_IRQn, 0, 0);
 80019e0:	2200      	movs	r2, #0
 80019e2:	2100      	movs	r1, #0
 80019e4:	203f      	movs	r0, #63	; 0x3f
 80019e6:	f001 fb00 	bl	8002fea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_TX_IRQn);
 80019ea:	203f      	movs	r0, #63	; 0x3f
 80019ec:	f001 fb19 	bl	8003022 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 80019f0:	2200      	movs	r2, #0
 80019f2:	2100      	movs	r1, #0
 80019f4:	2040      	movs	r0, #64	; 0x40
 80019f6:	f001 faf8 	bl	8002fea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 80019fa:	2040      	movs	r0, #64	; 0x40
 80019fc:	f001 fb11 	bl	8003022 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 0, 0);
 8001a00:	2200      	movs	r2, #0
 8001a02:	2100      	movs	r1, #0
 8001a04:	2041      	movs	r0, #65	; 0x41
 8001a06:	f001 faf0 	bl	8002fea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 8001a0a:	2041      	movs	r0, #65	; 0x41
 8001a0c:	f001 fb09 	bl	8003022 <HAL_NVIC_EnableIRQ>
}
 8001a10:	bf00      	nop
 8001a12:	3730      	adds	r7, #48	; 0x30
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	40006400 	.word	0x40006400
 8001a1c:	20004d28 	.word	0x20004d28
 8001a20:	40023800 	.word	0x40023800
 8001a24:	40020c00 	.word	0x40020c00
 8001a28:	40006800 	.word	0x40006800
 8001a2c:	40020400 	.word	0x40020400

08001a30 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b08e      	sub	sp, #56	; 0x38
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	601a      	str	r2, [r3, #0]
 8001a40:	605a      	str	r2, [r3, #4]
 8001a42:	609a      	str	r2, [r3, #8]
 8001a44:	60da      	str	r2, [r3, #12]
 8001a46:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a4e      	ldr	r2, [pc, #312]	; (8001b88 <HAL_ETH_MspInit+0x158>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	f040 8096 	bne.w	8001b80 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001a54:	4b4d      	ldr	r3, [pc, #308]	; (8001b8c <HAL_ETH_MspInit+0x15c>)
 8001a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a58:	4a4c      	ldr	r2, [pc, #304]	; (8001b8c <HAL_ETH_MspInit+0x15c>)
 8001a5a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a5e:	6313      	str	r3, [r2, #48]	; 0x30
 8001a60:	4b4a      	ldr	r3, [pc, #296]	; (8001b8c <HAL_ETH_MspInit+0x15c>)
 8001a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a68:	623b      	str	r3, [r7, #32]
 8001a6a:	6a3b      	ldr	r3, [r7, #32]
 8001a6c:	4b47      	ldr	r3, [pc, #284]	; (8001b8c <HAL_ETH_MspInit+0x15c>)
 8001a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a70:	4a46      	ldr	r2, [pc, #280]	; (8001b8c <HAL_ETH_MspInit+0x15c>)
 8001a72:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001a76:	6313      	str	r3, [r2, #48]	; 0x30
 8001a78:	4b44      	ldr	r3, [pc, #272]	; (8001b8c <HAL_ETH_MspInit+0x15c>)
 8001a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001a80:	61fb      	str	r3, [r7, #28]
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	4b41      	ldr	r3, [pc, #260]	; (8001b8c <HAL_ETH_MspInit+0x15c>)
 8001a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a88:	4a40      	ldr	r2, [pc, #256]	; (8001b8c <HAL_ETH_MspInit+0x15c>)
 8001a8a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001a8e:	6313      	str	r3, [r2, #48]	; 0x30
 8001a90:	4b3e      	ldr	r3, [pc, #248]	; (8001b8c <HAL_ETH_MspInit+0x15c>)
 8001a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001a98:	61bb      	str	r3, [r7, #24]
 8001a9a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a9c:	4b3b      	ldr	r3, [pc, #236]	; (8001b8c <HAL_ETH_MspInit+0x15c>)
 8001a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa0:	4a3a      	ldr	r2, [pc, #232]	; (8001b8c <HAL_ETH_MspInit+0x15c>)
 8001aa2:	f043 0304 	orr.w	r3, r3, #4
 8001aa6:	6313      	str	r3, [r2, #48]	; 0x30
 8001aa8:	4b38      	ldr	r3, [pc, #224]	; (8001b8c <HAL_ETH_MspInit+0x15c>)
 8001aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aac:	f003 0304 	and.w	r3, r3, #4
 8001ab0:	617b      	str	r3, [r7, #20]
 8001ab2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ab4:	4b35      	ldr	r3, [pc, #212]	; (8001b8c <HAL_ETH_MspInit+0x15c>)
 8001ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab8:	4a34      	ldr	r2, [pc, #208]	; (8001b8c <HAL_ETH_MspInit+0x15c>)
 8001aba:	f043 0301 	orr.w	r3, r3, #1
 8001abe:	6313      	str	r3, [r2, #48]	; 0x30
 8001ac0:	4b32      	ldr	r3, [pc, #200]	; (8001b8c <HAL_ETH_MspInit+0x15c>)
 8001ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac4:	f003 0301 	and.w	r3, r3, #1
 8001ac8:	613b      	str	r3, [r7, #16]
 8001aca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001acc:	4b2f      	ldr	r3, [pc, #188]	; (8001b8c <HAL_ETH_MspInit+0x15c>)
 8001ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad0:	4a2e      	ldr	r2, [pc, #184]	; (8001b8c <HAL_ETH_MspInit+0x15c>)
 8001ad2:	f043 0302 	orr.w	r3, r3, #2
 8001ad6:	6313      	str	r3, [r2, #48]	; 0x30
 8001ad8:	4b2c      	ldr	r3, [pc, #176]	; (8001b8c <HAL_ETH_MspInit+0x15c>)
 8001ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001adc:	f003 0302 	and.w	r3, r3, #2
 8001ae0:	60fb      	str	r3, [r7, #12]
 8001ae2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001ae4:	4b29      	ldr	r3, [pc, #164]	; (8001b8c <HAL_ETH_MspInit+0x15c>)
 8001ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae8:	4a28      	ldr	r2, [pc, #160]	; (8001b8c <HAL_ETH_MspInit+0x15c>)
 8001aea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001aee:	6313      	str	r3, [r2, #48]	; 0x30
 8001af0:	4b26      	ldr	r3, [pc, #152]	; (8001b8c <HAL_ETH_MspInit+0x15c>)
 8001af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001af8:	60bb      	str	r3, [r7, #8]
 8001afa:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001afc:	2332      	movs	r3, #50	; 0x32
 8001afe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b00:	2302      	movs	r3, #2
 8001b02:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b04:	2300      	movs	r3, #0
 8001b06:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b08:	2303      	movs	r3, #3
 8001b0a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001b0c:	230b      	movs	r3, #11
 8001b0e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b14:	4619      	mov	r1, r3
 8001b16:	481e      	ldr	r0, [pc, #120]	; (8001b90 <HAL_ETH_MspInit+0x160>)
 8001b18:	f002 f940 	bl	8003d9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001b1c:	2386      	movs	r3, #134	; 0x86
 8001b1e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b20:	2302      	movs	r3, #2
 8001b22:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b24:	2300      	movs	r3, #0
 8001b26:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b28:	2303      	movs	r3, #3
 8001b2a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001b2c:	230b      	movs	r3, #11
 8001b2e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b34:	4619      	mov	r1, r3
 8001b36:	4817      	ldr	r0, [pc, #92]	; (8001b94 <HAL_ETH_MspInit+0x164>)
 8001b38:	f002 f930 	bl	8003d9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001b3c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b40:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b42:	2302      	movs	r3, #2
 8001b44:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b46:	2300      	movs	r3, #0
 8001b48:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001b4e:	230b      	movs	r3, #11
 8001b50:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001b52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b56:	4619      	mov	r1, r3
 8001b58:	480f      	ldr	r0, [pc, #60]	; (8001b98 <HAL_ETH_MspInit+0x168>)
 8001b5a:	f002 f91f 	bl	8003d9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001b5e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001b62:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b64:	2302      	movs	r3, #2
 8001b66:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b6c:	2303      	movs	r3, #3
 8001b6e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001b70:	230b      	movs	r3, #11
 8001b72:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b78:	4619      	mov	r1, r3
 8001b7a:	4808      	ldr	r0, [pc, #32]	; (8001b9c <HAL_ETH_MspInit+0x16c>)
 8001b7c:	f002 f90e 	bl	8003d9c <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001b80:	bf00      	nop
 8001b82:	3738      	adds	r7, #56	; 0x38
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	40028000 	.word	0x40028000
 8001b8c:	40023800 	.word	0x40023800
 8001b90:	40020800 	.word	0x40020800
 8001b94:	40020000 	.word	0x40020000
 8001b98:	40020400 	.word	0x40020400
 8001b9c:	40021800 	.word	0x40021800

08001ba0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b0ae      	sub	sp, #184	; 0xb8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ba8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001bac:	2200      	movs	r2, #0
 8001bae:	601a      	str	r2, [r3, #0]
 8001bb0:	605a      	str	r2, [r3, #4]
 8001bb2:	609a      	str	r2, [r3, #8]
 8001bb4:	60da      	str	r2, [r3, #12]
 8001bb6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001bb8:	f107 0314 	add.w	r3, r7, #20
 8001bbc:	2290      	movs	r2, #144	; 0x90
 8001bbe:	2100      	movs	r1, #0
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f005 f92f 	bl	8006e24 <memset>
  if(huart->Instance==USART3)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a3d      	ldr	r2, [pc, #244]	; (8001cc0 <HAL_UART_MspInit+0x120>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d172      	bne.n	8001cb6 <HAL_UART_MspInit+0x116>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001bd0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001bd4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001bda:	f107 0314 	add.w	r3, r7, #20
 8001bde:	4618      	mov	r0, r3
 8001be0:	f003 f938 	bl	8004e54 <HAL_RCCEx_PeriphCLKConfig>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d001      	beq.n	8001bee <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001bea:	f7ff fe31 	bl	8001850 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001bee:	4b35      	ldr	r3, [pc, #212]	; (8001cc4 <HAL_UART_MspInit+0x124>)
 8001bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf2:	4a34      	ldr	r2, [pc, #208]	; (8001cc4 <HAL_UART_MspInit+0x124>)
 8001bf4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bf8:	6413      	str	r3, [r2, #64]	; 0x40
 8001bfa:	4b32      	ldr	r3, [pc, #200]	; (8001cc4 <HAL_UART_MspInit+0x124>)
 8001bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c02:	613b      	str	r3, [r7, #16]
 8001c04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c06:	4b2f      	ldr	r3, [pc, #188]	; (8001cc4 <HAL_UART_MspInit+0x124>)
 8001c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0a:	4a2e      	ldr	r2, [pc, #184]	; (8001cc4 <HAL_UART_MspInit+0x124>)
 8001c0c:	f043 0308 	orr.w	r3, r3, #8
 8001c10:	6313      	str	r3, [r2, #48]	; 0x30
 8001c12:	4b2c      	ldr	r3, [pc, #176]	; (8001cc4 <HAL_UART_MspInit+0x124>)
 8001c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c16:	f003 0308 	and.w	r3, r3, #8
 8001c1a:	60fb      	str	r3, [r7, #12]
 8001c1c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001c1e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001c22:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c26:	2302      	movs	r3, #2
 8001c28:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c32:	2303      	movs	r3, #3
 8001c34:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001c38:	2307      	movs	r3, #7
 8001c3a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c3e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001c42:	4619      	mov	r1, r3
 8001c44:	4820      	ldr	r0, [pc, #128]	; (8001cc8 <HAL_UART_MspInit+0x128>)
 8001c46:	f002 f8a9 	bl	8003d9c <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8001c4a:	4b20      	ldr	r3, [pc, #128]	; (8001ccc <HAL_UART_MspInit+0x12c>)
 8001c4c:	4a20      	ldr	r2, [pc, #128]	; (8001cd0 <HAL_UART_MspInit+0x130>)
 8001c4e:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8001c50:	4b1e      	ldr	r3, [pc, #120]	; (8001ccc <HAL_UART_MspInit+0x12c>)
 8001c52:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001c56:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001c58:	4b1c      	ldr	r3, [pc, #112]	; (8001ccc <HAL_UART_MspInit+0x12c>)
 8001c5a:	2240      	movs	r2, #64	; 0x40
 8001c5c:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c5e:	4b1b      	ldr	r3, [pc, #108]	; (8001ccc <HAL_UART_MspInit+0x12c>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001c64:	4b19      	ldr	r3, [pc, #100]	; (8001ccc <HAL_UART_MspInit+0x12c>)
 8001c66:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c6a:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c6c:	4b17      	ldr	r3, [pc, #92]	; (8001ccc <HAL_UART_MspInit+0x12c>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c72:	4b16      	ldr	r3, [pc, #88]	; (8001ccc <HAL_UART_MspInit+0x12c>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001c78:	4b14      	ldr	r3, [pc, #80]	; (8001ccc <HAL_UART_MspInit+0x12c>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001c7e:	4b13      	ldr	r3, [pc, #76]	; (8001ccc <HAL_UART_MspInit+0x12c>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c84:	4b11      	ldr	r3, [pc, #68]	; (8001ccc <HAL_UART_MspInit+0x12c>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001c8a:	4810      	ldr	r0, [pc, #64]	; (8001ccc <HAL_UART_MspInit+0x12c>)
 8001c8c:	f001 f9e4 	bl	8003058 <HAL_DMA_Init>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d001      	beq.n	8001c9a <HAL_UART_MspInit+0xfa>
    {
      Error_Handler();
 8001c96:	f7ff fddb 	bl	8001850 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	4a0b      	ldr	r2, [pc, #44]	; (8001ccc <HAL_UART_MspInit+0x12c>)
 8001c9e:	671a      	str	r2, [r3, #112]	; 0x70
 8001ca0:	4a0a      	ldr	r2, [pc, #40]	; (8001ccc <HAL_UART_MspInit+0x12c>)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	2100      	movs	r1, #0
 8001caa:	2027      	movs	r0, #39	; 0x27
 8001cac:	f001 f99d 	bl	8002fea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001cb0:	2027      	movs	r0, #39	; 0x27
 8001cb2:	f001 f9b6 	bl	8003022 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001cb6:	bf00      	nop
 8001cb8:	37b8      	adds	r7, #184	; 0xb8
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	40004800 	.word	0x40004800
 8001cc4:	40023800 	.word	0x40023800
 8001cc8:	40020c00 	.word	0x40020c00
 8001ccc:	200044d8 	.word	0x200044d8
 8001cd0:	40026058 	.word	0x40026058

08001cd4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b0ae      	sub	sp, #184	; 0xb8
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cdc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	601a      	str	r2, [r3, #0]
 8001ce4:	605a      	str	r2, [r3, #4]
 8001ce6:	609a      	str	r2, [r3, #8]
 8001ce8:	60da      	str	r2, [r3, #12]
 8001cea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001cec:	f107 0314 	add.w	r3, r7, #20
 8001cf0:	2290      	movs	r2, #144	; 0x90
 8001cf2:	2100      	movs	r1, #0
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f005 f895 	bl	8006e24 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d02:	d159      	bne.n	8001db8 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001d04:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001d08:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d10:	f107 0314 	add.w	r3, r7, #20
 8001d14:	4618      	mov	r0, r3
 8001d16:	f003 f89d 	bl	8004e54 <HAL_RCCEx_PeriphCLKConfig>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d001      	beq.n	8001d24 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001d20:	f7ff fd96 	bl	8001850 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d24:	4b26      	ldr	r3, [pc, #152]	; (8001dc0 <HAL_PCD_MspInit+0xec>)
 8001d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d28:	4a25      	ldr	r2, [pc, #148]	; (8001dc0 <HAL_PCD_MspInit+0xec>)
 8001d2a:	f043 0301 	orr.w	r3, r3, #1
 8001d2e:	6313      	str	r3, [r2, #48]	; 0x30
 8001d30:	4b23      	ldr	r3, [pc, #140]	; (8001dc0 <HAL_PCD_MspInit+0xec>)
 8001d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d34:	f003 0301 	and.w	r3, r3, #1
 8001d38:	613b      	str	r3, [r7, #16]
 8001d3a:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001d3c:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001d40:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d44:	2302      	movs	r3, #2
 8001d46:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d50:	2303      	movs	r3, #3
 8001d52:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001d56:	230a      	movs	r3, #10
 8001d58:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d5c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001d60:	4619      	mov	r1, r3
 8001d62:	4818      	ldr	r0, [pc, #96]	; (8001dc4 <HAL_PCD_MspInit+0xf0>)
 8001d64:	f002 f81a 	bl	8003d9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001d68:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d6c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d70:	2300      	movs	r3, #0
 8001d72:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d76:	2300      	movs	r3, #0
 8001d78:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001d7c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001d80:	4619      	mov	r1, r3
 8001d82:	4810      	ldr	r0, [pc, #64]	; (8001dc4 <HAL_PCD_MspInit+0xf0>)
 8001d84:	f002 f80a 	bl	8003d9c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001d88:	4b0d      	ldr	r3, [pc, #52]	; (8001dc0 <HAL_PCD_MspInit+0xec>)
 8001d8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d8c:	4a0c      	ldr	r2, [pc, #48]	; (8001dc0 <HAL_PCD_MspInit+0xec>)
 8001d8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d92:	6353      	str	r3, [r2, #52]	; 0x34
 8001d94:	4b0a      	ldr	r3, [pc, #40]	; (8001dc0 <HAL_PCD_MspInit+0xec>)
 8001d96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d9c:	60fb      	str	r3, [r7, #12]
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	4b07      	ldr	r3, [pc, #28]	; (8001dc0 <HAL_PCD_MspInit+0xec>)
 8001da2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001da4:	4a06      	ldr	r2, [pc, #24]	; (8001dc0 <HAL_PCD_MspInit+0xec>)
 8001da6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001daa:	6453      	str	r3, [r2, #68]	; 0x44
 8001dac:	4b04      	ldr	r3, [pc, #16]	; (8001dc0 <HAL_PCD_MspInit+0xec>)
 8001dae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001db0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001db4:	60bb      	str	r3, [r7, #8]
 8001db6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001db8:	bf00      	nop
 8001dba:	37b8      	adds	r7, #184	; 0xb8
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	40023800 	.word	0x40023800
 8001dc4:	40020000 	.word	0x40020000

08001dc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001dcc:	e7fe      	b.n	8001dcc <NMI_Handler+0x4>

08001dce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dce:	b480      	push	{r7}
 8001dd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dd2:	e7fe      	b.n	8001dd2 <HardFault_Handler+0x4>

08001dd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001dd8:	e7fe      	b.n	8001dd8 <MemManage_Handler+0x4>

08001dda <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dda:	b480      	push	{r7}
 8001ddc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dde:	e7fe      	b.n	8001dde <BusFault_Handler+0x4>

08001de0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001de4:	e7fe      	b.n	8001de4 <UsageFault_Handler+0x4>

08001de6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001de6:	b480      	push	{r7}
 8001de8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001dea:	bf00      	nop
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr

08001df4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001df8:	bf00      	nop
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr

08001e02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e02:	b480      	push	{r7}
 8001e04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e06:	bf00      	nop
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr

08001e10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e14:	f000 f96e 	bl	80020f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e18:	bf00      	nop
 8001e1a:	bd80      	pop	{r7, pc}

08001e1c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001e20:	4802      	ldr	r0, [pc, #8]	; (8001e2c <DMA1_Stream3_IRQHandler+0x10>)
 8001e22:	f001 fa59 	bl	80032d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001e26:	bf00      	nop
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	200044d8 	.word	0x200044d8

08001e30 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001e34:	4802      	ldr	r0, [pc, #8]	; (8001e40 <CAN1_TX_IRQHandler+0x10>)
 8001e36:	f000 fe0a 	bl	8002a4e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8001e3a:	bf00      	nop
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	20004350 	.word	0x20004350

08001e44 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001e48:	4802      	ldr	r0, [pc, #8]	; (8001e54 <CAN1_RX0_IRQHandler+0x10>)
 8001e4a:	f000 fe00 	bl	8002a4e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001e4e:	bf00      	nop
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	20004350 	.word	0x20004350

08001e58 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001e5c:	4802      	ldr	r0, [pc, #8]	; (8001e68 <CAN1_RX1_IRQHandler+0x10>)
 8001e5e:	f000 fdf6 	bl	8002a4e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8001e62:	bf00      	nop
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	20004350 	.word	0x20004350

08001e6c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001e70:	4802      	ldr	r0, [pc, #8]	; (8001e7c <USART3_IRQHandler+0x10>)
 8001e72:	f003 fce9 	bl	8005848 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001e76:	bf00      	nop
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	20004450 	.word	0x20004450

08001e80 <CAN2_TX_IRQHandler>:

/**
  * @brief This function handles CAN2 TX interrupts.
  */
void CAN2_TX_IRQHandler(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_TX_IRQn 0 */

  /* USER CODE END CAN2_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8001e84:	4802      	ldr	r0, [pc, #8]	; (8001e90 <CAN2_TX_IRQHandler+0x10>)
 8001e86:	f000 fde2 	bl	8002a4e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_TX_IRQn 1 */

  /* USER CODE END CAN2_TX_IRQn 1 */
}
 8001e8a:	bf00      	nop
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	20004378 	.word	0x20004378

08001e94 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8001e98:	4802      	ldr	r0, [pc, #8]	; (8001ea4 <CAN2_RX0_IRQHandler+0x10>)
 8001e9a:	f000 fdd8 	bl	8002a4e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8001e9e:	bf00      	nop
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	20004378 	.word	0x20004378

08001ea8 <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8001eac:	4802      	ldr	r0, [pc, #8]	; (8001eb8 <CAN2_RX1_IRQHandler+0x10>)
 8001eae:	f000 fdce 	bl	8002a4e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 8001eb2:	bf00      	nop
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	20004378 	.word	0x20004378

08001ebc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b086      	sub	sp, #24
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	60f8      	str	r0, [r7, #12]
 8001ec4:	60b9      	str	r1, [r7, #8]
 8001ec6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ec8:	2300      	movs	r3, #0
 8001eca:	617b      	str	r3, [r7, #20]
 8001ecc:	e00a      	b.n	8001ee4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001ece:	f3af 8000 	nop.w
 8001ed2:	4601      	mov	r1, r0
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	1c5a      	adds	r2, r3, #1
 8001ed8:	60ba      	str	r2, [r7, #8]
 8001eda:	b2ca      	uxtb	r2, r1
 8001edc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	3301      	adds	r3, #1
 8001ee2:	617b      	str	r3, [r7, #20]
 8001ee4:	697a      	ldr	r2, [r7, #20]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	dbf0      	blt.n	8001ece <_read+0x12>
  }

  return len;
 8001eec:	687b      	ldr	r3, [r7, #4]
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3718      	adds	r7, #24
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}

08001ef6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ef6:	b580      	push	{r7, lr}
 8001ef8:	b086      	sub	sp, #24
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	60f8      	str	r0, [r7, #12]
 8001efe:	60b9      	str	r1, [r7, #8]
 8001f00:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f02:	2300      	movs	r3, #0
 8001f04:	617b      	str	r3, [r7, #20]
 8001f06:	e009      	b.n	8001f1c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	1c5a      	adds	r2, r3, #1
 8001f0c:	60ba      	str	r2, [r7, #8]
 8001f0e:	781b      	ldrb	r3, [r3, #0]
 8001f10:	4618      	mov	r0, r3
 8001f12:	f7ff f913 	bl	800113c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	3301      	adds	r3, #1
 8001f1a:	617b      	str	r3, [r7, #20]
 8001f1c:	697a      	ldr	r2, [r7, #20]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	429a      	cmp	r2, r3
 8001f22:	dbf1      	blt.n	8001f08 <_write+0x12>
  }
  return len;
 8001f24:	687b      	ldr	r3, [r7, #4]
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	3718      	adds	r7, #24
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}

08001f2e <_close>:

int _close(int file)
{
 8001f2e:	b480      	push	{r7}
 8001f30:	b083      	sub	sp, #12
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001f36:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	370c      	adds	r7, #12
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr

08001f46 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f46:	b480      	push	{r7}
 8001f48:	b083      	sub	sp, #12
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	6078      	str	r0, [r7, #4]
 8001f4e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f56:	605a      	str	r2, [r3, #4]
  return 0;
 8001f58:	2300      	movs	r3, #0
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	370c      	adds	r7, #12
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr

08001f66 <_isatty>:

int _isatty(int file)
{
 8001f66:	b480      	push	{r7}
 8001f68:	b083      	sub	sp, #12
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001f6e:	2301      	movs	r3, #1
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	370c      	adds	r7, #12
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr

08001f7c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b085      	sub	sp, #20
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	60f8      	str	r0, [r7, #12]
 8001f84:	60b9      	str	r1, [r7, #8]
 8001f86:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001f88:	2300      	movs	r3, #0
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	3714      	adds	r7, #20
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr
	...

08001f98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b086      	sub	sp, #24
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fa0:	4a14      	ldr	r2, [pc, #80]	; (8001ff4 <_sbrk+0x5c>)
 8001fa2:	4b15      	ldr	r3, [pc, #84]	; (8001ff8 <_sbrk+0x60>)
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fac:	4b13      	ldr	r3, [pc, #76]	; (8001ffc <_sbrk+0x64>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d102      	bne.n	8001fba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fb4:	4b11      	ldr	r3, [pc, #68]	; (8001ffc <_sbrk+0x64>)
 8001fb6:	4a12      	ldr	r2, [pc, #72]	; (8002000 <_sbrk+0x68>)
 8001fb8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fba:	4b10      	ldr	r3, [pc, #64]	; (8001ffc <_sbrk+0x64>)
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	4413      	add	r3, r2
 8001fc2:	693a      	ldr	r2, [r7, #16]
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d207      	bcs.n	8001fd8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fc8:	f004 ff02 	bl	8006dd0 <__errno>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	220c      	movs	r2, #12
 8001fd0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001fd2:	f04f 33ff 	mov.w	r3, #4294967295
 8001fd6:	e009      	b.n	8001fec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fd8:	4b08      	ldr	r3, [pc, #32]	; (8001ffc <_sbrk+0x64>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fde:	4b07      	ldr	r3, [pc, #28]	; (8001ffc <_sbrk+0x64>)
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4413      	add	r3, r2
 8001fe6:	4a05      	ldr	r2, [pc, #20]	; (8001ffc <_sbrk+0x64>)
 8001fe8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001fea:	68fb      	ldr	r3, [r7, #12]
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	3718      	adds	r7, #24
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	20080000 	.word	0x20080000
 8001ff8:	00000400 	.word	0x00000400
 8001ffc:	20004d2c 	.word	0x20004d2c
 8002000:	20004d48 	.word	0x20004d48

08002004 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002008:	4b06      	ldr	r3, [pc, #24]	; (8002024 <SystemInit+0x20>)
 800200a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800200e:	4a05      	ldr	r2, [pc, #20]	; (8002024 <SystemInit+0x20>)
 8002010:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002014:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002018:	bf00      	nop
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr
 8002022:	bf00      	nop
 8002024:	e000ed00 	.word	0xe000ed00

08002028 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002028:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002060 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800202c:	480d      	ldr	r0, [pc, #52]	; (8002064 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800202e:	490e      	ldr	r1, [pc, #56]	; (8002068 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002030:	4a0e      	ldr	r2, [pc, #56]	; (800206c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002032:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002034:	e002      	b.n	800203c <LoopCopyDataInit>

08002036 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002036:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002038:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800203a:	3304      	adds	r3, #4

0800203c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800203c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800203e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002040:	d3f9      	bcc.n	8002036 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002042:	4a0b      	ldr	r2, [pc, #44]	; (8002070 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002044:	4c0b      	ldr	r4, [pc, #44]	; (8002074 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002046:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002048:	e001      	b.n	800204e <LoopFillZerobss>

0800204a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800204a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800204c:	3204      	adds	r2, #4

0800204e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800204e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002050:	d3fb      	bcc.n	800204a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002052:	f7ff ffd7 	bl	8002004 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002056:	f004 fec1 	bl	8006ddc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800205a:	f7ff f8e3 	bl	8001224 <main>
  bx  lr    
 800205e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002060:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8002064:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002068:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 800206c:	080081b0 	.word	0x080081b0
  ldr r2, =_sbss
 8002070:	200001b8 	.word	0x200001b8
  ldr r4, =_ebss
 8002074:	20004d44 	.word	0x20004d44

08002078 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002078:	e7fe      	b.n	8002078 <ADC_IRQHandler>

0800207a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800207a:	b580      	push	{r7, lr}
 800207c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800207e:	2003      	movs	r0, #3
 8002080:	f000 ffa8 	bl	8002fd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002084:	2000      	movs	r0, #0
 8002086:	f000 f805 	bl	8002094 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800208a:	f7ff fbe7 	bl	800185c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800208e:	2300      	movs	r3, #0
}
 8002090:	4618      	mov	r0, r3
 8002092:	bd80      	pop	{r7, pc}

08002094 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b082      	sub	sp, #8
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800209c:	4b12      	ldr	r3, [pc, #72]	; (80020e8 <HAL_InitTick+0x54>)
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	4b12      	ldr	r3, [pc, #72]	; (80020ec <HAL_InitTick+0x58>)
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	4619      	mov	r1, r3
 80020a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80020ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80020b2:	4618      	mov	r0, r3
 80020b4:	f000 ffc3 	bl	800303e <HAL_SYSTICK_Config>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d001      	beq.n	80020c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e00e      	b.n	80020e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2b0f      	cmp	r3, #15
 80020c6:	d80a      	bhi.n	80020de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020c8:	2200      	movs	r2, #0
 80020ca:	6879      	ldr	r1, [r7, #4]
 80020cc:	f04f 30ff 	mov.w	r0, #4294967295
 80020d0:	f000 ff8b 	bl	8002fea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020d4:	4a06      	ldr	r2, [pc, #24]	; (80020f0 <HAL_InitTick+0x5c>)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020da:	2300      	movs	r3, #0
 80020dc:	e000      	b.n	80020e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	3708      	adds	r7, #8
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	20000004 	.word	0x20000004
 80020ec:	2000000c 	.word	0x2000000c
 80020f0:	20000008 	.word	0x20000008

080020f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020f4:	b480      	push	{r7}
 80020f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020f8:	4b06      	ldr	r3, [pc, #24]	; (8002114 <HAL_IncTick+0x20>)
 80020fa:	781b      	ldrb	r3, [r3, #0]
 80020fc:	461a      	mov	r2, r3
 80020fe:	4b06      	ldr	r3, [pc, #24]	; (8002118 <HAL_IncTick+0x24>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4413      	add	r3, r2
 8002104:	4a04      	ldr	r2, [pc, #16]	; (8002118 <HAL_IncTick+0x24>)
 8002106:	6013      	str	r3, [r2, #0]
}
 8002108:	bf00      	nop
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr
 8002112:	bf00      	nop
 8002114:	2000000c 	.word	0x2000000c
 8002118:	20004d30 	.word	0x20004d30

0800211c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800211c:	b480      	push	{r7}
 800211e:	af00      	add	r7, sp, #0
  return uwTick;
 8002120:	4b03      	ldr	r3, [pc, #12]	; (8002130 <HAL_GetTick+0x14>)
 8002122:	681b      	ldr	r3, [r3, #0]
}
 8002124:	4618      	mov	r0, r3
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr
 800212e:	bf00      	nop
 8002130:	20004d30 	.word	0x20004d30

08002134 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b084      	sub	sp, #16
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800213c:	f7ff ffee 	bl	800211c <HAL_GetTick>
 8002140:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	f1b3 3fff 	cmp.w	r3, #4294967295
 800214c:	d005      	beq.n	800215a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800214e:	4b0a      	ldr	r3, [pc, #40]	; (8002178 <HAL_Delay+0x44>)
 8002150:	781b      	ldrb	r3, [r3, #0]
 8002152:	461a      	mov	r2, r3
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	4413      	add	r3, r2
 8002158:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800215a:	bf00      	nop
 800215c:	f7ff ffde 	bl	800211c <HAL_GetTick>
 8002160:	4602      	mov	r2, r0
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	68fa      	ldr	r2, [r7, #12]
 8002168:	429a      	cmp	r2, r3
 800216a:	d8f7      	bhi.n	800215c <HAL_Delay+0x28>
  {
  }
}
 800216c:	bf00      	nop
 800216e:	bf00      	nop
 8002170:	3710      	adds	r7, #16
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	2000000c 	.word	0x2000000c

0800217c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b084      	sub	sp, #16
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d101      	bne.n	800218e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e0ed      	b.n	800236a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002194:	b2db      	uxtb	r3, r3
 8002196:	2b00      	cmp	r3, #0
 8002198:	d102      	bne.n	80021a0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	f7ff fb82 	bl	80018a4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f042 0201 	orr.w	r2, r2, #1
 80021ae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80021b0:	f7ff ffb4 	bl	800211c <HAL_GetTick>
 80021b4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80021b6:	e012      	b.n	80021de <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80021b8:	f7ff ffb0 	bl	800211c <HAL_GetTick>
 80021bc:	4602      	mov	r2, r0
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	2b0a      	cmp	r3, #10
 80021c4:	d90b      	bls.n	80021de <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ca:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2205      	movs	r2, #5
 80021d6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e0c5      	b.n	800236a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f003 0301 	and.w	r3, r3, #1
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d0e5      	beq.n	80021b8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f022 0202 	bic.w	r2, r2, #2
 80021fa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80021fc:	f7ff ff8e 	bl	800211c <HAL_GetTick>
 8002200:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002202:	e012      	b.n	800222a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002204:	f7ff ff8a 	bl	800211c <HAL_GetTick>
 8002208:	4602      	mov	r2, r0
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	1ad3      	subs	r3, r2, r3
 800220e:	2b0a      	cmp	r3, #10
 8002210:	d90b      	bls.n	800222a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002216:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2205      	movs	r2, #5
 8002222:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e09f      	b.n	800236a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	f003 0302 	and.w	r3, r3, #2
 8002234:	2b00      	cmp	r3, #0
 8002236:	d1e5      	bne.n	8002204 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	7e1b      	ldrb	r3, [r3, #24]
 800223c:	2b01      	cmp	r3, #1
 800223e:	d108      	bne.n	8002252 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800224e:	601a      	str	r2, [r3, #0]
 8002250:	e007      	b.n	8002262 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002260:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	7e5b      	ldrb	r3, [r3, #25]
 8002266:	2b01      	cmp	r3, #1
 8002268:	d108      	bne.n	800227c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002278:	601a      	str	r2, [r3, #0]
 800227a:	e007      	b.n	800228c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800228a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	7e9b      	ldrb	r3, [r3, #26]
 8002290:	2b01      	cmp	r3, #1
 8002292:	d108      	bne.n	80022a6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f042 0220 	orr.w	r2, r2, #32
 80022a2:	601a      	str	r2, [r3, #0]
 80022a4:	e007      	b.n	80022b6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f022 0220 	bic.w	r2, r2, #32
 80022b4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	7edb      	ldrb	r3, [r3, #27]
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	d108      	bne.n	80022d0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f022 0210 	bic.w	r2, r2, #16
 80022cc:	601a      	str	r2, [r3, #0]
 80022ce:	e007      	b.n	80022e0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f042 0210 	orr.w	r2, r2, #16
 80022de:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	7f1b      	ldrb	r3, [r3, #28]
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d108      	bne.n	80022fa <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f042 0208 	orr.w	r2, r2, #8
 80022f6:	601a      	str	r2, [r3, #0]
 80022f8:	e007      	b.n	800230a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f022 0208 	bic.w	r2, r2, #8
 8002308:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	7f5b      	ldrb	r3, [r3, #29]
 800230e:	2b01      	cmp	r3, #1
 8002310:	d108      	bne.n	8002324 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f042 0204 	orr.w	r2, r2, #4
 8002320:	601a      	str	r2, [r3, #0]
 8002322:	e007      	b.n	8002334 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f022 0204 	bic.w	r2, r2, #4
 8002332:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	689a      	ldr	r2, [r3, #8]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	431a      	orrs	r2, r3
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	691b      	ldr	r3, [r3, #16]
 8002342:	431a      	orrs	r2, r3
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	695b      	ldr	r3, [r3, #20]
 8002348:	ea42 0103 	orr.w	r1, r2, r3
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	1e5a      	subs	r2, r3, #1
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	430a      	orrs	r2, r1
 8002358:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2200      	movs	r2, #0
 800235e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2201      	movs	r2, #1
 8002364:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002368:	2300      	movs	r3, #0
}
 800236a:	4618      	mov	r0, r3
 800236c:	3710      	adds	r7, #16
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
	...

08002374 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8002374:	b480      	push	{r7}
 8002376:	b087      	sub	sp, #28
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
 800237c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	f893 3020 	ldrb.w	r3, [r3, #32]
 800238a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800238c:	7cfb      	ldrb	r3, [r7, #19]
 800238e:	2b01      	cmp	r3, #1
 8002390:	d003      	beq.n	800239a <HAL_CAN_ConfigFilter+0x26>
 8002392:	7cfb      	ldrb	r3, [r7, #19]
 8002394:	2b02      	cmp	r3, #2
 8002396:	f040 80c7 	bne.w	8002528 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a69      	ldr	r2, [pc, #420]	; (8002544 <HAL_CAN_ConfigFilter+0x1d0>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d001      	beq.n	80023a8 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 80023a4:	4b68      	ldr	r3, [pc, #416]	; (8002548 <HAL_CAN_ConfigFilter+0x1d4>)
 80023a6:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80023ae:	f043 0201 	orr.w	r2, r3, #1
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	4a63      	ldr	r2, [pc, #396]	; (8002548 <HAL_CAN_ConfigFilter+0x1d4>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d111      	bne.n	80023e4 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80023c6:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023da:	021b      	lsls	r3, r3, #8
 80023dc:	431a      	orrs	r2, r3
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	695b      	ldr	r3, [r3, #20]
 80023e8:	f003 031f 	and.w	r3, r3, #31
 80023ec:	2201      	movs	r2, #1
 80023ee:	fa02 f303 	lsl.w	r3, r2, r3
 80023f2:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	43db      	mvns	r3, r3
 80023fe:	401a      	ands	r2, r3
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	69db      	ldr	r3, [r3, #28]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d123      	bne.n	8002456 <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	43db      	mvns	r3, r3
 8002418:	401a      	ands	r2, r3
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800242c:	683a      	ldr	r2, [r7, #0]
 800242e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002430:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	3248      	adds	r2, #72	; 0x48
 8002436:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800244a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800244c:	6979      	ldr	r1, [r7, #20]
 800244e:	3348      	adds	r3, #72	; 0x48
 8002450:	00db      	lsls	r3, r3, #3
 8002452:	440b      	add	r3, r1
 8002454:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	69db      	ldr	r3, [r3, #28]
 800245a:	2b01      	cmp	r3, #1
 800245c:	d122      	bne.n	80024a4 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	431a      	orrs	r2, r3
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800247a:	683a      	ldr	r2, [r7, #0]
 800247c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800247e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	3248      	adds	r2, #72	; 0x48
 8002484:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	68db      	ldr	r3, [r3, #12]
 8002492:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002498:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800249a:	6979      	ldr	r1, [r7, #20]
 800249c:	3348      	adds	r3, #72	; 0x48
 800249e:	00db      	lsls	r3, r3, #3
 80024a0:	440b      	add	r3, r1
 80024a2:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	699b      	ldr	r3, [r3, #24]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d109      	bne.n	80024c0 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	43db      	mvns	r3, r3
 80024b6:	401a      	ands	r2, r3
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80024be:	e007      	b.n	80024d0 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	431a      	orrs	r2, r3
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	691b      	ldr	r3, [r3, #16]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d109      	bne.n	80024ec <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	43db      	mvns	r3, r3
 80024e2:	401a      	ands	r2, r3
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80024ea:	e007      	b.n	80024fc <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	431a      	orrs	r2, r3
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	6a1b      	ldr	r3, [r3, #32]
 8002500:	2b01      	cmp	r3, #1
 8002502:	d107      	bne.n	8002514 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	431a      	orrs	r2, r3
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800251a:	f023 0201 	bic.w	r2, r3, #1
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002524:	2300      	movs	r3, #0
 8002526:	e006      	b.n	8002536 <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800252c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002534:	2301      	movs	r3, #1
  }
}
 8002536:	4618      	mov	r0, r3
 8002538:	371c      	adds	r7, #28
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr
 8002542:	bf00      	nop
 8002544:	40003400 	.word	0x40003400
 8002548:	40006400 	.word	0x40006400

0800254c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b084      	sub	sp, #16
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	f893 3020 	ldrb.w	r3, [r3, #32]
 800255a:	b2db      	uxtb	r3, r3
 800255c:	2b01      	cmp	r3, #1
 800255e:	d12e      	bne.n	80025be <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2202      	movs	r2, #2
 8002564:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f022 0201 	bic.w	r2, r2, #1
 8002576:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002578:	f7ff fdd0 	bl	800211c <HAL_GetTick>
 800257c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800257e:	e012      	b.n	80025a6 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002580:	f7ff fdcc 	bl	800211c <HAL_GetTick>
 8002584:	4602      	mov	r2, r0
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	2b0a      	cmp	r3, #10
 800258c:	d90b      	bls.n	80025a6 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002592:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2205      	movs	r2, #5
 800259e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e012      	b.n	80025cc <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	f003 0301 	and.w	r3, r3, #1
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d1e5      	bne.n	8002580 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2200      	movs	r2, #0
 80025b8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80025ba:	2300      	movs	r3, #0
 80025bc:	e006      	b.n	80025cc <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
  }
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	3710      	adds	r7, #16
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}

080025d4 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b089      	sub	sp, #36	; 0x24
 80025d8:	af00      	add	r7, sp, #0
 80025da:	60f8      	str	r0, [r7, #12]
 80025dc:	60b9      	str	r1, [r7, #8]
 80025de:	607a      	str	r2, [r7, #4]
 80025e0:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025e8:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80025f2:	7ffb      	ldrb	r3, [r7, #31]
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d003      	beq.n	8002600 <HAL_CAN_AddTxMessage+0x2c>
 80025f8:	7ffb      	ldrb	r3, [r7, #31]
 80025fa:	2b02      	cmp	r3, #2
 80025fc:	f040 80ad 	bne.w	800275a <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002600:	69bb      	ldr	r3, [r7, #24]
 8002602:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002606:	2b00      	cmp	r3, #0
 8002608:	d10a      	bne.n	8002620 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800260a:	69bb      	ldr	r3, [r7, #24]
 800260c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002610:	2b00      	cmp	r3, #0
 8002612:	d105      	bne.n	8002620 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002614:	69bb      	ldr	r3, [r7, #24]
 8002616:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800261a:	2b00      	cmp	r3, #0
 800261c:	f000 8095 	beq.w	800274a <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002620:	69bb      	ldr	r3, [r7, #24]
 8002622:	0e1b      	lsrs	r3, r3, #24
 8002624:	f003 0303 	and.w	r3, r3, #3
 8002628:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800262a:	2201      	movs	r2, #1
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	409a      	lsls	r2, r3
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d10d      	bne.n	8002658 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002646:	68f9      	ldr	r1, [r7, #12]
 8002648:	6809      	ldr	r1, [r1, #0]
 800264a:	431a      	orrs	r2, r3
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	3318      	adds	r3, #24
 8002650:	011b      	lsls	r3, r3, #4
 8002652:	440b      	add	r3, r1
 8002654:	601a      	str	r2, [r3, #0]
 8002656:	e00f      	b.n	8002678 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002662:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002668:	68f9      	ldr	r1, [r7, #12]
 800266a:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800266c:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	3318      	adds	r3, #24
 8002672:	011b      	lsls	r3, r3, #4
 8002674:	440b      	add	r3, r1
 8002676:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	6819      	ldr	r1, [r3, #0]
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	691a      	ldr	r2, [r3, #16]
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	3318      	adds	r3, #24
 8002684:	011b      	lsls	r3, r3, #4
 8002686:	440b      	add	r3, r1
 8002688:	3304      	adds	r3, #4
 800268a:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	7d1b      	ldrb	r3, [r3, #20]
 8002690:	2b01      	cmp	r3, #1
 8002692:	d111      	bne.n	80026b8 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	3318      	adds	r3, #24
 800269c:	011b      	lsls	r3, r3, #4
 800269e:	4413      	add	r3, r2
 80026a0:	3304      	adds	r3, #4
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	68fa      	ldr	r2, [r7, #12]
 80026a6:	6811      	ldr	r1, [r2, #0]
 80026a8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	3318      	adds	r3, #24
 80026b0:	011b      	lsls	r3, r3, #4
 80026b2:	440b      	add	r3, r1
 80026b4:	3304      	adds	r3, #4
 80026b6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	3307      	adds	r3, #7
 80026bc:	781b      	ldrb	r3, [r3, #0]
 80026be:	061a      	lsls	r2, r3, #24
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	3306      	adds	r3, #6
 80026c4:	781b      	ldrb	r3, [r3, #0]
 80026c6:	041b      	lsls	r3, r3, #16
 80026c8:	431a      	orrs	r2, r3
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	3305      	adds	r3, #5
 80026ce:	781b      	ldrb	r3, [r3, #0]
 80026d0:	021b      	lsls	r3, r3, #8
 80026d2:	4313      	orrs	r3, r2
 80026d4:	687a      	ldr	r2, [r7, #4]
 80026d6:	3204      	adds	r2, #4
 80026d8:	7812      	ldrb	r2, [r2, #0]
 80026da:	4610      	mov	r0, r2
 80026dc:	68fa      	ldr	r2, [r7, #12]
 80026de:	6811      	ldr	r1, [r2, #0]
 80026e0:	ea43 0200 	orr.w	r2, r3, r0
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	011b      	lsls	r3, r3, #4
 80026e8:	440b      	add	r3, r1
 80026ea:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80026ee:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	3303      	adds	r3, #3
 80026f4:	781b      	ldrb	r3, [r3, #0]
 80026f6:	061a      	lsls	r2, r3, #24
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	3302      	adds	r3, #2
 80026fc:	781b      	ldrb	r3, [r3, #0]
 80026fe:	041b      	lsls	r3, r3, #16
 8002700:	431a      	orrs	r2, r3
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	3301      	adds	r3, #1
 8002706:	781b      	ldrb	r3, [r3, #0]
 8002708:	021b      	lsls	r3, r3, #8
 800270a:	4313      	orrs	r3, r2
 800270c:	687a      	ldr	r2, [r7, #4]
 800270e:	7812      	ldrb	r2, [r2, #0]
 8002710:	4610      	mov	r0, r2
 8002712:	68fa      	ldr	r2, [r7, #12]
 8002714:	6811      	ldr	r1, [r2, #0]
 8002716:	ea43 0200 	orr.w	r2, r3, r0
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	011b      	lsls	r3, r3, #4
 800271e:	440b      	add	r3, r1
 8002720:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002724:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	3318      	adds	r3, #24
 800272e:	011b      	lsls	r3, r3, #4
 8002730:	4413      	add	r3, r2
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	68fa      	ldr	r2, [r7, #12]
 8002736:	6811      	ldr	r1, [r2, #0]
 8002738:	f043 0201 	orr.w	r2, r3, #1
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	3318      	adds	r3, #24
 8002740:	011b      	lsls	r3, r3, #4
 8002742:	440b      	add	r3, r1
 8002744:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002746:	2300      	movs	r3, #0
 8002748:	e00e      	b.n	8002768 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800274e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e006      	b.n	8002768 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800275e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002766:	2301      	movs	r3, #1
  }
}
 8002768:	4618      	mov	r0, r3
 800276a:	3724      	adds	r7, #36	; 0x24
 800276c:	46bd      	mov	sp, r7
 800276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002772:	4770      	bx	lr

08002774 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 8002774:	b480      	push	{r7}
 8002776:	b085      	sub	sp, #20
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 800277c:	2300      	movs	r3, #0
 800277e:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002786:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8002788:	7afb      	ldrb	r3, [r7, #11]
 800278a:	2b01      	cmp	r3, #1
 800278c:	d002      	beq.n	8002794 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 800278e:	7afb      	ldrb	r3, [r7, #11]
 8002790:	2b02      	cmp	r3, #2
 8002792:	d11d      	bne.n	80027d0 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d002      	beq.n	80027a8 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	3301      	adds	r3, #1
 80027a6:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d002      	beq.n	80027bc <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	3301      	adds	r3, #1
 80027ba:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d002      	beq.n	80027d0 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	3301      	adds	r3, #1
 80027ce:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 80027d0:	68fb      	ldr	r3, [r7, #12]
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3714      	adds	r7, #20
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr

080027de <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80027de:	b480      	push	{r7}
 80027e0:	b087      	sub	sp, #28
 80027e2:	af00      	add	r7, sp, #0
 80027e4:	60f8      	str	r0, [r7, #12]
 80027e6:	60b9      	str	r1, [r7, #8]
 80027e8:	607a      	str	r2, [r7, #4]
 80027ea:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027f2:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80027f4:	7dfb      	ldrb	r3, [r7, #23]
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d003      	beq.n	8002802 <HAL_CAN_GetRxMessage+0x24>
 80027fa:	7dfb      	ldrb	r3, [r7, #23]
 80027fc:	2b02      	cmp	r3, #2
 80027fe:	f040 80f3 	bne.w	80029e8 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d10e      	bne.n	8002826 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	68db      	ldr	r3, [r3, #12]
 800280e:	f003 0303 	and.w	r3, r3, #3
 8002812:	2b00      	cmp	r3, #0
 8002814:	d116      	bne.n	8002844 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800281a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e0e7      	b.n	80029f6 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	691b      	ldr	r3, [r3, #16]
 800282c:	f003 0303 	and.w	r3, r3, #3
 8002830:	2b00      	cmp	r3, #0
 8002832:	d107      	bne.n	8002844 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002838:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	e0d8      	b.n	80029f6 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	331b      	adds	r3, #27
 800284c:	011b      	lsls	r3, r3, #4
 800284e:	4413      	add	r3, r2
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 0204 	and.w	r2, r3, #4
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d10c      	bne.n	800287c <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681a      	ldr	r2, [r3, #0]
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	331b      	adds	r3, #27
 800286a:	011b      	lsls	r3, r3, #4
 800286c:	4413      	add	r3, r2
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	0d5b      	lsrs	r3, r3, #21
 8002872:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	601a      	str	r2, [r3, #0]
 800287a:	e00b      	b.n	8002894 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	331b      	adds	r3, #27
 8002884:	011b      	lsls	r3, r3, #4
 8002886:	4413      	add	r3, r2
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	08db      	lsrs	r3, r3, #3
 800288c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	331b      	adds	r3, #27
 800289c:	011b      	lsls	r3, r3, #4
 800289e:	4413      	add	r3, r2
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 0202 	and.w	r2, r3, #2
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	331b      	adds	r3, #27
 80028b2:	011b      	lsls	r3, r3, #4
 80028b4:	4413      	add	r3, r2
 80028b6:	3304      	adds	r3, #4
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 020f 	and.w	r2, r3, #15
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	331b      	adds	r3, #27
 80028ca:	011b      	lsls	r3, r3, #4
 80028cc:	4413      	add	r3, r2
 80028ce:	3304      	adds	r3, #4
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	0a1b      	lsrs	r3, r3, #8
 80028d4:	b2da      	uxtb	r2, r3
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	331b      	adds	r3, #27
 80028e2:	011b      	lsls	r3, r3, #4
 80028e4:	4413      	add	r3, r2
 80028e6:	3304      	adds	r3, #4
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	0c1b      	lsrs	r3, r3, #16
 80028ec:	b29a      	uxth	r2, r3
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	011b      	lsls	r3, r3, #4
 80028fa:	4413      	add	r3, r2
 80028fc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	b2da      	uxtb	r2, r3
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	011b      	lsls	r3, r3, #4
 8002910:	4413      	add	r3, r2
 8002912:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	0a1a      	lsrs	r2, r3, #8
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	3301      	adds	r3, #1
 800291e:	b2d2      	uxtb	r2, r2
 8002920:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	011b      	lsls	r3, r3, #4
 800292a:	4413      	add	r3, r2
 800292c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	0c1a      	lsrs	r2, r3, #16
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	3302      	adds	r3, #2
 8002938:	b2d2      	uxtb	r2, r2
 800293a:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	011b      	lsls	r3, r3, #4
 8002944:	4413      	add	r3, r2
 8002946:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	0e1a      	lsrs	r2, r3, #24
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	3303      	adds	r3, #3
 8002952:	b2d2      	uxtb	r2, r2
 8002954:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	011b      	lsls	r3, r3, #4
 800295e:	4413      	add	r3, r2
 8002960:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	3304      	adds	r3, #4
 800296a:	b2d2      	uxtb	r2, r2
 800296c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	011b      	lsls	r3, r3, #4
 8002976:	4413      	add	r3, r2
 8002978:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	0a1a      	lsrs	r2, r3, #8
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	3305      	adds	r3, #5
 8002984:	b2d2      	uxtb	r2, r2
 8002986:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	011b      	lsls	r3, r3, #4
 8002990:	4413      	add	r3, r2
 8002992:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	0c1a      	lsrs	r2, r3, #16
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	3306      	adds	r3, #6
 800299e:	b2d2      	uxtb	r2, r2
 80029a0:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	011b      	lsls	r3, r3, #4
 80029aa:	4413      	add	r3, r2
 80029ac:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	0e1a      	lsrs	r2, r3, #24
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	3307      	adds	r3, #7
 80029b8:	b2d2      	uxtb	r2, r2
 80029ba:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d108      	bne.n	80029d4 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	68da      	ldr	r2, [r3, #12]
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f042 0220 	orr.w	r2, r2, #32
 80029d0:	60da      	str	r2, [r3, #12]
 80029d2:	e007      	b.n	80029e4 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	691a      	ldr	r2, [r3, #16]
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f042 0220 	orr.w	r2, r2, #32
 80029e2:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80029e4:	2300      	movs	r3, #0
 80029e6:	e006      	b.n	80029f6 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ec:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
  }
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	371c      	adds	r7, #28
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr

08002a02 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002a02:	b480      	push	{r7}
 8002a04:	b085      	sub	sp, #20
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	6078      	str	r0, [r7, #4]
 8002a0a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a12:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002a14:	7bfb      	ldrb	r3, [r7, #15]
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	d002      	beq.n	8002a20 <HAL_CAN_ActivateNotification+0x1e>
 8002a1a:	7bfb      	ldrb	r3, [r7, #15]
 8002a1c:	2b02      	cmp	r3, #2
 8002a1e:	d109      	bne.n	8002a34 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	6959      	ldr	r1, [r3, #20]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	683a      	ldr	r2, [r7, #0]
 8002a2c:	430a      	orrs	r2, r1
 8002a2e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002a30:	2300      	movs	r3, #0
 8002a32:	e006      	b.n	8002a42 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a38:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
  }
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3714      	adds	r7, #20
 8002a46:	46bd      	mov	sp, r7
 8002a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4c:	4770      	bx	lr

08002a4e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002a4e:	b580      	push	{r7, lr}
 8002a50:	b08a      	sub	sp, #40	; 0x28
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002a56:	2300      	movs	r3, #0
 8002a58:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	695b      	ldr	r3, [r3, #20]
 8002a60:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	68db      	ldr	r3, [r3, #12]
 8002a78:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	691b      	ldr	r3, [r3, #16]
 8002a80:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	699b      	ldr	r3, [r3, #24]
 8002a88:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002a8a:	6a3b      	ldr	r3, [r7, #32]
 8002a8c:	f003 0301 	and.w	r3, r3, #1
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d07c      	beq.n	8002b8e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002a94:	69bb      	ldr	r3, [r7, #24]
 8002a96:	f003 0301 	and.w	r3, r3, #1
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d023      	beq.n	8002ae6 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002aa6:	69bb      	ldr	r3, [r7, #24]
 8002aa8:	f003 0302 	and.w	r3, r3, #2
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d003      	beq.n	8002ab8 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002ab0:	6878      	ldr	r0, [r7, #4]
 8002ab2:	f7fe fb57 	bl	8001164 <HAL_CAN_TxMailbox0CompleteCallback>
 8002ab6:	e016      	b.n	8002ae6 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002ab8:	69bb      	ldr	r3, [r7, #24]
 8002aba:	f003 0304 	and.w	r3, r3, #4
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d004      	beq.n	8002acc <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002ac8:	627b      	str	r3, [r7, #36]	; 0x24
 8002aca:	e00c      	b.n	8002ae6 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002acc:	69bb      	ldr	r3, [r7, #24]
 8002ace:	f003 0308 	and.w	r3, r3, #8
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d004      	beq.n	8002ae0 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002adc:	627b      	str	r3, [r7, #36]	; 0x24
 8002ade:	e002      	b.n	8002ae6 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002ae0:	6878      	ldr	r0, [r7, #4]
 8002ae2:	f7fe fb4d 	bl	8001180 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002ae6:	69bb      	ldr	r3, [r7, #24]
 8002ae8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d024      	beq.n	8002b3a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002af8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002afa:	69bb      	ldr	r3, [r7, #24]
 8002afc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d003      	beq.n	8002b0c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002b04:	6878      	ldr	r0, [r7, #4]
 8002b06:	f7fe fb49 	bl	800119c <HAL_CAN_TxMailbox1CompleteCallback>
 8002b0a:	e016      	b.n	8002b3a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002b0c:	69bb      	ldr	r3, [r7, #24]
 8002b0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d004      	beq.n	8002b20 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b18:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002b1c:	627b      	str	r3, [r7, #36]	; 0x24
 8002b1e:	e00c      	b.n	8002b3a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002b20:	69bb      	ldr	r3, [r7, #24]
 8002b22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d004      	beq.n	8002b34 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b30:	627b      	str	r3, [r7, #36]	; 0x24
 8002b32:	e002      	b.n	8002b3a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002b34:	6878      	ldr	r0, [r7, #4]
 8002b36:	f7fe fb3f 	bl	80011b8 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002b3a:	69bb      	ldr	r3, [r7, #24]
 8002b3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d024      	beq.n	8002b8e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002b4c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002b4e:	69bb      	ldr	r3, [r7, #24]
 8002b50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d003      	beq.n	8002b60 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002b58:	6878      	ldr	r0, [r7, #4]
 8002b5a:	f7fe fb3b 	bl	80011d4 <HAL_CAN_TxMailbox2CompleteCallback>
 8002b5e:	e016      	b.n	8002b8e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002b60:	69bb      	ldr	r3, [r7, #24]
 8002b62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d004      	beq.n	8002b74 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b70:	627b      	str	r3, [r7, #36]	; 0x24
 8002b72:	e00c      	b.n	8002b8e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002b74:	69bb      	ldr	r3, [r7, #24]
 8002b76:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d004      	beq.n	8002b88 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b84:	627b      	str	r3, [r7, #36]	; 0x24
 8002b86:	e002      	b.n	8002b8e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002b88:	6878      	ldr	r0, [r7, #4]
 8002b8a:	f7fe fb31 	bl	80011f0 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002b8e:	6a3b      	ldr	r3, [r7, #32]
 8002b90:	f003 0308 	and.w	r3, r3, #8
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d00c      	beq.n	8002bb2 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	f003 0310 	and.w	r3, r3, #16
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d007      	beq.n	8002bb2 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ba8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	2210      	movs	r2, #16
 8002bb0:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002bb2:	6a3b      	ldr	r3, [r7, #32]
 8002bb4:	f003 0304 	and.w	r3, r3, #4
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d00b      	beq.n	8002bd4 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	f003 0308 	and.w	r3, r3, #8
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d006      	beq.n	8002bd4 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	2208      	movs	r2, #8
 8002bcc:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	f000 f8fe 	bl	8002dd0 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002bd4:	6a3b      	ldr	r3, [r7, #32]
 8002bd6:	f003 0302 	and.w	r3, r3, #2
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d009      	beq.n	8002bf2 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	f003 0303 	and.w	r3, r3, #3
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d002      	beq.n	8002bf2 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002bec:	6878      	ldr	r0, [r7, #4]
 8002bee:	f000 f8e5 	bl	8002dbc <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002bf2:	6a3b      	ldr	r3, [r7, #32]
 8002bf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d00c      	beq.n	8002c16 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	f003 0310 	and.w	r3, r3, #16
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d007      	beq.n	8002c16 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c08:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c0c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	2210      	movs	r2, #16
 8002c14:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002c16:	6a3b      	ldr	r3, [r7, #32]
 8002c18:	f003 0320 	and.w	r3, r3, #32
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d00b      	beq.n	8002c38 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	f003 0308 	and.w	r3, r3, #8
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d006      	beq.n	8002c38 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	2208      	movs	r2, #8
 8002c30:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	f000 f8d6 	bl	8002de4 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002c38:	6a3b      	ldr	r3, [r7, #32]
 8002c3a:	f003 0310 	and.w	r3, r3, #16
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d009      	beq.n	8002c56 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	691b      	ldr	r3, [r3, #16]
 8002c48:	f003 0303 	and.w	r3, r3, #3
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d002      	beq.n	8002c56 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002c50:	6878      	ldr	r0, [r7, #4]
 8002c52:	f7fe fadb 	bl	800120c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002c56:	6a3b      	ldr	r3, [r7, #32]
 8002c58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d00b      	beq.n	8002c78 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002c60:	69fb      	ldr	r3, [r7, #28]
 8002c62:	f003 0310 	and.w	r3, r3, #16
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d006      	beq.n	8002c78 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	2210      	movs	r2, #16
 8002c70:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	f000 f8c0 	bl	8002df8 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002c78:	6a3b      	ldr	r3, [r7, #32]
 8002c7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d00b      	beq.n	8002c9a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002c82:	69fb      	ldr	r3, [r7, #28]
 8002c84:	f003 0308 	and.w	r3, r3, #8
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d006      	beq.n	8002c9a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	2208      	movs	r2, #8
 8002c92:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002c94:	6878      	ldr	r0, [r7, #4]
 8002c96:	f000 f8b9 	bl	8002e0c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002c9a:	6a3b      	ldr	r3, [r7, #32]
 8002c9c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d07b      	beq.n	8002d9c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002ca4:	69fb      	ldr	r3, [r7, #28]
 8002ca6:	f003 0304 	and.w	r3, r3, #4
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d072      	beq.n	8002d94 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002cae:	6a3b      	ldr	r3, [r7, #32]
 8002cb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d008      	beq.n	8002cca <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d003      	beq.n	8002cca <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc4:	f043 0301 	orr.w	r3, r3, #1
 8002cc8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002cca:	6a3b      	ldr	r3, [r7, #32]
 8002ccc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d008      	beq.n	8002ce6 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d003      	beq.n	8002ce6 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce0:	f043 0302 	orr.w	r3, r3, #2
 8002ce4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002ce6:	6a3b      	ldr	r3, [r7, #32]
 8002ce8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d008      	beq.n	8002d02 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d003      	beq.n	8002d02 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cfc:	f043 0304 	orr.w	r3, r3, #4
 8002d00:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002d02:	6a3b      	ldr	r3, [r7, #32]
 8002d04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d043      	beq.n	8002d94 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d03e      	beq.n	8002d94 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002d1c:	2b60      	cmp	r3, #96	; 0x60
 8002d1e:	d02b      	beq.n	8002d78 <HAL_CAN_IRQHandler+0x32a>
 8002d20:	2b60      	cmp	r3, #96	; 0x60
 8002d22:	d82e      	bhi.n	8002d82 <HAL_CAN_IRQHandler+0x334>
 8002d24:	2b50      	cmp	r3, #80	; 0x50
 8002d26:	d022      	beq.n	8002d6e <HAL_CAN_IRQHandler+0x320>
 8002d28:	2b50      	cmp	r3, #80	; 0x50
 8002d2a:	d82a      	bhi.n	8002d82 <HAL_CAN_IRQHandler+0x334>
 8002d2c:	2b40      	cmp	r3, #64	; 0x40
 8002d2e:	d019      	beq.n	8002d64 <HAL_CAN_IRQHandler+0x316>
 8002d30:	2b40      	cmp	r3, #64	; 0x40
 8002d32:	d826      	bhi.n	8002d82 <HAL_CAN_IRQHandler+0x334>
 8002d34:	2b30      	cmp	r3, #48	; 0x30
 8002d36:	d010      	beq.n	8002d5a <HAL_CAN_IRQHandler+0x30c>
 8002d38:	2b30      	cmp	r3, #48	; 0x30
 8002d3a:	d822      	bhi.n	8002d82 <HAL_CAN_IRQHandler+0x334>
 8002d3c:	2b10      	cmp	r3, #16
 8002d3e:	d002      	beq.n	8002d46 <HAL_CAN_IRQHandler+0x2f8>
 8002d40:	2b20      	cmp	r3, #32
 8002d42:	d005      	beq.n	8002d50 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002d44:	e01d      	b.n	8002d82 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d48:	f043 0308 	orr.w	r3, r3, #8
 8002d4c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002d4e:	e019      	b.n	8002d84 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d52:	f043 0310 	orr.w	r3, r3, #16
 8002d56:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002d58:	e014      	b.n	8002d84 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d5c:	f043 0320 	orr.w	r3, r3, #32
 8002d60:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002d62:	e00f      	b.n	8002d84 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d6a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002d6c:	e00a      	b.n	8002d84 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d74:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002d76:	e005      	b.n	8002d84 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d7e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002d80:	e000      	b.n	8002d84 <HAL_CAN_IRQHandler+0x336>
            break;
 8002d82:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	699a      	ldr	r2, [r3, #24]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002d92:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	2204      	movs	r2, #4
 8002d9a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d008      	beq.n	8002db4 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da8:	431a      	orrs	r2, r3
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f000 f836 	bl	8002e20 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002db4:	bf00      	nop
 8002db6:	3728      	adds	r7, #40	; 0x28
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}

08002dbc <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b083      	sub	sp, #12
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8002dc4:	bf00      	nop
 8002dc6:	370c      	adds	r7, #12
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dce:	4770      	bx	lr

08002dd0 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b083      	sub	sp, #12
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002dd8:	bf00      	nop
 8002dda:	370c      	adds	r7, #12
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de2:	4770      	bx	lr

08002de4 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b083      	sub	sp, #12
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002dec:	bf00      	nop
 8002dee:	370c      	adds	r7, #12
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr

08002df8 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b083      	sub	sp, #12
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002e00:	bf00      	nop
 8002e02:	370c      	adds	r7, #12
 8002e04:	46bd      	mov	sp, r7
 8002e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0a:	4770      	bx	lr

08002e0c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b083      	sub	sp, #12
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002e14:	bf00      	nop
 8002e16:	370c      	adds	r7, #12
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr

08002e20 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b083      	sub	sp, #12
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002e28:	bf00      	nop
 8002e2a:	370c      	adds	r7, #12
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e32:	4770      	bx	lr

08002e34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b085      	sub	sp, #20
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	f003 0307 	and.w	r3, r3, #7
 8002e42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e44:	4b0b      	ldr	r3, [pc, #44]	; (8002e74 <__NVIC_SetPriorityGrouping+0x40>)
 8002e46:	68db      	ldr	r3, [r3, #12]
 8002e48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e4a:	68ba      	ldr	r2, [r7, #8]
 8002e4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e50:	4013      	ands	r3, r2
 8002e52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002e5c:	4b06      	ldr	r3, [pc, #24]	; (8002e78 <__NVIC_SetPriorityGrouping+0x44>)
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e62:	4a04      	ldr	r2, [pc, #16]	; (8002e74 <__NVIC_SetPriorityGrouping+0x40>)
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	60d3      	str	r3, [r2, #12]
}
 8002e68:	bf00      	nop
 8002e6a:	3714      	adds	r7, #20
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e72:	4770      	bx	lr
 8002e74:	e000ed00 	.word	0xe000ed00
 8002e78:	05fa0000 	.word	0x05fa0000

08002e7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e80:	4b04      	ldr	r3, [pc, #16]	; (8002e94 <__NVIC_GetPriorityGrouping+0x18>)
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	0a1b      	lsrs	r3, r3, #8
 8002e86:	f003 0307 	and.w	r3, r3, #7
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr
 8002e94:	e000ed00 	.word	0xe000ed00

08002e98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b083      	sub	sp, #12
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	db0b      	blt.n	8002ec2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002eaa:	79fb      	ldrb	r3, [r7, #7]
 8002eac:	f003 021f 	and.w	r2, r3, #31
 8002eb0:	4907      	ldr	r1, [pc, #28]	; (8002ed0 <__NVIC_EnableIRQ+0x38>)
 8002eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eb6:	095b      	lsrs	r3, r3, #5
 8002eb8:	2001      	movs	r0, #1
 8002eba:	fa00 f202 	lsl.w	r2, r0, r2
 8002ebe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002ec2:	bf00      	nop
 8002ec4:	370c      	adds	r7, #12
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ecc:	4770      	bx	lr
 8002ece:	bf00      	nop
 8002ed0:	e000e100 	.word	0xe000e100

08002ed4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b083      	sub	sp, #12
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	4603      	mov	r3, r0
 8002edc:	6039      	str	r1, [r7, #0]
 8002ede:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ee0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	db0a      	blt.n	8002efe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	b2da      	uxtb	r2, r3
 8002eec:	490c      	ldr	r1, [pc, #48]	; (8002f20 <__NVIC_SetPriority+0x4c>)
 8002eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ef2:	0112      	lsls	r2, r2, #4
 8002ef4:	b2d2      	uxtb	r2, r2
 8002ef6:	440b      	add	r3, r1
 8002ef8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002efc:	e00a      	b.n	8002f14 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	b2da      	uxtb	r2, r3
 8002f02:	4908      	ldr	r1, [pc, #32]	; (8002f24 <__NVIC_SetPriority+0x50>)
 8002f04:	79fb      	ldrb	r3, [r7, #7]
 8002f06:	f003 030f 	and.w	r3, r3, #15
 8002f0a:	3b04      	subs	r3, #4
 8002f0c:	0112      	lsls	r2, r2, #4
 8002f0e:	b2d2      	uxtb	r2, r2
 8002f10:	440b      	add	r3, r1
 8002f12:	761a      	strb	r2, [r3, #24]
}
 8002f14:	bf00      	nop
 8002f16:	370c      	adds	r7, #12
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1e:	4770      	bx	lr
 8002f20:	e000e100 	.word	0xe000e100
 8002f24:	e000ed00 	.word	0xe000ed00

08002f28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b089      	sub	sp, #36	; 0x24
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	60f8      	str	r0, [r7, #12]
 8002f30:	60b9      	str	r1, [r7, #8]
 8002f32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	f003 0307 	and.w	r3, r3, #7
 8002f3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f3c:	69fb      	ldr	r3, [r7, #28]
 8002f3e:	f1c3 0307 	rsb	r3, r3, #7
 8002f42:	2b04      	cmp	r3, #4
 8002f44:	bf28      	it	cs
 8002f46:	2304      	movcs	r3, #4
 8002f48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f4a:	69fb      	ldr	r3, [r7, #28]
 8002f4c:	3304      	adds	r3, #4
 8002f4e:	2b06      	cmp	r3, #6
 8002f50:	d902      	bls.n	8002f58 <NVIC_EncodePriority+0x30>
 8002f52:	69fb      	ldr	r3, [r7, #28]
 8002f54:	3b03      	subs	r3, #3
 8002f56:	e000      	b.n	8002f5a <NVIC_EncodePriority+0x32>
 8002f58:	2300      	movs	r3, #0
 8002f5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f5c:	f04f 32ff 	mov.w	r2, #4294967295
 8002f60:	69bb      	ldr	r3, [r7, #24]
 8002f62:	fa02 f303 	lsl.w	r3, r2, r3
 8002f66:	43da      	mvns	r2, r3
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	401a      	ands	r2, r3
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f70:	f04f 31ff 	mov.w	r1, #4294967295
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	fa01 f303 	lsl.w	r3, r1, r3
 8002f7a:	43d9      	mvns	r1, r3
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f80:	4313      	orrs	r3, r2
         );
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	3724      	adds	r7, #36	; 0x24
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr
	...

08002f90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b082      	sub	sp, #8
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	3b01      	subs	r3, #1
 8002f9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002fa0:	d301      	bcc.n	8002fa6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e00f      	b.n	8002fc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002fa6:	4a0a      	ldr	r2, [pc, #40]	; (8002fd0 <SysTick_Config+0x40>)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	3b01      	subs	r3, #1
 8002fac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002fae:	210f      	movs	r1, #15
 8002fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8002fb4:	f7ff ff8e 	bl	8002ed4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002fb8:	4b05      	ldr	r3, [pc, #20]	; (8002fd0 <SysTick_Config+0x40>)
 8002fba:	2200      	movs	r2, #0
 8002fbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002fbe:	4b04      	ldr	r3, [pc, #16]	; (8002fd0 <SysTick_Config+0x40>)
 8002fc0:	2207      	movs	r2, #7
 8002fc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002fc4:	2300      	movs	r3, #0
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3708      	adds	r7, #8
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	bf00      	nop
 8002fd0:	e000e010 	.word	0xe000e010

08002fd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b082      	sub	sp, #8
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002fdc:	6878      	ldr	r0, [r7, #4]
 8002fde:	f7ff ff29 	bl	8002e34 <__NVIC_SetPriorityGrouping>
}
 8002fe2:	bf00      	nop
 8002fe4:	3708      	adds	r7, #8
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}

08002fea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002fea:	b580      	push	{r7, lr}
 8002fec:	b086      	sub	sp, #24
 8002fee:	af00      	add	r7, sp, #0
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	60b9      	str	r1, [r7, #8]
 8002ff4:	607a      	str	r2, [r7, #4]
 8002ff6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ffc:	f7ff ff3e 	bl	8002e7c <__NVIC_GetPriorityGrouping>
 8003000:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003002:	687a      	ldr	r2, [r7, #4]
 8003004:	68b9      	ldr	r1, [r7, #8]
 8003006:	6978      	ldr	r0, [r7, #20]
 8003008:	f7ff ff8e 	bl	8002f28 <NVIC_EncodePriority>
 800300c:	4602      	mov	r2, r0
 800300e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003012:	4611      	mov	r1, r2
 8003014:	4618      	mov	r0, r3
 8003016:	f7ff ff5d 	bl	8002ed4 <__NVIC_SetPriority>
}
 800301a:	bf00      	nop
 800301c:	3718      	adds	r7, #24
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}

08003022 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003022:	b580      	push	{r7, lr}
 8003024:	b082      	sub	sp, #8
 8003026:	af00      	add	r7, sp, #0
 8003028:	4603      	mov	r3, r0
 800302a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800302c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003030:	4618      	mov	r0, r3
 8003032:	f7ff ff31 	bl	8002e98 <__NVIC_EnableIRQ>
}
 8003036:	bf00      	nop
 8003038:	3708      	adds	r7, #8
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}

0800303e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800303e:	b580      	push	{r7, lr}
 8003040:	b082      	sub	sp, #8
 8003042:	af00      	add	r7, sp, #0
 8003044:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	f7ff ffa2 	bl	8002f90 <SysTick_Config>
 800304c:	4603      	mov	r3, r0
}
 800304e:	4618      	mov	r0, r3
 8003050:	3708      	adds	r7, #8
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}
	...

08003058 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b086      	sub	sp, #24
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003060:	2300      	movs	r3, #0
 8003062:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003064:	f7ff f85a 	bl	800211c <HAL_GetTick>
 8003068:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d101      	bne.n	8003074 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	e099      	b.n	80031a8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2202      	movs	r2, #2
 8003078:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2200      	movs	r2, #0
 8003080:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f022 0201 	bic.w	r2, r2, #1
 8003092:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003094:	e00f      	b.n	80030b6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003096:	f7ff f841 	bl	800211c <HAL_GetTick>
 800309a:	4602      	mov	r2, r0
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	1ad3      	subs	r3, r2, r3
 80030a0:	2b05      	cmp	r3, #5
 80030a2:	d908      	bls.n	80030b6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2220      	movs	r2, #32
 80030a8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2203      	movs	r2, #3
 80030ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80030b2:	2303      	movs	r3, #3
 80030b4:	e078      	b.n	80031a8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 0301 	and.w	r3, r3, #1
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d1e8      	bne.n	8003096 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80030cc:	697a      	ldr	r2, [r7, #20]
 80030ce:	4b38      	ldr	r3, [pc, #224]	; (80031b0 <HAL_DMA_Init+0x158>)
 80030d0:	4013      	ands	r3, r2
 80030d2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	685a      	ldr	r2, [r3, #4]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80030e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	691b      	ldr	r3, [r3, #16]
 80030e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	699b      	ldr	r3, [r3, #24]
 80030f4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030fa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6a1b      	ldr	r3, [r3, #32]
 8003100:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003102:	697a      	ldr	r2, [r7, #20]
 8003104:	4313      	orrs	r3, r2
 8003106:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800310c:	2b04      	cmp	r3, #4
 800310e:	d107      	bne.n	8003120 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003118:	4313      	orrs	r3, r2
 800311a:	697a      	ldr	r2, [r7, #20]
 800311c:	4313      	orrs	r3, r2
 800311e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	697a      	ldr	r2, [r7, #20]
 8003126:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	695b      	ldr	r3, [r3, #20]
 800312e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	f023 0307 	bic.w	r3, r3, #7
 8003136:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800313c:	697a      	ldr	r2, [r7, #20]
 800313e:	4313      	orrs	r3, r2
 8003140:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003146:	2b04      	cmp	r3, #4
 8003148:	d117      	bne.n	800317a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800314e:	697a      	ldr	r2, [r7, #20]
 8003150:	4313      	orrs	r3, r2
 8003152:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003158:	2b00      	cmp	r3, #0
 800315a:	d00e      	beq.n	800317a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800315c:	6878      	ldr	r0, [r7, #4]
 800315e:	f000 fa7b 	bl	8003658 <DMA_CheckFifoParam>
 8003162:	4603      	mov	r3, r0
 8003164:	2b00      	cmp	r3, #0
 8003166:	d008      	beq.n	800317a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2240      	movs	r2, #64	; 0x40
 800316c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2201      	movs	r2, #1
 8003172:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003176:	2301      	movs	r3, #1
 8003178:	e016      	b.n	80031a8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	697a      	ldr	r2, [r7, #20]
 8003180:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	f000 fa32 	bl	80035ec <DMA_CalcBaseAndBitshift>
 8003188:	4603      	mov	r3, r0
 800318a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003190:	223f      	movs	r2, #63	; 0x3f
 8003192:	409a      	lsls	r2, r3
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2200      	movs	r2, #0
 800319c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2201      	movs	r2, #1
 80031a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80031a6:	2300      	movs	r3, #0
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	3718      	adds	r7, #24
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}
 80031b0:	e010803f 	.word	0xe010803f

080031b4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b084      	sub	sp, #16
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031c0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80031c2:	f7fe ffab 	bl	800211c <HAL_GetTick>
 80031c6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80031ce:	b2db      	uxtb	r3, r3
 80031d0:	2b02      	cmp	r3, #2
 80031d2:	d008      	beq.n	80031e6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2280      	movs	r2, #128	; 0x80
 80031d8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2200      	movs	r2, #0
 80031de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e052      	b.n	800328c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f022 0216 	bic.w	r2, r2, #22
 80031f4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	695a      	ldr	r2, [r3, #20]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003204:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320a:	2b00      	cmp	r3, #0
 800320c:	d103      	bne.n	8003216 <HAL_DMA_Abort+0x62>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003212:	2b00      	cmp	r3, #0
 8003214:	d007      	beq.n	8003226 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f022 0208 	bic.w	r2, r2, #8
 8003224:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f022 0201 	bic.w	r2, r2, #1
 8003234:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003236:	e013      	b.n	8003260 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003238:	f7fe ff70 	bl	800211c <HAL_GetTick>
 800323c:	4602      	mov	r2, r0
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	2b05      	cmp	r3, #5
 8003244:	d90c      	bls.n	8003260 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2220      	movs	r2, #32
 800324a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2203      	movs	r2, #3
 8003250:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2200      	movs	r2, #0
 8003258:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 800325c:	2303      	movs	r3, #3
 800325e:	e015      	b.n	800328c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f003 0301 	and.w	r3, r3, #1
 800326a:	2b00      	cmp	r3, #0
 800326c:	d1e4      	bne.n	8003238 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003272:	223f      	movs	r2, #63	; 0x3f
 8003274:	409a      	lsls	r2, r3
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2201      	movs	r2, #1
 800327e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2200      	movs	r2, #0
 8003286:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 800328a:	2300      	movs	r3, #0
}
 800328c:	4618      	mov	r0, r3
 800328e:	3710      	adds	r7, #16
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}

08003294 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003294:	b480      	push	{r7}
 8003296:	b083      	sub	sp, #12
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80032a2:	b2db      	uxtb	r3, r3
 80032a4:	2b02      	cmp	r3, #2
 80032a6:	d004      	beq.n	80032b2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2280      	movs	r2, #128	; 0x80
 80032ac:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e00c      	b.n	80032cc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2205      	movs	r2, #5
 80032b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f022 0201 	bic.w	r2, r2, #1
 80032c8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80032ca:	2300      	movs	r3, #0
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	370c      	adds	r7, #12
 80032d0:	46bd      	mov	sp, r7
 80032d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d6:	4770      	bx	lr

080032d8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b086      	sub	sp, #24
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80032e0:	2300      	movs	r3, #0
 80032e2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80032e4:	4b8e      	ldr	r3, [pc, #568]	; (8003520 <HAL_DMA_IRQHandler+0x248>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a8e      	ldr	r2, [pc, #568]	; (8003524 <HAL_DMA_IRQHandler+0x24c>)
 80032ea:	fba2 2303 	umull	r2, r3, r2, r3
 80032ee:	0a9b      	lsrs	r3, r3, #10
 80032f0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032f6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003302:	2208      	movs	r2, #8
 8003304:	409a      	lsls	r2, r3
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	4013      	ands	r3, r2
 800330a:	2b00      	cmp	r3, #0
 800330c:	d01a      	beq.n	8003344 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f003 0304 	and.w	r3, r3, #4
 8003318:	2b00      	cmp	r3, #0
 800331a:	d013      	beq.n	8003344 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f022 0204 	bic.w	r2, r2, #4
 800332a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003330:	2208      	movs	r2, #8
 8003332:	409a      	lsls	r2, r3
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800333c:	f043 0201 	orr.w	r2, r3, #1
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003348:	2201      	movs	r2, #1
 800334a:	409a      	lsls	r2, r3
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	4013      	ands	r3, r2
 8003350:	2b00      	cmp	r3, #0
 8003352:	d012      	beq.n	800337a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	695b      	ldr	r3, [r3, #20]
 800335a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800335e:	2b00      	cmp	r3, #0
 8003360:	d00b      	beq.n	800337a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003366:	2201      	movs	r2, #1
 8003368:	409a      	lsls	r2, r3
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003372:	f043 0202 	orr.w	r2, r3, #2
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800337e:	2204      	movs	r2, #4
 8003380:	409a      	lsls	r2, r3
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	4013      	ands	r3, r2
 8003386:	2b00      	cmp	r3, #0
 8003388:	d012      	beq.n	80033b0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f003 0302 	and.w	r3, r3, #2
 8003394:	2b00      	cmp	r3, #0
 8003396:	d00b      	beq.n	80033b0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800339c:	2204      	movs	r2, #4
 800339e:	409a      	lsls	r2, r3
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033a8:	f043 0204 	orr.w	r2, r3, #4
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033b4:	2210      	movs	r2, #16
 80033b6:	409a      	lsls	r2, r3
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	4013      	ands	r3, r2
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d043      	beq.n	8003448 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 0308 	and.w	r3, r3, #8
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d03c      	beq.n	8003448 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033d2:	2210      	movs	r2, #16
 80033d4:	409a      	lsls	r2, r3
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d018      	beq.n	800341a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d108      	bne.n	8003408 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d024      	beq.n	8003448 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	4798      	blx	r3
 8003406:	e01f      	b.n	8003448 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800340c:	2b00      	cmp	r3, #0
 800340e:	d01b      	beq.n	8003448 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003414:	6878      	ldr	r0, [r7, #4]
 8003416:	4798      	blx	r3
 8003418:	e016      	b.n	8003448 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003424:	2b00      	cmp	r3, #0
 8003426:	d107      	bne.n	8003438 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	681a      	ldr	r2, [r3, #0]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f022 0208 	bic.w	r2, r2, #8
 8003436:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343c:	2b00      	cmp	r3, #0
 800343e:	d003      	beq.n	8003448 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003444:	6878      	ldr	r0, [r7, #4]
 8003446:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800344c:	2220      	movs	r2, #32
 800344e:	409a      	lsls	r2, r3
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	4013      	ands	r3, r2
 8003454:	2b00      	cmp	r3, #0
 8003456:	f000 808f 	beq.w	8003578 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 0310 	and.w	r3, r3, #16
 8003464:	2b00      	cmp	r3, #0
 8003466:	f000 8087 	beq.w	8003578 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800346e:	2220      	movs	r2, #32
 8003470:	409a      	lsls	r2, r3
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800347c:	b2db      	uxtb	r3, r3
 800347e:	2b05      	cmp	r3, #5
 8003480:	d136      	bne.n	80034f0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f022 0216 	bic.w	r2, r2, #22
 8003490:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	695a      	ldr	r2, [r3, #20]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80034a0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d103      	bne.n	80034b2 <HAL_DMA_IRQHandler+0x1da>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d007      	beq.n	80034c2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f022 0208 	bic.w	r2, r2, #8
 80034c0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034c6:	223f      	movs	r2, #63	; 0x3f
 80034c8:	409a      	lsls	r2, r3
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2201      	movs	r2, #1
 80034d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2200      	movs	r2, #0
 80034da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d07e      	beq.n	80035e4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	4798      	blx	r3
        }
        return;
 80034ee:	e079      	b.n	80035e4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d01d      	beq.n	800353a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003508:	2b00      	cmp	r3, #0
 800350a:	d10d      	bne.n	8003528 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003510:	2b00      	cmp	r3, #0
 8003512:	d031      	beq.n	8003578 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003518:	6878      	ldr	r0, [r7, #4]
 800351a:	4798      	blx	r3
 800351c:	e02c      	b.n	8003578 <HAL_DMA_IRQHandler+0x2a0>
 800351e:	bf00      	nop
 8003520:	20000004 	.word	0x20000004
 8003524:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800352c:	2b00      	cmp	r3, #0
 800352e:	d023      	beq.n	8003578 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003534:	6878      	ldr	r0, [r7, #4]
 8003536:	4798      	blx	r3
 8003538:	e01e      	b.n	8003578 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003544:	2b00      	cmp	r3, #0
 8003546:	d10f      	bne.n	8003568 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f022 0210 	bic.w	r2, r2, #16
 8003556:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2201      	movs	r2, #1
 800355c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2200      	movs	r2, #0
 8003564:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800356c:	2b00      	cmp	r3, #0
 800356e:	d003      	beq.n	8003578 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800357c:	2b00      	cmp	r3, #0
 800357e:	d032      	beq.n	80035e6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003584:	f003 0301 	and.w	r3, r3, #1
 8003588:	2b00      	cmp	r3, #0
 800358a:	d022      	beq.n	80035d2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2205      	movs	r2, #5
 8003590:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f022 0201 	bic.w	r2, r2, #1
 80035a2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	3301      	adds	r3, #1
 80035a8:	60bb      	str	r3, [r7, #8]
 80035aa:	697a      	ldr	r2, [r7, #20]
 80035ac:	429a      	cmp	r2, r3
 80035ae:	d307      	bcc.n	80035c0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 0301 	and.w	r3, r3, #1
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d1f2      	bne.n	80035a4 <HAL_DMA_IRQHandler+0x2cc>
 80035be:	e000      	b.n	80035c2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80035c0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2201      	movs	r2, #1
 80035c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2200      	movs	r2, #0
 80035ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d005      	beq.n	80035e6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	4798      	blx	r3
 80035e2:	e000      	b.n	80035e6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80035e4:	bf00      	nop
    }
  }
}
 80035e6:	3718      	adds	r7, #24
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}

080035ec <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b085      	sub	sp, #20
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	3b10      	subs	r3, #16
 80035fc:	4a13      	ldr	r2, [pc, #76]	; (800364c <DMA_CalcBaseAndBitshift+0x60>)
 80035fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003602:	091b      	lsrs	r3, r3, #4
 8003604:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003606:	4a12      	ldr	r2, [pc, #72]	; (8003650 <DMA_CalcBaseAndBitshift+0x64>)
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	4413      	add	r3, r2
 800360c:	781b      	ldrb	r3, [r3, #0]
 800360e:	461a      	mov	r2, r3
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2b03      	cmp	r3, #3
 8003618:	d908      	bls.n	800362c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	461a      	mov	r2, r3
 8003620:	4b0c      	ldr	r3, [pc, #48]	; (8003654 <DMA_CalcBaseAndBitshift+0x68>)
 8003622:	4013      	ands	r3, r2
 8003624:	1d1a      	adds	r2, r3, #4
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	659a      	str	r2, [r3, #88]	; 0x58
 800362a:	e006      	b.n	800363a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	461a      	mov	r2, r3
 8003632:	4b08      	ldr	r3, [pc, #32]	; (8003654 <DMA_CalcBaseAndBitshift+0x68>)
 8003634:	4013      	ands	r3, r2
 8003636:	687a      	ldr	r2, [r7, #4]
 8003638:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800363e:	4618      	mov	r0, r3
 8003640:	3714      	adds	r7, #20
 8003642:	46bd      	mov	sp, r7
 8003644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003648:	4770      	bx	lr
 800364a:	bf00      	nop
 800364c:	aaaaaaab 	.word	0xaaaaaaab
 8003650:	08008100 	.word	0x08008100
 8003654:	fffffc00 	.word	0xfffffc00

08003658 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003658:	b480      	push	{r7}
 800365a:	b085      	sub	sp, #20
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003660:	2300      	movs	r3, #0
 8003662:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003668:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	699b      	ldr	r3, [r3, #24]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d11f      	bne.n	80036b2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	2b03      	cmp	r3, #3
 8003676:	d856      	bhi.n	8003726 <DMA_CheckFifoParam+0xce>
 8003678:	a201      	add	r2, pc, #4	; (adr r2, 8003680 <DMA_CheckFifoParam+0x28>)
 800367a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800367e:	bf00      	nop
 8003680:	08003691 	.word	0x08003691
 8003684:	080036a3 	.word	0x080036a3
 8003688:	08003691 	.word	0x08003691
 800368c:	08003727 	.word	0x08003727
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003694:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003698:	2b00      	cmp	r3, #0
 800369a:	d046      	beq.n	800372a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036a0:	e043      	b.n	800372a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80036aa:	d140      	bne.n	800372e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036b0:	e03d      	b.n	800372e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	699b      	ldr	r3, [r3, #24]
 80036b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036ba:	d121      	bne.n	8003700 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	2b03      	cmp	r3, #3
 80036c0:	d837      	bhi.n	8003732 <DMA_CheckFifoParam+0xda>
 80036c2:	a201      	add	r2, pc, #4	; (adr r2, 80036c8 <DMA_CheckFifoParam+0x70>)
 80036c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036c8:	080036d9 	.word	0x080036d9
 80036cc:	080036df 	.word	0x080036df
 80036d0:	080036d9 	.word	0x080036d9
 80036d4:	080036f1 	.word	0x080036f1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80036d8:	2301      	movs	r3, #1
 80036da:	73fb      	strb	r3, [r7, #15]
      break;
 80036dc:	e030      	b.n	8003740 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d025      	beq.n	8003736 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036ee:	e022      	b.n	8003736 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036f4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80036f8:	d11f      	bne.n	800373a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80036fe:	e01c      	b.n	800373a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	2b02      	cmp	r3, #2
 8003704:	d903      	bls.n	800370e <DMA_CheckFifoParam+0xb6>
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	2b03      	cmp	r3, #3
 800370a:	d003      	beq.n	8003714 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800370c:	e018      	b.n	8003740 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	73fb      	strb	r3, [r7, #15]
      break;
 8003712:	e015      	b.n	8003740 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003718:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800371c:	2b00      	cmp	r3, #0
 800371e:	d00e      	beq.n	800373e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	73fb      	strb	r3, [r7, #15]
      break;
 8003724:	e00b      	b.n	800373e <DMA_CheckFifoParam+0xe6>
      break;
 8003726:	bf00      	nop
 8003728:	e00a      	b.n	8003740 <DMA_CheckFifoParam+0xe8>
      break;
 800372a:	bf00      	nop
 800372c:	e008      	b.n	8003740 <DMA_CheckFifoParam+0xe8>
      break;
 800372e:	bf00      	nop
 8003730:	e006      	b.n	8003740 <DMA_CheckFifoParam+0xe8>
      break;
 8003732:	bf00      	nop
 8003734:	e004      	b.n	8003740 <DMA_CheckFifoParam+0xe8>
      break;
 8003736:	bf00      	nop
 8003738:	e002      	b.n	8003740 <DMA_CheckFifoParam+0xe8>
      break;   
 800373a:	bf00      	nop
 800373c:	e000      	b.n	8003740 <DMA_CheckFifoParam+0xe8>
      break;
 800373e:	bf00      	nop
    }
  } 
  
  return status; 
 8003740:	7bfb      	ldrb	r3, [r7, #15]
}
 8003742:	4618      	mov	r0, r3
 8003744:	3714      	adds	r7, #20
 8003746:	46bd      	mov	sp, r7
 8003748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374c:	4770      	bx	lr
 800374e:	bf00      	nop

08003750 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b084      	sub	sp, #16
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d101      	bne.n	8003762 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	e06a      	b.n	8003838 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003768:	2b00      	cmp	r3, #0
 800376a:	d106      	bne.n	800377a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2223      	movs	r2, #35	; 0x23
 8003770:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003774:	6878      	ldr	r0, [r7, #4]
 8003776:	f7fe f95b 	bl	8001a30 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800377a:	4b31      	ldr	r3, [pc, #196]	; (8003840 <HAL_ETH_Init+0xf0>)
 800377c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800377e:	4a30      	ldr	r2, [pc, #192]	; (8003840 <HAL_ETH_Init+0xf0>)
 8003780:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003784:	6453      	str	r3, [r2, #68]	; 0x44
 8003786:	4b2e      	ldr	r3, [pc, #184]	; (8003840 <HAL_ETH_Init+0xf0>)
 8003788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800378a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800378e:	60bb      	str	r3, [r7, #8]
 8003790:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8003792:	4b2c      	ldr	r3, [pc, #176]	; (8003844 <HAL_ETH_Init+0xf4>)
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	4a2b      	ldr	r2, [pc, #172]	; (8003844 <HAL_ETH_Init+0xf4>)
 8003798:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800379c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800379e:	4b29      	ldr	r3, [pc, #164]	; (8003844 <HAL_ETH_Init+0xf4>)
 80037a0:	685a      	ldr	r2, [r3, #4]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	4927      	ldr	r1, [pc, #156]	; (8003844 <HAL_ETH_Init+0xf4>)
 80037a8:	4313      	orrs	r3, r2
 80037aa:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80037ac:	4b25      	ldr	r3, [pc, #148]	; (8003844 <HAL_ETH_Init+0xf4>)
 80037ae:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	687a      	ldr	r2, [r7, #4]
 80037bc:	6812      	ldr	r2, [r2, #0]
 80037be:	f043 0301 	orr.w	r3, r3, #1
 80037c2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80037c6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80037c8:	f7fe fca8 	bl	800211c <HAL_GetTick>
 80037cc:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80037ce:	e011      	b.n	80037f4 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80037d0:	f7fe fca4 	bl	800211c <HAL_GetTick>
 80037d4:	4602      	mov	r2, r0
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	1ad3      	subs	r3, r2, r3
 80037da:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80037de:	d909      	bls.n	80037f4 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2204      	movs	r2, #4
 80037e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	22e0      	movs	r2, #224	; 0xe0
 80037ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	e021      	b.n	8003838 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f003 0301 	and.w	r3, r3, #1
 8003802:	2b00      	cmp	r3, #0
 8003804:	d1e4      	bne.n	80037d0 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f000 f958 	bl	8003abc <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800380c:	6878      	ldr	r0, [r7, #4]
 800380e:	f000 f9ff 	bl	8003c10 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f000 fa55 	bl	8003cc2 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	461a      	mov	r2, r3
 800381e:	2100      	movs	r1, #0
 8003820:	6878      	ldr	r0, [r7, #4]
 8003822:	f000 f9bd 	bl	8003ba0 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2200      	movs	r2, #0
 800382a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2210      	movs	r2, #16
 8003832:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003836:	2300      	movs	r3, #0
}
 8003838:	4618      	mov	r0, r3
 800383a:	3710      	adds	r7, #16
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}
 8003840:	40023800 	.word	0x40023800
 8003844:	40013800 	.word	0x40013800

08003848 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b084      	sub	sp, #16
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
 8003850:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800385a:	68fa      	ldr	r2, [r7, #12]
 800385c:	4b51      	ldr	r3, [pc, #324]	; (80039a4 <ETH_SetMACConfig+0x15c>)
 800385e:	4013      	ands	r3, r2
 8003860:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	7c1b      	ldrb	r3, [r3, #16]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d102      	bne.n	8003870 <ETH_SetMACConfig+0x28>
 800386a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800386e:	e000      	b.n	8003872 <ETH_SetMACConfig+0x2a>
 8003870:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	7c5b      	ldrb	r3, [r3, #17]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d102      	bne.n	8003880 <ETH_SetMACConfig+0x38>
 800387a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800387e:	e000      	b.n	8003882 <ETH_SetMACConfig+0x3a>
 8003880:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003882:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003888:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	7fdb      	ldrb	r3, [r3, #31]
 800388e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8003890:	431a      	orrs	r2, r3
                        macconf->Speed |
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003896:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003898:	683a      	ldr	r2, [r7, #0]
 800389a:	7f92      	ldrb	r2, [r2, #30]
 800389c:	2a00      	cmp	r2, #0
 800389e:	d102      	bne.n	80038a6 <ETH_SetMACConfig+0x5e>
 80038a0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80038a4:	e000      	b.n	80038a8 <ETH_SetMACConfig+0x60>
 80038a6:	2200      	movs	r2, #0
                        macconf->Speed |
 80038a8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	7f1b      	ldrb	r3, [r3, #28]
 80038ae:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80038b0:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80038b6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	791b      	ldrb	r3, [r3, #4]
 80038bc:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80038be:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80038c0:	683a      	ldr	r2, [r7, #0]
 80038c2:	f892 2020 	ldrb.w	r2, [r2, #32]
 80038c6:	2a00      	cmp	r2, #0
 80038c8:	d102      	bne.n	80038d0 <ETH_SetMACConfig+0x88>
 80038ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038ce:	e000      	b.n	80038d2 <ETH_SetMACConfig+0x8a>
 80038d0:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80038d2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	7bdb      	ldrb	r3, [r3, #15]
 80038d8:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80038da:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80038e0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80038e8:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80038ea:	4313      	orrs	r3, r2
 80038ec:	68fa      	ldr	r2, [r7, #12]
 80038ee:	4313      	orrs	r3, r2
 80038f0:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	68fa      	ldr	r2, [r7, #12]
 80038f8:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003902:	2001      	movs	r0, #1
 8003904:	f7fe fc16 	bl	8002134 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	68fa      	ldr	r2, [r7, #12]
 800390e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	699b      	ldr	r3, [r3, #24]
 8003916:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003918:	68fa      	ldr	r2, [r7, #12]
 800391a:	f64f 7341 	movw	r3, #65345	; 0xff41
 800391e:	4013      	ands	r3, r2
 8003920:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003926:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003928:	683a      	ldr	r2, [r7, #0]
 800392a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800392e:	2a00      	cmp	r2, #0
 8003930:	d101      	bne.n	8003936 <ETH_SetMACConfig+0xee>
 8003932:	2280      	movs	r2, #128	; 0x80
 8003934:	e000      	b.n	8003938 <ETH_SetMACConfig+0xf0>
 8003936:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003938:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800393e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003940:	683a      	ldr	r2, [r7, #0]
 8003942:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8003946:	2a01      	cmp	r2, #1
 8003948:	d101      	bne.n	800394e <ETH_SetMACConfig+0x106>
 800394a:	2208      	movs	r2, #8
 800394c:	e000      	b.n	8003950 <ETH_SetMACConfig+0x108>
 800394e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8003950:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8003952:	683a      	ldr	r2, [r7, #0]
 8003954:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8003958:	2a01      	cmp	r2, #1
 800395a:	d101      	bne.n	8003960 <ETH_SetMACConfig+0x118>
 800395c:	2204      	movs	r2, #4
 800395e:	e000      	b.n	8003962 <ETH_SetMACConfig+0x11a>
 8003960:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003962:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8003964:	683a      	ldr	r2, [r7, #0]
 8003966:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 800396a:	2a01      	cmp	r2, #1
 800396c:	d101      	bne.n	8003972 <ETH_SetMACConfig+0x12a>
 800396e:	2202      	movs	r2, #2
 8003970:	e000      	b.n	8003974 <ETH_SetMACConfig+0x12c>
 8003972:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003974:	4313      	orrs	r3, r2
 8003976:	68fa      	ldr	r2, [r7, #12]
 8003978:	4313      	orrs	r3, r2
 800397a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	68fa      	ldr	r2, [r7, #12]
 8003982:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	699b      	ldr	r3, [r3, #24]
 800398a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800398c:	2001      	movs	r0, #1
 800398e:	f7fe fbd1 	bl	8002134 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	68fa      	ldr	r2, [r7, #12]
 8003998:	619a      	str	r2, [r3, #24]
}
 800399a:	bf00      	nop
 800399c:	3710      	adds	r7, #16
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}
 80039a2:	bf00      	nop
 80039a4:	ff20810f 	.word	0xff20810f

080039a8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b084      	sub	sp, #16
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
 80039b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80039ba:	699b      	ldr	r3, [r3, #24]
 80039bc:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80039be:	68fa      	ldr	r2, [r7, #12]
 80039c0:	4b3d      	ldr	r3, [pc, #244]	; (8003ab8 <ETH_SetDMAConfig+0x110>)
 80039c2:	4013      	ands	r3, r2
 80039c4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	7b1b      	ldrb	r3, [r3, #12]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d102      	bne.n	80039d4 <ETH_SetDMAConfig+0x2c>
 80039ce:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80039d2:	e000      	b.n	80039d6 <ETH_SetDMAConfig+0x2e>
 80039d4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	7b5b      	ldrb	r3, [r3, #13]
 80039da:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80039dc:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80039de:	683a      	ldr	r2, [r7, #0]
 80039e0:	7f52      	ldrb	r2, [r2, #29]
 80039e2:	2a00      	cmp	r2, #0
 80039e4:	d102      	bne.n	80039ec <ETH_SetDMAConfig+0x44>
 80039e6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80039ea:	e000      	b.n	80039ee <ETH_SetDMAConfig+0x46>
 80039ec:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80039ee:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	7b9b      	ldrb	r3, [r3, #14]
 80039f4:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80039f6:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80039fc:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	7f1b      	ldrb	r3, [r3, #28]
 8003a02:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8003a04:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	7f9b      	ldrb	r3, [r3, #30]
 8003a0a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003a0c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003a12:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003a1a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	68fa      	ldr	r2, [r7, #12]
 8003a20:	4313      	orrs	r3, r2
 8003a22:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a2c:	461a      	mov	r2, r3
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a3a:	699b      	ldr	r3, [r3, #24]
 8003a3c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003a3e:	2001      	movs	r0, #1
 8003a40:	f7fe fb78 	bl	8002134 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a4c:	461a      	mov	r2, r3
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	791b      	ldrb	r3, [r3, #4]
 8003a56:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003a5c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8003a62:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003a68:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003a70:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8003a72:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a78:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003a7a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003a80:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003a82:	687a      	ldr	r2, [r7, #4]
 8003a84:	6812      	ldr	r2, [r2, #0]
 8003a86:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003a8a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003a8e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003a9c:	2001      	movs	r0, #1
 8003a9e:	f7fe fb49 	bl	8002134 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003aaa:	461a      	mov	r2, r3
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	6013      	str	r3, [r2, #0]
}
 8003ab0:	bf00      	nop
 8003ab2:	3710      	adds	r7, #16
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}
 8003ab8:	f8de3f23 	.word	0xf8de3f23

08003abc <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b0a6      	sub	sp, #152	; 0x98
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8003aca:	2301      	movs	r3, #1
 8003acc:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8003ada:	2301      	movs	r3, #1
 8003adc:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8003aec:	2300      	movs	r3, #0
 8003aee:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8003af2:	2300      	movs	r3, #0
 8003af4:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003af8:	2300      	movs	r3, #0
 8003afa:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8003afc:	2300      	movs	r3, #0
 8003afe:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8003b02:	2300      	movs	r3, #0
 8003b04:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8003b06:	2300      	movs	r3, #0
 8003b08:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003b12:	2300      	movs	r3, #0
 8003b14:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003b1e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003b22:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003b24:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003b28:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003b30:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003b34:	4619      	mov	r1, r3
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f7ff fe86 	bl	8003848 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8003b40:	2301      	movs	r3, #1
 8003b42:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8003b44:	2301      	movs	r3, #1
 8003b46:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8003b52:	2300      	movs	r3, #0
 8003b54:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8003b62:	2301      	movs	r3, #1
 8003b64:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003b6c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003b70:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003b72:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003b76:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003b78:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003b7c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8003b84:	2300      	movs	r3, #0
 8003b86:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003b8c:	f107 0308 	add.w	r3, r7, #8
 8003b90:	4619      	mov	r1, r3
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f7ff ff08 	bl	80039a8 <ETH_SetDMAConfig>
}
 8003b98:	bf00      	nop
 8003b9a:	3798      	adds	r7, #152	; 0x98
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}

08003ba0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b087      	sub	sp, #28
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	60f8      	str	r0, [r7, #12]
 8003ba8:	60b9      	str	r1, [r7, #8]
 8003baa:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	3305      	adds	r3, #5
 8003bb0:	781b      	ldrb	r3, [r3, #0]
 8003bb2:	021b      	lsls	r3, r3, #8
 8003bb4:	687a      	ldr	r2, [r7, #4]
 8003bb6:	3204      	adds	r2, #4
 8003bb8:	7812      	ldrb	r2, [r2, #0]
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8003bbe:	68ba      	ldr	r2, [r7, #8]
 8003bc0:	4b11      	ldr	r3, [pc, #68]	; (8003c08 <ETH_MACAddressConfig+0x68>)
 8003bc2:	4413      	add	r3, r2
 8003bc4:	461a      	mov	r2, r3
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	3303      	adds	r3, #3
 8003bce:	781b      	ldrb	r3, [r3, #0]
 8003bd0:	061a      	lsls	r2, r3, #24
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	3302      	adds	r3, #2
 8003bd6:	781b      	ldrb	r3, [r3, #0]
 8003bd8:	041b      	lsls	r3, r3, #16
 8003bda:	431a      	orrs	r2, r3
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	3301      	adds	r3, #1
 8003be0:	781b      	ldrb	r3, [r3, #0]
 8003be2:	021b      	lsls	r3, r3, #8
 8003be4:	4313      	orrs	r3, r2
 8003be6:	687a      	ldr	r2, [r7, #4]
 8003be8:	7812      	ldrb	r2, [r2, #0]
 8003bea:	4313      	orrs	r3, r2
 8003bec:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8003bee:	68ba      	ldr	r2, [r7, #8]
 8003bf0:	4b06      	ldr	r3, [pc, #24]	; (8003c0c <ETH_MACAddressConfig+0x6c>)
 8003bf2:	4413      	add	r3, r2
 8003bf4:	461a      	mov	r2, r3
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	6013      	str	r3, [r2, #0]
}
 8003bfa:	bf00      	nop
 8003bfc:	371c      	adds	r7, #28
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c04:	4770      	bx	lr
 8003c06:	bf00      	nop
 8003c08:	40028040 	.word	0x40028040
 8003c0c:	40028044 	.word	0x40028044

08003c10 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b085      	sub	sp, #20
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003c18:	2300      	movs	r3, #0
 8003c1a:	60fb      	str	r3, [r7, #12]
 8003c1c:	e03e      	b.n	8003c9c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	68d9      	ldr	r1, [r3, #12]
 8003c22:	68fa      	ldr	r2, [r7, #12]
 8003c24:	4613      	mov	r3, r2
 8003c26:	009b      	lsls	r3, r3, #2
 8003c28:	4413      	add	r3, r2
 8003c2a:	00db      	lsls	r3, r3, #3
 8003c2c:	440b      	add	r3, r1
 8003c2e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	2200      	movs	r2, #0
 8003c34:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	2200      	movs	r2, #0
 8003c46:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003c48:	68b9      	ldr	r1, [r7, #8]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	68fa      	ldr	r2, [r7, #12]
 8003c4e:	3206      	adds	r2, #6
 8003c50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	2b02      	cmp	r3, #2
 8003c64:	d80c      	bhi.n	8003c80 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	68d9      	ldr	r1, [r3, #12]
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	1c5a      	adds	r2, r3, #1
 8003c6e:	4613      	mov	r3, r2
 8003c70:	009b      	lsls	r3, r3, #2
 8003c72:	4413      	add	r3, r2
 8003c74:	00db      	lsls	r3, r3, #3
 8003c76:	440b      	add	r3, r1
 8003c78:	461a      	mov	r2, r3
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	60da      	str	r2, [r3, #12]
 8003c7e:	e004      	b.n	8003c8a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	68db      	ldr	r3, [r3, #12]
 8003c84:	461a      	mov	r2, r3
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	3301      	adds	r3, #1
 8003c9a:	60fb      	str	r3, [r7, #12]
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2b03      	cmp	r3, #3
 8003ca0:	d9bd      	bls.n	8003c1e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	68da      	ldr	r2, [r3, #12]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003cb4:	611a      	str	r2, [r3, #16]
}
 8003cb6:	bf00      	nop
 8003cb8:	3714      	adds	r7, #20
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc0:	4770      	bx	lr

08003cc2 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8003cc2:	b480      	push	{r7}
 8003cc4:	b085      	sub	sp, #20
 8003cc6:	af00      	add	r7, sp, #0
 8003cc8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003cca:	2300      	movs	r3, #0
 8003ccc:	60fb      	str	r3, [r7, #12]
 8003cce:	e046      	b.n	8003d5e <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6919      	ldr	r1, [r3, #16]
 8003cd4:	68fa      	ldr	r2, [r7, #12]
 8003cd6:	4613      	mov	r3, r2
 8003cd8:	009b      	lsls	r3, r3, #2
 8003cda:	4413      	add	r3, r2
 8003cdc:	00db      	lsls	r3, r3, #3
 8003cde:	440b      	add	r3, r1
 8003ce0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	2200      	movs	r2, #0
 8003cec:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	2200      	movs	r2, #0
 8003d04:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003d0c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8003d14:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003d22:	68b9      	ldr	r1, [r7, #8]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	68fa      	ldr	r2, [r7, #12]
 8003d28:	3212      	adds	r2, #18
 8003d2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2b02      	cmp	r3, #2
 8003d32:	d80c      	bhi.n	8003d4e <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6919      	ldr	r1, [r3, #16]
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	1c5a      	adds	r2, r3, #1
 8003d3c:	4613      	mov	r3, r2
 8003d3e:	009b      	lsls	r3, r3, #2
 8003d40:	4413      	add	r3, r2
 8003d42:	00db      	lsls	r3, r3, #3
 8003d44:	440b      	add	r3, r1
 8003d46:	461a      	mov	r2, r3
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	60da      	str	r2, [r3, #12]
 8003d4c:	e004      	b.n	8003d58 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	691b      	ldr	r3, [r3, #16]
 8003d52:	461a      	mov	r2, r3
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	3301      	adds	r3, #1
 8003d5c:	60fb      	str	r3, [r7, #12]
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	2b03      	cmp	r3, #3
 8003d62:	d9b5      	bls.n	8003cd0 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2200      	movs	r2, #0
 8003d68:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2200      	movs	r2, #0
 8003d74:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	691a      	ldr	r2, [r3, #16]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d8e:	60da      	str	r2, [r3, #12]
}
 8003d90:	bf00      	nop
 8003d92:	3714      	adds	r7, #20
 8003d94:	46bd      	mov	sp, r7
 8003d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9a:	4770      	bx	lr

08003d9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b089      	sub	sp, #36	; 0x24
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
 8003da4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003da6:	2300      	movs	r3, #0
 8003da8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003daa:	2300      	movs	r3, #0
 8003dac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003dae:	2300      	movs	r3, #0
 8003db0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003db2:	2300      	movs	r3, #0
 8003db4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003db6:	2300      	movs	r3, #0
 8003db8:	61fb      	str	r3, [r7, #28]
 8003dba:	e175      	b.n	80040a8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003dbc:	2201      	movs	r2, #1
 8003dbe:	69fb      	ldr	r3, [r7, #28]
 8003dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	697a      	ldr	r2, [r7, #20]
 8003dcc:	4013      	ands	r3, r2
 8003dce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003dd0:	693a      	ldr	r2, [r7, #16]
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	429a      	cmp	r2, r3
 8003dd6:	f040 8164 	bne.w	80040a2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	f003 0303 	and.w	r3, r3, #3
 8003de2:	2b01      	cmp	r3, #1
 8003de4:	d005      	beq.n	8003df2 <HAL_GPIO_Init+0x56>
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	f003 0303 	and.w	r3, r3, #3
 8003dee:	2b02      	cmp	r3, #2
 8003df0:	d130      	bne.n	8003e54 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003df8:	69fb      	ldr	r3, [r7, #28]
 8003dfa:	005b      	lsls	r3, r3, #1
 8003dfc:	2203      	movs	r2, #3
 8003dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8003e02:	43db      	mvns	r3, r3
 8003e04:	69ba      	ldr	r2, [r7, #24]
 8003e06:	4013      	ands	r3, r2
 8003e08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	68da      	ldr	r2, [r3, #12]
 8003e0e:	69fb      	ldr	r3, [r7, #28]
 8003e10:	005b      	lsls	r3, r3, #1
 8003e12:	fa02 f303 	lsl.w	r3, r2, r3
 8003e16:	69ba      	ldr	r2, [r7, #24]
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	69ba      	ldr	r2, [r7, #24]
 8003e20:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003e28:	2201      	movs	r2, #1
 8003e2a:	69fb      	ldr	r3, [r7, #28]
 8003e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e30:	43db      	mvns	r3, r3
 8003e32:	69ba      	ldr	r2, [r7, #24]
 8003e34:	4013      	ands	r3, r2
 8003e36:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	091b      	lsrs	r3, r3, #4
 8003e3e:	f003 0201 	and.w	r2, r3, #1
 8003e42:	69fb      	ldr	r3, [r7, #28]
 8003e44:	fa02 f303 	lsl.w	r3, r2, r3
 8003e48:	69ba      	ldr	r2, [r7, #24]
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	69ba      	ldr	r2, [r7, #24]
 8003e52:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	f003 0303 	and.w	r3, r3, #3
 8003e5c:	2b03      	cmp	r3, #3
 8003e5e:	d017      	beq.n	8003e90 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	68db      	ldr	r3, [r3, #12]
 8003e64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003e66:	69fb      	ldr	r3, [r7, #28]
 8003e68:	005b      	lsls	r3, r3, #1
 8003e6a:	2203      	movs	r2, #3
 8003e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e70:	43db      	mvns	r3, r3
 8003e72:	69ba      	ldr	r2, [r7, #24]
 8003e74:	4013      	ands	r3, r2
 8003e76:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	689a      	ldr	r2, [r3, #8]
 8003e7c:	69fb      	ldr	r3, [r7, #28]
 8003e7e:	005b      	lsls	r3, r3, #1
 8003e80:	fa02 f303 	lsl.w	r3, r2, r3
 8003e84:	69ba      	ldr	r2, [r7, #24]
 8003e86:	4313      	orrs	r3, r2
 8003e88:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	69ba      	ldr	r2, [r7, #24]
 8003e8e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	f003 0303 	and.w	r3, r3, #3
 8003e98:	2b02      	cmp	r3, #2
 8003e9a:	d123      	bne.n	8003ee4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003e9c:	69fb      	ldr	r3, [r7, #28]
 8003e9e:	08da      	lsrs	r2, r3, #3
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	3208      	adds	r2, #8
 8003ea4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ea8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003eaa:	69fb      	ldr	r3, [r7, #28]
 8003eac:	f003 0307 	and.w	r3, r3, #7
 8003eb0:	009b      	lsls	r3, r3, #2
 8003eb2:	220f      	movs	r2, #15
 8003eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb8:	43db      	mvns	r3, r3
 8003eba:	69ba      	ldr	r2, [r7, #24]
 8003ebc:	4013      	ands	r3, r2
 8003ebe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	691a      	ldr	r2, [r3, #16]
 8003ec4:	69fb      	ldr	r3, [r7, #28]
 8003ec6:	f003 0307 	and.w	r3, r3, #7
 8003eca:	009b      	lsls	r3, r3, #2
 8003ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed0:	69ba      	ldr	r2, [r7, #24]
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003ed6:	69fb      	ldr	r3, [r7, #28]
 8003ed8:	08da      	lsrs	r2, r3, #3
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	3208      	adds	r2, #8
 8003ede:	69b9      	ldr	r1, [r7, #24]
 8003ee0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003eea:	69fb      	ldr	r3, [r7, #28]
 8003eec:	005b      	lsls	r3, r3, #1
 8003eee:	2203      	movs	r2, #3
 8003ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef4:	43db      	mvns	r3, r3
 8003ef6:	69ba      	ldr	r2, [r7, #24]
 8003ef8:	4013      	ands	r3, r2
 8003efa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	f003 0203 	and.w	r2, r3, #3
 8003f04:	69fb      	ldr	r3, [r7, #28]
 8003f06:	005b      	lsls	r3, r3, #1
 8003f08:	fa02 f303 	lsl.w	r3, r2, r3
 8003f0c:	69ba      	ldr	r2, [r7, #24]
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	69ba      	ldr	r2, [r7, #24]
 8003f16:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	f000 80be 	beq.w	80040a2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f26:	4b66      	ldr	r3, [pc, #408]	; (80040c0 <HAL_GPIO_Init+0x324>)
 8003f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f2a:	4a65      	ldr	r2, [pc, #404]	; (80040c0 <HAL_GPIO_Init+0x324>)
 8003f2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f30:	6453      	str	r3, [r2, #68]	; 0x44
 8003f32:	4b63      	ldr	r3, [pc, #396]	; (80040c0 <HAL_GPIO_Init+0x324>)
 8003f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f3a:	60fb      	str	r3, [r7, #12]
 8003f3c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003f3e:	4a61      	ldr	r2, [pc, #388]	; (80040c4 <HAL_GPIO_Init+0x328>)
 8003f40:	69fb      	ldr	r3, [r7, #28]
 8003f42:	089b      	lsrs	r3, r3, #2
 8003f44:	3302      	adds	r3, #2
 8003f46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003f4c:	69fb      	ldr	r3, [r7, #28]
 8003f4e:	f003 0303 	and.w	r3, r3, #3
 8003f52:	009b      	lsls	r3, r3, #2
 8003f54:	220f      	movs	r2, #15
 8003f56:	fa02 f303 	lsl.w	r3, r2, r3
 8003f5a:	43db      	mvns	r3, r3
 8003f5c:	69ba      	ldr	r2, [r7, #24]
 8003f5e:	4013      	ands	r3, r2
 8003f60:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	4a58      	ldr	r2, [pc, #352]	; (80040c8 <HAL_GPIO_Init+0x32c>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d037      	beq.n	8003fda <HAL_GPIO_Init+0x23e>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	4a57      	ldr	r2, [pc, #348]	; (80040cc <HAL_GPIO_Init+0x330>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d031      	beq.n	8003fd6 <HAL_GPIO_Init+0x23a>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	4a56      	ldr	r2, [pc, #344]	; (80040d0 <HAL_GPIO_Init+0x334>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d02b      	beq.n	8003fd2 <HAL_GPIO_Init+0x236>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	4a55      	ldr	r2, [pc, #340]	; (80040d4 <HAL_GPIO_Init+0x338>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d025      	beq.n	8003fce <HAL_GPIO_Init+0x232>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	4a54      	ldr	r2, [pc, #336]	; (80040d8 <HAL_GPIO_Init+0x33c>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d01f      	beq.n	8003fca <HAL_GPIO_Init+0x22e>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	4a53      	ldr	r2, [pc, #332]	; (80040dc <HAL_GPIO_Init+0x340>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d019      	beq.n	8003fc6 <HAL_GPIO_Init+0x22a>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	4a52      	ldr	r2, [pc, #328]	; (80040e0 <HAL_GPIO_Init+0x344>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d013      	beq.n	8003fc2 <HAL_GPIO_Init+0x226>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	4a51      	ldr	r2, [pc, #324]	; (80040e4 <HAL_GPIO_Init+0x348>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d00d      	beq.n	8003fbe <HAL_GPIO_Init+0x222>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	4a50      	ldr	r2, [pc, #320]	; (80040e8 <HAL_GPIO_Init+0x34c>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d007      	beq.n	8003fba <HAL_GPIO_Init+0x21e>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	4a4f      	ldr	r2, [pc, #316]	; (80040ec <HAL_GPIO_Init+0x350>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d101      	bne.n	8003fb6 <HAL_GPIO_Init+0x21a>
 8003fb2:	2309      	movs	r3, #9
 8003fb4:	e012      	b.n	8003fdc <HAL_GPIO_Init+0x240>
 8003fb6:	230a      	movs	r3, #10
 8003fb8:	e010      	b.n	8003fdc <HAL_GPIO_Init+0x240>
 8003fba:	2308      	movs	r3, #8
 8003fbc:	e00e      	b.n	8003fdc <HAL_GPIO_Init+0x240>
 8003fbe:	2307      	movs	r3, #7
 8003fc0:	e00c      	b.n	8003fdc <HAL_GPIO_Init+0x240>
 8003fc2:	2306      	movs	r3, #6
 8003fc4:	e00a      	b.n	8003fdc <HAL_GPIO_Init+0x240>
 8003fc6:	2305      	movs	r3, #5
 8003fc8:	e008      	b.n	8003fdc <HAL_GPIO_Init+0x240>
 8003fca:	2304      	movs	r3, #4
 8003fcc:	e006      	b.n	8003fdc <HAL_GPIO_Init+0x240>
 8003fce:	2303      	movs	r3, #3
 8003fd0:	e004      	b.n	8003fdc <HAL_GPIO_Init+0x240>
 8003fd2:	2302      	movs	r3, #2
 8003fd4:	e002      	b.n	8003fdc <HAL_GPIO_Init+0x240>
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e000      	b.n	8003fdc <HAL_GPIO_Init+0x240>
 8003fda:	2300      	movs	r3, #0
 8003fdc:	69fa      	ldr	r2, [r7, #28]
 8003fde:	f002 0203 	and.w	r2, r2, #3
 8003fe2:	0092      	lsls	r2, r2, #2
 8003fe4:	4093      	lsls	r3, r2
 8003fe6:	69ba      	ldr	r2, [r7, #24]
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003fec:	4935      	ldr	r1, [pc, #212]	; (80040c4 <HAL_GPIO_Init+0x328>)
 8003fee:	69fb      	ldr	r3, [r7, #28]
 8003ff0:	089b      	lsrs	r3, r3, #2
 8003ff2:	3302      	adds	r3, #2
 8003ff4:	69ba      	ldr	r2, [r7, #24]
 8003ff6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003ffa:	4b3d      	ldr	r3, [pc, #244]	; (80040f0 <HAL_GPIO_Init+0x354>)
 8003ffc:	689b      	ldr	r3, [r3, #8]
 8003ffe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	43db      	mvns	r3, r3
 8004004:	69ba      	ldr	r2, [r7, #24]
 8004006:	4013      	ands	r3, r2
 8004008:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004012:	2b00      	cmp	r3, #0
 8004014:	d003      	beq.n	800401e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004016:	69ba      	ldr	r2, [r7, #24]
 8004018:	693b      	ldr	r3, [r7, #16]
 800401a:	4313      	orrs	r3, r2
 800401c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800401e:	4a34      	ldr	r2, [pc, #208]	; (80040f0 <HAL_GPIO_Init+0x354>)
 8004020:	69bb      	ldr	r3, [r7, #24]
 8004022:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004024:	4b32      	ldr	r3, [pc, #200]	; (80040f0 <HAL_GPIO_Init+0x354>)
 8004026:	68db      	ldr	r3, [r3, #12]
 8004028:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	43db      	mvns	r3, r3
 800402e:	69ba      	ldr	r2, [r7, #24]
 8004030:	4013      	ands	r3, r2
 8004032:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800403c:	2b00      	cmp	r3, #0
 800403e:	d003      	beq.n	8004048 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004040:	69ba      	ldr	r2, [r7, #24]
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	4313      	orrs	r3, r2
 8004046:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004048:	4a29      	ldr	r2, [pc, #164]	; (80040f0 <HAL_GPIO_Init+0x354>)
 800404a:	69bb      	ldr	r3, [r7, #24]
 800404c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800404e:	4b28      	ldr	r3, [pc, #160]	; (80040f0 <HAL_GPIO_Init+0x354>)
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	43db      	mvns	r3, r3
 8004058:	69ba      	ldr	r2, [r7, #24]
 800405a:	4013      	ands	r3, r2
 800405c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004066:	2b00      	cmp	r3, #0
 8004068:	d003      	beq.n	8004072 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800406a:	69ba      	ldr	r2, [r7, #24]
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	4313      	orrs	r3, r2
 8004070:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004072:	4a1f      	ldr	r2, [pc, #124]	; (80040f0 <HAL_GPIO_Init+0x354>)
 8004074:	69bb      	ldr	r3, [r7, #24]
 8004076:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004078:	4b1d      	ldr	r3, [pc, #116]	; (80040f0 <HAL_GPIO_Init+0x354>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	43db      	mvns	r3, r3
 8004082:	69ba      	ldr	r2, [r7, #24]
 8004084:	4013      	ands	r3, r2
 8004086:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004090:	2b00      	cmp	r3, #0
 8004092:	d003      	beq.n	800409c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004094:	69ba      	ldr	r2, [r7, #24]
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	4313      	orrs	r3, r2
 800409a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800409c:	4a14      	ldr	r2, [pc, #80]	; (80040f0 <HAL_GPIO_Init+0x354>)
 800409e:	69bb      	ldr	r3, [r7, #24]
 80040a0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80040a2:	69fb      	ldr	r3, [r7, #28]
 80040a4:	3301      	adds	r3, #1
 80040a6:	61fb      	str	r3, [r7, #28]
 80040a8:	69fb      	ldr	r3, [r7, #28]
 80040aa:	2b0f      	cmp	r3, #15
 80040ac:	f67f ae86 	bls.w	8003dbc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80040b0:	bf00      	nop
 80040b2:	bf00      	nop
 80040b4:	3724      	adds	r7, #36	; 0x24
 80040b6:	46bd      	mov	sp, r7
 80040b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040bc:	4770      	bx	lr
 80040be:	bf00      	nop
 80040c0:	40023800 	.word	0x40023800
 80040c4:	40013800 	.word	0x40013800
 80040c8:	40020000 	.word	0x40020000
 80040cc:	40020400 	.word	0x40020400
 80040d0:	40020800 	.word	0x40020800
 80040d4:	40020c00 	.word	0x40020c00
 80040d8:	40021000 	.word	0x40021000
 80040dc:	40021400 	.word	0x40021400
 80040e0:	40021800 	.word	0x40021800
 80040e4:	40021c00 	.word	0x40021c00
 80040e8:	40022000 	.word	0x40022000
 80040ec:	40022400 	.word	0x40022400
 80040f0:	40013c00 	.word	0x40013c00

080040f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b083      	sub	sp, #12
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
 80040fc:	460b      	mov	r3, r1
 80040fe:	807b      	strh	r3, [r7, #2]
 8004100:	4613      	mov	r3, r2
 8004102:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004104:	787b      	ldrb	r3, [r7, #1]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d003      	beq.n	8004112 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800410a:	887a      	ldrh	r2, [r7, #2]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004110:	e003      	b.n	800411a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004112:	887b      	ldrh	r3, [r7, #2]
 8004114:	041a      	lsls	r2, r3, #16
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	619a      	str	r2, [r3, #24]
}
 800411a:	bf00      	nop
 800411c:	370c      	adds	r7, #12
 800411e:	46bd      	mov	sp, r7
 8004120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004124:	4770      	bx	lr

08004126 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004126:	b480      	push	{r7}
 8004128:	b085      	sub	sp, #20
 800412a:	af00      	add	r7, sp, #0
 800412c:	6078      	str	r0, [r7, #4]
 800412e:	460b      	mov	r3, r1
 8004130:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	695b      	ldr	r3, [r3, #20]
 8004136:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004138:	887a      	ldrh	r2, [r7, #2]
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	4013      	ands	r3, r2
 800413e:	041a      	lsls	r2, r3, #16
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	43d9      	mvns	r1, r3
 8004144:	887b      	ldrh	r3, [r7, #2]
 8004146:	400b      	ands	r3, r1
 8004148:	431a      	orrs	r2, r3
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	619a      	str	r2, [r3, #24]
}
 800414e:	bf00      	nop
 8004150:	3714      	adds	r7, #20
 8004152:	46bd      	mov	sp, r7
 8004154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004158:	4770      	bx	lr

0800415a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800415a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800415c:	b08f      	sub	sp, #60	; 0x3c
 800415e:	af0a      	add	r7, sp, #40	; 0x28
 8004160:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d101      	bne.n	800416c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004168:	2301      	movs	r3, #1
 800416a:	e116      	b.n	800439a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8004178:	b2db      	uxtb	r3, r3
 800417a:	2b00      	cmp	r3, #0
 800417c:	d106      	bne.n	800418c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2200      	movs	r2, #0
 8004182:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	f7fd fda4 	bl	8001cd4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2203      	movs	r2, #3
 8004190:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004198:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800419c:	2b00      	cmp	r3, #0
 800419e:	d102      	bne.n	80041a6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2200      	movs	r2, #0
 80041a4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4618      	mov	r0, r3
 80041ac:	f002 fb74 	bl	8006898 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	603b      	str	r3, [r7, #0]
 80041b6:	687e      	ldr	r6, [r7, #4]
 80041b8:	466d      	mov	r5, sp
 80041ba:	f106 0410 	add.w	r4, r6, #16
 80041be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80041c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80041c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80041c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80041c6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80041ca:	e885 0003 	stmia.w	r5, {r0, r1}
 80041ce:	1d33      	adds	r3, r6, #4
 80041d0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80041d2:	6838      	ldr	r0, [r7, #0]
 80041d4:	f002 fb08 	bl	80067e8 <USB_CoreInit>
 80041d8:	4603      	mov	r3, r0
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d005      	beq.n	80041ea <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2202      	movs	r2, #2
 80041e2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e0d7      	b.n	800439a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	2100      	movs	r1, #0
 80041f0:	4618      	mov	r0, r3
 80041f2:	f002 fb62 	bl	80068ba <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80041f6:	2300      	movs	r3, #0
 80041f8:	73fb      	strb	r3, [r7, #15]
 80041fa:	e04a      	b.n	8004292 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80041fc:	7bfa      	ldrb	r2, [r7, #15]
 80041fe:	6879      	ldr	r1, [r7, #4]
 8004200:	4613      	mov	r3, r2
 8004202:	00db      	lsls	r3, r3, #3
 8004204:	4413      	add	r3, r2
 8004206:	009b      	lsls	r3, r3, #2
 8004208:	440b      	add	r3, r1
 800420a:	333d      	adds	r3, #61	; 0x3d
 800420c:	2201      	movs	r2, #1
 800420e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004210:	7bfa      	ldrb	r2, [r7, #15]
 8004212:	6879      	ldr	r1, [r7, #4]
 8004214:	4613      	mov	r3, r2
 8004216:	00db      	lsls	r3, r3, #3
 8004218:	4413      	add	r3, r2
 800421a:	009b      	lsls	r3, r3, #2
 800421c:	440b      	add	r3, r1
 800421e:	333c      	adds	r3, #60	; 0x3c
 8004220:	7bfa      	ldrb	r2, [r7, #15]
 8004222:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004224:	7bfa      	ldrb	r2, [r7, #15]
 8004226:	7bfb      	ldrb	r3, [r7, #15]
 8004228:	b298      	uxth	r0, r3
 800422a:	6879      	ldr	r1, [r7, #4]
 800422c:	4613      	mov	r3, r2
 800422e:	00db      	lsls	r3, r3, #3
 8004230:	4413      	add	r3, r2
 8004232:	009b      	lsls	r3, r3, #2
 8004234:	440b      	add	r3, r1
 8004236:	3344      	adds	r3, #68	; 0x44
 8004238:	4602      	mov	r2, r0
 800423a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800423c:	7bfa      	ldrb	r2, [r7, #15]
 800423e:	6879      	ldr	r1, [r7, #4]
 8004240:	4613      	mov	r3, r2
 8004242:	00db      	lsls	r3, r3, #3
 8004244:	4413      	add	r3, r2
 8004246:	009b      	lsls	r3, r3, #2
 8004248:	440b      	add	r3, r1
 800424a:	3340      	adds	r3, #64	; 0x40
 800424c:	2200      	movs	r2, #0
 800424e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004250:	7bfa      	ldrb	r2, [r7, #15]
 8004252:	6879      	ldr	r1, [r7, #4]
 8004254:	4613      	mov	r3, r2
 8004256:	00db      	lsls	r3, r3, #3
 8004258:	4413      	add	r3, r2
 800425a:	009b      	lsls	r3, r3, #2
 800425c:	440b      	add	r3, r1
 800425e:	3348      	adds	r3, #72	; 0x48
 8004260:	2200      	movs	r2, #0
 8004262:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004264:	7bfa      	ldrb	r2, [r7, #15]
 8004266:	6879      	ldr	r1, [r7, #4]
 8004268:	4613      	mov	r3, r2
 800426a:	00db      	lsls	r3, r3, #3
 800426c:	4413      	add	r3, r2
 800426e:	009b      	lsls	r3, r3, #2
 8004270:	440b      	add	r3, r1
 8004272:	334c      	adds	r3, #76	; 0x4c
 8004274:	2200      	movs	r2, #0
 8004276:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004278:	7bfa      	ldrb	r2, [r7, #15]
 800427a:	6879      	ldr	r1, [r7, #4]
 800427c:	4613      	mov	r3, r2
 800427e:	00db      	lsls	r3, r3, #3
 8004280:	4413      	add	r3, r2
 8004282:	009b      	lsls	r3, r3, #2
 8004284:	440b      	add	r3, r1
 8004286:	3354      	adds	r3, #84	; 0x54
 8004288:	2200      	movs	r2, #0
 800428a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800428c:	7bfb      	ldrb	r3, [r7, #15]
 800428e:	3301      	adds	r3, #1
 8004290:	73fb      	strb	r3, [r7, #15]
 8004292:	7bfa      	ldrb	r2, [r7, #15]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	429a      	cmp	r2, r3
 800429a:	d3af      	bcc.n	80041fc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800429c:	2300      	movs	r3, #0
 800429e:	73fb      	strb	r3, [r7, #15]
 80042a0:	e044      	b.n	800432c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80042a2:	7bfa      	ldrb	r2, [r7, #15]
 80042a4:	6879      	ldr	r1, [r7, #4]
 80042a6:	4613      	mov	r3, r2
 80042a8:	00db      	lsls	r3, r3, #3
 80042aa:	4413      	add	r3, r2
 80042ac:	009b      	lsls	r3, r3, #2
 80042ae:	440b      	add	r3, r1
 80042b0:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80042b4:	2200      	movs	r2, #0
 80042b6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80042b8:	7bfa      	ldrb	r2, [r7, #15]
 80042ba:	6879      	ldr	r1, [r7, #4]
 80042bc:	4613      	mov	r3, r2
 80042be:	00db      	lsls	r3, r3, #3
 80042c0:	4413      	add	r3, r2
 80042c2:	009b      	lsls	r3, r3, #2
 80042c4:	440b      	add	r3, r1
 80042c6:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80042ca:	7bfa      	ldrb	r2, [r7, #15]
 80042cc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80042ce:	7bfa      	ldrb	r2, [r7, #15]
 80042d0:	6879      	ldr	r1, [r7, #4]
 80042d2:	4613      	mov	r3, r2
 80042d4:	00db      	lsls	r3, r3, #3
 80042d6:	4413      	add	r3, r2
 80042d8:	009b      	lsls	r3, r3, #2
 80042da:	440b      	add	r3, r1
 80042dc:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80042e0:	2200      	movs	r2, #0
 80042e2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80042e4:	7bfa      	ldrb	r2, [r7, #15]
 80042e6:	6879      	ldr	r1, [r7, #4]
 80042e8:	4613      	mov	r3, r2
 80042ea:	00db      	lsls	r3, r3, #3
 80042ec:	4413      	add	r3, r2
 80042ee:	009b      	lsls	r3, r3, #2
 80042f0:	440b      	add	r3, r1
 80042f2:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80042f6:	2200      	movs	r2, #0
 80042f8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80042fa:	7bfa      	ldrb	r2, [r7, #15]
 80042fc:	6879      	ldr	r1, [r7, #4]
 80042fe:	4613      	mov	r3, r2
 8004300:	00db      	lsls	r3, r3, #3
 8004302:	4413      	add	r3, r2
 8004304:	009b      	lsls	r3, r3, #2
 8004306:	440b      	add	r3, r1
 8004308:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800430c:	2200      	movs	r2, #0
 800430e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004310:	7bfa      	ldrb	r2, [r7, #15]
 8004312:	6879      	ldr	r1, [r7, #4]
 8004314:	4613      	mov	r3, r2
 8004316:	00db      	lsls	r3, r3, #3
 8004318:	4413      	add	r3, r2
 800431a:	009b      	lsls	r3, r3, #2
 800431c:	440b      	add	r3, r1
 800431e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004322:	2200      	movs	r2, #0
 8004324:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004326:	7bfb      	ldrb	r3, [r7, #15]
 8004328:	3301      	adds	r3, #1
 800432a:	73fb      	strb	r3, [r7, #15]
 800432c:	7bfa      	ldrb	r2, [r7, #15]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	429a      	cmp	r2, r3
 8004334:	d3b5      	bcc.n	80042a2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	603b      	str	r3, [r7, #0]
 800433c:	687e      	ldr	r6, [r7, #4]
 800433e:	466d      	mov	r5, sp
 8004340:	f106 0410 	add.w	r4, r6, #16
 8004344:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004346:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004348:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800434a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800434c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004350:	e885 0003 	stmia.w	r5, {r0, r1}
 8004354:	1d33      	adds	r3, r6, #4
 8004356:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004358:	6838      	ldr	r0, [r7, #0]
 800435a:	f002 fafb 	bl	8006954 <USB_DevInit>
 800435e:	4603      	mov	r3, r0
 8004360:	2b00      	cmp	r3, #0
 8004362:	d005      	beq.n	8004370 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2202      	movs	r2, #2
 8004368:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800436c:	2301      	movs	r3, #1
 800436e:	e014      	b.n	800439a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2200      	movs	r2, #0
 8004374:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2201      	movs	r2, #1
 800437c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004384:	2b01      	cmp	r3, #1
 8004386:	d102      	bne.n	800438e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004388:	6878      	ldr	r0, [r7, #4]
 800438a:	f000 f80b 	bl	80043a4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4618      	mov	r0, r3
 8004394:	f002 fcb9 	bl	8006d0a <USB_DevDisconnect>

  return HAL_OK;
 8004398:	2300      	movs	r3, #0
}
 800439a:	4618      	mov	r0, r3
 800439c:	3714      	adds	r7, #20
 800439e:	46bd      	mov	sp, r7
 80043a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080043a4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b085      	sub	sp, #20
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2201      	movs	r2, #1
 80043b6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2200      	movs	r2, #0
 80043be:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	699b      	ldr	r3, [r3, #24]
 80043c6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80043d2:	4b05      	ldr	r3, [pc, #20]	; (80043e8 <HAL_PCDEx_ActivateLPM+0x44>)
 80043d4:	4313      	orrs	r3, r2
 80043d6:	68fa      	ldr	r2, [r7, #12]
 80043d8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80043da:	2300      	movs	r3, #0
}
 80043dc:	4618      	mov	r0, r3
 80043de:	3714      	adds	r7, #20
 80043e0:	46bd      	mov	sp, r7
 80043e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e6:	4770      	bx	lr
 80043e8:	10000003 	.word	0x10000003

080043ec <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80043ec:	b480      	push	{r7}
 80043ee:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80043f0:	4b05      	ldr	r3, [pc, #20]	; (8004408 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a04      	ldr	r2, [pc, #16]	; (8004408 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80043f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043fa:	6013      	str	r3, [r2, #0]
}
 80043fc:	bf00      	nop
 80043fe:	46bd      	mov	sp, r7
 8004400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004404:	4770      	bx	lr
 8004406:	bf00      	nop
 8004408:	40007000 	.word	0x40007000

0800440c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b082      	sub	sp, #8
 8004410:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004412:	2300      	movs	r3, #0
 8004414:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004416:	4b23      	ldr	r3, [pc, #140]	; (80044a4 <HAL_PWREx_EnableOverDrive+0x98>)
 8004418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800441a:	4a22      	ldr	r2, [pc, #136]	; (80044a4 <HAL_PWREx_EnableOverDrive+0x98>)
 800441c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004420:	6413      	str	r3, [r2, #64]	; 0x40
 8004422:	4b20      	ldr	r3, [pc, #128]	; (80044a4 <HAL_PWREx_EnableOverDrive+0x98>)
 8004424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004426:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800442a:	603b      	str	r3, [r7, #0]
 800442c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800442e:	4b1e      	ldr	r3, [pc, #120]	; (80044a8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a1d      	ldr	r2, [pc, #116]	; (80044a8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004434:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004438:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800443a:	f7fd fe6f 	bl	800211c <HAL_GetTick>
 800443e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004440:	e009      	b.n	8004456 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004442:	f7fd fe6b 	bl	800211c <HAL_GetTick>
 8004446:	4602      	mov	r2, r0
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	1ad3      	subs	r3, r2, r3
 800444c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004450:	d901      	bls.n	8004456 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004452:	2303      	movs	r3, #3
 8004454:	e022      	b.n	800449c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004456:	4b14      	ldr	r3, [pc, #80]	; (80044a8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800445e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004462:	d1ee      	bne.n	8004442 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004464:	4b10      	ldr	r3, [pc, #64]	; (80044a8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a0f      	ldr	r2, [pc, #60]	; (80044a8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800446a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800446e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004470:	f7fd fe54 	bl	800211c <HAL_GetTick>
 8004474:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004476:	e009      	b.n	800448c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004478:	f7fd fe50 	bl	800211c <HAL_GetTick>
 800447c:	4602      	mov	r2, r0
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	1ad3      	subs	r3, r2, r3
 8004482:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004486:	d901      	bls.n	800448c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004488:	2303      	movs	r3, #3
 800448a:	e007      	b.n	800449c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800448c:	4b06      	ldr	r3, [pc, #24]	; (80044a8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004494:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004498:	d1ee      	bne.n	8004478 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800449a:	2300      	movs	r3, #0
}
 800449c:	4618      	mov	r0, r3
 800449e:	3708      	adds	r7, #8
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}
 80044a4:	40023800 	.word	0x40023800
 80044a8:	40007000 	.word	0x40007000

080044ac <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b086      	sub	sp, #24
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80044b4:	2300      	movs	r3, #0
 80044b6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d101      	bne.n	80044c2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	e29b      	b.n	80049fa <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f003 0301 	and.w	r3, r3, #1
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	f000 8087 	beq.w	80045de <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80044d0:	4b96      	ldr	r3, [pc, #600]	; (800472c <HAL_RCC_OscConfig+0x280>)
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	f003 030c 	and.w	r3, r3, #12
 80044d8:	2b04      	cmp	r3, #4
 80044da:	d00c      	beq.n	80044f6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044dc:	4b93      	ldr	r3, [pc, #588]	; (800472c <HAL_RCC_OscConfig+0x280>)
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	f003 030c 	and.w	r3, r3, #12
 80044e4:	2b08      	cmp	r3, #8
 80044e6:	d112      	bne.n	800450e <HAL_RCC_OscConfig+0x62>
 80044e8:	4b90      	ldr	r3, [pc, #576]	; (800472c <HAL_RCC_OscConfig+0x280>)
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80044f4:	d10b      	bne.n	800450e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044f6:	4b8d      	ldr	r3, [pc, #564]	; (800472c <HAL_RCC_OscConfig+0x280>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d06c      	beq.n	80045dc <HAL_RCC_OscConfig+0x130>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d168      	bne.n	80045dc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800450a:	2301      	movs	r3, #1
 800450c:	e275      	b.n	80049fa <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004516:	d106      	bne.n	8004526 <HAL_RCC_OscConfig+0x7a>
 8004518:	4b84      	ldr	r3, [pc, #528]	; (800472c <HAL_RCC_OscConfig+0x280>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a83      	ldr	r2, [pc, #524]	; (800472c <HAL_RCC_OscConfig+0x280>)
 800451e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004522:	6013      	str	r3, [r2, #0]
 8004524:	e02e      	b.n	8004584 <HAL_RCC_OscConfig+0xd8>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d10c      	bne.n	8004548 <HAL_RCC_OscConfig+0x9c>
 800452e:	4b7f      	ldr	r3, [pc, #508]	; (800472c <HAL_RCC_OscConfig+0x280>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a7e      	ldr	r2, [pc, #504]	; (800472c <HAL_RCC_OscConfig+0x280>)
 8004534:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004538:	6013      	str	r3, [r2, #0]
 800453a:	4b7c      	ldr	r3, [pc, #496]	; (800472c <HAL_RCC_OscConfig+0x280>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a7b      	ldr	r2, [pc, #492]	; (800472c <HAL_RCC_OscConfig+0x280>)
 8004540:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004544:	6013      	str	r3, [r2, #0]
 8004546:	e01d      	b.n	8004584 <HAL_RCC_OscConfig+0xd8>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004550:	d10c      	bne.n	800456c <HAL_RCC_OscConfig+0xc0>
 8004552:	4b76      	ldr	r3, [pc, #472]	; (800472c <HAL_RCC_OscConfig+0x280>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a75      	ldr	r2, [pc, #468]	; (800472c <HAL_RCC_OscConfig+0x280>)
 8004558:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800455c:	6013      	str	r3, [r2, #0]
 800455e:	4b73      	ldr	r3, [pc, #460]	; (800472c <HAL_RCC_OscConfig+0x280>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a72      	ldr	r2, [pc, #456]	; (800472c <HAL_RCC_OscConfig+0x280>)
 8004564:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004568:	6013      	str	r3, [r2, #0]
 800456a:	e00b      	b.n	8004584 <HAL_RCC_OscConfig+0xd8>
 800456c:	4b6f      	ldr	r3, [pc, #444]	; (800472c <HAL_RCC_OscConfig+0x280>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a6e      	ldr	r2, [pc, #440]	; (800472c <HAL_RCC_OscConfig+0x280>)
 8004572:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004576:	6013      	str	r3, [r2, #0]
 8004578:	4b6c      	ldr	r3, [pc, #432]	; (800472c <HAL_RCC_OscConfig+0x280>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a6b      	ldr	r2, [pc, #428]	; (800472c <HAL_RCC_OscConfig+0x280>)
 800457e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004582:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d013      	beq.n	80045b4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800458c:	f7fd fdc6 	bl	800211c <HAL_GetTick>
 8004590:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004592:	e008      	b.n	80045a6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004594:	f7fd fdc2 	bl	800211c <HAL_GetTick>
 8004598:	4602      	mov	r2, r0
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	1ad3      	subs	r3, r2, r3
 800459e:	2b64      	cmp	r3, #100	; 0x64
 80045a0:	d901      	bls.n	80045a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80045a2:	2303      	movs	r3, #3
 80045a4:	e229      	b.n	80049fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045a6:	4b61      	ldr	r3, [pc, #388]	; (800472c <HAL_RCC_OscConfig+0x280>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d0f0      	beq.n	8004594 <HAL_RCC_OscConfig+0xe8>
 80045b2:	e014      	b.n	80045de <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045b4:	f7fd fdb2 	bl	800211c <HAL_GetTick>
 80045b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045ba:	e008      	b.n	80045ce <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045bc:	f7fd fdae 	bl	800211c <HAL_GetTick>
 80045c0:	4602      	mov	r2, r0
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	1ad3      	subs	r3, r2, r3
 80045c6:	2b64      	cmp	r3, #100	; 0x64
 80045c8:	d901      	bls.n	80045ce <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80045ca:	2303      	movs	r3, #3
 80045cc:	e215      	b.n	80049fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045ce:	4b57      	ldr	r3, [pc, #348]	; (800472c <HAL_RCC_OscConfig+0x280>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d1f0      	bne.n	80045bc <HAL_RCC_OscConfig+0x110>
 80045da:	e000      	b.n	80045de <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f003 0302 	and.w	r3, r3, #2
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d069      	beq.n	80046be <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80045ea:	4b50      	ldr	r3, [pc, #320]	; (800472c <HAL_RCC_OscConfig+0x280>)
 80045ec:	689b      	ldr	r3, [r3, #8]
 80045ee:	f003 030c 	and.w	r3, r3, #12
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d00b      	beq.n	800460e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045f6:	4b4d      	ldr	r3, [pc, #308]	; (800472c <HAL_RCC_OscConfig+0x280>)
 80045f8:	689b      	ldr	r3, [r3, #8]
 80045fa:	f003 030c 	and.w	r3, r3, #12
 80045fe:	2b08      	cmp	r3, #8
 8004600:	d11c      	bne.n	800463c <HAL_RCC_OscConfig+0x190>
 8004602:	4b4a      	ldr	r3, [pc, #296]	; (800472c <HAL_RCC_OscConfig+0x280>)
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800460a:	2b00      	cmp	r3, #0
 800460c:	d116      	bne.n	800463c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800460e:	4b47      	ldr	r3, [pc, #284]	; (800472c <HAL_RCC_OscConfig+0x280>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f003 0302 	and.w	r3, r3, #2
 8004616:	2b00      	cmp	r3, #0
 8004618:	d005      	beq.n	8004626 <HAL_RCC_OscConfig+0x17a>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	68db      	ldr	r3, [r3, #12]
 800461e:	2b01      	cmp	r3, #1
 8004620:	d001      	beq.n	8004626 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004622:	2301      	movs	r3, #1
 8004624:	e1e9      	b.n	80049fa <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004626:	4b41      	ldr	r3, [pc, #260]	; (800472c <HAL_RCC_OscConfig+0x280>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	691b      	ldr	r3, [r3, #16]
 8004632:	00db      	lsls	r3, r3, #3
 8004634:	493d      	ldr	r1, [pc, #244]	; (800472c <HAL_RCC_OscConfig+0x280>)
 8004636:	4313      	orrs	r3, r2
 8004638:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800463a:	e040      	b.n	80046be <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	68db      	ldr	r3, [r3, #12]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d023      	beq.n	800468c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004644:	4b39      	ldr	r3, [pc, #228]	; (800472c <HAL_RCC_OscConfig+0x280>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a38      	ldr	r2, [pc, #224]	; (800472c <HAL_RCC_OscConfig+0x280>)
 800464a:	f043 0301 	orr.w	r3, r3, #1
 800464e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004650:	f7fd fd64 	bl	800211c <HAL_GetTick>
 8004654:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004656:	e008      	b.n	800466a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004658:	f7fd fd60 	bl	800211c <HAL_GetTick>
 800465c:	4602      	mov	r2, r0
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	1ad3      	subs	r3, r2, r3
 8004662:	2b02      	cmp	r3, #2
 8004664:	d901      	bls.n	800466a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004666:	2303      	movs	r3, #3
 8004668:	e1c7      	b.n	80049fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800466a:	4b30      	ldr	r3, [pc, #192]	; (800472c <HAL_RCC_OscConfig+0x280>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f003 0302 	and.w	r3, r3, #2
 8004672:	2b00      	cmp	r3, #0
 8004674:	d0f0      	beq.n	8004658 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004676:	4b2d      	ldr	r3, [pc, #180]	; (800472c <HAL_RCC_OscConfig+0x280>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	691b      	ldr	r3, [r3, #16]
 8004682:	00db      	lsls	r3, r3, #3
 8004684:	4929      	ldr	r1, [pc, #164]	; (800472c <HAL_RCC_OscConfig+0x280>)
 8004686:	4313      	orrs	r3, r2
 8004688:	600b      	str	r3, [r1, #0]
 800468a:	e018      	b.n	80046be <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800468c:	4b27      	ldr	r3, [pc, #156]	; (800472c <HAL_RCC_OscConfig+0x280>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a26      	ldr	r2, [pc, #152]	; (800472c <HAL_RCC_OscConfig+0x280>)
 8004692:	f023 0301 	bic.w	r3, r3, #1
 8004696:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004698:	f7fd fd40 	bl	800211c <HAL_GetTick>
 800469c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800469e:	e008      	b.n	80046b2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046a0:	f7fd fd3c 	bl	800211c <HAL_GetTick>
 80046a4:	4602      	mov	r2, r0
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	1ad3      	subs	r3, r2, r3
 80046aa:	2b02      	cmp	r3, #2
 80046ac:	d901      	bls.n	80046b2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80046ae:	2303      	movs	r3, #3
 80046b0:	e1a3      	b.n	80049fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046b2:	4b1e      	ldr	r3, [pc, #120]	; (800472c <HAL_RCC_OscConfig+0x280>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f003 0302 	and.w	r3, r3, #2
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d1f0      	bne.n	80046a0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f003 0308 	and.w	r3, r3, #8
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d038      	beq.n	800473c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	695b      	ldr	r3, [r3, #20]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d019      	beq.n	8004706 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046d2:	4b16      	ldr	r3, [pc, #88]	; (800472c <HAL_RCC_OscConfig+0x280>)
 80046d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046d6:	4a15      	ldr	r2, [pc, #84]	; (800472c <HAL_RCC_OscConfig+0x280>)
 80046d8:	f043 0301 	orr.w	r3, r3, #1
 80046dc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046de:	f7fd fd1d 	bl	800211c <HAL_GetTick>
 80046e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046e4:	e008      	b.n	80046f8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046e6:	f7fd fd19 	bl	800211c <HAL_GetTick>
 80046ea:	4602      	mov	r2, r0
 80046ec:	693b      	ldr	r3, [r7, #16]
 80046ee:	1ad3      	subs	r3, r2, r3
 80046f0:	2b02      	cmp	r3, #2
 80046f2:	d901      	bls.n	80046f8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80046f4:	2303      	movs	r3, #3
 80046f6:	e180      	b.n	80049fa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046f8:	4b0c      	ldr	r3, [pc, #48]	; (800472c <HAL_RCC_OscConfig+0x280>)
 80046fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046fc:	f003 0302 	and.w	r3, r3, #2
 8004700:	2b00      	cmp	r3, #0
 8004702:	d0f0      	beq.n	80046e6 <HAL_RCC_OscConfig+0x23a>
 8004704:	e01a      	b.n	800473c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004706:	4b09      	ldr	r3, [pc, #36]	; (800472c <HAL_RCC_OscConfig+0x280>)
 8004708:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800470a:	4a08      	ldr	r2, [pc, #32]	; (800472c <HAL_RCC_OscConfig+0x280>)
 800470c:	f023 0301 	bic.w	r3, r3, #1
 8004710:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004712:	f7fd fd03 	bl	800211c <HAL_GetTick>
 8004716:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004718:	e00a      	b.n	8004730 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800471a:	f7fd fcff 	bl	800211c <HAL_GetTick>
 800471e:	4602      	mov	r2, r0
 8004720:	693b      	ldr	r3, [r7, #16]
 8004722:	1ad3      	subs	r3, r2, r3
 8004724:	2b02      	cmp	r3, #2
 8004726:	d903      	bls.n	8004730 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004728:	2303      	movs	r3, #3
 800472a:	e166      	b.n	80049fa <HAL_RCC_OscConfig+0x54e>
 800472c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004730:	4b92      	ldr	r3, [pc, #584]	; (800497c <HAL_RCC_OscConfig+0x4d0>)
 8004732:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004734:	f003 0302 	and.w	r3, r3, #2
 8004738:	2b00      	cmp	r3, #0
 800473a:	d1ee      	bne.n	800471a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f003 0304 	and.w	r3, r3, #4
 8004744:	2b00      	cmp	r3, #0
 8004746:	f000 80a4 	beq.w	8004892 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800474a:	4b8c      	ldr	r3, [pc, #560]	; (800497c <HAL_RCC_OscConfig+0x4d0>)
 800474c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800474e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004752:	2b00      	cmp	r3, #0
 8004754:	d10d      	bne.n	8004772 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004756:	4b89      	ldr	r3, [pc, #548]	; (800497c <HAL_RCC_OscConfig+0x4d0>)
 8004758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800475a:	4a88      	ldr	r2, [pc, #544]	; (800497c <HAL_RCC_OscConfig+0x4d0>)
 800475c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004760:	6413      	str	r3, [r2, #64]	; 0x40
 8004762:	4b86      	ldr	r3, [pc, #536]	; (800497c <HAL_RCC_OscConfig+0x4d0>)
 8004764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004766:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800476a:	60bb      	str	r3, [r7, #8]
 800476c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800476e:	2301      	movs	r3, #1
 8004770:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004772:	4b83      	ldr	r3, [pc, #524]	; (8004980 <HAL_RCC_OscConfig+0x4d4>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800477a:	2b00      	cmp	r3, #0
 800477c:	d118      	bne.n	80047b0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800477e:	4b80      	ldr	r3, [pc, #512]	; (8004980 <HAL_RCC_OscConfig+0x4d4>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a7f      	ldr	r2, [pc, #508]	; (8004980 <HAL_RCC_OscConfig+0x4d4>)
 8004784:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004788:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800478a:	f7fd fcc7 	bl	800211c <HAL_GetTick>
 800478e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004790:	e008      	b.n	80047a4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004792:	f7fd fcc3 	bl	800211c <HAL_GetTick>
 8004796:	4602      	mov	r2, r0
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	1ad3      	subs	r3, r2, r3
 800479c:	2b64      	cmp	r3, #100	; 0x64
 800479e:	d901      	bls.n	80047a4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80047a0:	2303      	movs	r3, #3
 80047a2:	e12a      	b.n	80049fa <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047a4:	4b76      	ldr	r3, [pc, #472]	; (8004980 <HAL_RCC_OscConfig+0x4d4>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d0f0      	beq.n	8004792 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	d106      	bne.n	80047c6 <HAL_RCC_OscConfig+0x31a>
 80047b8:	4b70      	ldr	r3, [pc, #448]	; (800497c <HAL_RCC_OscConfig+0x4d0>)
 80047ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047bc:	4a6f      	ldr	r2, [pc, #444]	; (800497c <HAL_RCC_OscConfig+0x4d0>)
 80047be:	f043 0301 	orr.w	r3, r3, #1
 80047c2:	6713      	str	r3, [r2, #112]	; 0x70
 80047c4:	e02d      	b.n	8004822 <HAL_RCC_OscConfig+0x376>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d10c      	bne.n	80047e8 <HAL_RCC_OscConfig+0x33c>
 80047ce:	4b6b      	ldr	r3, [pc, #428]	; (800497c <HAL_RCC_OscConfig+0x4d0>)
 80047d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047d2:	4a6a      	ldr	r2, [pc, #424]	; (800497c <HAL_RCC_OscConfig+0x4d0>)
 80047d4:	f023 0301 	bic.w	r3, r3, #1
 80047d8:	6713      	str	r3, [r2, #112]	; 0x70
 80047da:	4b68      	ldr	r3, [pc, #416]	; (800497c <HAL_RCC_OscConfig+0x4d0>)
 80047dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047de:	4a67      	ldr	r2, [pc, #412]	; (800497c <HAL_RCC_OscConfig+0x4d0>)
 80047e0:	f023 0304 	bic.w	r3, r3, #4
 80047e4:	6713      	str	r3, [r2, #112]	; 0x70
 80047e6:	e01c      	b.n	8004822 <HAL_RCC_OscConfig+0x376>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	689b      	ldr	r3, [r3, #8]
 80047ec:	2b05      	cmp	r3, #5
 80047ee:	d10c      	bne.n	800480a <HAL_RCC_OscConfig+0x35e>
 80047f0:	4b62      	ldr	r3, [pc, #392]	; (800497c <HAL_RCC_OscConfig+0x4d0>)
 80047f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047f4:	4a61      	ldr	r2, [pc, #388]	; (800497c <HAL_RCC_OscConfig+0x4d0>)
 80047f6:	f043 0304 	orr.w	r3, r3, #4
 80047fa:	6713      	str	r3, [r2, #112]	; 0x70
 80047fc:	4b5f      	ldr	r3, [pc, #380]	; (800497c <HAL_RCC_OscConfig+0x4d0>)
 80047fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004800:	4a5e      	ldr	r2, [pc, #376]	; (800497c <HAL_RCC_OscConfig+0x4d0>)
 8004802:	f043 0301 	orr.w	r3, r3, #1
 8004806:	6713      	str	r3, [r2, #112]	; 0x70
 8004808:	e00b      	b.n	8004822 <HAL_RCC_OscConfig+0x376>
 800480a:	4b5c      	ldr	r3, [pc, #368]	; (800497c <HAL_RCC_OscConfig+0x4d0>)
 800480c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800480e:	4a5b      	ldr	r2, [pc, #364]	; (800497c <HAL_RCC_OscConfig+0x4d0>)
 8004810:	f023 0301 	bic.w	r3, r3, #1
 8004814:	6713      	str	r3, [r2, #112]	; 0x70
 8004816:	4b59      	ldr	r3, [pc, #356]	; (800497c <HAL_RCC_OscConfig+0x4d0>)
 8004818:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800481a:	4a58      	ldr	r2, [pc, #352]	; (800497c <HAL_RCC_OscConfig+0x4d0>)
 800481c:	f023 0304 	bic.w	r3, r3, #4
 8004820:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	689b      	ldr	r3, [r3, #8]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d015      	beq.n	8004856 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800482a:	f7fd fc77 	bl	800211c <HAL_GetTick>
 800482e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004830:	e00a      	b.n	8004848 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004832:	f7fd fc73 	bl	800211c <HAL_GetTick>
 8004836:	4602      	mov	r2, r0
 8004838:	693b      	ldr	r3, [r7, #16]
 800483a:	1ad3      	subs	r3, r2, r3
 800483c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004840:	4293      	cmp	r3, r2
 8004842:	d901      	bls.n	8004848 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004844:	2303      	movs	r3, #3
 8004846:	e0d8      	b.n	80049fa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004848:	4b4c      	ldr	r3, [pc, #304]	; (800497c <HAL_RCC_OscConfig+0x4d0>)
 800484a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800484c:	f003 0302 	and.w	r3, r3, #2
 8004850:	2b00      	cmp	r3, #0
 8004852:	d0ee      	beq.n	8004832 <HAL_RCC_OscConfig+0x386>
 8004854:	e014      	b.n	8004880 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004856:	f7fd fc61 	bl	800211c <HAL_GetTick>
 800485a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800485c:	e00a      	b.n	8004874 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800485e:	f7fd fc5d 	bl	800211c <HAL_GetTick>
 8004862:	4602      	mov	r2, r0
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	1ad3      	subs	r3, r2, r3
 8004868:	f241 3288 	movw	r2, #5000	; 0x1388
 800486c:	4293      	cmp	r3, r2
 800486e:	d901      	bls.n	8004874 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004870:	2303      	movs	r3, #3
 8004872:	e0c2      	b.n	80049fa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004874:	4b41      	ldr	r3, [pc, #260]	; (800497c <HAL_RCC_OscConfig+0x4d0>)
 8004876:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004878:	f003 0302 	and.w	r3, r3, #2
 800487c:	2b00      	cmp	r3, #0
 800487e:	d1ee      	bne.n	800485e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004880:	7dfb      	ldrb	r3, [r7, #23]
 8004882:	2b01      	cmp	r3, #1
 8004884:	d105      	bne.n	8004892 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004886:	4b3d      	ldr	r3, [pc, #244]	; (800497c <HAL_RCC_OscConfig+0x4d0>)
 8004888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800488a:	4a3c      	ldr	r2, [pc, #240]	; (800497c <HAL_RCC_OscConfig+0x4d0>)
 800488c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004890:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	699b      	ldr	r3, [r3, #24]
 8004896:	2b00      	cmp	r3, #0
 8004898:	f000 80ae 	beq.w	80049f8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800489c:	4b37      	ldr	r3, [pc, #220]	; (800497c <HAL_RCC_OscConfig+0x4d0>)
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	f003 030c 	and.w	r3, r3, #12
 80048a4:	2b08      	cmp	r3, #8
 80048a6:	d06d      	beq.n	8004984 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	699b      	ldr	r3, [r3, #24]
 80048ac:	2b02      	cmp	r3, #2
 80048ae:	d14b      	bne.n	8004948 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048b0:	4b32      	ldr	r3, [pc, #200]	; (800497c <HAL_RCC_OscConfig+0x4d0>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a31      	ldr	r2, [pc, #196]	; (800497c <HAL_RCC_OscConfig+0x4d0>)
 80048b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80048ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048bc:	f7fd fc2e 	bl	800211c <HAL_GetTick>
 80048c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048c2:	e008      	b.n	80048d6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048c4:	f7fd fc2a 	bl	800211c <HAL_GetTick>
 80048c8:	4602      	mov	r2, r0
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	1ad3      	subs	r3, r2, r3
 80048ce:	2b02      	cmp	r3, #2
 80048d0:	d901      	bls.n	80048d6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80048d2:	2303      	movs	r3, #3
 80048d4:	e091      	b.n	80049fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048d6:	4b29      	ldr	r3, [pc, #164]	; (800497c <HAL_RCC_OscConfig+0x4d0>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d1f0      	bne.n	80048c4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	69da      	ldr	r2, [r3, #28]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6a1b      	ldr	r3, [r3, #32]
 80048ea:	431a      	orrs	r2, r3
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f0:	019b      	lsls	r3, r3, #6
 80048f2:	431a      	orrs	r2, r3
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048f8:	085b      	lsrs	r3, r3, #1
 80048fa:	3b01      	subs	r3, #1
 80048fc:	041b      	lsls	r3, r3, #16
 80048fe:	431a      	orrs	r2, r3
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004904:	061b      	lsls	r3, r3, #24
 8004906:	431a      	orrs	r2, r3
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800490c:	071b      	lsls	r3, r3, #28
 800490e:	491b      	ldr	r1, [pc, #108]	; (800497c <HAL_RCC_OscConfig+0x4d0>)
 8004910:	4313      	orrs	r3, r2
 8004912:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004914:	4b19      	ldr	r3, [pc, #100]	; (800497c <HAL_RCC_OscConfig+0x4d0>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a18      	ldr	r2, [pc, #96]	; (800497c <HAL_RCC_OscConfig+0x4d0>)
 800491a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800491e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004920:	f7fd fbfc 	bl	800211c <HAL_GetTick>
 8004924:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004926:	e008      	b.n	800493a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004928:	f7fd fbf8 	bl	800211c <HAL_GetTick>
 800492c:	4602      	mov	r2, r0
 800492e:	693b      	ldr	r3, [r7, #16]
 8004930:	1ad3      	subs	r3, r2, r3
 8004932:	2b02      	cmp	r3, #2
 8004934:	d901      	bls.n	800493a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004936:	2303      	movs	r3, #3
 8004938:	e05f      	b.n	80049fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800493a:	4b10      	ldr	r3, [pc, #64]	; (800497c <HAL_RCC_OscConfig+0x4d0>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004942:	2b00      	cmp	r3, #0
 8004944:	d0f0      	beq.n	8004928 <HAL_RCC_OscConfig+0x47c>
 8004946:	e057      	b.n	80049f8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004948:	4b0c      	ldr	r3, [pc, #48]	; (800497c <HAL_RCC_OscConfig+0x4d0>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a0b      	ldr	r2, [pc, #44]	; (800497c <HAL_RCC_OscConfig+0x4d0>)
 800494e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004952:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004954:	f7fd fbe2 	bl	800211c <HAL_GetTick>
 8004958:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800495a:	e008      	b.n	800496e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800495c:	f7fd fbde 	bl	800211c <HAL_GetTick>
 8004960:	4602      	mov	r2, r0
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	1ad3      	subs	r3, r2, r3
 8004966:	2b02      	cmp	r3, #2
 8004968:	d901      	bls.n	800496e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800496a:	2303      	movs	r3, #3
 800496c:	e045      	b.n	80049fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800496e:	4b03      	ldr	r3, [pc, #12]	; (800497c <HAL_RCC_OscConfig+0x4d0>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004976:	2b00      	cmp	r3, #0
 8004978:	d1f0      	bne.n	800495c <HAL_RCC_OscConfig+0x4b0>
 800497a:	e03d      	b.n	80049f8 <HAL_RCC_OscConfig+0x54c>
 800497c:	40023800 	.word	0x40023800
 8004980:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004984:	4b1f      	ldr	r3, [pc, #124]	; (8004a04 <HAL_RCC_OscConfig+0x558>)
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	699b      	ldr	r3, [r3, #24]
 800498e:	2b01      	cmp	r3, #1
 8004990:	d030      	beq.n	80049f4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800499c:	429a      	cmp	r2, r3
 800499e:	d129      	bne.n	80049f4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049aa:	429a      	cmp	r2, r3
 80049ac:	d122      	bne.n	80049f4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80049ae:	68fa      	ldr	r2, [r7, #12]
 80049b0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80049b4:	4013      	ands	r3, r2
 80049b6:	687a      	ldr	r2, [r7, #4]
 80049b8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80049ba:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80049bc:	4293      	cmp	r3, r2
 80049be:	d119      	bne.n	80049f4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ca:	085b      	lsrs	r3, r3, #1
 80049cc:	3b01      	subs	r3, #1
 80049ce:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80049d0:	429a      	cmp	r2, r3
 80049d2:	d10f      	bne.n	80049f4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049de:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80049e0:	429a      	cmp	r2, r3
 80049e2:	d107      	bne.n	80049f4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ee:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80049f0:	429a      	cmp	r2, r3
 80049f2:	d001      	beq.n	80049f8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80049f4:	2301      	movs	r3, #1
 80049f6:	e000      	b.n	80049fa <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80049f8:	2300      	movs	r3, #0
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	3718      	adds	r7, #24
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}
 8004a02:	bf00      	nop
 8004a04:	40023800 	.word	0x40023800

08004a08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b084      	sub	sp, #16
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
 8004a10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004a12:	2300      	movs	r3, #0
 8004a14:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d101      	bne.n	8004a20 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	e0d0      	b.n	8004bc2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004a20:	4b6a      	ldr	r3, [pc, #424]	; (8004bcc <HAL_RCC_ClockConfig+0x1c4>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f003 030f 	and.w	r3, r3, #15
 8004a28:	683a      	ldr	r2, [r7, #0]
 8004a2a:	429a      	cmp	r2, r3
 8004a2c:	d910      	bls.n	8004a50 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a2e:	4b67      	ldr	r3, [pc, #412]	; (8004bcc <HAL_RCC_ClockConfig+0x1c4>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f023 020f 	bic.w	r2, r3, #15
 8004a36:	4965      	ldr	r1, [pc, #404]	; (8004bcc <HAL_RCC_ClockConfig+0x1c4>)
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a3e:	4b63      	ldr	r3, [pc, #396]	; (8004bcc <HAL_RCC_ClockConfig+0x1c4>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f003 030f 	and.w	r3, r3, #15
 8004a46:	683a      	ldr	r2, [r7, #0]
 8004a48:	429a      	cmp	r2, r3
 8004a4a:	d001      	beq.n	8004a50 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	e0b8      	b.n	8004bc2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f003 0302 	and.w	r3, r3, #2
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d020      	beq.n	8004a9e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f003 0304 	and.w	r3, r3, #4
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d005      	beq.n	8004a74 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a68:	4b59      	ldr	r3, [pc, #356]	; (8004bd0 <HAL_RCC_ClockConfig+0x1c8>)
 8004a6a:	689b      	ldr	r3, [r3, #8]
 8004a6c:	4a58      	ldr	r2, [pc, #352]	; (8004bd0 <HAL_RCC_ClockConfig+0x1c8>)
 8004a6e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004a72:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f003 0308 	and.w	r3, r3, #8
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d005      	beq.n	8004a8c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a80:	4b53      	ldr	r3, [pc, #332]	; (8004bd0 <HAL_RCC_ClockConfig+0x1c8>)
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	4a52      	ldr	r2, [pc, #328]	; (8004bd0 <HAL_RCC_ClockConfig+0x1c8>)
 8004a86:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004a8a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a8c:	4b50      	ldr	r3, [pc, #320]	; (8004bd0 <HAL_RCC_ClockConfig+0x1c8>)
 8004a8e:	689b      	ldr	r3, [r3, #8]
 8004a90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	494d      	ldr	r1, [pc, #308]	; (8004bd0 <HAL_RCC_ClockConfig+0x1c8>)
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f003 0301 	and.w	r3, r3, #1
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d040      	beq.n	8004b2c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	2b01      	cmp	r3, #1
 8004ab0:	d107      	bne.n	8004ac2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ab2:	4b47      	ldr	r3, [pc, #284]	; (8004bd0 <HAL_RCC_ClockConfig+0x1c8>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d115      	bne.n	8004aea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	e07f      	b.n	8004bc2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	2b02      	cmp	r3, #2
 8004ac8:	d107      	bne.n	8004ada <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004aca:	4b41      	ldr	r3, [pc, #260]	; (8004bd0 <HAL_RCC_ClockConfig+0x1c8>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d109      	bne.n	8004aea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	e073      	b.n	8004bc2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ada:	4b3d      	ldr	r3, [pc, #244]	; (8004bd0 <HAL_RCC_ClockConfig+0x1c8>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f003 0302 	and.w	r3, r3, #2
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d101      	bne.n	8004aea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	e06b      	b.n	8004bc2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004aea:	4b39      	ldr	r3, [pc, #228]	; (8004bd0 <HAL_RCC_ClockConfig+0x1c8>)
 8004aec:	689b      	ldr	r3, [r3, #8]
 8004aee:	f023 0203 	bic.w	r2, r3, #3
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	4936      	ldr	r1, [pc, #216]	; (8004bd0 <HAL_RCC_ClockConfig+0x1c8>)
 8004af8:	4313      	orrs	r3, r2
 8004afa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004afc:	f7fd fb0e 	bl	800211c <HAL_GetTick>
 8004b00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b02:	e00a      	b.n	8004b1a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b04:	f7fd fb0a 	bl	800211c <HAL_GetTick>
 8004b08:	4602      	mov	r2, r0
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	1ad3      	subs	r3, r2, r3
 8004b0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d901      	bls.n	8004b1a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004b16:	2303      	movs	r3, #3
 8004b18:	e053      	b.n	8004bc2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b1a:	4b2d      	ldr	r3, [pc, #180]	; (8004bd0 <HAL_RCC_ClockConfig+0x1c8>)
 8004b1c:	689b      	ldr	r3, [r3, #8]
 8004b1e:	f003 020c 	and.w	r2, r3, #12
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	009b      	lsls	r3, r3, #2
 8004b28:	429a      	cmp	r2, r3
 8004b2a:	d1eb      	bne.n	8004b04 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004b2c:	4b27      	ldr	r3, [pc, #156]	; (8004bcc <HAL_RCC_ClockConfig+0x1c4>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f003 030f 	and.w	r3, r3, #15
 8004b34:	683a      	ldr	r2, [r7, #0]
 8004b36:	429a      	cmp	r2, r3
 8004b38:	d210      	bcs.n	8004b5c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b3a:	4b24      	ldr	r3, [pc, #144]	; (8004bcc <HAL_RCC_ClockConfig+0x1c4>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f023 020f 	bic.w	r2, r3, #15
 8004b42:	4922      	ldr	r1, [pc, #136]	; (8004bcc <HAL_RCC_ClockConfig+0x1c4>)
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	4313      	orrs	r3, r2
 8004b48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b4a:	4b20      	ldr	r3, [pc, #128]	; (8004bcc <HAL_RCC_ClockConfig+0x1c4>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f003 030f 	and.w	r3, r3, #15
 8004b52:	683a      	ldr	r2, [r7, #0]
 8004b54:	429a      	cmp	r2, r3
 8004b56:	d001      	beq.n	8004b5c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004b58:	2301      	movs	r3, #1
 8004b5a:	e032      	b.n	8004bc2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f003 0304 	and.w	r3, r3, #4
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d008      	beq.n	8004b7a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b68:	4b19      	ldr	r3, [pc, #100]	; (8004bd0 <HAL_RCC_ClockConfig+0x1c8>)
 8004b6a:	689b      	ldr	r3, [r3, #8]
 8004b6c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	68db      	ldr	r3, [r3, #12]
 8004b74:	4916      	ldr	r1, [pc, #88]	; (8004bd0 <HAL_RCC_ClockConfig+0x1c8>)
 8004b76:	4313      	orrs	r3, r2
 8004b78:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f003 0308 	and.w	r3, r3, #8
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d009      	beq.n	8004b9a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004b86:	4b12      	ldr	r3, [pc, #72]	; (8004bd0 <HAL_RCC_ClockConfig+0x1c8>)
 8004b88:	689b      	ldr	r3, [r3, #8]
 8004b8a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	691b      	ldr	r3, [r3, #16]
 8004b92:	00db      	lsls	r3, r3, #3
 8004b94:	490e      	ldr	r1, [pc, #56]	; (8004bd0 <HAL_RCC_ClockConfig+0x1c8>)
 8004b96:	4313      	orrs	r3, r2
 8004b98:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004b9a:	f000 f821 	bl	8004be0 <HAL_RCC_GetSysClockFreq>
 8004b9e:	4602      	mov	r2, r0
 8004ba0:	4b0b      	ldr	r3, [pc, #44]	; (8004bd0 <HAL_RCC_ClockConfig+0x1c8>)
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	091b      	lsrs	r3, r3, #4
 8004ba6:	f003 030f 	and.w	r3, r3, #15
 8004baa:	490a      	ldr	r1, [pc, #40]	; (8004bd4 <HAL_RCC_ClockConfig+0x1cc>)
 8004bac:	5ccb      	ldrb	r3, [r1, r3]
 8004bae:	fa22 f303 	lsr.w	r3, r2, r3
 8004bb2:	4a09      	ldr	r2, [pc, #36]	; (8004bd8 <HAL_RCC_ClockConfig+0x1d0>)
 8004bb4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004bb6:	4b09      	ldr	r3, [pc, #36]	; (8004bdc <HAL_RCC_ClockConfig+0x1d4>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4618      	mov	r0, r3
 8004bbc:	f7fd fa6a 	bl	8002094 <HAL_InitTick>

  return HAL_OK;
 8004bc0:	2300      	movs	r3, #0
}
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	3710      	adds	r7, #16
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}
 8004bca:	bf00      	nop
 8004bcc:	40023c00 	.word	0x40023c00
 8004bd0:	40023800 	.word	0x40023800
 8004bd4:	080080e8 	.word	0x080080e8
 8004bd8:	20000004 	.word	0x20000004
 8004bdc:	20000008 	.word	0x20000008

08004be0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004be0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004be4:	b094      	sub	sp, #80	; 0x50
 8004be6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004be8:	2300      	movs	r3, #0
 8004bea:	647b      	str	r3, [r7, #68]	; 0x44
 8004bec:	2300      	movs	r3, #0
 8004bee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004bf8:	4b79      	ldr	r3, [pc, #484]	; (8004de0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004bfa:	689b      	ldr	r3, [r3, #8]
 8004bfc:	f003 030c 	and.w	r3, r3, #12
 8004c00:	2b08      	cmp	r3, #8
 8004c02:	d00d      	beq.n	8004c20 <HAL_RCC_GetSysClockFreq+0x40>
 8004c04:	2b08      	cmp	r3, #8
 8004c06:	f200 80e1 	bhi.w	8004dcc <HAL_RCC_GetSysClockFreq+0x1ec>
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d002      	beq.n	8004c14 <HAL_RCC_GetSysClockFreq+0x34>
 8004c0e:	2b04      	cmp	r3, #4
 8004c10:	d003      	beq.n	8004c1a <HAL_RCC_GetSysClockFreq+0x3a>
 8004c12:	e0db      	b.n	8004dcc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004c14:	4b73      	ldr	r3, [pc, #460]	; (8004de4 <HAL_RCC_GetSysClockFreq+0x204>)
 8004c16:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004c18:	e0db      	b.n	8004dd2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004c1a:	4b73      	ldr	r3, [pc, #460]	; (8004de8 <HAL_RCC_GetSysClockFreq+0x208>)
 8004c1c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004c1e:	e0d8      	b.n	8004dd2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004c20:	4b6f      	ldr	r3, [pc, #444]	; (8004de0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c28:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004c2a:	4b6d      	ldr	r3, [pc, #436]	; (8004de0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d063      	beq.n	8004cfe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c36:	4b6a      	ldr	r3, [pc, #424]	; (8004de0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	099b      	lsrs	r3, r3, #6
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004c40:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004c42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c48:	633b      	str	r3, [r7, #48]	; 0x30
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	637b      	str	r3, [r7, #52]	; 0x34
 8004c4e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004c52:	4622      	mov	r2, r4
 8004c54:	462b      	mov	r3, r5
 8004c56:	f04f 0000 	mov.w	r0, #0
 8004c5a:	f04f 0100 	mov.w	r1, #0
 8004c5e:	0159      	lsls	r1, r3, #5
 8004c60:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c64:	0150      	lsls	r0, r2, #5
 8004c66:	4602      	mov	r2, r0
 8004c68:	460b      	mov	r3, r1
 8004c6a:	4621      	mov	r1, r4
 8004c6c:	1a51      	subs	r1, r2, r1
 8004c6e:	6139      	str	r1, [r7, #16]
 8004c70:	4629      	mov	r1, r5
 8004c72:	eb63 0301 	sbc.w	r3, r3, r1
 8004c76:	617b      	str	r3, [r7, #20]
 8004c78:	f04f 0200 	mov.w	r2, #0
 8004c7c:	f04f 0300 	mov.w	r3, #0
 8004c80:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004c84:	4659      	mov	r1, fp
 8004c86:	018b      	lsls	r3, r1, #6
 8004c88:	4651      	mov	r1, sl
 8004c8a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004c8e:	4651      	mov	r1, sl
 8004c90:	018a      	lsls	r2, r1, #6
 8004c92:	4651      	mov	r1, sl
 8004c94:	ebb2 0801 	subs.w	r8, r2, r1
 8004c98:	4659      	mov	r1, fp
 8004c9a:	eb63 0901 	sbc.w	r9, r3, r1
 8004c9e:	f04f 0200 	mov.w	r2, #0
 8004ca2:	f04f 0300 	mov.w	r3, #0
 8004ca6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004caa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004cae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004cb2:	4690      	mov	r8, r2
 8004cb4:	4699      	mov	r9, r3
 8004cb6:	4623      	mov	r3, r4
 8004cb8:	eb18 0303 	adds.w	r3, r8, r3
 8004cbc:	60bb      	str	r3, [r7, #8]
 8004cbe:	462b      	mov	r3, r5
 8004cc0:	eb49 0303 	adc.w	r3, r9, r3
 8004cc4:	60fb      	str	r3, [r7, #12]
 8004cc6:	f04f 0200 	mov.w	r2, #0
 8004cca:	f04f 0300 	mov.w	r3, #0
 8004cce:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004cd2:	4629      	mov	r1, r5
 8004cd4:	024b      	lsls	r3, r1, #9
 8004cd6:	4621      	mov	r1, r4
 8004cd8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004cdc:	4621      	mov	r1, r4
 8004cde:	024a      	lsls	r2, r1, #9
 8004ce0:	4610      	mov	r0, r2
 8004ce2:	4619      	mov	r1, r3
 8004ce4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	62bb      	str	r3, [r7, #40]	; 0x28
 8004cea:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004cec:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004cf0:	f7fb fc04 	bl	80004fc <__aeabi_uldivmod>
 8004cf4:	4602      	mov	r2, r0
 8004cf6:	460b      	mov	r3, r1
 8004cf8:	4613      	mov	r3, r2
 8004cfa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004cfc:	e058      	b.n	8004db0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004cfe:	4b38      	ldr	r3, [pc, #224]	; (8004de0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	099b      	lsrs	r3, r3, #6
 8004d04:	2200      	movs	r2, #0
 8004d06:	4618      	mov	r0, r3
 8004d08:	4611      	mov	r1, r2
 8004d0a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004d0e:	623b      	str	r3, [r7, #32]
 8004d10:	2300      	movs	r3, #0
 8004d12:	627b      	str	r3, [r7, #36]	; 0x24
 8004d14:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004d18:	4642      	mov	r2, r8
 8004d1a:	464b      	mov	r3, r9
 8004d1c:	f04f 0000 	mov.w	r0, #0
 8004d20:	f04f 0100 	mov.w	r1, #0
 8004d24:	0159      	lsls	r1, r3, #5
 8004d26:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d2a:	0150      	lsls	r0, r2, #5
 8004d2c:	4602      	mov	r2, r0
 8004d2e:	460b      	mov	r3, r1
 8004d30:	4641      	mov	r1, r8
 8004d32:	ebb2 0a01 	subs.w	sl, r2, r1
 8004d36:	4649      	mov	r1, r9
 8004d38:	eb63 0b01 	sbc.w	fp, r3, r1
 8004d3c:	f04f 0200 	mov.w	r2, #0
 8004d40:	f04f 0300 	mov.w	r3, #0
 8004d44:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004d48:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004d4c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004d50:	ebb2 040a 	subs.w	r4, r2, sl
 8004d54:	eb63 050b 	sbc.w	r5, r3, fp
 8004d58:	f04f 0200 	mov.w	r2, #0
 8004d5c:	f04f 0300 	mov.w	r3, #0
 8004d60:	00eb      	lsls	r3, r5, #3
 8004d62:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d66:	00e2      	lsls	r2, r4, #3
 8004d68:	4614      	mov	r4, r2
 8004d6a:	461d      	mov	r5, r3
 8004d6c:	4643      	mov	r3, r8
 8004d6e:	18e3      	adds	r3, r4, r3
 8004d70:	603b      	str	r3, [r7, #0]
 8004d72:	464b      	mov	r3, r9
 8004d74:	eb45 0303 	adc.w	r3, r5, r3
 8004d78:	607b      	str	r3, [r7, #4]
 8004d7a:	f04f 0200 	mov.w	r2, #0
 8004d7e:	f04f 0300 	mov.w	r3, #0
 8004d82:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004d86:	4629      	mov	r1, r5
 8004d88:	028b      	lsls	r3, r1, #10
 8004d8a:	4621      	mov	r1, r4
 8004d8c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004d90:	4621      	mov	r1, r4
 8004d92:	028a      	lsls	r2, r1, #10
 8004d94:	4610      	mov	r0, r2
 8004d96:	4619      	mov	r1, r3
 8004d98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	61bb      	str	r3, [r7, #24]
 8004d9e:	61fa      	str	r2, [r7, #28]
 8004da0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004da4:	f7fb fbaa 	bl	80004fc <__aeabi_uldivmod>
 8004da8:	4602      	mov	r2, r0
 8004daa:	460b      	mov	r3, r1
 8004dac:	4613      	mov	r3, r2
 8004dae:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004db0:	4b0b      	ldr	r3, [pc, #44]	; (8004de0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	0c1b      	lsrs	r3, r3, #16
 8004db6:	f003 0303 	and.w	r3, r3, #3
 8004dba:	3301      	adds	r3, #1
 8004dbc:	005b      	lsls	r3, r3, #1
 8004dbe:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8004dc0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004dc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004dc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dc8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004dca:	e002      	b.n	8004dd2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004dcc:	4b05      	ldr	r3, [pc, #20]	; (8004de4 <HAL_RCC_GetSysClockFreq+0x204>)
 8004dce:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004dd0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004dd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	3750      	adds	r7, #80	; 0x50
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004dde:	bf00      	nop
 8004de0:	40023800 	.word	0x40023800
 8004de4:	00f42400 	.word	0x00f42400
 8004de8:	007a1200 	.word	0x007a1200

08004dec <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004dec:	b480      	push	{r7}
 8004dee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004df0:	4b03      	ldr	r3, [pc, #12]	; (8004e00 <HAL_RCC_GetHCLKFreq+0x14>)
 8004df2:	681b      	ldr	r3, [r3, #0]
}
 8004df4:	4618      	mov	r0, r3
 8004df6:	46bd      	mov	sp, r7
 8004df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfc:	4770      	bx	lr
 8004dfe:	bf00      	nop
 8004e00:	20000004 	.word	0x20000004

08004e04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004e08:	f7ff fff0 	bl	8004dec <HAL_RCC_GetHCLKFreq>
 8004e0c:	4602      	mov	r2, r0
 8004e0e:	4b05      	ldr	r3, [pc, #20]	; (8004e24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004e10:	689b      	ldr	r3, [r3, #8]
 8004e12:	0a9b      	lsrs	r3, r3, #10
 8004e14:	f003 0307 	and.w	r3, r3, #7
 8004e18:	4903      	ldr	r1, [pc, #12]	; (8004e28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e1a:	5ccb      	ldrb	r3, [r1, r3]
 8004e1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e20:	4618      	mov	r0, r3
 8004e22:	bd80      	pop	{r7, pc}
 8004e24:	40023800 	.word	0x40023800
 8004e28:	080080f8 	.word	0x080080f8

08004e2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004e30:	f7ff ffdc 	bl	8004dec <HAL_RCC_GetHCLKFreq>
 8004e34:	4602      	mov	r2, r0
 8004e36:	4b05      	ldr	r3, [pc, #20]	; (8004e4c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004e38:	689b      	ldr	r3, [r3, #8]
 8004e3a:	0b5b      	lsrs	r3, r3, #13
 8004e3c:	f003 0307 	and.w	r3, r3, #7
 8004e40:	4903      	ldr	r1, [pc, #12]	; (8004e50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e42:	5ccb      	ldrb	r3, [r1, r3]
 8004e44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e48:	4618      	mov	r0, r3
 8004e4a:	bd80      	pop	{r7, pc}
 8004e4c:	40023800 	.word	0x40023800
 8004e50:	080080f8 	.word	0x080080f8

08004e54 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b088      	sub	sp, #32
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004e60:	2300      	movs	r3, #0
 8004e62:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004e64:	2300      	movs	r3, #0
 8004e66:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004e68:	2300      	movs	r3, #0
 8004e6a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f003 0301 	and.w	r3, r3, #1
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d012      	beq.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004e7c:	4b69      	ldr	r3, [pc, #420]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e7e:	689b      	ldr	r3, [r3, #8]
 8004e80:	4a68      	ldr	r2, [pc, #416]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e82:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004e86:	6093      	str	r3, [r2, #8]
 8004e88:	4b66      	ldr	r3, [pc, #408]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e8a:	689a      	ldr	r2, [r3, #8]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e90:	4964      	ldr	r1, [pc, #400]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e92:	4313      	orrs	r3, r2
 8004e94:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d101      	bne.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d017      	beq.n	8004ede <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004eae:	4b5d      	ldr	r3, [pc, #372]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004eb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004eb4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ebc:	4959      	ldr	r1, [pc, #356]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ec8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ecc:	d101      	bne.n	8004ed2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004ece:	2301      	movs	r3, #1
 8004ed0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d101      	bne.n	8004ede <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004eda:	2301      	movs	r3, #1
 8004edc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d017      	beq.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004eea:	4b4e      	ldr	r3, [pc, #312]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004eec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ef0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ef8:	494a      	ldr	r1, [pc, #296]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004efa:	4313      	orrs	r3, r2
 8004efc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f04:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f08:	d101      	bne.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d101      	bne.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004f16:	2301      	movs	r3, #1
 8004f18:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d001      	beq.n	8004f2a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004f26:	2301      	movs	r3, #1
 8004f28:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f003 0320 	and.w	r3, r3, #32
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	f000 808b 	beq.w	800504e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004f38:	4b3a      	ldr	r3, [pc, #232]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f3c:	4a39      	ldr	r2, [pc, #228]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f42:	6413      	str	r3, [r2, #64]	; 0x40
 8004f44:	4b37      	ldr	r3, [pc, #220]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f4c:	60bb      	str	r3, [r7, #8]
 8004f4e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004f50:	4b35      	ldr	r3, [pc, #212]	; (8005028 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a34      	ldr	r2, [pc, #208]	; (8005028 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004f56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f5a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f5c:	f7fd f8de 	bl	800211c <HAL_GetTick>
 8004f60:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004f62:	e008      	b.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f64:	f7fd f8da 	bl	800211c <HAL_GetTick>
 8004f68:	4602      	mov	r2, r0
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	1ad3      	subs	r3, r2, r3
 8004f6e:	2b64      	cmp	r3, #100	; 0x64
 8004f70:	d901      	bls.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004f72:	2303      	movs	r3, #3
 8004f74:	e38f      	b.n	8005696 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004f76:	4b2c      	ldr	r3, [pc, #176]	; (8005028 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d0f0      	beq.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004f82:	4b28      	ldr	r3, [pc, #160]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f8a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d035      	beq.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f9a:	693a      	ldr	r2, [r7, #16]
 8004f9c:	429a      	cmp	r2, r3
 8004f9e:	d02e      	beq.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004fa0:	4b20      	ldr	r3, [pc, #128]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fa4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fa8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004faa:	4b1e      	ldr	r3, [pc, #120]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fae:	4a1d      	ldr	r2, [pc, #116]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fb4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004fb6:	4b1b      	ldr	r3, [pc, #108]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fba:	4a1a      	ldr	r2, [pc, #104]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fbc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fc0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004fc2:	4a18      	ldr	r2, [pc, #96]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fc4:	693b      	ldr	r3, [r7, #16]
 8004fc6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004fc8:	4b16      	ldr	r3, [pc, #88]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fcc:	f003 0301 	and.w	r3, r3, #1
 8004fd0:	2b01      	cmp	r3, #1
 8004fd2:	d114      	bne.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fd4:	f7fd f8a2 	bl	800211c <HAL_GetTick>
 8004fd8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fda:	e00a      	b.n	8004ff2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004fdc:	f7fd f89e 	bl	800211c <HAL_GetTick>
 8004fe0:	4602      	mov	r2, r0
 8004fe2:	697b      	ldr	r3, [r7, #20]
 8004fe4:	1ad3      	subs	r3, r2, r3
 8004fe6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d901      	bls.n	8004ff2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004fee:	2303      	movs	r3, #3
 8004ff0:	e351      	b.n	8005696 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ff2:	4b0c      	ldr	r3, [pc, #48]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ff4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ff6:	f003 0302 	and.w	r3, r3, #2
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d0ee      	beq.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005002:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005006:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800500a:	d111      	bne.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800500c:	4b05      	ldr	r3, [pc, #20]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800500e:	689b      	ldr	r3, [r3, #8]
 8005010:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005018:	4b04      	ldr	r3, [pc, #16]	; (800502c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800501a:	400b      	ands	r3, r1
 800501c:	4901      	ldr	r1, [pc, #4]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800501e:	4313      	orrs	r3, r2
 8005020:	608b      	str	r3, [r1, #8]
 8005022:	e00b      	b.n	800503c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005024:	40023800 	.word	0x40023800
 8005028:	40007000 	.word	0x40007000
 800502c:	0ffffcff 	.word	0x0ffffcff
 8005030:	4bac      	ldr	r3, [pc, #688]	; (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005032:	689b      	ldr	r3, [r3, #8]
 8005034:	4aab      	ldr	r2, [pc, #684]	; (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005036:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800503a:	6093      	str	r3, [r2, #8]
 800503c:	4ba9      	ldr	r3, [pc, #676]	; (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800503e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005044:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005048:	49a6      	ldr	r1, [pc, #664]	; (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800504a:	4313      	orrs	r3, r2
 800504c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f003 0310 	and.w	r3, r3, #16
 8005056:	2b00      	cmp	r3, #0
 8005058:	d010      	beq.n	800507c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800505a:	4ba2      	ldr	r3, [pc, #648]	; (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800505c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005060:	4aa0      	ldr	r2, [pc, #640]	; (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005062:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005066:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800506a:	4b9e      	ldr	r3, [pc, #632]	; (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800506c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005074:	499b      	ldr	r1, [pc, #620]	; (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005076:	4313      	orrs	r3, r2
 8005078:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005084:	2b00      	cmp	r3, #0
 8005086:	d00a      	beq.n	800509e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005088:	4b96      	ldr	r3, [pc, #600]	; (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800508a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800508e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005096:	4993      	ldr	r1, [pc, #588]	; (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005098:	4313      	orrs	r3, r2
 800509a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d00a      	beq.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80050aa:	4b8e      	ldr	r3, [pc, #568]	; (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050b0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80050b8:	498a      	ldr	r1, [pc, #552]	; (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050ba:	4313      	orrs	r3, r2
 80050bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d00a      	beq.n	80050e2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80050cc:	4b85      	ldr	r3, [pc, #532]	; (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050d2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050da:	4982      	ldr	r1, [pc, #520]	; (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050dc:	4313      	orrs	r3, r2
 80050de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d00a      	beq.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80050ee:	4b7d      	ldr	r3, [pc, #500]	; (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050f4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050fc:	4979      	ldr	r1, [pc, #484]	; (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050fe:	4313      	orrs	r3, r2
 8005100:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800510c:	2b00      	cmp	r3, #0
 800510e:	d00a      	beq.n	8005126 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005110:	4b74      	ldr	r3, [pc, #464]	; (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005112:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005116:	f023 0203 	bic.w	r2, r3, #3
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800511e:	4971      	ldr	r1, [pc, #452]	; (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005120:	4313      	orrs	r3, r2
 8005122:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800512e:	2b00      	cmp	r3, #0
 8005130:	d00a      	beq.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005132:	4b6c      	ldr	r3, [pc, #432]	; (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005134:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005138:	f023 020c 	bic.w	r2, r3, #12
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005140:	4968      	ldr	r1, [pc, #416]	; (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005142:	4313      	orrs	r3, r2
 8005144:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005150:	2b00      	cmp	r3, #0
 8005152:	d00a      	beq.n	800516a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005154:	4b63      	ldr	r3, [pc, #396]	; (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005156:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800515a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005162:	4960      	ldr	r1, [pc, #384]	; (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005164:	4313      	orrs	r3, r2
 8005166:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005172:	2b00      	cmp	r3, #0
 8005174:	d00a      	beq.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005176:	4b5b      	ldr	r3, [pc, #364]	; (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005178:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800517c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005184:	4957      	ldr	r1, [pc, #348]	; (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005186:	4313      	orrs	r3, r2
 8005188:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005194:	2b00      	cmp	r3, #0
 8005196:	d00a      	beq.n	80051ae <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005198:	4b52      	ldr	r3, [pc, #328]	; (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800519a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800519e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051a6:	494f      	ldr	r1, [pc, #316]	; (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051a8:	4313      	orrs	r3, r2
 80051aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d00a      	beq.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80051ba:	4b4a      	ldr	r3, [pc, #296]	; (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051c0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051c8:	4946      	ldr	r1, [pc, #280]	; (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051ca:	4313      	orrs	r3, r2
 80051cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d00a      	beq.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80051dc:	4b41      	ldr	r3, [pc, #260]	; (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051e2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051ea:	493e      	ldr	r1, [pc, #248]	; (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051ec:	4313      	orrs	r3, r2
 80051ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d00a      	beq.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80051fe:	4b39      	ldr	r3, [pc, #228]	; (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005200:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005204:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800520c:	4935      	ldr	r1, [pc, #212]	; (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800520e:	4313      	orrs	r3, r2
 8005210:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800521c:	2b00      	cmp	r3, #0
 800521e:	d00a      	beq.n	8005236 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005220:	4b30      	ldr	r3, [pc, #192]	; (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005222:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005226:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800522e:	492d      	ldr	r1, [pc, #180]	; (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005230:	4313      	orrs	r3, r2
 8005232:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800523e:	2b00      	cmp	r3, #0
 8005240:	d011      	beq.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005242:	4b28      	ldr	r3, [pc, #160]	; (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005244:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005248:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005250:	4924      	ldr	r1, [pc, #144]	; (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005252:	4313      	orrs	r3, r2
 8005254:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800525c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005260:	d101      	bne.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8005262:	2301      	movs	r3, #1
 8005264:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f003 0308 	and.w	r3, r3, #8
 800526e:	2b00      	cmp	r3, #0
 8005270:	d001      	beq.n	8005276 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8005272:	2301      	movs	r3, #1
 8005274:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800527e:	2b00      	cmp	r3, #0
 8005280:	d00a      	beq.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005282:	4b18      	ldr	r3, [pc, #96]	; (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005284:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005288:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005290:	4914      	ldr	r1, [pc, #80]	; (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005292:	4313      	orrs	r3, r2
 8005294:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d00b      	beq.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80052a4:	4b0f      	ldr	r3, [pc, #60]	; (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052aa:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80052b4:	490b      	ldr	r1, [pc, #44]	; (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052b6:	4313      	orrs	r3, r2
 80052b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d00f      	beq.n	80052e8 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80052c8:	4b06      	ldr	r3, [pc, #24]	; (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052ce:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052d8:	4902      	ldr	r1, [pc, #8]	; (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052da:	4313      	orrs	r3, r2
 80052dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80052e0:	e002      	b.n	80052e8 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80052e2:	bf00      	nop
 80052e4:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d00b      	beq.n	800530c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80052f4:	4b8a      	ldr	r3, [pc, #552]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80052f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80052fa:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005304:	4986      	ldr	r1, [pc, #536]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005306:	4313      	orrs	r3, r2
 8005308:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005314:	2b00      	cmp	r3, #0
 8005316:	d00b      	beq.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005318:	4b81      	ldr	r3, [pc, #516]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800531a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800531e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005328:	497d      	ldr	r1, [pc, #500]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800532a:	4313      	orrs	r3, r2
 800532c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005330:	69fb      	ldr	r3, [r7, #28]
 8005332:	2b01      	cmp	r3, #1
 8005334:	d006      	beq.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800533e:	2b00      	cmp	r3, #0
 8005340:	f000 80d6 	beq.w	80054f0 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005344:	4b76      	ldr	r3, [pc, #472]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4a75      	ldr	r2, [pc, #468]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800534a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800534e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005350:	f7fc fee4 	bl	800211c <HAL_GetTick>
 8005354:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005356:	e008      	b.n	800536a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005358:	f7fc fee0 	bl	800211c <HAL_GetTick>
 800535c:	4602      	mov	r2, r0
 800535e:	697b      	ldr	r3, [r7, #20]
 8005360:	1ad3      	subs	r3, r2, r3
 8005362:	2b64      	cmp	r3, #100	; 0x64
 8005364:	d901      	bls.n	800536a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005366:	2303      	movs	r3, #3
 8005368:	e195      	b.n	8005696 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800536a:	4b6d      	ldr	r3, [pc, #436]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005372:	2b00      	cmp	r3, #0
 8005374:	d1f0      	bne.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f003 0301 	and.w	r3, r3, #1
 800537e:	2b00      	cmp	r3, #0
 8005380:	d021      	beq.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005386:	2b00      	cmp	r3, #0
 8005388:	d11d      	bne.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800538a:	4b65      	ldr	r3, [pc, #404]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800538c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005390:	0c1b      	lsrs	r3, r3, #16
 8005392:	f003 0303 	and.w	r3, r3, #3
 8005396:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005398:	4b61      	ldr	r3, [pc, #388]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800539a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800539e:	0e1b      	lsrs	r3, r3, #24
 80053a0:	f003 030f 	and.w	r3, r3, #15
 80053a4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	019a      	lsls	r2, r3, #6
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	041b      	lsls	r3, r3, #16
 80053b0:	431a      	orrs	r2, r3
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	061b      	lsls	r3, r3, #24
 80053b6:	431a      	orrs	r2, r3
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	689b      	ldr	r3, [r3, #8]
 80053bc:	071b      	lsls	r3, r3, #28
 80053be:	4958      	ldr	r1, [pc, #352]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80053c0:	4313      	orrs	r3, r2
 80053c2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d004      	beq.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x588>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80053da:	d00a      	beq.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d02e      	beq.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80053f0:	d129      	bne.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80053f2:	4b4b      	ldr	r3, [pc, #300]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80053f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053f8:	0c1b      	lsrs	r3, r3, #16
 80053fa:	f003 0303 	and.w	r3, r3, #3
 80053fe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005400:	4b47      	ldr	r3, [pc, #284]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005402:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005406:	0f1b      	lsrs	r3, r3, #28
 8005408:	f003 0307 	and.w	r3, r3, #7
 800540c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	685b      	ldr	r3, [r3, #4]
 8005412:	019a      	lsls	r2, r3, #6
 8005414:	693b      	ldr	r3, [r7, #16]
 8005416:	041b      	lsls	r3, r3, #16
 8005418:	431a      	orrs	r2, r3
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	68db      	ldr	r3, [r3, #12]
 800541e:	061b      	lsls	r3, r3, #24
 8005420:	431a      	orrs	r2, r3
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	071b      	lsls	r3, r3, #28
 8005426:	493e      	ldr	r1, [pc, #248]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005428:	4313      	orrs	r3, r2
 800542a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800542e:	4b3c      	ldr	r3, [pc, #240]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005430:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005434:	f023 021f 	bic.w	r2, r3, #31
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800543c:	3b01      	subs	r3, #1
 800543e:	4938      	ldr	r1, [pc, #224]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005440:	4313      	orrs	r3, r2
 8005442:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800544e:	2b00      	cmp	r3, #0
 8005450:	d01d      	beq.n	800548e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005452:	4b33      	ldr	r3, [pc, #204]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005454:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005458:	0e1b      	lsrs	r3, r3, #24
 800545a:	f003 030f 	and.w	r3, r3, #15
 800545e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005460:	4b2f      	ldr	r3, [pc, #188]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005462:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005466:	0f1b      	lsrs	r3, r3, #28
 8005468:	f003 0307 	and.w	r3, r3, #7
 800546c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	019a      	lsls	r2, r3, #6
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	691b      	ldr	r3, [r3, #16]
 8005478:	041b      	lsls	r3, r3, #16
 800547a:	431a      	orrs	r2, r3
 800547c:	693b      	ldr	r3, [r7, #16]
 800547e:	061b      	lsls	r3, r3, #24
 8005480:	431a      	orrs	r2, r3
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	071b      	lsls	r3, r3, #28
 8005486:	4926      	ldr	r1, [pc, #152]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005488:	4313      	orrs	r3, r2
 800548a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005496:	2b00      	cmp	r3, #0
 8005498:	d011      	beq.n	80054be <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	019a      	lsls	r2, r3, #6
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	691b      	ldr	r3, [r3, #16]
 80054a4:	041b      	lsls	r3, r3, #16
 80054a6:	431a      	orrs	r2, r3
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	68db      	ldr	r3, [r3, #12]
 80054ac:	061b      	lsls	r3, r3, #24
 80054ae:	431a      	orrs	r2, r3
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	689b      	ldr	r3, [r3, #8]
 80054b4:	071b      	lsls	r3, r3, #28
 80054b6:	491a      	ldr	r1, [pc, #104]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80054b8:	4313      	orrs	r3, r2
 80054ba:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80054be:	4b18      	ldr	r3, [pc, #96]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4a17      	ldr	r2, [pc, #92]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80054c4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80054c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054ca:	f7fc fe27 	bl	800211c <HAL_GetTick>
 80054ce:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80054d0:	e008      	b.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80054d2:	f7fc fe23 	bl	800211c <HAL_GetTick>
 80054d6:	4602      	mov	r2, r0
 80054d8:	697b      	ldr	r3, [r7, #20]
 80054da:	1ad3      	subs	r3, r2, r3
 80054dc:	2b64      	cmp	r3, #100	; 0x64
 80054de:	d901      	bls.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80054e0:	2303      	movs	r3, #3
 80054e2:	e0d8      	b.n	8005696 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80054e4:	4b0e      	ldr	r3, [pc, #56]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d0f0      	beq.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80054f0:	69bb      	ldr	r3, [r7, #24]
 80054f2:	2b01      	cmp	r3, #1
 80054f4:	f040 80ce 	bne.w	8005694 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80054f8:	4b09      	ldr	r3, [pc, #36]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a08      	ldr	r2, [pc, #32]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80054fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005502:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005504:	f7fc fe0a 	bl	800211c <HAL_GetTick>
 8005508:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800550a:	e00b      	b.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800550c:	f7fc fe06 	bl	800211c <HAL_GetTick>
 8005510:	4602      	mov	r2, r0
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	1ad3      	subs	r3, r2, r3
 8005516:	2b64      	cmp	r3, #100	; 0x64
 8005518:	d904      	bls.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800551a:	2303      	movs	r3, #3
 800551c:	e0bb      	b.n	8005696 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800551e:	bf00      	nop
 8005520:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005524:	4b5e      	ldr	r3, [pc, #376]	; (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800552c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005530:	d0ec      	beq.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800553a:	2b00      	cmp	r3, #0
 800553c:	d003      	beq.n	8005546 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005542:	2b00      	cmp	r3, #0
 8005544:	d009      	beq.n	800555a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800554e:	2b00      	cmp	r3, #0
 8005550:	d02e      	beq.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005556:	2b00      	cmp	r3, #0
 8005558:	d12a      	bne.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800555a:	4b51      	ldr	r3, [pc, #324]	; (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800555c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005560:	0c1b      	lsrs	r3, r3, #16
 8005562:	f003 0303 	and.w	r3, r3, #3
 8005566:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005568:	4b4d      	ldr	r3, [pc, #308]	; (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800556a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800556e:	0f1b      	lsrs	r3, r3, #28
 8005570:	f003 0307 	and.w	r3, r3, #7
 8005574:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	695b      	ldr	r3, [r3, #20]
 800557a:	019a      	lsls	r2, r3, #6
 800557c:	693b      	ldr	r3, [r7, #16]
 800557e:	041b      	lsls	r3, r3, #16
 8005580:	431a      	orrs	r2, r3
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	699b      	ldr	r3, [r3, #24]
 8005586:	061b      	lsls	r3, r3, #24
 8005588:	431a      	orrs	r2, r3
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	071b      	lsls	r3, r3, #28
 800558e:	4944      	ldr	r1, [pc, #272]	; (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005590:	4313      	orrs	r3, r2
 8005592:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005596:	4b42      	ldr	r3, [pc, #264]	; (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005598:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800559c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055a4:	3b01      	subs	r3, #1
 80055a6:	021b      	lsls	r3, r3, #8
 80055a8:	493d      	ldr	r1, [pc, #244]	; (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80055aa:	4313      	orrs	r3, r2
 80055ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d022      	beq.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80055c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80055c4:	d11d      	bne.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80055c6:	4b36      	ldr	r3, [pc, #216]	; (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80055c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055cc:	0e1b      	lsrs	r3, r3, #24
 80055ce:	f003 030f 	and.w	r3, r3, #15
 80055d2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80055d4:	4b32      	ldr	r3, [pc, #200]	; (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80055d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055da:	0f1b      	lsrs	r3, r3, #28
 80055dc:	f003 0307 	and.w	r3, r3, #7
 80055e0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	695b      	ldr	r3, [r3, #20]
 80055e6:	019a      	lsls	r2, r3, #6
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6a1b      	ldr	r3, [r3, #32]
 80055ec:	041b      	lsls	r3, r3, #16
 80055ee:	431a      	orrs	r2, r3
 80055f0:	693b      	ldr	r3, [r7, #16]
 80055f2:	061b      	lsls	r3, r3, #24
 80055f4:	431a      	orrs	r2, r3
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	071b      	lsls	r3, r3, #28
 80055fa:	4929      	ldr	r1, [pc, #164]	; (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80055fc:	4313      	orrs	r3, r2
 80055fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f003 0308 	and.w	r3, r3, #8
 800560a:	2b00      	cmp	r3, #0
 800560c:	d028      	beq.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800560e:	4b24      	ldr	r3, [pc, #144]	; (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005610:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005614:	0e1b      	lsrs	r3, r3, #24
 8005616:	f003 030f 	and.w	r3, r3, #15
 800561a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800561c:	4b20      	ldr	r3, [pc, #128]	; (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800561e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005622:	0c1b      	lsrs	r3, r3, #16
 8005624:	f003 0303 	and.w	r3, r3, #3
 8005628:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	695b      	ldr	r3, [r3, #20]
 800562e:	019a      	lsls	r2, r3, #6
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	041b      	lsls	r3, r3, #16
 8005634:	431a      	orrs	r2, r3
 8005636:	693b      	ldr	r3, [r7, #16]
 8005638:	061b      	lsls	r3, r3, #24
 800563a:	431a      	orrs	r2, r3
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	69db      	ldr	r3, [r3, #28]
 8005640:	071b      	lsls	r3, r3, #28
 8005642:	4917      	ldr	r1, [pc, #92]	; (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005644:	4313      	orrs	r3, r2
 8005646:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800564a:	4b15      	ldr	r3, [pc, #84]	; (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800564c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005650:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005658:	4911      	ldr	r1, [pc, #68]	; (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800565a:	4313      	orrs	r3, r2
 800565c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005660:	4b0f      	ldr	r3, [pc, #60]	; (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4a0e      	ldr	r2, [pc, #56]	; (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005666:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800566a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800566c:	f7fc fd56 	bl	800211c <HAL_GetTick>
 8005670:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005672:	e008      	b.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005674:	f7fc fd52 	bl	800211c <HAL_GetTick>
 8005678:	4602      	mov	r2, r0
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	1ad3      	subs	r3, r2, r3
 800567e:	2b64      	cmp	r3, #100	; 0x64
 8005680:	d901      	bls.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005682:	2303      	movs	r3, #3
 8005684:	e007      	b.n	8005696 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005686:	4b06      	ldr	r3, [pc, #24]	; (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800568e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005692:	d1ef      	bne.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8005694:	2300      	movs	r3, #0
}
 8005696:	4618      	mov	r0, r3
 8005698:	3720      	adds	r7, #32
 800569a:	46bd      	mov	sp, r7
 800569c:	bd80      	pop	{r7, pc}
 800569e:	bf00      	nop
 80056a0:	40023800 	.word	0x40023800

080056a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b082      	sub	sp, #8
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d101      	bne.n	80056b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80056b2:	2301      	movs	r3, #1
 80056b4:	e040      	b.n	8005738 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d106      	bne.n	80056cc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2200      	movs	r2, #0
 80056c2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	f7fc fa6a 	bl	8001ba0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2224      	movs	r2, #36	; 0x24
 80056d0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	681a      	ldr	r2, [r3, #0]
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f022 0201 	bic.w	r2, r2, #1
 80056e0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	f000 fbc2 	bl	8005e6c <UART_SetConfig>
 80056e8:	4603      	mov	r3, r0
 80056ea:	2b01      	cmp	r3, #1
 80056ec:	d101      	bne.n	80056f2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80056ee:	2301      	movs	r3, #1
 80056f0:	e022      	b.n	8005738 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d002      	beq.n	8005700 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80056fa:	6878      	ldr	r0, [r7, #4]
 80056fc:	f000 fe1a 	bl	8006334 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	685a      	ldr	r2, [r3, #4]
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800570e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	689a      	ldr	r2, [r3, #8]
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800571e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	681a      	ldr	r2, [r3, #0]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f042 0201 	orr.w	r2, r2, #1
 800572e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005730:	6878      	ldr	r0, [r7, #4]
 8005732:	f000 fea1 	bl	8006478 <UART_CheckIdleState>
 8005736:	4603      	mov	r3, r0
}
 8005738:	4618      	mov	r0, r3
 800573a:	3708      	adds	r7, #8
 800573c:	46bd      	mov	sp, r7
 800573e:	bd80      	pop	{r7, pc}

08005740 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b08a      	sub	sp, #40	; 0x28
 8005744:	af02      	add	r7, sp, #8
 8005746:	60f8      	str	r0, [r7, #12]
 8005748:	60b9      	str	r1, [r7, #8]
 800574a:	603b      	str	r3, [r7, #0]
 800574c:	4613      	mov	r3, r2
 800574e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005754:	2b20      	cmp	r3, #32
 8005756:	d171      	bne.n	800583c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d002      	beq.n	8005764 <HAL_UART_Transmit+0x24>
 800575e:	88fb      	ldrh	r3, [r7, #6]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d101      	bne.n	8005768 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005764:	2301      	movs	r3, #1
 8005766:	e06a      	b.n	800583e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	2200      	movs	r2, #0
 800576c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	2221      	movs	r2, #33	; 0x21
 8005774:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005776:	f7fc fcd1 	bl	800211c <HAL_GetTick>
 800577a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	88fa      	ldrh	r2, [r7, #6]
 8005780:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	88fa      	ldrh	r2, [r7, #6]
 8005788:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	689b      	ldr	r3, [r3, #8]
 8005790:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005794:	d108      	bne.n	80057a8 <HAL_UART_Transmit+0x68>
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	691b      	ldr	r3, [r3, #16]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d104      	bne.n	80057a8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800579e:	2300      	movs	r3, #0
 80057a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	61bb      	str	r3, [r7, #24]
 80057a6:	e003      	b.n	80057b0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80057ac:	2300      	movs	r3, #0
 80057ae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80057b0:	e02c      	b.n	800580c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	9300      	str	r3, [sp, #0]
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	2200      	movs	r2, #0
 80057ba:	2180      	movs	r1, #128	; 0x80
 80057bc:	68f8      	ldr	r0, [r7, #12]
 80057be:	f000 fea8 	bl	8006512 <UART_WaitOnFlagUntilTimeout>
 80057c2:	4603      	mov	r3, r0
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d001      	beq.n	80057cc <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 80057c8:	2303      	movs	r3, #3
 80057ca:	e038      	b.n	800583e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80057cc:	69fb      	ldr	r3, [r7, #28]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d10b      	bne.n	80057ea <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80057d2:	69bb      	ldr	r3, [r7, #24]
 80057d4:	881b      	ldrh	r3, [r3, #0]
 80057d6:	461a      	mov	r2, r3
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80057e0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80057e2:	69bb      	ldr	r3, [r7, #24]
 80057e4:	3302      	adds	r3, #2
 80057e6:	61bb      	str	r3, [r7, #24]
 80057e8:	e007      	b.n	80057fa <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80057ea:	69fb      	ldr	r3, [r7, #28]
 80057ec:	781a      	ldrb	r2, [r3, #0]
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80057f4:	69fb      	ldr	r3, [r7, #28]
 80057f6:	3301      	adds	r3, #1
 80057f8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005800:	b29b      	uxth	r3, r3
 8005802:	3b01      	subs	r3, #1
 8005804:	b29a      	uxth	r2, r3
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005812:	b29b      	uxth	r3, r3
 8005814:	2b00      	cmp	r3, #0
 8005816:	d1cc      	bne.n	80057b2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	9300      	str	r3, [sp, #0]
 800581c:	697b      	ldr	r3, [r7, #20]
 800581e:	2200      	movs	r2, #0
 8005820:	2140      	movs	r1, #64	; 0x40
 8005822:	68f8      	ldr	r0, [r7, #12]
 8005824:	f000 fe75 	bl	8006512 <UART_WaitOnFlagUntilTimeout>
 8005828:	4603      	mov	r3, r0
 800582a:	2b00      	cmp	r3, #0
 800582c:	d001      	beq.n	8005832 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 800582e:	2303      	movs	r3, #3
 8005830:	e005      	b.n	800583e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	2220      	movs	r2, #32
 8005836:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005838:	2300      	movs	r3, #0
 800583a:	e000      	b.n	800583e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800583c:	2302      	movs	r3, #2
  }
}
 800583e:	4618      	mov	r0, r3
 8005840:	3720      	adds	r7, #32
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}
	...

08005848 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b0ba      	sub	sp, #232	; 0xe8
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	69db      	ldr	r3, [r3, #28]
 8005856:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	689b      	ldr	r3, [r3, #8]
 800586a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800586e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005872:	f640 030f 	movw	r3, #2063	; 0x80f
 8005876:	4013      	ands	r3, r2
 8005878:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800587c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005880:	2b00      	cmp	r3, #0
 8005882:	d115      	bne.n	80058b0 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005884:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005888:	f003 0320 	and.w	r3, r3, #32
 800588c:	2b00      	cmp	r3, #0
 800588e:	d00f      	beq.n	80058b0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005890:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005894:	f003 0320 	and.w	r3, r3, #32
 8005898:	2b00      	cmp	r3, #0
 800589a:	d009      	beq.n	80058b0 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	f000 82ac 	beq.w	8005dfe <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80058aa:	6878      	ldr	r0, [r7, #4]
 80058ac:	4798      	blx	r3
      }
      return;
 80058ae:	e2a6      	b.n	8005dfe <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80058b0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	f000 8117 	beq.w	8005ae8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80058ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80058be:	f003 0301 	and.w	r3, r3, #1
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d106      	bne.n	80058d4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80058c6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80058ca:	4b85      	ldr	r3, [pc, #532]	; (8005ae0 <HAL_UART_IRQHandler+0x298>)
 80058cc:	4013      	ands	r3, r2
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	f000 810a 	beq.w	8005ae8 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80058d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058d8:	f003 0301 	and.w	r3, r3, #1
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d011      	beq.n	8005904 <HAL_UART_IRQHandler+0xbc>
 80058e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d00b      	beq.n	8005904 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	2201      	movs	r2, #1
 80058f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80058fa:	f043 0201 	orr.w	r2, r3, #1
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005904:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005908:	f003 0302 	and.w	r3, r3, #2
 800590c:	2b00      	cmp	r3, #0
 800590e:	d011      	beq.n	8005934 <HAL_UART_IRQHandler+0xec>
 8005910:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005914:	f003 0301 	and.w	r3, r3, #1
 8005918:	2b00      	cmp	r3, #0
 800591a:	d00b      	beq.n	8005934 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	2202      	movs	r2, #2
 8005922:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800592a:	f043 0204 	orr.w	r2, r3, #4
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005934:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005938:	f003 0304 	and.w	r3, r3, #4
 800593c:	2b00      	cmp	r3, #0
 800593e:	d011      	beq.n	8005964 <HAL_UART_IRQHandler+0x11c>
 8005940:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005944:	f003 0301 	and.w	r3, r3, #1
 8005948:	2b00      	cmp	r3, #0
 800594a:	d00b      	beq.n	8005964 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	2204      	movs	r2, #4
 8005952:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800595a:	f043 0202 	orr.w	r2, r3, #2
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005964:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005968:	f003 0308 	and.w	r3, r3, #8
 800596c:	2b00      	cmp	r3, #0
 800596e:	d017      	beq.n	80059a0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005970:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005974:	f003 0320 	and.w	r3, r3, #32
 8005978:	2b00      	cmp	r3, #0
 800597a:	d105      	bne.n	8005988 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800597c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005980:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005984:	2b00      	cmp	r3, #0
 8005986:	d00b      	beq.n	80059a0 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	2208      	movs	r2, #8
 800598e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005996:	f043 0208 	orr.w	r2, r3, #8
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80059a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d012      	beq.n	80059d2 <HAL_UART_IRQHandler+0x18a>
 80059ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059b0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d00c      	beq.n	80059d2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80059c0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059c8:	f043 0220 	orr.w	r2, r3, #32
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059d8:	2b00      	cmp	r3, #0
 80059da:	f000 8212 	beq.w	8005e02 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80059de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059e2:	f003 0320 	and.w	r3, r3, #32
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d00d      	beq.n	8005a06 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80059ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059ee:	f003 0320 	and.w	r3, r3, #32
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d007      	beq.n	8005a06 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d003      	beq.n	8005a06 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a02:	6878      	ldr	r0, [r7, #4]
 8005a04:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a0c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	689b      	ldr	r3, [r3, #8]
 8005a16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a1a:	2b40      	cmp	r3, #64	; 0x40
 8005a1c:	d005      	beq.n	8005a2a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005a1e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005a22:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d04f      	beq.n	8005aca <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f000 fe37 	bl	800669e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	689b      	ldr	r3, [r3, #8]
 8005a36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a3a:	2b40      	cmp	r3, #64	; 0x40
 8005a3c:	d141      	bne.n	8005ac2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	3308      	adds	r3, #8
 8005a44:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a48:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005a4c:	e853 3f00 	ldrex	r3, [r3]
 8005a50:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005a54:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005a58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a5c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	3308      	adds	r3, #8
 8005a66:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005a6a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005a6e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a72:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005a76:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005a7a:	e841 2300 	strex	r3, r2, [r1]
 8005a7e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005a82:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d1d9      	bne.n	8005a3e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d013      	beq.n	8005aba <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a96:	4a13      	ldr	r2, [pc, #76]	; (8005ae4 <HAL_UART_IRQHandler+0x29c>)
 8005a98:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	f7fd fbf8 	bl	8003294 <HAL_DMA_Abort_IT>
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d017      	beq.n	8005ada <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005aae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ab0:	687a      	ldr	r2, [r7, #4]
 8005ab2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005ab4:	4610      	mov	r0, r2
 8005ab6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ab8:	e00f      	b.n	8005ada <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	f000 f9b6 	bl	8005e2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ac0:	e00b      	b.n	8005ada <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f000 f9b2 	bl	8005e2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ac8:	e007      	b.n	8005ada <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005aca:	6878      	ldr	r0, [r7, #4]
 8005acc:	f000 f9ae 	bl	8005e2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8005ad8:	e193      	b.n	8005e02 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ada:	bf00      	nop
    return;
 8005adc:	e191      	b.n	8005e02 <HAL_UART_IRQHandler+0x5ba>
 8005ade:	bf00      	nop
 8005ae0:	04000120 	.word	0x04000120
 8005ae4:	08006767 	.word	0x08006767

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005aec:	2b01      	cmp	r3, #1
 8005aee:	f040 814c 	bne.w	8005d8a <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005af2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005af6:	f003 0310 	and.w	r3, r3, #16
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	f000 8145 	beq.w	8005d8a <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005b00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b04:	f003 0310 	and.w	r3, r3, #16
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	f000 813e 	beq.w	8005d8a <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	2210      	movs	r2, #16
 8005b14:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	689b      	ldr	r3, [r3, #8]
 8005b1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b20:	2b40      	cmp	r3, #64	; 0x40
 8005b22:	f040 80b6 	bne.w	8005c92 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	685b      	ldr	r3, [r3, #4]
 8005b2e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005b32:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	f000 8165 	beq.w	8005e06 <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005b42:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005b46:	429a      	cmp	r2, r3
 8005b48:	f080 815d 	bcs.w	8005e06 <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005b52:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b5a:	69db      	ldr	r3, [r3, #28]
 8005b5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b60:	f000 8086 	beq.w	8005c70 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b6c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005b70:	e853 3f00 	ldrex	r3, [r3]
 8005b74:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005b78:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005b7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b80:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	461a      	mov	r2, r3
 8005b8a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005b8e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005b92:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b96:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005b9a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005b9e:	e841 2300 	strex	r3, r2, [r1]
 8005ba2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005ba6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d1da      	bne.n	8005b64 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	3308      	adds	r3, #8
 8005bb4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bb6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005bb8:	e853 3f00 	ldrex	r3, [r3]
 8005bbc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005bbe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005bc0:	f023 0301 	bic.w	r3, r3, #1
 8005bc4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	3308      	adds	r3, #8
 8005bce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005bd2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005bd6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bd8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005bda:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005bde:	e841 2300 	strex	r3, r2, [r1]
 8005be2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005be4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d1e1      	bne.n	8005bae <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	3308      	adds	r3, #8
 8005bf0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bf2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005bf4:	e853 3f00 	ldrex	r3, [r3]
 8005bf8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005bfa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005bfc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c00:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	3308      	adds	r3, #8
 8005c0a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005c0e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005c10:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c12:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005c14:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005c16:	e841 2300 	strex	r3, r2, [r1]
 8005c1a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005c1c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d1e3      	bne.n	8005bea <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2220      	movs	r2, #32
 8005c26:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c38:	e853 3f00 	ldrex	r3, [r3]
 8005c3c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005c3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c40:	f023 0310 	bic.w	r3, r3, #16
 8005c44:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	461a      	mov	r2, r3
 8005c4e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005c52:	65bb      	str	r3, [r7, #88]	; 0x58
 8005c54:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c56:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005c58:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005c5a:	e841 2300 	strex	r3, r2, [r1]
 8005c5e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005c60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d1e4      	bne.n	8005c30 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	f7fd faa2 	bl	80031b4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2202      	movs	r2, #2
 8005c74:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005c82:	b29b      	uxth	r3, r3
 8005c84:	1ad3      	subs	r3, r2, r3
 8005c86:	b29b      	uxth	r3, r3
 8005c88:	4619      	mov	r1, r3
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	f000 f8d8 	bl	8005e40 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005c90:	e0b9      	b.n	8005e06 <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005c9e:	b29b      	uxth	r3, r3
 8005ca0:	1ad3      	subs	r3, r2, r3
 8005ca2:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005cac:	b29b      	uxth	r3, r3
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	f000 80ab 	beq.w	8005e0a <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8005cb4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	f000 80a6 	beq.w	8005e0a <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cc6:	e853 3f00 	ldrex	r3, [r3]
 8005cca:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005ccc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cce:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005cd2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	461a      	mov	r2, r3
 8005cdc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005ce0:	647b      	str	r3, [r7, #68]	; 0x44
 8005ce2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ce4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005ce6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005ce8:	e841 2300 	strex	r3, r2, [r1]
 8005cec:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005cee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d1e4      	bne.n	8005cbe <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	3308      	adds	r3, #8
 8005cfa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cfe:	e853 3f00 	ldrex	r3, [r3]
 8005d02:	623b      	str	r3, [r7, #32]
   return(result);
 8005d04:	6a3b      	ldr	r3, [r7, #32]
 8005d06:	f023 0301 	bic.w	r3, r3, #1
 8005d0a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	3308      	adds	r3, #8
 8005d14:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005d18:	633a      	str	r2, [r7, #48]	; 0x30
 8005d1a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d1c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005d1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d20:	e841 2300 	strex	r3, r2, [r1]
 8005d24:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d1e3      	bne.n	8005cf4 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2220      	movs	r2, #32
 8005d30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2200      	movs	r2, #0
 8005d38:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d46:	693b      	ldr	r3, [r7, #16]
 8005d48:	e853 3f00 	ldrex	r3, [r3]
 8005d4c:	60fb      	str	r3, [r7, #12]
   return(result);
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	f023 0310 	bic.w	r3, r3, #16
 8005d54:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	461a      	mov	r2, r3
 8005d5e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005d62:	61fb      	str	r3, [r7, #28]
 8005d64:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d66:	69b9      	ldr	r1, [r7, #24]
 8005d68:	69fa      	ldr	r2, [r7, #28]
 8005d6a:	e841 2300 	strex	r3, r2, [r1]
 8005d6e:	617b      	str	r3, [r7, #20]
   return(result);
 8005d70:	697b      	ldr	r3, [r7, #20]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d1e4      	bne.n	8005d40 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2202      	movs	r2, #2
 8005d7a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005d7c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005d80:	4619      	mov	r1, r3
 8005d82:	6878      	ldr	r0, [r7, #4]
 8005d84:	f000 f85c 	bl	8005e40 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005d88:	e03f      	b.n	8005e0a <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005d8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d00e      	beq.n	8005db4 <HAL_UART_IRQHandler+0x56c>
 8005d96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d008      	beq.n	8005db4 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005daa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005dac:	6878      	ldr	r0, [r7, #4]
 8005dae:	f000 f853 	bl	8005e58 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005db2:	e02d      	b.n	8005e10 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005db4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005db8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d00e      	beq.n	8005dde <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005dc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005dc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d008      	beq.n	8005dde <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d01c      	beq.n	8005e0e <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005dd8:	6878      	ldr	r0, [r7, #4]
 8005dda:	4798      	blx	r3
    }
    return;
 8005ddc:	e017      	b.n	8005e0e <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005dde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005de2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d012      	beq.n	8005e10 <HAL_UART_IRQHandler+0x5c8>
 8005dea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005dee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d00c      	beq.n	8005e10 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8005df6:	6878      	ldr	r0, [r7, #4]
 8005df8:	f000 fccb 	bl	8006792 <UART_EndTransmit_IT>
    return;
 8005dfc:	e008      	b.n	8005e10 <HAL_UART_IRQHandler+0x5c8>
      return;
 8005dfe:	bf00      	nop
 8005e00:	e006      	b.n	8005e10 <HAL_UART_IRQHandler+0x5c8>
    return;
 8005e02:	bf00      	nop
 8005e04:	e004      	b.n	8005e10 <HAL_UART_IRQHandler+0x5c8>
      return;
 8005e06:	bf00      	nop
 8005e08:	e002      	b.n	8005e10 <HAL_UART_IRQHandler+0x5c8>
      return;
 8005e0a:	bf00      	nop
 8005e0c:	e000      	b.n	8005e10 <HAL_UART_IRQHandler+0x5c8>
    return;
 8005e0e:	bf00      	nop
  }

}
 8005e10:	37e8      	adds	r7, #232	; 0xe8
 8005e12:	46bd      	mov	sp, r7
 8005e14:	bd80      	pop	{r7, pc}
 8005e16:	bf00      	nop

08005e18 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005e18:	b480      	push	{r7}
 8005e1a:	b083      	sub	sp, #12
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005e20:	bf00      	nop
 8005e22:	370c      	adds	r7, #12
 8005e24:	46bd      	mov	sp, r7
 8005e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2a:	4770      	bx	lr

08005e2c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	b083      	sub	sp, #12
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005e34:	bf00      	nop
 8005e36:	370c      	adds	r7, #12
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3e:	4770      	bx	lr

08005e40 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005e40:	b480      	push	{r7}
 8005e42:	b083      	sub	sp, #12
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
 8005e48:	460b      	mov	r3, r1
 8005e4a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005e4c:	bf00      	nop
 8005e4e:	370c      	adds	r7, #12
 8005e50:	46bd      	mov	sp, r7
 8005e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e56:	4770      	bx	lr

08005e58 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005e58:	b480      	push	{r7}
 8005e5a:	b083      	sub	sp, #12
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005e60:	bf00      	nop
 8005e62:	370c      	adds	r7, #12
 8005e64:	46bd      	mov	sp, r7
 8005e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6a:	4770      	bx	lr

08005e6c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b088      	sub	sp, #32
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005e74:	2300      	movs	r3, #0
 8005e76:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	689a      	ldr	r2, [r3, #8]
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	691b      	ldr	r3, [r3, #16]
 8005e80:	431a      	orrs	r2, r3
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	695b      	ldr	r3, [r3, #20]
 8005e86:	431a      	orrs	r2, r3
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	69db      	ldr	r3, [r3, #28]
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	681a      	ldr	r2, [r3, #0]
 8005e96:	4ba6      	ldr	r3, [pc, #664]	; (8006130 <UART_SetConfig+0x2c4>)
 8005e98:	4013      	ands	r3, r2
 8005e9a:	687a      	ldr	r2, [r7, #4]
 8005e9c:	6812      	ldr	r2, [r2, #0]
 8005e9e:	6979      	ldr	r1, [r7, #20]
 8005ea0:	430b      	orrs	r3, r1
 8005ea2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	685b      	ldr	r3, [r3, #4]
 8005eaa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	68da      	ldr	r2, [r3, #12]
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	430a      	orrs	r2, r1
 8005eb8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	699b      	ldr	r3, [r3, #24]
 8005ebe:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6a1b      	ldr	r3, [r3, #32]
 8005ec4:	697a      	ldr	r2, [r7, #20]
 8005ec6:	4313      	orrs	r3, r2
 8005ec8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	689b      	ldr	r3, [r3, #8]
 8005ed0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	697a      	ldr	r2, [r7, #20]
 8005eda:	430a      	orrs	r2, r1
 8005edc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4a94      	ldr	r2, [pc, #592]	; (8006134 <UART_SetConfig+0x2c8>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d120      	bne.n	8005f2a <UART_SetConfig+0xbe>
 8005ee8:	4b93      	ldr	r3, [pc, #588]	; (8006138 <UART_SetConfig+0x2cc>)
 8005eea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005eee:	f003 0303 	and.w	r3, r3, #3
 8005ef2:	2b03      	cmp	r3, #3
 8005ef4:	d816      	bhi.n	8005f24 <UART_SetConfig+0xb8>
 8005ef6:	a201      	add	r2, pc, #4	; (adr r2, 8005efc <UART_SetConfig+0x90>)
 8005ef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005efc:	08005f0d 	.word	0x08005f0d
 8005f00:	08005f19 	.word	0x08005f19
 8005f04:	08005f13 	.word	0x08005f13
 8005f08:	08005f1f 	.word	0x08005f1f
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	77fb      	strb	r3, [r7, #31]
 8005f10:	e150      	b.n	80061b4 <UART_SetConfig+0x348>
 8005f12:	2302      	movs	r3, #2
 8005f14:	77fb      	strb	r3, [r7, #31]
 8005f16:	e14d      	b.n	80061b4 <UART_SetConfig+0x348>
 8005f18:	2304      	movs	r3, #4
 8005f1a:	77fb      	strb	r3, [r7, #31]
 8005f1c:	e14a      	b.n	80061b4 <UART_SetConfig+0x348>
 8005f1e:	2308      	movs	r3, #8
 8005f20:	77fb      	strb	r3, [r7, #31]
 8005f22:	e147      	b.n	80061b4 <UART_SetConfig+0x348>
 8005f24:	2310      	movs	r3, #16
 8005f26:	77fb      	strb	r3, [r7, #31]
 8005f28:	e144      	b.n	80061b4 <UART_SetConfig+0x348>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4a83      	ldr	r2, [pc, #524]	; (800613c <UART_SetConfig+0x2d0>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d132      	bne.n	8005f9a <UART_SetConfig+0x12e>
 8005f34:	4b80      	ldr	r3, [pc, #512]	; (8006138 <UART_SetConfig+0x2cc>)
 8005f36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f3a:	f003 030c 	and.w	r3, r3, #12
 8005f3e:	2b0c      	cmp	r3, #12
 8005f40:	d828      	bhi.n	8005f94 <UART_SetConfig+0x128>
 8005f42:	a201      	add	r2, pc, #4	; (adr r2, 8005f48 <UART_SetConfig+0xdc>)
 8005f44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f48:	08005f7d 	.word	0x08005f7d
 8005f4c:	08005f95 	.word	0x08005f95
 8005f50:	08005f95 	.word	0x08005f95
 8005f54:	08005f95 	.word	0x08005f95
 8005f58:	08005f89 	.word	0x08005f89
 8005f5c:	08005f95 	.word	0x08005f95
 8005f60:	08005f95 	.word	0x08005f95
 8005f64:	08005f95 	.word	0x08005f95
 8005f68:	08005f83 	.word	0x08005f83
 8005f6c:	08005f95 	.word	0x08005f95
 8005f70:	08005f95 	.word	0x08005f95
 8005f74:	08005f95 	.word	0x08005f95
 8005f78:	08005f8f 	.word	0x08005f8f
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	77fb      	strb	r3, [r7, #31]
 8005f80:	e118      	b.n	80061b4 <UART_SetConfig+0x348>
 8005f82:	2302      	movs	r3, #2
 8005f84:	77fb      	strb	r3, [r7, #31]
 8005f86:	e115      	b.n	80061b4 <UART_SetConfig+0x348>
 8005f88:	2304      	movs	r3, #4
 8005f8a:	77fb      	strb	r3, [r7, #31]
 8005f8c:	e112      	b.n	80061b4 <UART_SetConfig+0x348>
 8005f8e:	2308      	movs	r3, #8
 8005f90:	77fb      	strb	r3, [r7, #31]
 8005f92:	e10f      	b.n	80061b4 <UART_SetConfig+0x348>
 8005f94:	2310      	movs	r3, #16
 8005f96:	77fb      	strb	r3, [r7, #31]
 8005f98:	e10c      	b.n	80061b4 <UART_SetConfig+0x348>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	4a68      	ldr	r2, [pc, #416]	; (8006140 <UART_SetConfig+0x2d4>)
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d120      	bne.n	8005fe6 <UART_SetConfig+0x17a>
 8005fa4:	4b64      	ldr	r3, [pc, #400]	; (8006138 <UART_SetConfig+0x2cc>)
 8005fa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005faa:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005fae:	2b30      	cmp	r3, #48	; 0x30
 8005fb0:	d013      	beq.n	8005fda <UART_SetConfig+0x16e>
 8005fb2:	2b30      	cmp	r3, #48	; 0x30
 8005fb4:	d814      	bhi.n	8005fe0 <UART_SetConfig+0x174>
 8005fb6:	2b20      	cmp	r3, #32
 8005fb8:	d009      	beq.n	8005fce <UART_SetConfig+0x162>
 8005fba:	2b20      	cmp	r3, #32
 8005fbc:	d810      	bhi.n	8005fe0 <UART_SetConfig+0x174>
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d002      	beq.n	8005fc8 <UART_SetConfig+0x15c>
 8005fc2:	2b10      	cmp	r3, #16
 8005fc4:	d006      	beq.n	8005fd4 <UART_SetConfig+0x168>
 8005fc6:	e00b      	b.n	8005fe0 <UART_SetConfig+0x174>
 8005fc8:	2300      	movs	r3, #0
 8005fca:	77fb      	strb	r3, [r7, #31]
 8005fcc:	e0f2      	b.n	80061b4 <UART_SetConfig+0x348>
 8005fce:	2302      	movs	r3, #2
 8005fd0:	77fb      	strb	r3, [r7, #31]
 8005fd2:	e0ef      	b.n	80061b4 <UART_SetConfig+0x348>
 8005fd4:	2304      	movs	r3, #4
 8005fd6:	77fb      	strb	r3, [r7, #31]
 8005fd8:	e0ec      	b.n	80061b4 <UART_SetConfig+0x348>
 8005fda:	2308      	movs	r3, #8
 8005fdc:	77fb      	strb	r3, [r7, #31]
 8005fde:	e0e9      	b.n	80061b4 <UART_SetConfig+0x348>
 8005fe0:	2310      	movs	r3, #16
 8005fe2:	77fb      	strb	r3, [r7, #31]
 8005fe4:	e0e6      	b.n	80061b4 <UART_SetConfig+0x348>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4a56      	ldr	r2, [pc, #344]	; (8006144 <UART_SetConfig+0x2d8>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d120      	bne.n	8006032 <UART_SetConfig+0x1c6>
 8005ff0:	4b51      	ldr	r3, [pc, #324]	; (8006138 <UART_SetConfig+0x2cc>)
 8005ff2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ff6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005ffa:	2bc0      	cmp	r3, #192	; 0xc0
 8005ffc:	d013      	beq.n	8006026 <UART_SetConfig+0x1ba>
 8005ffe:	2bc0      	cmp	r3, #192	; 0xc0
 8006000:	d814      	bhi.n	800602c <UART_SetConfig+0x1c0>
 8006002:	2b80      	cmp	r3, #128	; 0x80
 8006004:	d009      	beq.n	800601a <UART_SetConfig+0x1ae>
 8006006:	2b80      	cmp	r3, #128	; 0x80
 8006008:	d810      	bhi.n	800602c <UART_SetConfig+0x1c0>
 800600a:	2b00      	cmp	r3, #0
 800600c:	d002      	beq.n	8006014 <UART_SetConfig+0x1a8>
 800600e:	2b40      	cmp	r3, #64	; 0x40
 8006010:	d006      	beq.n	8006020 <UART_SetConfig+0x1b4>
 8006012:	e00b      	b.n	800602c <UART_SetConfig+0x1c0>
 8006014:	2300      	movs	r3, #0
 8006016:	77fb      	strb	r3, [r7, #31]
 8006018:	e0cc      	b.n	80061b4 <UART_SetConfig+0x348>
 800601a:	2302      	movs	r3, #2
 800601c:	77fb      	strb	r3, [r7, #31]
 800601e:	e0c9      	b.n	80061b4 <UART_SetConfig+0x348>
 8006020:	2304      	movs	r3, #4
 8006022:	77fb      	strb	r3, [r7, #31]
 8006024:	e0c6      	b.n	80061b4 <UART_SetConfig+0x348>
 8006026:	2308      	movs	r3, #8
 8006028:	77fb      	strb	r3, [r7, #31]
 800602a:	e0c3      	b.n	80061b4 <UART_SetConfig+0x348>
 800602c:	2310      	movs	r3, #16
 800602e:	77fb      	strb	r3, [r7, #31]
 8006030:	e0c0      	b.n	80061b4 <UART_SetConfig+0x348>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	4a44      	ldr	r2, [pc, #272]	; (8006148 <UART_SetConfig+0x2dc>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d125      	bne.n	8006088 <UART_SetConfig+0x21c>
 800603c:	4b3e      	ldr	r3, [pc, #248]	; (8006138 <UART_SetConfig+0x2cc>)
 800603e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006042:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006046:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800604a:	d017      	beq.n	800607c <UART_SetConfig+0x210>
 800604c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006050:	d817      	bhi.n	8006082 <UART_SetConfig+0x216>
 8006052:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006056:	d00b      	beq.n	8006070 <UART_SetConfig+0x204>
 8006058:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800605c:	d811      	bhi.n	8006082 <UART_SetConfig+0x216>
 800605e:	2b00      	cmp	r3, #0
 8006060:	d003      	beq.n	800606a <UART_SetConfig+0x1fe>
 8006062:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006066:	d006      	beq.n	8006076 <UART_SetConfig+0x20a>
 8006068:	e00b      	b.n	8006082 <UART_SetConfig+0x216>
 800606a:	2300      	movs	r3, #0
 800606c:	77fb      	strb	r3, [r7, #31]
 800606e:	e0a1      	b.n	80061b4 <UART_SetConfig+0x348>
 8006070:	2302      	movs	r3, #2
 8006072:	77fb      	strb	r3, [r7, #31]
 8006074:	e09e      	b.n	80061b4 <UART_SetConfig+0x348>
 8006076:	2304      	movs	r3, #4
 8006078:	77fb      	strb	r3, [r7, #31]
 800607a:	e09b      	b.n	80061b4 <UART_SetConfig+0x348>
 800607c:	2308      	movs	r3, #8
 800607e:	77fb      	strb	r3, [r7, #31]
 8006080:	e098      	b.n	80061b4 <UART_SetConfig+0x348>
 8006082:	2310      	movs	r3, #16
 8006084:	77fb      	strb	r3, [r7, #31]
 8006086:	e095      	b.n	80061b4 <UART_SetConfig+0x348>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4a2f      	ldr	r2, [pc, #188]	; (800614c <UART_SetConfig+0x2e0>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d125      	bne.n	80060de <UART_SetConfig+0x272>
 8006092:	4b29      	ldr	r3, [pc, #164]	; (8006138 <UART_SetConfig+0x2cc>)
 8006094:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006098:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800609c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80060a0:	d017      	beq.n	80060d2 <UART_SetConfig+0x266>
 80060a2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80060a6:	d817      	bhi.n	80060d8 <UART_SetConfig+0x26c>
 80060a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060ac:	d00b      	beq.n	80060c6 <UART_SetConfig+0x25a>
 80060ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060b2:	d811      	bhi.n	80060d8 <UART_SetConfig+0x26c>
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d003      	beq.n	80060c0 <UART_SetConfig+0x254>
 80060b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060bc:	d006      	beq.n	80060cc <UART_SetConfig+0x260>
 80060be:	e00b      	b.n	80060d8 <UART_SetConfig+0x26c>
 80060c0:	2301      	movs	r3, #1
 80060c2:	77fb      	strb	r3, [r7, #31]
 80060c4:	e076      	b.n	80061b4 <UART_SetConfig+0x348>
 80060c6:	2302      	movs	r3, #2
 80060c8:	77fb      	strb	r3, [r7, #31]
 80060ca:	e073      	b.n	80061b4 <UART_SetConfig+0x348>
 80060cc:	2304      	movs	r3, #4
 80060ce:	77fb      	strb	r3, [r7, #31]
 80060d0:	e070      	b.n	80061b4 <UART_SetConfig+0x348>
 80060d2:	2308      	movs	r3, #8
 80060d4:	77fb      	strb	r3, [r7, #31]
 80060d6:	e06d      	b.n	80061b4 <UART_SetConfig+0x348>
 80060d8:	2310      	movs	r3, #16
 80060da:	77fb      	strb	r3, [r7, #31]
 80060dc:	e06a      	b.n	80061b4 <UART_SetConfig+0x348>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	4a1b      	ldr	r2, [pc, #108]	; (8006150 <UART_SetConfig+0x2e4>)
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d138      	bne.n	800615a <UART_SetConfig+0x2ee>
 80060e8:	4b13      	ldr	r3, [pc, #76]	; (8006138 <UART_SetConfig+0x2cc>)
 80060ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060ee:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80060f2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80060f6:	d017      	beq.n	8006128 <UART_SetConfig+0x2bc>
 80060f8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80060fc:	d82a      	bhi.n	8006154 <UART_SetConfig+0x2e8>
 80060fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006102:	d00b      	beq.n	800611c <UART_SetConfig+0x2b0>
 8006104:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006108:	d824      	bhi.n	8006154 <UART_SetConfig+0x2e8>
 800610a:	2b00      	cmp	r3, #0
 800610c:	d003      	beq.n	8006116 <UART_SetConfig+0x2aa>
 800610e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006112:	d006      	beq.n	8006122 <UART_SetConfig+0x2b6>
 8006114:	e01e      	b.n	8006154 <UART_SetConfig+0x2e8>
 8006116:	2300      	movs	r3, #0
 8006118:	77fb      	strb	r3, [r7, #31]
 800611a:	e04b      	b.n	80061b4 <UART_SetConfig+0x348>
 800611c:	2302      	movs	r3, #2
 800611e:	77fb      	strb	r3, [r7, #31]
 8006120:	e048      	b.n	80061b4 <UART_SetConfig+0x348>
 8006122:	2304      	movs	r3, #4
 8006124:	77fb      	strb	r3, [r7, #31]
 8006126:	e045      	b.n	80061b4 <UART_SetConfig+0x348>
 8006128:	2308      	movs	r3, #8
 800612a:	77fb      	strb	r3, [r7, #31]
 800612c:	e042      	b.n	80061b4 <UART_SetConfig+0x348>
 800612e:	bf00      	nop
 8006130:	efff69f3 	.word	0xefff69f3
 8006134:	40011000 	.word	0x40011000
 8006138:	40023800 	.word	0x40023800
 800613c:	40004400 	.word	0x40004400
 8006140:	40004800 	.word	0x40004800
 8006144:	40004c00 	.word	0x40004c00
 8006148:	40005000 	.word	0x40005000
 800614c:	40011400 	.word	0x40011400
 8006150:	40007800 	.word	0x40007800
 8006154:	2310      	movs	r3, #16
 8006156:	77fb      	strb	r3, [r7, #31]
 8006158:	e02c      	b.n	80061b4 <UART_SetConfig+0x348>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4a72      	ldr	r2, [pc, #456]	; (8006328 <UART_SetConfig+0x4bc>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d125      	bne.n	80061b0 <UART_SetConfig+0x344>
 8006164:	4b71      	ldr	r3, [pc, #452]	; (800632c <UART_SetConfig+0x4c0>)
 8006166:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800616a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800616e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006172:	d017      	beq.n	80061a4 <UART_SetConfig+0x338>
 8006174:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006178:	d817      	bhi.n	80061aa <UART_SetConfig+0x33e>
 800617a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800617e:	d00b      	beq.n	8006198 <UART_SetConfig+0x32c>
 8006180:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006184:	d811      	bhi.n	80061aa <UART_SetConfig+0x33e>
 8006186:	2b00      	cmp	r3, #0
 8006188:	d003      	beq.n	8006192 <UART_SetConfig+0x326>
 800618a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800618e:	d006      	beq.n	800619e <UART_SetConfig+0x332>
 8006190:	e00b      	b.n	80061aa <UART_SetConfig+0x33e>
 8006192:	2300      	movs	r3, #0
 8006194:	77fb      	strb	r3, [r7, #31]
 8006196:	e00d      	b.n	80061b4 <UART_SetConfig+0x348>
 8006198:	2302      	movs	r3, #2
 800619a:	77fb      	strb	r3, [r7, #31]
 800619c:	e00a      	b.n	80061b4 <UART_SetConfig+0x348>
 800619e:	2304      	movs	r3, #4
 80061a0:	77fb      	strb	r3, [r7, #31]
 80061a2:	e007      	b.n	80061b4 <UART_SetConfig+0x348>
 80061a4:	2308      	movs	r3, #8
 80061a6:	77fb      	strb	r3, [r7, #31]
 80061a8:	e004      	b.n	80061b4 <UART_SetConfig+0x348>
 80061aa:	2310      	movs	r3, #16
 80061ac:	77fb      	strb	r3, [r7, #31]
 80061ae:	e001      	b.n	80061b4 <UART_SetConfig+0x348>
 80061b0:	2310      	movs	r3, #16
 80061b2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	69db      	ldr	r3, [r3, #28]
 80061b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061bc:	d15b      	bne.n	8006276 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80061be:	7ffb      	ldrb	r3, [r7, #31]
 80061c0:	2b08      	cmp	r3, #8
 80061c2:	d828      	bhi.n	8006216 <UART_SetConfig+0x3aa>
 80061c4:	a201      	add	r2, pc, #4	; (adr r2, 80061cc <UART_SetConfig+0x360>)
 80061c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061ca:	bf00      	nop
 80061cc:	080061f1 	.word	0x080061f1
 80061d0:	080061f9 	.word	0x080061f9
 80061d4:	08006201 	.word	0x08006201
 80061d8:	08006217 	.word	0x08006217
 80061dc:	08006207 	.word	0x08006207
 80061e0:	08006217 	.word	0x08006217
 80061e4:	08006217 	.word	0x08006217
 80061e8:	08006217 	.word	0x08006217
 80061ec:	0800620f 	.word	0x0800620f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80061f0:	f7fe fe08 	bl	8004e04 <HAL_RCC_GetPCLK1Freq>
 80061f4:	61b8      	str	r0, [r7, #24]
        break;
 80061f6:	e013      	b.n	8006220 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80061f8:	f7fe fe18 	bl	8004e2c <HAL_RCC_GetPCLK2Freq>
 80061fc:	61b8      	str	r0, [r7, #24]
        break;
 80061fe:	e00f      	b.n	8006220 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006200:	4b4b      	ldr	r3, [pc, #300]	; (8006330 <UART_SetConfig+0x4c4>)
 8006202:	61bb      	str	r3, [r7, #24]
        break;
 8006204:	e00c      	b.n	8006220 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006206:	f7fe fceb 	bl	8004be0 <HAL_RCC_GetSysClockFreq>
 800620a:	61b8      	str	r0, [r7, #24]
        break;
 800620c:	e008      	b.n	8006220 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800620e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006212:	61bb      	str	r3, [r7, #24]
        break;
 8006214:	e004      	b.n	8006220 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006216:	2300      	movs	r3, #0
 8006218:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800621a:	2301      	movs	r3, #1
 800621c:	77bb      	strb	r3, [r7, #30]
        break;
 800621e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006220:	69bb      	ldr	r3, [r7, #24]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d074      	beq.n	8006310 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006226:	69bb      	ldr	r3, [r7, #24]
 8006228:	005a      	lsls	r2, r3, #1
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	685b      	ldr	r3, [r3, #4]
 800622e:	085b      	lsrs	r3, r3, #1
 8006230:	441a      	add	r2, r3
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	685b      	ldr	r3, [r3, #4]
 8006236:	fbb2 f3f3 	udiv	r3, r2, r3
 800623a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800623c:	693b      	ldr	r3, [r7, #16]
 800623e:	2b0f      	cmp	r3, #15
 8006240:	d916      	bls.n	8006270 <UART_SetConfig+0x404>
 8006242:	693b      	ldr	r3, [r7, #16]
 8006244:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006248:	d212      	bcs.n	8006270 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800624a:	693b      	ldr	r3, [r7, #16]
 800624c:	b29b      	uxth	r3, r3
 800624e:	f023 030f 	bic.w	r3, r3, #15
 8006252:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006254:	693b      	ldr	r3, [r7, #16]
 8006256:	085b      	lsrs	r3, r3, #1
 8006258:	b29b      	uxth	r3, r3
 800625a:	f003 0307 	and.w	r3, r3, #7
 800625e:	b29a      	uxth	r2, r3
 8006260:	89fb      	ldrh	r3, [r7, #14]
 8006262:	4313      	orrs	r3, r2
 8006264:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	89fa      	ldrh	r2, [r7, #14]
 800626c:	60da      	str	r2, [r3, #12]
 800626e:	e04f      	b.n	8006310 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006270:	2301      	movs	r3, #1
 8006272:	77bb      	strb	r3, [r7, #30]
 8006274:	e04c      	b.n	8006310 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006276:	7ffb      	ldrb	r3, [r7, #31]
 8006278:	2b08      	cmp	r3, #8
 800627a:	d828      	bhi.n	80062ce <UART_SetConfig+0x462>
 800627c:	a201      	add	r2, pc, #4	; (adr r2, 8006284 <UART_SetConfig+0x418>)
 800627e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006282:	bf00      	nop
 8006284:	080062a9 	.word	0x080062a9
 8006288:	080062b1 	.word	0x080062b1
 800628c:	080062b9 	.word	0x080062b9
 8006290:	080062cf 	.word	0x080062cf
 8006294:	080062bf 	.word	0x080062bf
 8006298:	080062cf 	.word	0x080062cf
 800629c:	080062cf 	.word	0x080062cf
 80062a0:	080062cf 	.word	0x080062cf
 80062a4:	080062c7 	.word	0x080062c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80062a8:	f7fe fdac 	bl	8004e04 <HAL_RCC_GetPCLK1Freq>
 80062ac:	61b8      	str	r0, [r7, #24]
        break;
 80062ae:	e013      	b.n	80062d8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80062b0:	f7fe fdbc 	bl	8004e2c <HAL_RCC_GetPCLK2Freq>
 80062b4:	61b8      	str	r0, [r7, #24]
        break;
 80062b6:	e00f      	b.n	80062d8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80062b8:	4b1d      	ldr	r3, [pc, #116]	; (8006330 <UART_SetConfig+0x4c4>)
 80062ba:	61bb      	str	r3, [r7, #24]
        break;
 80062bc:	e00c      	b.n	80062d8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80062be:	f7fe fc8f 	bl	8004be0 <HAL_RCC_GetSysClockFreq>
 80062c2:	61b8      	str	r0, [r7, #24]
        break;
 80062c4:	e008      	b.n	80062d8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80062c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80062ca:	61bb      	str	r3, [r7, #24]
        break;
 80062cc:	e004      	b.n	80062d8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80062ce:	2300      	movs	r3, #0
 80062d0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80062d2:	2301      	movs	r3, #1
 80062d4:	77bb      	strb	r3, [r7, #30]
        break;
 80062d6:	bf00      	nop
    }

    if (pclk != 0U)
 80062d8:	69bb      	ldr	r3, [r7, #24]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d018      	beq.n	8006310 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	685b      	ldr	r3, [r3, #4]
 80062e2:	085a      	lsrs	r2, r3, #1
 80062e4:	69bb      	ldr	r3, [r7, #24]
 80062e6:	441a      	add	r2, r3
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	685b      	ldr	r3, [r3, #4]
 80062ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80062f0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80062f2:	693b      	ldr	r3, [r7, #16]
 80062f4:	2b0f      	cmp	r3, #15
 80062f6:	d909      	bls.n	800630c <UART_SetConfig+0x4a0>
 80062f8:	693b      	ldr	r3, [r7, #16]
 80062fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062fe:	d205      	bcs.n	800630c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006300:	693b      	ldr	r3, [r7, #16]
 8006302:	b29a      	uxth	r2, r3
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	60da      	str	r2, [r3, #12]
 800630a:	e001      	b.n	8006310 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800630c:	2301      	movs	r3, #1
 800630e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2200      	movs	r2, #0
 8006314:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2200      	movs	r2, #0
 800631a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800631c:	7fbb      	ldrb	r3, [r7, #30]
}
 800631e:	4618      	mov	r0, r3
 8006320:	3720      	adds	r7, #32
 8006322:	46bd      	mov	sp, r7
 8006324:	bd80      	pop	{r7, pc}
 8006326:	bf00      	nop
 8006328:	40007c00 	.word	0x40007c00
 800632c:	40023800 	.word	0x40023800
 8006330:	00f42400 	.word	0x00f42400

08006334 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006334:	b480      	push	{r7}
 8006336:	b083      	sub	sp, #12
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006340:	f003 0301 	and.w	r3, r3, #1
 8006344:	2b00      	cmp	r3, #0
 8006346:	d00a      	beq.n	800635e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	685b      	ldr	r3, [r3, #4]
 800634e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	430a      	orrs	r2, r1
 800635c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006362:	f003 0302 	and.w	r3, r3, #2
 8006366:	2b00      	cmp	r3, #0
 8006368:	d00a      	beq.n	8006380 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	685b      	ldr	r3, [r3, #4]
 8006370:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	430a      	orrs	r2, r1
 800637e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006384:	f003 0304 	and.w	r3, r3, #4
 8006388:	2b00      	cmp	r3, #0
 800638a:	d00a      	beq.n	80063a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	685b      	ldr	r3, [r3, #4]
 8006392:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	430a      	orrs	r2, r1
 80063a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063a6:	f003 0308 	and.w	r3, r3, #8
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d00a      	beq.n	80063c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	685b      	ldr	r3, [r3, #4]
 80063b4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	430a      	orrs	r2, r1
 80063c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063c8:	f003 0310 	and.w	r3, r3, #16
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d00a      	beq.n	80063e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	689b      	ldr	r3, [r3, #8]
 80063d6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	430a      	orrs	r2, r1
 80063e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ea:	f003 0320 	and.w	r3, r3, #32
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d00a      	beq.n	8006408 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	689b      	ldr	r3, [r3, #8]
 80063f8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	430a      	orrs	r2, r1
 8006406:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800640c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006410:	2b00      	cmp	r3, #0
 8006412:	d01a      	beq.n	800644a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	685b      	ldr	r3, [r3, #4]
 800641a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	430a      	orrs	r2, r1
 8006428:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800642e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006432:	d10a      	bne.n	800644a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	685b      	ldr	r3, [r3, #4]
 800643a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	430a      	orrs	r2, r1
 8006448:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800644e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006452:	2b00      	cmp	r3, #0
 8006454:	d00a      	beq.n	800646c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	685b      	ldr	r3, [r3, #4]
 800645c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	430a      	orrs	r2, r1
 800646a:	605a      	str	r2, [r3, #4]
  }
}
 800646c:	bf00      	nop
 800646e:	370c      	adds	r7, #12
 8006470:	46bd      	mov	sp, r7
 8006472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006476:	4770      	bx	lr

08006478 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b086      	sub	sp, #24
 800647c:	af02      	add	r7, sp, #8
 800647e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2200      	movs	r2, #0
 8006484:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006488:	f7fb fe48 	bl	800211c <HAL_GetTick>
 800648c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f003 0308 	and.w	r3, r3, #8
 8006498:	2b08      	cmp	r3, #8
 800649a:	d10e      	bne.n	80064ba <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800649c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80064a0:	9300      	str	r3, [sp, #0]
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	2200      	movs	r2, #0
 80064a6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80064aa:	6878      	ldr	r0, [r7, #4]
 80064ac:	f000 f831 	bl	8006512 <UART_WaitOnFlagUntilTimeout>
 80064b0:	4603      	mov	r3, r0
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d001      	beq.n	80064ba <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80064b6:	2303      	movs	r3, #3
 80064b8:	e027      	b.n	800650a <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f003 0304 	and.w	r3, r3, #4
 80064c4:	2b04      	cmp	r3, #4
 80064c6:	d10e      	bne.n	80064e6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80064c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80064cc:	9300      	str	r3, [sp, #0]
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	2200      	movs	r2, #0
 80064d2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80064d6:	6878      	ldr	r0, [r7, #4]
 80064d8:	f000 f81b 	bl	8006512 <UART_WaitOnFlagUntilTimeout>
 80064dc:	4603      	mov	r3, r0
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d001      	beq.n	80064e6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80064e2:	2303      	movs	r3, #3
 80064e4:	e011      	b.n	800650a <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2220      	movs	r2, #32
 80064ea:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2220      	movs	r2, #32
 80064f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2200      	movs	r2, #0
 80064f8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2200      	movs	r2, #0
 80064fe:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2200      	movs	r2, #0
 8006504:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006508:	2300      	movs	r3, #0
}
 800650a:	4618      	mov	r0, r3
 800650c:	3710      	adds	r7, #16
 800650e:	46bd      	mov	sp, r7
 8006510:	bd80      	pop	{r7, pc}

08006512 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006512:	b580      	push	{r7, lr}
 8006514:	b09c      	sub	sp, #112	; 0x70
 8006516:	af00      	add	r7, sp, #0
 8006518:	60f8      	str	r0, [r7, #12]
 800651a:	60b9      	str	r1, [r7, #8]
 800651c:	603b      	str	r3, [r7, #0]
 800651e:	4613      	mov	r3, r2
 8006520:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006522:	e0a7      	b.n	8006674 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006524:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006526:	f1b3 3fff 	cmp.w	r3, #4294967295
 800652a:	f000 80a3 	beq.w	8006674 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800652e:	f7fb fdf5 	bl	800211c <HAL_GetTick>
 8006532:	4602      	mov	r2, r0
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	1ad3      	subs	r3, r2, r3
 8006538:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800653a:	429a      	cmp	r2, r3
 800653c:	d302      	bcc.n	8006544 <UART_WaitOnFlagUntilTimeout+0x32>
 800653e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006540:	2b00      	cmp	r3, #0
 8006542:	d13f      	bne.n	80065c4 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800654a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800654c:	e853 3f00 	ldrex	r3, [r3]
 8006550:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006552:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006554:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006558:	667b      	str	r3, [r7, #100]	; 0x64
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	461a      	mov	r2, r3
 8006560:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006562:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006564:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006566:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006568:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800656a:	e841 2300 	strex	r3, r2, [r1]
 800656e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006570:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006572:	2b00      	cmp	r3, #0
 8006574:	d1e6      	bne.n	8006544 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	3308      	adds	r3, #8
 800657c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800657e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006580:	e853 3f00 	ldrex	r3, [r3]
 8006584:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006588:	f023 0301 	bic.w	r3, r3, #1
 800658c:	663b      	str	r3, [r7, #96]	; 0x60
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	3308      	adds	r3, #8
 8006594:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006596:	64ba      	str	r2, [r7, #72]	; 0x48
 8006598:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800659a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800659c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800659e:	e841 2300 	strex	r3, r2, [r1]
 80065a2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80065a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d1e5      	bne.n	8006576 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	2220      	movs	r2, #32
 80065ae:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	2220      	movs	r2, #32
 80065b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	2200      	movs	r2, #0
 80065bc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80065c0:	2303      	movs	r3, #3
 80065c2:	e068      	b.n	8006696 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f003 0304 	and.w	r3, r3, #4
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d050      	beq.n	8006674 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	69db      	ldr	r3, [r3, #28]
 80065d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80065dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80065e0:	d148      	bne.n	8006674 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80065ea:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065f4:	e853 3f00 	ldrex	r3, [r3]
 80065f8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80065fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065fc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006600:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	461a      	mov	r2, r3
 8006608:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800660a:	637b      	str	r3, [r7, #52]	; 0x34
 800660c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800660e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006610:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006612:	e841 2300 	strex	r3, r2, [r1]
 8006616:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800661a:	2b00      	cmp	r3, #0
 800661c:	d1e6      	bne.n	80065ec <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	3308      	adds	r3, #8
 8006624:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006626:	697b      	ldr	r3, [r7, #20]
 8006628:	e853 3f00 	ldrex	r3, [r3]
 800662c:	613b      	str	r3, [r7, #16]
   return(result);
 800662e:	693b      	ldr	r3, [r7, #16]
 8006630:	f023 0301 	bic.w	r3, r3, #1
 8006634:	66bb      	str	r3, [r7, #104]	; 0x68
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	3308      	adds	r3, #8
 800663c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800663e:	623a      	str	r2, [r7, #32]
 8006640:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006642:	69f9      	ldr	r1, [r7, #28]
 8006644:	6a3a      	ldr	r2, [r7, #32]
 8006646:	e841 2300 	strex	r3, r2, [r1]
 800664a:	61bb      	str	r3, [r7, #24]
   return(result);
 800664c:	69bb      	ldr	r3, [r7, #24]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d1e5      	bne.n	800661e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	2220      	movs	r2, #32
 8006656:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	2220      	movs	r2, #32
 800665c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	2220      	movs	r2, #32
 8006664:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	2200      	movs	r2, #0
 800666c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006670:	2303      	movs	r3, #3
 8006672:	e010      	b.n	8006696 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	69da      	ldr	r2, [r3, #28]
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	4013      	ands	r3, r2
 800667e:	68ba      	ldr	r2, [r7, #8]
 8006680:	429a      	cmp	r2, r3
 8006682:	bf0c      	ite	eq
 8006684:	2301      	moveq	r3, #1
 8006686:	2300      	movne	r3, #0
 8006688:	b2db      	uxtb	r3, r3
 800668a:	461a      	mov	r2, r3
 800668c:	79fb      	ldrb	r3, [r7, #7]
 800668e:	429a      	cmp	r2, r3
 8006690:	f43f af48 	beq.w	8006524 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006694:	2300      	movs	r3, #0
}
 8006696:	4618      	mov	r0, r3
 8006698:	3770      	adds	r7, #112	; 0x70
 800669a:	46bd      	mov	sp, r7
 800669c:	bd80      	pop	{r7, pc}

0800669e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800669e:	b480      	push	{r7}
 80066a0:	b095      	sub	sp, #84	; 0x54
 80066a2:	af00      	add	r7, sp, #0
 80066a4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066ae:	e853 3f00 	ldrex	r3, [r3]
 80066b2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80066b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066b6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80066ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	461a      	mov	r2, r3
 80066c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066c4:	643b      	str	r3, [r7, #64]	; 0x40
 80066c6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066c8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80066ca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80066cc:	e841 2300 	strex	r3, r2, [r1]
 80066d0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80066d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d1e6      	bne.n	80066a6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	3308      	adds	r3, #8
 80066de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066e0:	6a3b      	ldr	r3, [r7, #32]
 80066e2:	e853 3f00 	ldrex	r3, [r3]
 80066e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80066e8:	69fb      	ldr	r3, [r7, #28]
 80066ea:	f023 0301 	bic.w	r3, r3, #1
 80066ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	3308      	adds	r3, #8
 80066f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80066f8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80066fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80066fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006700:	e841 2300 	strex	r3, r2, [r1]
 8006704:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006708:	2b00      	cmp	r3, #0
 800670a:	d1e5      	bne.n	80066d8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006710:	2b01      	cmp	r3, #1
 8006712:	d118      	bne.n	8006746 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	e853 3f00 	ldrex	r3, [r3]
 8006720:	60bb      	str	r3, [r7, #8]
   return(result);
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	f023 0310 	bic.w	r3, r3, #16
 8006728:	647b      	str	r3, [r7, #68]	; 0x44
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	461a      	mov	r2, r3
 8006730:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006732:	61bb      	str	r3, [r7, #24]
 8006734:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006736:	6979      	ldr	r1, [r7, #20]
 8006738:	69ba      	ldr	r2, [r7, #24]
 800673a:	e841 2300 	strex	r3, r2, [r1]
 800673e:	613b      	str	r3, [r7, #16]
   return(result);
 8006740:	693b      	ldr	r3, [r7, #16]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d1e6      	bne.n	8006714 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2220      	movs	r2, #32
 800674a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2200      	movs	r2, #0
 8006752:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2200      	movs	r2, #0
 8006758:	669a      	str	r2, [r3, #104]	; 0x68
}
 800675a:	bf00      	nop
 800675c:	3754      	adds	r7, #84	; 0x54
 800675e:	46bd      	mov	sp, r7
 8006760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006764:	4770      	bx	lr

08006766 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006766:	b580      	push	{r7, lr}
 8006768:	b084      	sub	sp, #16
 800676a:	af00      	add	r7, sp, #0
 800676c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006772:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	2200      	movs	r2, #0
 8006778:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	2200      	movs	r2, #0
 8006780:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006784:	68f8      	ldr	r0, [r7, #12]
 8006786:	f7ff fb51 	bl	8005e2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800678a:	bf00      	nop
 800678c:	3710      	adds	r7, #16
 800678e:	46bd      	mov	sp, r7
 8006790:	bd80      	pop	{r7, pc}

08006792 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006792:	b580      	push	{r7, lr}
 8006794:	b088      	sub	sp, #32
 8006796:	af00      	add	r7, sp, #0
 8006798:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	e853 3f00 	ldrex	r3, [r3]
 80067a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80067a8:	68bb      	ldr	r3, [r7, #8]
 80067aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067ae:	61fb      	str	r3, [r7, #28]
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	461a      	mov	r2, r3
 80067b6:	69fb      	ldr	r3, [r7, #28]
 80067b8:	61bb      	str	r3, [r7, #24]
 80067ba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067bc:	6979      	ldr	r1, [r7, #20]
 80067be:	69ba      	ldr	r2, [r7, #24]
 80067c0:	e841 2300 	strex	r3, r2, [r1]
 80067c4:	613b      	str	r3, [r7, #16]
   return(result);
 80067c6:	693b      	ldr	r3, [r7, #16]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d1e6      	bne.n	800679a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2220      	movs	r2, #32
 80067d0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2200      	movs	r2, #0
 80067d6:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80067d8:	6878      	ldr	r0, [r7, #4]
 80067da:	f7ff fb1d 	bl	8005e18 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80067de:	bf00      	nop
 80067e0:	3720      	adds	r7, #32
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bd80      	pop	{r7, pc}
	...

080067e8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80067e8:	b084      	sub	sp, #16
 80067ea:	b580      	push	{r7, lr}
 80067ec:	b084      	sub	sp, #16
 80067ee:	af00      	add	r7, sp, #0
 80067f0:	6078      	str	r0, [r7, #4]
 80067f2:	f107 001c 	add.w	r0, r7, #28
 80067f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80067fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067fc:	2b01      	cmp	r3, #1
 80067fe:	d120      	bne.n	8006842 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006804:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	68da      	ldr	r2, [r3, #12]
 8006810:	4b20      	ldr	r3, [pc, #128]	; (8006894 <USB_CoreInit+0xac>)
 8006812:	4013      	ands	r3, r2
 8006814:	687a      	ldr	r2, [r7, #4]
 8006816:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	68db      	ldr	r3, [r3, #12]
 800681c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006824:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006826:	2b01      	cmp	r3, #1
 8006828:	d105      	bne.n	8006836 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	68db      	ldr	r3, [r3, #12]
 800682e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006836:	6878      	ldr	r0, [r7, #4]
 8006838:	f000 fa96 	bl	8006d68 <USB_CoreReset>
 800683c:	4603      	mov	r3, r0
 800683e:	73fb      	strb	r3, [r7, #15]
 8006840:	e010      	b.n	8006864 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	68db      	ldr	r3, [r3, #12]
 8006846:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800684e:	6878      	ldr	r0, [r7, #4]
 8006850:	f000 fa8a 	bl	8006d68 <USB_CoreReset>
 8006854:	4603      	mov	r3, r0
 8006856:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800685c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8006864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006866:	2b01      	cmp	r3, #1
 8006868:	d10b      	bne.n	8006882 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	689b      	ldr	r3, [r3, #8]
 800686e:	f043 0206 	orr.w	r2, r3, #6
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	689b      	ldr	r3, [r3, #8]
 800687a:	f043 0220 	orr.w	r2, r3, #32
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006882:	7bfb      	ldrb	r3, [r7, #15]
}
 8006884:	4618      	mov	r0, r3
 8006886:	3710      	adds	r7, #16
 8006888:	46bd      	mov	sp, r7
 800688a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800688e:	b004      	add	sp, #16
 8006890:	4770      	bx	lr
 8006892:	bf00      	nop
 8006894:	ffbdffbf 	.word	0xffbdffbf

08006898 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006898:	b480      	push	{r7}
 800689a:	b083      	sub	sp, #12
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	689b      	ldr	r3, [r3, #8]
 80068a4:	f023 0201 	bic.w	r2, r3, #1
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80068ac:	2300      	movs	r3, #0
}
 80068ae:	4618      	mov	r0, r3
 80068b0:	370c      	adds	r7, #12
 80068b2:	46bd      	mov	sp, r7
 80068b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b8:	4770      	bx	lr

080068ba <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80068ba:	b580      	push	{r7, lr}
 80068bc:	b084      	sub	sp, #16
 80068be:	af00      	add	r7, sp, #0
 80068c0:	6078      	str	r0, [r7, #4]
 80068c2:	460b      	mov	r3, r1
 80068c4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80068c6:	2300      	movs	r3, #0
 80068c8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	68db      	ldr	r3, [r3, #12]
 80068ce:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80068d6:	78fb      	ldrb	r3, [r7, #3]
 80068d8:	2b01      	cmp	r3, #1
 80068da:	d115      	bne.n	8006908 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	68db      	ldr	r3, [r3, #12]
 80068e0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80068e8:	2001      	movs	r0, #1
 80068ea:	f7fb fc23 	bl	8002134 <HAL_Delay>
      ms++;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	3301      	adds	r3, #1
 80068f2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80068f4:	6878      	ldr	r0, [r7, #4]
 80068f6:	f000 fa29 	bl	8006d4c <USB_GetMode>
 80068fa:	4603      	mov	r3, r0
 80068fc:	2b01      	cmp	r3, #1
 80068fe:	d01e      	beq.n	800693e <USB_SetCurrentMode+0x84>
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	2b31      	cmp	r3, #49	; 0x31
 8006904:	d9f0      	bls.n	80068e8 <USB_SetCurrentMode+0x2e>
 8006906:	e01a      	b.n	800693e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006908:	78fb      	ldrb	r3, [r7, #3]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d115      	bne.n	800693a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	68db      	ldr	r3, [r3, #12]
 8006912:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800691a:	2001      	movs	r0, #1
 800691c:	f7fb fc0a 	bl	8002134 <HAL_Delay>
      ms++;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	3301      	adds	r3, #1
 8006924:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	f000 fa10 	bl	8006d4c <USB_GetMode>
 800692c:	4603      	mov	r3, r0
 800692e:	2b00      	cmp	r3, #0
 8006930:	d005      	beq.n	800693e <USB_SetCurrentMode+0x84>
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	2b31      	cmp	r3, #49	; 0x31
 8006936:	d9f0      	bls.n	800691a <USB_SetCurrentMode+0x60>
 8006938:	e001      	b.n	800693e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800693a:	2301      	movs	r3, #1
 800693c:	e005      	b.n	800694a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	2b32      	cmp	r3, #50	; 0x32
 8006942:	d101      	bne.n	8006948 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006944:	2301      	movs	r3, #1
 8006946:	e000      	b.n	800694a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006948:	2300      	movs	r3, #0
}
 800694a:	4618      	mov	r0, r3
 800694c:	3710      	adds	r7, #16
 800694e:	46bd      	mov	sp, r7
 8006950:	bd80      	pop	{r7, pc}
	...

08006954 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006954:	b084      	sub	sp, #16
 8006956:	b580      	push	{r7, lr}
 8006958:	b086      	sub	sp, #24
 800695a:	af00      	add	r7, sp, #0
 800695c:	6078      	str	r0, [r7, #4]
 800695e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006962:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006966:	2300      	movs	r3, #0
 8006968:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800696e:	2300      	movs	r3, #0
 8006970:	613b      	str	r3, [r7, #16]
 8006972:	e009      	b.n	8006988 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006974:	687a      	ldr	r2, [r7, #4]
 8006976:	693b      	ldr	r3, [r7, #16]
 8006978:	3340      	adds	r3, #64	; 0x40
 800697a:	009b      	lsls	r3, r3, #2
 800697c:	4413      	add	r3, r2
 800697e:	2200      	movs	r2, #0
 8006980:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006982:	693b      	ldr	r3, [r7, #16]
 8006984:	3301      	adds	r3, #1
 8006986:	613b      	str	r3, [r7, #16]
 8006988:	693b      	ldr	r3, [r7, #16]
 800698a:	2b0e      	cmp	r3, #14
 800698c:	d9f2      	bls.n	8006974 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800698e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006990:	2b00      	cmp	r3, #0
 8006992:	d11c      	bne.n	80069ce <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800699a:	685b      	ldr	r3, [r3, #4]
 800699c:	68fa      	ldr	r2, [r7, #12]
 800699e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80069a2:	f043 0302 	orr.w	r3, r3, #2
 80069a6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069ac:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	601a      	str	r2, [r3, #0]
 80069cc:	e005      	b.n	80069da <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069d2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80069e0:	461a      	mov	r2, r3
 80069e2:	2300      	movs	r3, #0
 80069e4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069ec:	4619      	mov	r1, r3
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069f4:	461a      	mov	r2, r3
 80069f6:	680b      	ldr	r3, [r1, #0]
 80069f8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80069fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069fc:	2b01      	cmp	r3, #1
 80069fe:	d10c      	bne.n	8006a1a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006a00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d104      	bne.n	8006a10 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006a06:	2100      	movs	r1, #0
 8006a08:	6878      	ldr	r0, [r7, #4]
 8006a0a:	f000 f965 	bl	8006cd8 <USB_SetDevSpeed>
 8006a0e:	e008      	b.n	8006a22 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006a10:	2101      	movs	r1, #1
 8006a12:	6878      	ldr	r0, [r7, #4]
 8006a14:	f000 f960 	bl	8006cd8 <USB_SetDevSpeed>
 8006a18:	e003      	b.n	8006a22 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006a1a:	2103      	movs	r1, #3
 8006a1c:	6878      	ldr	r0, [r7, #4]
 8006a1e:	f000 f95b 	bl	8006cd8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006a22:	2110      	movs	r1, #16
 8006a24:	6878      	ldr	r0, [r7, #4]
 8006a26:	f000 f8f3 	bl	8006c10 <USB_FlushTxFifo>
 8006a2a:	4603      	mov	r3, r0
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d001      	beq.n	8006a34 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8006a30:	2301      	movs	r3, #1
 8006a32:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006a34:	6878      	ldr	r0, [r7, #4]
 8006a36:	f000 f91f 	bl	8006c78 <USB_FlushRxFifo>
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d001      	beq.n	8006a44 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8006a40:	2301      	movs	r3, #1
 8006a42:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a4a:	461a      	mov	r2, r3
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a56:	461a      	mov	r2, r3
 8006a58:	2300      	movs	r3, #0
 8006a5a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a62:	461a      	mov	r2, r3
 8006a64:	2300      	movs	r3, #0
 8006a66:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006a68:	2300      	movs	r3, #0
 8006a6a:	613b      	str	r3, [r7, #16]
 8006a6c:	e043      	b.n	8006af6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006a6e:	693b      	ldr	r3, [r7, #16]
 8006a70:	015a      	lsls	r2, r3, #5
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	4413      	add	r3, r2
 8006a76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006a80:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a84:	d118      	bne.n	8006ab8 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8006a86:	693b      	ldr	r3, [r7, #16]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d10a      	bne.n	8006aa2 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006a8c:	693b      	ldr	r3, [r7, #16]
 8006a8e:	015a      	lsls	r2, r3, #5
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	4413      	add	r3, r2
 8006a94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a98:	461a      	mov	r2, r3
 8006a9a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006a9e:	6013      	str	r3, [r2, #0]
 8006aa0:	e013      	b.n	8006aca <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006aa2:	693b      	ldr	r3, [r7, #16]
 8006aa4:	015a      	lsls	r2, r3, #5
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	4413      	add	r3, r2
 8006aaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006aae:	461a      	mov	r2, r3
 8006ab0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006ab4:	6013      	str	r3, [r2, #0]
 8006ab6:	e008      	b.n	8006aca <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006ab8:	693b      	ldr	r3, [r7, #16]
 8006aba:	015a      	lsls	r2, r3, #5
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	4413      	add	r3, r2
 8006ac0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ac4:	461a      	mov	r2, r3
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006aca:	693b      	ldr	r3, [r7, #16]
 8006acc:	015a      	lsls	r2, r3, #5
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	4413      	add	r3, r2
 8006ad2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ad6:	461a      	mov	r2, r3
 8006ad8:	2300      	movs	r3, #0
 8006ada:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006adc:	693b      	ldr	r3, [r7, #16]
 8006ade:	015a      	lsls	r2, r3, #5
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	4413      	add	r3, r2
 8006ae4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ae8:	461a      	mov	r2, r3
 8006aea:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006aee:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006af0:	693b      	ldr	r3, [r7, #16]
 8006af2:	3301      	adds	r3, #1
 8006af4:	613b      	str	r3, [r7, #16]
 8006af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006af8:	693a      	ldr	r2, [r7, #16]
 8006afa:	429a      	cmp	r2, r3
 8006afc:	d3b7      	bcc.n	8006a6e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006afe:	2300      	movs	r3, #0
 8006b00:	613b      	str	r3, [r7, #16]
 8006b02:	e043      	b.n	8006b8c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006b04:	693b      	ldr	r3, [r7, #16]
 8006b06:	015a      	lsls	r2, r3, #5
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	4413      	add	r3, r2
 8006b0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006b16:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006b1a:	d118      	bne.n	8006b4e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8006b1c:	693b      	ldr	r3, [r7, #16]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d10a      	bne.n	8006b38 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006b22:	693b      	ldr	r3, [r7, #16]
 8006b24:	015a      	lsls	r2, r3, #5
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	4413      	add	r3, r2
 8006b2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b2e:	461a      	mov	r2, r3
 8006b30:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006b34:	6013      	str	r3, [r2, #0]
 8006b36:	e013      	b.n	8006b60 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006b38:	693b      	ldr	r3, [r7, #16]
 8006b3a:	015a      	lsls	r2, r3, #5
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	4413      	add	r3, r2
 8006b40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b44:	461a      	mov	r2, r3
 8006b46:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006b4a:	6013      	str	r3, [r2, #0]
 8006b4c:	e008      	b.n	8006b60 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006b4e:	693b      	ldr	r3, [r7, #16]
 8006b50:	015a      	lsls	r2, r3, #5
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	4413      	add	r3, r2
 8006b56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b5a:	461a      	mov	r2, r3
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006b60:	693b      	ldr	r3, [r7, #16]
 8006b62:	015a      	lsls	r2, r3, #5
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	4413      	add	r3, r2
 8006b68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b6c:	461a      	mov	r2, r3
 8006b6e:	2300      	movs	r3, #0
 8006b70:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006b72:	693b      	ldr	r3, [r7, #16]
 8006b74:	015a      	lsls	r2, r3, #5
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	4413      	add	r3, r2
 8006b7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b7e:	461a      	mov	r2, r3
 8006b80:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006b84:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006b86:	693b      	ldr	r3, [r7, #16]
 8006b88:	3301      	adds	r3, #1
 8006b8a:	613b      	str	r3, [r7, #16]
 8006b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b8e:	693a      	ldr	r2, [r7, #16]
 8006b90:	429a      	cmp	r2, r3
 8006b92:	d3b7      	bcc.n	8006b04 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b9a:	691b      	ldr	r3, [r3, #16]
 8006b9c:	68fa      	ldr	r2, [r7, #12]
 8006b9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006ba2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ba6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2200      	movs	r2, #0
 8006bac:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006bb4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d105      	bne.n	8006bc8 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	699b      	ldr	r3, [r3, #24]
 8006bc0:	f043 0210 	orr.w	r2, r3, #16
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	699a      	ldr	r2, [r3, #24]
 8006bcc:	4b0e      	ldr	r3, [pc, #56]	; (8006c08 <USB_DevInit+0x2b4>)
 8006bce:	4313      	orrs	r3, r2
 8006bd0:	687a      	ldr	r2, [r7, #4]
 8006bd2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006bd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d005      	beq.n	8006be6 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	699b      	ldr	r3, [r3, #24]
 8006bde:	f043 0208 	orr.w	r2, r3, #8
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006be6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006be8:	2b01      	cmp	r3, #1
 8006bea:	d105      	bne.n	8006bf8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	699a      	ldr	r2, [r3, #24]
 8006bf0:	4b06      	ldr	r3, [pc, #24]	; (8006c0c <USB_DevInit+0x2b8>)
 8006bf2:	4313      	orrs	r3, r2
 8006bf4:	687a      	ldr	r2, [r7, #4]
 8006bf6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006bf8:	7dfb      	ldrb	r3, [r7, #23]
}
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	3718      	adds	r7, #24
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006c04:	b004      	add	sp, #16
 8006c06:	4770      	bx	lr
 8006c08:	803c3800 	.word	0x803c3800
 8006c0c:	40000004 	.word	0x40000004

08006c10 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006c10:	b480      	push	{r7}
 8006c12:	b085      	sub	sp, #20
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
 8006c18:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	3301      	adds	r3, #1
 8006c22:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	4a13      	ldr	r2, [pc, #76]	; (8006c74 <USB_FlushTxFifo+0x64>)
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d901      	bls.n	8006c30 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006c2c:	2303      	movs	r3, #3
 8006c2e:	e01b      	b.n	8006c68 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	691b      	ldr	r3, [r3, #16]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	daf2      	bge.n	8006c1e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006c38:	2300      	movs	r3, #0
 8006c3a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	019b      	lsls	r3, r3, #6
 8006c40:	f043 0220 	orr.w	r2, r3, #32
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	3301      	adds	r3, #1
 8006c4c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	4a08      	ldr	r2, [pc, #32]	; (8006c74 <USB_FlushTxFifo+0x64>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d901      	bls.n	8006c5a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006c56:	2303      	movs	r3, #3
 8006c58:	e006      	b.n	8006c68 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	691b      	ldr	r3, [r3, #16]
 8006c5e:	f003 0320 	and.w	r3, r3, #32
 8006c62:	2b20      	cmp	r3, #32
 8006c64:	d0f0      	beq.n	8006c48 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006c66:	2300      	movs	r3, #0
}
 8006c68:	4618      	mov	r0, r3
 8006c6a:	3714      	adds	r7, #20
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c72:	4770      	bx	lr
 8006c74:	00030d40 	.word	0x00030d40

08006c78 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006c78:	b480      	push	{r7}
 8006c7a:	b085      	sub	sp, #20
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006c80:	2300      	movs	r3, #0
 8006c82:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	3301      	adds	r3, #1
 8006c88:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	4a11      	ldr	r2, [pc, #68]	; (8006cd4 <USB_FlushRxFifo+0x5c>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d901      	bls.n	8006c96 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006c92:	2303      	movs	r3, #3
 8006c94:	e018      	b.n	8006cc8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	691b      	ldr	r3, [r3, #16]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	daf2      	bge.n	8006c84 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2210      	movs	r2, #16
 8006ca6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	3301      	adds	r3, #1
 8006cac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	4a08      	ldr	r2, [pc, #32]	; (8006cd4 <USB_FlushRxFifo+0x5c>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d901      	bls.n	8006cba <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006cb6:	2303      	movs	r3, #3
 8006cb8:	e006      	b.n	8006cc8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	691b      	ldr	r3, [r3, #16]
 8006cbe:	f003 0310 	and.w	r3, r3, #16
 8006cc2:	2b10      	cmp	r3, #16
 8006cc4:	d0f0      	beq.n	8006ca8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006cc6:	2300      	movs	r3, #0
}
 8006cc8:	4618      	mov	r0, r3
 8006cca:	3714      	adds	r7, #20
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd2:	4770      	bx	lr
 8006cd4:	00030d40 	.word	0x00030d40

08006cd8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006cd8:	b480      	push	{r7}
 8006cda:	b085      	sub	sp, #20
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
 8006ce0:	460b      	mov	r3, r1
 8006ce2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cee:	681a      	ldr	r2, [r3, #0]
 8006cf0:	78fb      	ldrb	r3, [r7, #3]
 8006cf2:	68f9      	ldr	r1, [r7, #12]
 8006cf4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006cf8:	4313      	orrs	r3, r2
 8006cfa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006cfc:	2300      	movs	r3, #0
}
 8006cfe:	4618      	mov	r0, r3
 8006d00:	3714      	adds	r7, #20
 8006d02:	46bd      	mov	sp, r7
 8006d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d08:	4770      	bx	lr

08006d0a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006d0a:	b480      	push	{r7}
 8006d0c:	b085      	sub	sp, #20
 8006d0e:	af00      	add	r7, sp, #0
 8006d10:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	68fa      	ldr	r2, [r7, #12]
 8006d20:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006d24:	f023 0303 	bic.w	r3, r3, #3
 8006d28:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d30:	685b      	ldr	r3, [r3, #4]
 8006d32:	68fa      	ldr	r2, [r7, #12]
 8006d34:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006d38:	f043 0302 	orr.w	r3, r3, #2
 8006d3c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006d3e:	2300      	movs	r3, #0
}
 8006d40:	4618      	mov	r0, r3
 8006d42:	3714      	adds	r7, #20
 8006d44:	46bd      	mov	sp, r7
 8006d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4a:	4770      	bx	lr

08006d4c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006d4c:	b480      	push	{r7}
 8006d4e:	b083      	sub	sp, #12
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	695b      	ldr	r3, [r3, #20]
 8006d58:	f003 0301 	and.w	r3, r3, #1
}
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	370c      	adds	r7, #12
 8006d60:	46bd      	mov	sp, r7
 8006d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d66:	4770      	bx	lr

08006d68 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006d68:	b480      	push	{r7}
 8006d6a:	b085      	sub	sp, #20
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006d70:	2300      	movs	r3, #0
 8006d72:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	3301      	adds	r3, #1
 8006d78:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	4a13      	ldr	r2, [pc, #76]	; (8006dcc <USB_CoreReset+0x64>)
 8006d7e:	4293      	cmp	r3, r2
 8006d80:	d901      	bls.n	8006d86 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006d82:	2303      	movs	r3, #3
 8006d84:	e01b      	b.n	8006dbe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	691b      	ldr	r3, [r3, #16]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	daf2      	bge.n	8006d74 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006d8e:	2300      	movs	r3, #0
 8006d90:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	691b      	ldr	r3, [r3, #16]
 8006d96:	f043 0201 	orr.w	r2, r3, #1
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	3301      	adds	r3, #1
 8006da2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	4a09      	ldr	r2, [pc, #36]	; (8006dcc <USB_CoreReset+0x64>)
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d901      	bls.n	8006db0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006dac:	2303      	movs	r3, #3
 8006dae:	e006      	b.n	8006dbe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	691b      	ldr	r3, [r3, #16]
 8006db4:	f003 0301 	and.w	r3, r3, #1
 8006db8:	2b01      	cmp	r3, #1
 8006dba:	d0f0      	beq.n	8006d9e <USB_CoreReset+0x36>

  return HAL_OK;
 8006dbc:	2300      	movs	r3, #0
}
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	3714      	adds	r7, #20
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc8:	4770      	bx	lr
 8006dca:	bf00      	nop
 8006dcc:	00030d40 	.word	0x00030d40

08006dd0 <__errno>:
 8006dd0:	4b01      	ldr	r3, [pc, #4]	; (8006dd8 <__errno+0x8>)
 8006dd2:	6818      	ldr	r0, [r3, #0]
 8006dd4:	4770      	bx	lr
 8006dd6:	bf00      	nop
 8006dd8:	20000010 	.word	0x20000010

08006ddc <__libc_init_array>:
 8006ddc:	b570      	push	{r4, r5, r6, lr}
 8006dde:	4d0d      	ldr	r5, [pc, #52]	; (8006e14 <__libc_init_array+0x38>)
 8006de0:	4c0d      	ldr	r4, [pc, #52]	; (8006e18 <__libc_init_array+0x3c>)
 8006de2:	1b64      	subs	r4, r4, r5
 8006de4:	10a4      	asrs	r4, r4, #2
 8006de6:	2600      	movs	r6, #0
 8006de8:	42a6      	cmp	r6, r4
 8006dea:	d109      	bne.n	8006e00 <__libc_init_array+0x24>
 8006dec:	4d0b      	ldr	r5, [pc, #44]	; (8006e1c <__libc_init_array+0x40>)
 8006dee:	4c0c      	ldr	r4, [pc, #48]	; (8006e20 <__libc_init_array+0x44>)
 8006df0:	f001 f8fa 	bl	8007fe8 <_init>
 8006df4:	1b64      	subs	r4, r4, r5
 8006df6:	10a4      	asrs	r4, r4, #2
 8006df8:	2600      	movs	r6, #0
 8006dfa:	42a6      	cmp	r6, r4
 8006dfc:	d105      	bne.n	8006e0a <__libc_init_array+0x2e>
 8006dfe:	bd70      	pop	{r4, r5, r6, pc}
 8006e00:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e04:	4798      	blx	r3
 8006e06:	3601      	adds	r6, #1
 8006e08:	e7ee      	b.n	8006de8 <__libc_init_array+0xc>
 8006e0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e0e:	4798      	blx	r3
 8006e10:	3601      	adds	r6, #1
 8006e12:	e7f2      	b.n	8006dfa <__libc_init_array+0x1e>
 8006e14:	080081a8 	.word	0x080081a8
 8006e18:	080081a8 	.word	0x080081a8
 8006e1c:	080081a8 	.word	0x080081a8
 8006e20:	080081ac 	.word	0x080081ac

08006e24 <memset>:
 8006e24:	4402      	add	r2, r0
 8006e26:	4603      	mov	r3, r0
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	d100      	bne.n	8006e2e <memset+0xa>
 8006e2c:	4770      	bx	lr
 8006e2e:	f803 1b01 	strb.w	r1, [r3], #1
 8006e32:	e7f9      	b.n	8006e28 <memset+0x4>

08006e34 <iprintf>:
 8006e34:	b40f      	push	{r0, r1, r2, r3}
 8006e36:	4b0a      	ldr	r3, [pc, #40]	; (8006e60 <iprintf+0x2c>)
 8006e38:	b513      	push	{r0, r1, r4, lr}
 8006e3a:	681c      	ldr	r4, [r3, #0]
 8006e3c:	b124      	cbz	r4, 8006e48 <iprintf+0x14>
 8006e3e:	69a3      	ldr	r3, [r4, #24]
 8006e40:	b913      	cbnz	r3, 8006e48 <iprintf+0x14>
 8006e42:	4620      	mov	r0, r4
 8006e44:	f000 fb2c 	bl	80074a0 <__sinit>
 8006e48:	ab05      	add	r3, sp, #20
 8006e4a:	9a04      	ldr	r2, [sp, #16]
 8006e4c:	68a1      	ldr	r1, [r4, #8]
 8006e4e:	9301      	str	r3, [sp, #4]
 8006e50:	4620      	mov	r0, r4
 8006e52:	f000 fd3d 	bl	80078d0 <_vfiprintf_r>
 8006e56:	b002      	add	sp, #8
 8006e58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e5c:	b004      	add	sp, #16
 8006e5e:	4770      	bx	lr
 8006e60:	20000010 	.word	0x20000010

08006e64 <_puts_r>:
 8006e64:	b570      	push	{r4, r5, r6, lr}
 8006e66:	460e      	mov	r6, r1
 8006e68:	4605      	mov	r5, r0
 8006e6a:	b118      	cbz	r0, 8006e74 <_puts_r+0x10>
 8006e6c:	6983      	ldr	r3, [r0, #24]
 8006e6e:	b90b      	cbnz	r3, 8006e74 <_puts_r+0x10>
 8006e70:	f000 fb16 	bl	80074a0 <__sinit>
 8006e74:	69ab      	ldr	r3, [r5, #24]
 8006e76:	68ac      	ldr	r4, [r5, #8]
 8006e78:	b913      	cbnz	r3, 8006e80 <_puts_r+0x1c>
 8006e7a:	4628      	mov	r0, r5
 8006e7c:	f000 fb10 	bl	80074a0 <__sinit>
 8006e80:	4b2c      	ldr	r3, [pc, #176]	; (8006f34 <_puts_r+0xd0>)
 8006e82:	429c      	cmp	r4, r3
 8006e84:	d120      	bne.n	8006ec8 <_puts_r+0x64>
 8006e86:	686c      	ldr	r4, [r5, #4]
 8006e88:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006e8a:	07db      	lsls	r3, r3, #31
 8006e8c:	d405      	bmi.n	8006e9a <_puts_r+0x36>
 8006e8e:	89a3      	ldrh	r3, [r4, #12]
 8006e90:	0598      	lsls	r0, r3, #22
 8006e92:	d402      	bmi.n	8006e9a <_puts_r+0x36>
 8006e94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006e96:	f000 fba1 	bl	80075dc <__retarget_lock_acquire_recursive>
 8006e9a:	89a3      	ldrh	r3, [r4, #12]
 8006e9c:	0719      	lsls	r1, r3, #28
 8006e9e:	d51d      	bpl.n	8006edc <_puts_r+0x78>
 8006ea0:	6923      	ldr	r3, [r4, #16]
 8006ea2:	b1db      	cbz	r3, 8006edc <_puts_r+0x78>
 8006ea4:	3e01      	subs	r6, #1
 8006ea6:	68a3      	ldr	r3, [r4, #8]
 8006ea8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006eac:	3b01      	subs	r3, #1
 8006eae:	60a3      	str	r3, [r4, #8]
 8006eb0:	bb39      	cbnz	r1, 8006f02 <_puts_r+0x9e>
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	da38      	bge.n	8006f28 <_puts_r+0xc4>
 8006eb6:	4622      	mov	r2, r4
 8006eb8:	210a      	movs	r1, #10
 8006eba:	4628      	mov	r0, r5
 8006ebc:	f000 f916 	bl	80070ec <__swbuf_r>
 8006ec0:	3001      	adds	r0, #1
 8006ec2:	d011      	beq.n	8006ee8 <_puts_r+0x84>
 8006ec4:	250a      	movs	r5, #10
 8006ec6:	e011      	b.n	8006eec <_puts_r+0x88>
 8006ec8:	4b1b      	ldr	r3, [pc, #108]	; (8006f38 <_puts_r+0xd4>)
 8006eca:	429c      	cmp	r4, r3
 8006ecc:	d101      	bne.n	8006ed2 <_puts_r+0x6e>
 8006ece:	68ac      	ldr	r4, [r5, #8]
 8006ed0:	e7da      	b.n	8006e88 <_puts_r+0x24>
 8006ed2:	4b1a      	ldr	r3, [pc, #104]	; (8006f3c <_puts_r+0xd8>)
 8006ed4:	429c      	cmp	r4, r3
 8006ed6:	bf08      	it	eq
 8006ed8:	68ec      	ldreq	r4, [r5, #12]
 8006eda:	e7d5      	b.n	8006e88 <_puts_r+0x24>
 8006edc:	4621      	mov	r1, r4
 8006ede:	4628      	mov	r0, r5
 8006ee0:	f000 f956 	bl	8007190 <__swsetup_r>
 8006ee4:	2800      	cmp	r0, #0
 8006ee6:	d0dd      	beq.n	8006ea4 <_puts_r+0x40>
 8006ee8:	f04f 35ff 	mov.w	r5, #4294967295
 8006eec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006eee:	07da      	lsls	r2, r3, #31
 8006ef0:	d405      	bmi.n	8006efe <_puts_r+0x9a>
 8006ef2:	89a3      	ldrh	r3, [r4, #12]
 8006ef4:	059b      	lsls	r3, r3, #22
 8006ef6:	d402      	bmi.n	8006efe <_puts_r+0x9a>
 8006ef8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006efa:	f000 fb70 	bl	80075de <__retarget_lock_release_recursive>
 8006efe:	4628      	mov	r0, r5
 8006f00:	bd70      	pop	{r4, r5, r6, pc}
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	da04      	bge.n	8006f10 <_puts_r+0xac>
 8006f06:	69a2      	ldr	r2, [r4, #24]
 8006f08:	429a      	cmp	r2, r3
 8006f0a:	dc06      	bgt.n	8006f1a <_puts_r+0xb6>
 8006f0c:	290a      	cmp	r1, #10
 8006f0e:	d004      	beq.n	8006f1a <_puts_r+0xb6>
 8006f10:	6823      	ldr	r3, [r4, #0]
 8006f12:	1c5a      	adds	r2, r3, #1
 8006f14:	6022      	str	r2, [r4, #0]
 8006f16:	7019      	strb	r1, [r3, #0]
 8006f18:	e7c5      	b.n	8006ea6 <_puts_r+0x42>
 8006f1a:	4622      	mov	r2, r4
 8006f1c:	4628      	mov	r0, r5
 8006f1e:	f000 f8e5 	bl	80070ec <__swbuf_r>
 8006f22:	3001      	adds	r0, #1
 8006f24:	d1bf      	bne.n	8006ea6 <_puts_r+0x42>
 8006f26:	e7df      	b.n	8006ee8 <_puts_r+0x84>
 8006f28:	6823      	ldr	r3, [r4, #0]
 8006f2a:	250a      	movs	r5, #10
 8006f2c:	1c5a      	adds	r2, r3, #1
 8006f2e:	6022      	str	r2, [r4, #0]
 8006f30:	701d      	strb	r5, [r3, #0]
 8006f32:	e7db      	b.n	8006eec <_puts_r+0x88>
 8006f34:	0800812c 	.word	0x0800812c
 8006f38:	0800814c 	.word	0x0800814c
 8006f3c:	0800810c 	.word	0x0800810c

08006f40 <puts>:
 8006f40:	4b02      	ldr	r3, [pc, #8]	; (8006f4c <puts+0xc>)
 8006f42:	4601      	mov	r1, r0
 8006f44:	6818      	ldr	r0, [r3, #0]
 8006f46:	f7ff bf8d 	b.w	8006e64 <_puts_r>
 8006f4a:	bf00      	nop
 8006f4c:	20000010 	.word	0x20000010

08006f50 <setbuf>:
 8006f50:	2900      	cmp	r1, #0
 8006f52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006f56:	bf0c      	ite	eq
 8006f58:	2202      	moveq	r2, #2
 8006f5a:	2200      	movne	r2, #0
 8006f5c:	f000 b800 	b.w	8006f60 <setvbuf>

08006f60 <setvbuf>:
 8006f60:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006f64:	461d      	mov	r5, r3
 8006f66:	4b5d      	ldr	r3, [pc, #372]	; (80070dc <setvbuf+0x17c>)
 8006f68:	681f      	ldr	r7, [r3, #0]
 8006f6a:	4604      	mov	r4, r0
 8006f6c:	460e      	mov	r6, r1
 8006f6e:	4690      	mov	r8, r2
 8006f70:	b127      	cbz	r7, 8006f7c <setvbuf+0x1c>
 8006f72:	69bb      	ldr	r3, [r7, #24]
 8006f74:	b913      	cbnz	r3, 8006f7c <setvbuf+0x1c>
 8006f76:	4638      	mov	r0, r7
 8006f78:	f000 fa92 	bl	80074a0 <__sinit>
 8006f7c:	4b58      	ldr	r3, [pc, #352]	; (80070e0 <setvbuf+0x180>)
 8006f7e:	429c      	cmp	r4, r3
 8006f80:	d167      	bne.n	8007052 <setvbuf+0xf2>
 8006f82:	687c      	ldr	r4, [r7, #4]
 8006f84:	f1b8 0f02 	cmp.w	r8, #2
 8006f88:	d006      	beq.n	8006f98 <setvbuf+0x38>
 8006f8a:	f1b8 0f01 	cmp.w	r8, #1
 8006f8e:	f200 809f 	bhi.w	80070d0 <setvbuf+0x170>
 8006f92:	2d00      	cmp	r5, #0
 8006f94:	f2c0 809c 	blt.w	80070d0 <setvbuf+0x170>
 8006f98:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006f9a:	07db      	lsls	r3, r3, #31
 8006f9c:	d405      	bmi.n	8006faa <setvbuf+0x4a>
 8006f9e:	89a3      	ldrh	r3, [r4, #12]
 8006fa0:	0598      	lsls	r0, r3, #22
 8006fa2:	d402      	bmi.n	8006faa <setvbuf+0x4a>
 8006fa4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006fa6:	f000 fb19 	bl	80075dc <__retarget_lock_acquire_recursive>
 8006faa:	4621      	mov	r1, r4
 8006fac:	4638      	mov	r0, r7
 8006fae:	f000 f9e3 	bl	8007378 <_fflush_r>
 8006fb2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006fb4:	b141      	cbz	r1, 8006fc8 <setvbuf+0x68>
 8006fb6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006fba:	4299      	cmp	r1, r3
 8006fbc:	d002      	beq.n	8006fc4 <setvbuf+0x64>
 8006fbe:	4638      	mov	r0, r7
 8006fc0:	f000 fb7c 	bl	80076bc <_free_r>
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	6363      	str	r3, [r4, #52]	; 0x34
 8006fc8:	2300      	movs	r3, #0
 8006fca:	61a3      	str	r3, [r4, #24]
 8006fcc:	6063      	str	r3, [r4, #4]
 8006fce:	89a3      	ldrh	r3, [r4, #12]
 8006fd0:	0619      	lsls	r1, r3, #24
 8006fd2:	d503      	bpl.n	8006fdc <setvbuf+0x7c>
 8006fd4:	6921      	ldr	r1, [r4, #16]
 8006fd6:	4638      	mov	r0, r7
 8006fd8:	f000 fb70 	bl	80076bc <_free_r>
 8006fdc:	89a3      	ldrh	r3, [r4, #12]
 8006fde:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8006fe2:	f023 0303 	bic.w	r3, r3, #3
 8006fe6:	f1b8 0f02 	cmp.w	r8, #2
 8006fea:	81a3      	strh	r3, [r4, #12]
 8006fec:	d06c      	beq.n	80070c8 <setvbuf+0x168>
 8006fee:	ab01      	add	r3, sp, #4
 8006ff0:	466a      	mov	r2, sp
 8006ff2:	4621      	mov	r1, r4
 8006ff4:	4638      	mov	r0, r7
 8006ff6:	f000 faf3 	bl	80075e0 <__swhatbuf_r>
 8006ffa:	89a3      	ldrh	r3, [r4, #12]
 8006ffc:	4318      	orrs	r0, r3
 8006ffe:	81a0      	strh	r0, [r4, #12]
 8007000:	2d00      	cmp	r5, #0
 8007002:	d130      	bne.n	8007066 <setvbuf+0x106>
 8007004:	9d00      	ldr	r5, [sp, #0]
 8007006:	4628      	mov	r0, r5
 8007008:	f000 fb50 	bl	80076ac <malloc>
 800700c:	4606      	mov	r6, r0
 800700e:	2800      	cmp	r0, #0
 8007010:	d155      	bne.n	80070be <setvbuf+0x15e>
 8007012:	f8dd 9000 	ldr.w	r9, [sp]
 8007016:	45a9      	cmp	r9, r5
 8007018:	d14a      	bne.n	80070b0 <setvbuf+0x150>
 800701a:	f04f 35ff 	mov.w	r5, #4294967295
 800701e:	2200      	movs	r2, #0
 8007020:	60a2      	str	r2, [r4, #8]
 8007022:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8007026:	6022      	str	r2, [r4, #0]
 8007028:	6122      	str	r2, [r4, #16]
 800702a:	2201      	movs	r2, #1
 800702c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007030:	6162      	str	r2, [r4, #20]
 8007032:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007034:	f043 0302 	orr.w	r3, r3, #2
 8007038:	07d2      	lsls	r2, r2, #31
 800703a:	81a3      	strh	r3, [r4, #12]
 800703c:	d405      	bmi.n	800704a <setvbuf+0xea>
 800703e:	f413 7f00 	tst.w	r3, #512	; 0x200
 8007042:	d102      	bne.n	800704a <setvbuf+0xea>
 8007044:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007046:	f000 faca 	bl	80075de <__retarget_lock_release_recursive>
 800704a:	4628      	mov	r0, r5
 800704c:	b003      	add	sp, #12
 800704e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007052:	4b24      	ldr	r3, [pc, #144]	; (80070e4 <setvbuf+0x184>)
 8007054:	429c      	cmp	r4, r3
 8007056:	d101      	bne.n	800705c <setvbuf+0xfc>
 8007058:	68bc      	ldr	r4, [r7, #8]
 800705a:	e793      	b.n	8006f84 <setvbuf+0x24>
 800705c:	4b22      	ldr	r3, [pc, #136]	; (80070e8 <setvbuf+0x188>)
 800705e:	429c      	cmp	r4, r3
 8007060:	bf08      	it	eq
 8007062:	68fc      	ldreq	r4, [r7, #12]
 8007064:	e78e      	b.n	8006f84 <setvbuf+0x24>
 8007066:	2e00      	cmp	r6, #0
 8007068:	d0cd      	beq.n	8007006 <setvbuf+0xa6>
 800706a:	69bb      	ldr	r3, [r7, #24]
 800706c:	b913      	cbnz	r3, 8007074 <setvbuf+0x114>
 800706e:	4638      	mov	r0, r7
 8007070:	f000 fa16 	bl	80074a0 <__sinit>
 8007074:	f1b8 0f01 	cmp.w	r8, #1
 8007078:	bf08      	it	eq
 800707a:	89a3      	ldrheq	r3, [r4, #12]
 800707c:	6026      	str	r6, [r4, #0]
 800707e:	bf04      	itt	eq
 8007080:	f043 0301 	orreq.w	r3, r3, #1
 8007084:	81a3      	strheq	r3, [r4, #12]
 8007086:	89a2      	ldrh	r2, [r4, #12]
 8007088:	f012 0308 	ands.w	r3, r2, #8
 800708c:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8007090:	d01c      	beq.n	80070cc <setvbuf+0x16c>
 8007092:	07d3      	lsls	r3, r2, #31
 8007094:	bf41      	itttt	mi
 8007096:	2300      	movmi	r3, #0
 8007098:	426d      	negmi	r5, r5
 800709a:	60a3      	strmi	r3, [r4, #8]
 800709c:	61a5      	strmi	r5, [r4, #24]
 800709e:	bf58      	it	pl
 80070a0:	60a5      	strpl	r5, [r4, #8]
 80070a2:	6e65      	ldr	r5, [r4, #100]	; 0x64
 80070a4:	f015 0501 	ands.w	r5, r5, #1
 80070a8:	d115      	bne.n	80070d6 <setvbuf+0x176>
 80070aa:	f412 7f00 	tst.w	r2, #512	; 0x200
 80070ae:	e7c8      	b.n	8007042 <setvbuf+0xe2>
 80070b0:	4648      	mov	r0, r9
 80070b2:	f000 fafb 	bl	80076ac <malloc>
 80070b6:	4606      	mov	r6, r0
 80070b8:	2800      	cmp	r0, #0
 80070ba:	d0ae      	beq.n	800701a <setvbuf+0xba>
 80070bc:	464d      	mov	r5, r9
 80070be:	89a3      	ldrh	r3, [r4, #12]
 80070c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070c4:	81a3      	strh	r3, [r4, #12]
 80070c6:	e7d0      	b.n	800706a <setvbuf+0x10a>
 80070c8:	2500      	movs	r5, #0
 80070ca:	e7a8      	b.n	800701e <setvbuf+0xbe>
 80070cc:	60a3      	str	r3, [r4, #8]
 80070ce:	e7e8      	b.n	80070a2 <setvbuf+0x142>
 80070d0:	f04f 35ff 	mov.w	r5, #4294967295
 80070d4:	e7b9      	b.n	800704a <setvbuf+0xea>
 80070d6:	2500      	movs	r5, #0
 80070d8:	e7b7      	b.n	800704a <setvbuf+0xea>
 80070da:	bf00      	nop
 80070dc:	20000010 	.word	0x20000010
 80070e0:	0800812c 	.word	0x0800812c
 80070e4:	0800814c 	.word	0x0800814c
 80070e8:	0800810c 	.word	0x0800810c

080070ec <__swbuf_r>:
 80070ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070ee:	460e      	mov	r6, r1
 80070f0:	4614      	mov	r4, r2
 80070f2:	4605      	mov	r5, r0
 80070f4:	b118      	cbz	r0, 80070fe <__swbuf_r+0x12>
 80070f6:	6983      	ldr	r3, [r0, #24]
 80070f8:	b90b      	cbnz	r3, 80070fe <__swbuf_r+0x12>
 80070fa:	f000 f9d1 	bl	80074a0 <__sinit>
 80070fe:	4b21      	ldr	r3, [pc, #132]	; (8007184 <__swbuf_r+0x98>)
 8007100:	429c      	cmp	r4, r3
 8007102:	d12b      	bne.n	800715c <__swbuf_r+0x70>
 8007104:	686c      	ldr	r4, [r5, #4]
 8007106:	69a3      	ldr	r3, [r4, #24]
 8007108:	60a3      	str	r3, [r4, #8]
 800710a:	89a3      	ldrh	r3, [r4, #12]
 800710c:	071a      	lsls	r2, r3, #28
 800710e:	d52f      	bpl.n	8007170 <__swbuf_r+0x84>
 8007110:	6923      	ldr	r3, [r4, #16]
 8007112:	b36b      	cbz	r3, 8007170 <__swbuf_r+0x84>
 8007114:	6923      	ldr	r3, [r4, #16]
 8007116:	6820      	ldr	r0, [r4, #0]
 8007118:	1ac0      	subs	r0, r0, r3
 800711a:	6963      	ldr	r3, [r4, #20]
 800711c:	b2f6      	uxtb	r6, r6
 800711e:	4283      	cmp	r3, r0
 8007120:	4637      	mov	r7, r6
 8007122:	dc04      	bgt.n	800712e <__swbuf_r+0x42>
 8007124:	4621      	mov	r1, r4
 8007126:	4628      	mov	r0, r5
 8007128:	f000 f926 	bl	8007378 <_fflush_r>
 800712c:	bb30      	cbnz	r0, 800717c <__swbuf_r+0x90>
 800712e:	68a3      	ldr	r3, [r4, #8]
 8007130:	3b01      	subs	r3, #1
 8007132:	60a3      	str	r3, [r4, #8]
 8007134:	6823      	ldr	r3, [r4, #0]
 8007136:	1c5a      	adds	r2, r3, #1
 8007138:	6022      	str	r2, [r4, #0]
 800713a:	701e      	strb	r6, [r3, #0]
 800713c:	6963      	ldr	r3, [r4, #20]
 800713e:	3001      	adds	r0, #1
 8007140:	4283      	cmp	r3, r0
 8007142:	d004      	beq.n	800714e <__swbuf_r+0x62>
 8007144:	89a3      	ldrh	r3, [r4, #12]
 8007146:	07db      	lsls	r3, r3, #31
 8007148:	d506      	bpl.n	8007158 <__swbuf_r+0x6c>
 800714a:	2e0a      	cmp	r6, #10
 800714c:	d104      	bne.n	8007158 <__swbuf_r+0x6c>
 800714e:	4621      	mov	r1, r4
 8007150:	4628      	mov	r0, r5
 8007152:	f000 f911 	bl	8007378 <_fflush_r>
 8007156:	b988      	cbnz	r0, 800717c <__swbuf_r+0x90>
 8007158:	4638      	mov	r0, r7
 800715a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800715c:	4b0a      	ldr	r3, [pc, #40]	; (8007188 <__swbuf_r+0x9c>)
 800715e:	429c      	cmp	r4, r3
 8007160:	d101      	bne.n	8007166 <__swbuf_r+0x7a>
 8007162:	68ac      	ldr	r4, [r5, #8]
 8007164:	e7cf      	b.n	8007106 <__swbuf_r+0x1a>
 8007166:	4b09      	ldr	r3, [pc, #36]	; (800718c <__swbuf_r+0xa0>)
 8007168:	429c      	cmp	r4, r3
 800716a:	bf08      	it	eq
 800716c:	68ec      	ldreq	r4, [r5, #12]
 800716e:	e7ca      	b.n	8007106 <__swbuf_r+0x1a>
 8007170:	4621      	mov	r1, r4
 8007172:	4628      	mov	r0, r5
 8007174:	f000 f80c 	bl	8007190 <__swsetup_r>
 8007178:	2800      	cmp	r0, #0
 800717a:	d0cb      	beq.n	8007114 <__swbuf_r+0x28>
 800717c:	f04f 37ff 	mov.w	r7, #4294967295
 8007180:	e7ea      	b.n	8007158 <__swbuf_r+0x6c>
 8007182:	bf00      	nop
 8007184:	0800812c 	.word	0x0800812c
 8007188:	0800814c 	.word	0x0800814c
 800718c:	0800810c 	.word	0x0800810c

08007190 <__swsetup_r>:
 8007190:	4b32      	ldr	r3, [pc, #200]	; (800725c <__swsetup_r+0xcc>)
 8007192:	b570      	push	{r4, r5, r6, lr}
 8007194:	681d      	ldr	r5, [r3, #0]
 8007196:	4606      	mov	r6, r0
 8007198:	460c      	mov	r4, r1
 800719a:	b125      	cbz	r5, 80071a6 <__swsetup_r+0x16>
 800719c:	69ab      	ldr	r3, [r5, #24]
 800719e:	b913      	cbnz	r3, 80071a6 <__swsetup_r+0x16>
 80071a0:	4628      	mov	r0, r5
 80071a2:	f000 f97d 	bl	80074a0 <__sinit>
 80071a6:	4b2e      	ldr	r3, [pc, #184]	; (8007260 <__swsetup_r+0xd0>)
 80071a8:	429c      	cmp	r4, r3
 80071aa:	d10f      	bne.n	80071cc <__swsetup_r+0x3c>
 80071ac:	686c      	ldr	r4, [r5, #4]
 80071ae:	89a3      	ldrh	r3, [r4, #12]
 80071b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80071b4:	0719      	lsls	r1, r3, #28
 80071b6:	d42c      	bmi.n	8007212 <__swsetup_r+0x82>
 80071b8:	06dd      	lsls	r5, r3, #27
 80071ba:	d411      	bmi.n	80071e0 <__swsetup_r+0x50>
 80071bc:	2309      	movs	r3, #9
 80071be:	6033      	str	r3, [r6, #0]
 80071c0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80071c4:	81a3      	strh	r3, [r4, #12]
 80071c6:	f04f 30ff 	mov.w	r0, #4294967295
 80071ca:	e03e      	b.n	800724a <__swsetup_r+0xba>
 80071cc:	4b25      	ldr	r3, [pc, #148]	; (8007264 <__swsetup_r+0xd4>)
 80071ce:	429c      	cmp	r4, r3
 80071d0:	d101      	bne.n	80071d6 <__swsetup_r+0x46>
 80071d2:	68ac      	ldr	r4, [r5, #8]
 80071d4:	e7eb      	b.n	80071ae <__swsetup_r+0x1e>
 80071d6:	4b24      	ldr	r3, [pc, #144]	; (8007268 <__swsetup_r+0xd8>)
 80071d8:	429c      	cmp	r4, r3
 80071da:	bf08      	it	eq
 80071dc:	68ec      	ldreq	r4, [r5, #12]
 80071de:	e7e6      	b.n	80071ae <__swsetup_r+0x1e>
 80071e0:	0758      	lsls	r0, r3, #29
 80071e2:	d512      	bpl.n	800720a <__swsetup_r+0x7a>
 80071e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80071e6:	b141      	cbz	r1, 80071fa <__swsetup_r+0x6a>
 80071e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80071ec:	4299      	cmp	r1, r3
 80071ee:	d002      	beq.n	80071f6 <__swsetup_r+0x66>
 80071f0:	4630      	mov	r0, r6
 80071f2:	f000 fa63 	bl	80076bc <_free_r>
 80071f6:	2300      	movs	r3, #0
 80071f8:	6363      	str	r3, [r4, #52]	; 0x34
 80071fa:	89a3      	ldrh	r3, [r4, #12]
 80071fc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007200:	81a3      	strh	r3, [r4, #12]
 8007202:	2300      	movs	r3, #0
 8007204:	6063      	str	r3, [r4, #4]
 8007206:	6923      	ldr	r3, [r4, #16]
 8007208:	6023      	str	r3, [r4, #0]
 800720a:	89a3      	ldrh	r3, [r4, #12]
 800720c:	f043 0308 	orr.w	r3, r3, #8
 8007210:	81a3      	strh	r3, [r4, #12]
 8007212:	6923      	ldr	r3, [r4, #16]
 8007214:	b94b      	cbnz	r3, 800722a <__swsetup_r+0x9a>
 8007216:	89a3      	ldrh	r3, [r4, #12]
 8007218:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800721c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007220:	d003      	beq.n	800722a <__swsetup_r+0x9a>
 8007222:	4621      	mov	r1, r4
 8007224:	4630      	mov	r0, r6
 8007226:	f000 fa01 	bl	800762c <__smakebuf_r>
 800722a:	89a0      	ldrh	r0, [r4, #12]
 800722c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007230:	f010 0301 	ands.w	r3, r0, #1
 8007234:	d00a      	beq.n	800724c <__swsetup_r+0xbc>
 8007236:	2300      	movs	r3, #0
 8007238:	60a3      	str	r3, [r4, #8]
 800723a:	6963      	ldr	r3, [r4, #20]
 800723c:	425b      	negs	r3, r3
 800723e:	61a3      	str	r3, [r4, #24]
 8007240:	6923      	ldr	r3, [r4, #16]
 8007242:	b943      	cbnz	r3, 8007256 <__swsetup_r+0xc6>
 8007244:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007248:	d1ba      	bne.n	80071c0 <__swsetup_r+0x30>
 800724a:	bd70      	pop	{r4, r5, r6, pc}
 800724c:	0781      	lsls	r1, r0, #30
 800724e:	bf58      	it	pl
 8007250:	6963      	ldrpl	r3, [r4, #20]
 8007252:	60a3      	str	r3, [r4, #8]
 8007254:	e7f4      	b.n	8007240 <__swsetup_r+0xb0>
 8007256:	2000      	movs	r0, #0
 8007258:	e7f7      	b.n	800724a <__swsetup_r+0xba>
 800725a:	bf00      	nop
 800725c:	20000010 	.word	0x20000010
 8007260:	0800812c 	.word	0x0800812c
 8007264:	0800814c 	.word	0x0800814c
 8007268:	0800810c 	.word	0x0800810c

0800726c <__sflush_r>:
 800726c:	898a      	ldrh	r2, [r1, #12]
 800726e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007272:	4605      	mov	r5, r0
 8007274:	0710      	lsls	r0, r2, #28
 8007276:	460c      	mov	r4, r1
 8007278:	d458      	bmi.n	800732c <__sflush_r+0xc0>
 800727a:	684b      	ldr	r3, [r1, #4]
 800727c:	2b00      	cmp	r3, #0
 800727e:	dc05      	bgt.n	800728c <__sflush_r+0x20>
 8007280:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007282:	2b00      	cmp	r3, #0
 8007284:	dc02      	bgt.n	800728c <__sflush_r+0x20>
 8007286:	2000      	movs	r0, #0
 8007288:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800728c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800728e:	2e00      	cmp	r6, #0
 8007290:	d0f9      	beq.n	8007286 <__sflush_r+0x1a>
 8007292:	2300      	movs	r3, #0
 8007294:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007298:	682f      	ldr	r7, [r5, #0]
 800729a:	602b      	str	r3, [r5, #0]
 800729c:	d032      	beq.n	8007304 <__sflush_r+0x98>
 800729e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80072a0:	89a3      	ldrh	r3, [r4, #12]
 80072a2:	075a      	lsls	r2, r3, #29
 80072a4:	d505      	bpl.n	80072b2 <__sflush_r+0x46>
 80072a6:	6863      	ldr	r3, [r4, #4]
 80072a8:	1ac0      	subs	r0, r0, r3
 80072aa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80072ac:	b10b      	cbz	r3, 80072b2 <__sflush_r+0x46>
 80072ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80072b0:	1ac0      	subs	r0, r0, r3
 80072b2:	2300      	movs	r3, #0
 80072b4:	4602      	mov	r2, r0
 80072b6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80072b8:	6a21      	ldr	r1, [r4, #32]
 80072ba:	4628      	mov	r0, r5
 80072bc:	47b0      	blx	r6
 80072be:	1c43      	adds	r3, r0, #1
 80072c0:	89a3      	ldrh	r3, [r4, #12]
 80072c2:	d106      	bne.n	80072d2 <__sflush_r+0x66>
 80072c4:	6829      	ldr	r1, [r5, #0]
 80072c6:	291d      	cmp	r1, #29
 80072c8:	d82c      	bhi.n	8007324 <__sflush_r+0xb8>
 80072ca:	4a2a      	ldr	r2, [pc, #168]	; (8007374 <__sflush_r+0x108>)
 80072cc:	40ca      	lsrs	r2, r1
 80072ce:	07d6      	lsls	r6, r2, #31
 80072d0:	d528      	bpl.n	8007324 <__sflush_r+0xb8>
 80072d2:	2200      	movs	r2, #0
 80072d4:	6062      	str	r2, [r4, #4]
 80072d6:	04d9      	lsls	r1, r3, #19
 80072d8:	6922      	ldr	r2, [r4, #16]
 80072da:	6022      	str	r2, [r4, #0]
 80072dc:	d504      	bpl.n	80072e8 <__sflush_r+0x7c>
 80072de:	1c42      	adds	r2, r0, #1
 80072e0:	d101      	bne.n	80072e6 <__sflush_r+0x7a>
 80072e2:	682b      	ldr	r3, [r5, #0]
 80072e4:	b903      	cbnz	r3, 80072e8 <__sflush_r+0x7c>
 80072e6:	6560      	str	r0, [r4, #84]	; 0x54
 80072e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80072ea:	602f      	str	r7, [r5, #0]
 80072ec:	2900      	cmp	r1, #0
 80072ee:	d0ca      	beq.n	8007286 <__sflush_r+0x1a>
 80072f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80072f4:	4299      	cmp	r1, r3
 80072f6:	d002      	beq.n	80072fe <__sflush_r+0x92>
 80072f8:	4628      	mov	r0, r5
 80072fa:	f000 f9df 	bl	80076bc <_free_r>
 80072fe:	2000      	movs	r0, #0
 8007300:	6360      	str	r0, [r4, #52]	; 0x34
 8007302:	e7c1      	b.n	8007288 <__sflush_r+0x1c>
 8007304:	6a21      	ldr	r1, [r4, #32]
 8007306:	2301      	movs	r3, #1
 8007308:	4628      	mov	r0, r5
 800730a:	47b0      	blx	r6
 800730c:	1c41      	adds	r1, r0, #1
 800730e:	d1c7      	bne.n	80072a0 <__sflush_r+0x34>
 8007310:	682b      	ldr	r3, [r5, #0]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d0c4      	beq.n	80072a0 <__sflush_r+0x34>
 8007316:	2b1d      	cmp	r3, #29
 8007318:	d001      	beq.n	800731e <__sflush_r+0xb2>
 800731a:	2b16      	cmp	r3, #22
 800731c:	d101      	bne.n	8007322 <__sflush_r+0xb6>
 800731e:	602f      	str	r7, [r5, #0]
 8007320:	e7b1      	b.n	8007286 <__sflush_r+0x1a>
 8007322:	89a3      	ldrh	r3, [r4, #12]
 8007324:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007328:	81a3      	strh	r3, [r4, #12]
 800732a:	e7ad      	b.n	8007288 <__sflush_r+0x1c>
 800732c:	690f      	ldr	r7, [r1, #16]
 800732e:	2f00      	cmp	r7, #0
 8007330:	d0a9      	beq.n	8007286 <__sflush_r+0x1a>
 8007332:	0793      	lsls	r3, r2, #30
 8007334:	680e      	ldr	r6, [r1, #0]
 8007336:	bf08      	it	eq
 8007338:	694b      	ldreq	r3, [r1, #20]
 800733a:	600f      	str	r7, [r1, #0]
 800733c:	bf18      	it	ne
 800733e:	2300      	movne	r3, #0
 8007340:	eba6 0807 	sub.w	r8, r6, r7
 8007344:	608b      	str	r3, [r1, #8]
 8007346:	f1b8 0f00 	cmp.w	r8, #0
 800734a:	dd9c      	ble.n	8007286 <__sflush_r+0x1a>
 800734c:	6a21      	ldr	r1, [r4, #32]
 800734e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007350:	4643      	mov	r3, r8
 8007352:	463a      	mov	r2, r7
 8007354:	4628      	mov	r0, r5
 8007356:	47b0      	blx	r6
 8007358:	2800      	cmp	r0, #0
 800735a:	dc06      	bgt.n	800736a <__sflush_r+0xfe>
 800735c:	89a3      	ldrh	r3, [r4, #12]
 800735e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007362:	81a3      	strh	r3, [r4, #12]
 8007364:	f04f 30ff 	mov.w	r0, #4294967295
 8007368:	e78e      	b.n	8007288 <__sflush_r+0x1c>
 800736a:	4407      	add	r7, r0
 800736c:	eba8 0800 	sub.w	r8, r8, r0
 8007370:	e7e9      	b.n	8007346 <__sflush_r+0xda>
 8007372:	bf00      	nop
 8007374:	20400001 	.word	0x20400001

08007378 <_fflush_r>:
 8007378:	b538      	push	{r3, r4, r5, lr}
 800737a:	690b      	ldr	r3, [r1, #16]
 800737c:	4605      	mov	r5, r0
 800737e:	460c      	mov	r4, r1
 8007380:	b913      	cbnz	r3, 8007388 <_fflush_r+0x10>
 8007382:	2500      	movs	r5, #0
 8007384:	4628      	mov	r0, r5
 8007386:	bd38      	pop	{r3, r4, r5, pc}
 8007388:	b118      	cbz	r0, 8007392 <_fflush_r+0x1a>
 800738a:	6983      	ldr	r3, [r0, #24]
 800738c:	b90b      	cbnz	r3, 8007392 <_fflush_r+0x1a>
 800738e:	f000 f887 	bl	80074a0 <__sinit>
 8007392:	4b14      	ldr	r3, [pc, #80]	; (80073e4 <_fflush_r+0x6c>)
 8007394:	429c      	cmp	r4, r3
 8007396:	d11b      	bne.n	80073d0 <_fflush_r+0x58>
 8007398:	686c      	ldr	r4, [r5, #4]
 800739a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d0ef      	beq.n	8007382 <_fflush_r+0xa>
 80073a2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80073a4:	07d0      	lsls	r0, r2, #31
 80073a6:	d404      	bmi.n	80073b2 <_fflush_r+0x3a>
 80073a8:	0599      	lsls	r1, r3, #22
 80073aa:	d402      	bmi.n	80073b2 <_fflush_r+0x3a>
 80073ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80073ae:	f000 f915 	bl	80075dc <__retarget_lock_acquire_recursive>
 80073b2:	4628      	mov	r0, r5
 80073b4:	4621      	mov	r1, r4
 80073b6:	f7ff ff59 	bl	800726c <__sflush_r>
 80073ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80073bc:	07da      	lsls	r2, r3, #31
 80073be:	4605      	mov	r5, r0
 80073c0:	d4e0      	bmi.n	8007384 <_fflush_r+0xc>
 80073c2:	89a3      	ldrh	r3, [r4, #12]
 80073c4:	059b      	lsls	r3, r3, #22
 80073c6:	d4dd      	bmi.n	8007384 <_fflush_r+0xc>
 80073c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80073ca:	f000 f908 	bl	80075de <__retarget_lock_release_recursive>
 80073ce:	e7d9      	b.n	8007384 <_fflush_r+0xc>
 80073d0:	4b05      	ldr	r3, [pc, #20]	; (80073e8 <_fflush_r+0x70>)
 80073d2:	429c      	cmp	r4, r3
 80073d4:	d101      	bne.n	80073da <_fflush_r+0x62>
 80073d6:	68ac      	ldr	r4, [r5, #8]
 80073d8:	e7df      	b.n	800739a <_fflush_r+0x22>
 80073da:	4b04      	ldr	r3, [pc, #16]	; (80073ec <_fflush_r+0x74>)
 80073dc:	429c      	cmp	r4, r3
 80073de:	bf08      	it	eq
 80073e0:	68ec      	ldreq	r4, [r5, #12]
 80073e2:	e7da      	b.n	800739a <_fflush_r+0x22>
 80073e4:	0800812c 	.word	0x0800812c
 80073e8:	0800814c 	.word	0x0800814c
 80073ec:	0800810c 	.word	0x0800810c

080073f0 <std>:
 80073f0:	2300      	movs	r3, #0
 80073f2:	b510      	push	{r4, lr}
 80073f4:	4604      	mov	r4, r0
 80073f6:	e9c0 3300 	strd	r3, r3, [r0]
 80073fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80073fe:	6083      	str	r3, [r0, #8]
 8007400:	8181      	strh	r1, [r0, #12]
 8007402:	6643      	str	r3, [r0, #100]	; 0x64
 8007404:	81c2      	strh	r2, [r0, #14]
 8007406:	6183      	str	r3, [r0, #24]
 8007408:	4619      	mov	r1, r3
 800740a:	2208      	movs	r2, #8
 800740c:	305c      	adds	r0, #92	; 0x5c
 800740e:	f7ff fd09 	bl	8006e24 <memset>
 8007412:	4b05      	ldr	r3, [pc, #20]	; (8007428 <std+0x38>)
 8007414:	6263      	str	r3, [r4, #36]	; 0x24
 8007416:	4b05      	ldr	r3, [pc, #20]	; (800742c <std+0x3c>)
 8007418:	62a3      	str	r3, [r4, #40]	; 0x28
 800741a:	4b05      	ldr	r3, [pc, #20]	; (8007430 <std+0x40>)
 800741c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800741e:	4b05      	ldr	r3, [pc, #20]	; (8007434 <std+0x44>)
 8007420:	6224      	str	r4, [r4, #32]
 8007422:	6323      	str	r3, [r4, #48]	; 0x30
 8007424:	bd10      	pop	{r4, pc}
 8007426:	bf00      	nop
 8007428:	08007e79 	.word	0x08007e79
 800742c:	08007e9b 	.word	0x08007e9b
 8007430:	08007ed3 	.word	0x08007ed3
 8007434:	08007ef7 	.word	0x08007ef7

08007438 <_cleanup_r>:
 8007438:	4901      	ldr	r1, [pc, #4]	; (8007440 <_cleanup_r+0x8>)
 800743a:	f000 b8af 	b.w	800759c <_fwalk_reent>
 800743e:	bf00      	nop
 8007440:	08007379 	.word	0x08007379

08007444 <__sfmoreglue>:
 8007444:	b570      	push	{r4, r5, r6, lr}
 8007446:	2268      	movs	r2, #104	; 0x68
 8007448:	1e4d      	subs	r5, r1, #1
 800744a:	4355      	muls	r5, r2
 800744c:	460e      	mov	r6, r1
 800744e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007452:	f000 f99f 	bl	8007794 <_malloc_r>
 8007456:	4604      	mov	r4, r0
 8007458:	b140      	cbz	r0, 800746c <__sfmoreglue+0x28>
 800745a:	2100      	movs	r1, #0
 800745c:	e9c0 1600 	strd	r1, r6, [r0]
 8007460:	300c      	adds	r0, #12
 8007462:	60a0      	str	r0, [r4, #8]
 8007464:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007468:	f7ff fcdc 	bl	8006e24 <memset>
 800746c:	4620      	mov	r0, r4
 800746e:	bd70      	pop	{r4, r5, r6, pc}

08007470 <__sfp_lock_acquire>:
 8007470:	4801      	ldr	r0, [pc, #4]	; (8007478 <__sfp_lock_acquire+0x8>)
 8007472:	f000 b8b3 	b.w	80075dc <__retarget_lock_acquire_recursive>
 8007476:	bf00      	nop
 8007478:	20004d35 	.word	0x20004d35

0800747c <__sfp_lock_release>:
 800747c:	4801      	ldr	r0, [pc, #4]	; (8007484 <__sfp_lock_release+0x8>)
 800747e:	f000 b8ae 	b.w	80075de <__retarget_lock_release_recursive>
 8007482:	bf00      	nop
 8007484:	20004d35 	.word	0x20004d35

08007488 <__sinit_lock_acquire>:
 8007488:	4801      	ldr	r0, [pc, #4]	; (8007490 <__sinit_lock_acquire+0x8>)
 800748a:	f000 b8a7 	b.w	80075dc <__retarget_lock_acquire_recursive>
 800748e:	bf00      	nop
 8007490:	20004d36 	.word	0x20004d36

08007494 <__sinit_lock_release>:
 8007494:	4801      	ldr	r0, [pc, #4]	; (800749c <__sinit_lock_release+0x8>)
 8007496:	f000 b8a2 	b.w	80075de <__retarget_lock_release_recursive>
 800749a:	bf00      	nop
 800749c:	20004d36 	.word	0x20004d36

080074a0 <__sinit>:
 80074a0:	b510      	push	{r4, lr}
 80074a2:	4604      	mov	r4, r0
 80074a4:	f7ff fff0 	bl	8007488 <__sinit_lock_acquire>
 80074a8:	69a3      	ldr	r3, [r4, #24]
 80074aa:	b11b      	cbz	r3, 80074b4 <__sinit+0x14>
 80074ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80074b0:	f7ff bff0 	b.w	8007494 <__sinit_lock_release>
 80074b4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80074b8:	6523      	str	r3, [r4, #80]	; 0x50
 80074ba:	4b13      	ldr	r3, [pc, #76]	; (8007508 <__sinit+0x68>)
 80074bc:	4a13      	ldr	r2, [pc, #76]	; (800750c <__sinit+0x6c>)
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	62a2      	str	r2, [r4, #40]	; 0x28
 80074c2:	42a3      	cmp	r3, r4
 80074c4:	bf04      	itt	eq
 80074c6:	2301      	moveq	r3, #1
 80074c8:	61a3      	streq	r3, [r4, #24]
 80074ca:	4620      	mov	r0, r4
 80074cc:	f000 f820 	bl	8007510 <__sfp>
 80074d0:	6060      	str	r0, [r4, #4]
 80074d2:	4620      	mov	r0, r4
 80074d4:	f000 f81c 	bl	8007510 <__sfp>
 80074d8:	60a0      	str	r0, [r4, #8]
 80074da:	4620      	mov	r0, r4
 80074dc:	f000 f818 	bl	8007510 <__sfp>
 80074e0:	2200      	movs	r2, #0
 80074e2:	60e0      	str	r0, [r4, #12]
 80074e4:	2104      	movs	r1, #4
 80074e6:	6860      	ldr	r0, [r4, #4]
 80074e8:	f7ff ff82 	bl	80073f0 <std>
 80074ec:	68a0      	ldr	r0, [r4, #8]
 80074ee:	2201      	movs	r2, #1
 80074f0:	2109      	movs	r1, #9
 80074f2:	f7ff ff7d 	bl	80073f0 <std>
 80074f6:	68e0      	ldr	r0, [r4, #12]
 80074f8:	2202      	movs	r2, #2
 80074fa:	2112      	movs	r1, #18
 80074fc:	f7ff ff78 	bl	80073f0 <std>
 8007500:	2301      	movs	r3, #1
 8007502:	61a3      	str	r3, [r4, #24]
 8007504:	e7d2      	b.n	80074ac <__sinit+0xc>
 8007506:	bf00      	nop
 8007508:	08008108 	.word	0x08008108
 800750c:	08007439 	.word	0x08007439

08007510 <__sfp>:
 8007510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007512:	4607      	mov	r7, r0
 8007514:	f7ff ffac 	bl	8007470 <__sfp_lock_acquire>
 8007518:	4b1e      	ldr	r3, [pc, #120]	; (8007594 <__sfp+0x84>)
 800751a:	681e      	ldr	r6, [r3, #0]
 800751c:	69b3      	ldr	r3, [r6, #24]
 800751e:	b913      	cbnz	r3, 8007526 <__sfp+0x16>
 8007520:	4630      	mov	r0, r6
 8007522:	f7ff ffbd 	bl	80074a0 <__sinit>
 8007526:	3648      	adds	r6, #72	; 0x48
 8007528:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800752c:	3b01      	subs	r3, #1
 800752e:	d503      	bpl.n	8007538 <__sfp+0x28>
 8007530:	6833      	ldr	r3, [r6, #0]
 8007532:	b30b      	cbz	r3, 8007578 <__sfp+0x68>
 8007534:	6836      	ldr	r6, [r6, #0]
 8007536:	e7f7      	b.n	8007528 <__sfp+0x18>
 8007538:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800753c:	b9d5      	cbnz	r5, 8007574 <__sfp+0x64>
 800753e:	4b16      	ldr	r3, [pc, #88]	; (8007598 <__sfp+0x88>)
 8007540:	60e3      	str	r3, [r4, #12]
 8007542:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007546:	6665      	str	r5, [r4, #100]	; 0x64
 8007548:	f000 f847 	bl	80075da <__retarget_lock_init_recursive>
 800754c:	f7ff ff96 	bl	800747c <__sfp_lock_release>
 8007550:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007554:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007558:	6025      	str	r5, [r4, #0]
 800755a:	61a5      	str	r5, [r4, #24]
 800755c:	2208      	movs	r2, #8
 800755e:	4629      	mov	r1, r5
 8007560:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007564:	f7ff fc5e 	bl	8006e24 <memset>
 8007568:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800756c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007570:	4620      	mov	r0, r4
 8007572:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007574:	3468      	adds	r4, #104	; 0x68
 8007576:	e7d9      	b.n	800752c <__sfp+0x1c>
 8007578:	2104      	movs	r1, #4
 800757a:	4638      	mov	r0, r7
 800757c:	f7ff ff62 	bl	8007444 <__sfmoreglue>
 8007580:	4604      	mov	r4, r0
 8007582:	6030      	str	r0, [r6, #0]
 8007584:	2800      	cmp	r0, #0
 8007586:	d1d5      	bne.n	8007534 <__sfp+0x24>
 8007588:	f7ff ff78 	bl	800747c <__sfp_lock_release>
 800758c:	230c      	movs	r3, #12
 800758e:	603b      	str	r3, [r7, #0]
 8007590:	e7ee      	b.n	8007570 <__sfp+0x60>
 8007592:	bf00      	nop
 8007594:	08008108 	.word	0x08008108
 8007598:	ffff0001 	.word	0xffff0001

0800759c <_fwalk_reent>:
 800759c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80075a0:	4606      	mov	r6, r0
 80075a2:	4688      	mov	r8, r1
 80075a4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80075a8:	2700      	movs	r7, #0
 80075aa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80075ae:	f1b9 0901 	subs.w	r9, r9, #1
 80075b2:	d505      	bpl.n	80075c0 <_fwalk_reent+0x24>
 80075b4:	6824      	ldr	r4, [r4, #0]
 80075b6:	2c00      	cmp	r4, #0
 80075b8:	d1f7      	bne.n	80075aa <_fwalk_reent+0xe>
 80075ba:	4638      	mov	r0, r7
 80075bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80075c0:	89ab      	ldrh	r3, [r5, #12]
 80075c2:	2b01      	cmp	r3, #1
 80075c4:	d907      	bls.n	80075d6 <_fwalk_reent+0x3a>
 80075c6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80075ca:	3301      	adds	r3, #1
 80075cc:	d003      	beq.n	80075d6 <_fwalk_reent+0x3a>
 80075ce:	4629      	mov	r1, r5
 80075d0:	4630      	mov	r0, r6
 80075d2:	47c0      	blx	r8
 80075d4:	4307      	orrs	r7, r0
 80075d6:	3568      	adds	r5, #104	; 0x68
 80075d8:	e7e9      	b.n	80075ae <_fwalk_reent+0x12>

080075da <__retarget_lock_init_recursive>:
 80075da:	4770      	bx	lr

080075dc <__retarget_lock_acquire_recursive>:
 80075dc:	4770      	bx	lr

080075de <__retarget_lock_release_recursive>:
 80075de:	4770      	bx	lr

080075e0 <__swhatbuf_r>:
 80075e0:	b570      	push	{r4, r5, r6, lr}
 80075e2:	460e      	mov	r6, r1
 80075e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075e8:	2900      	cmp	r1, #0
 80075ea:	b096      	sub	sp, #88	; 0x58
 80075ec:	4614      	mov	r4, r2
 80075ee:	461d      	mov	r5, r3
 80075f0:	da08      	bge.n	8007604 <__swhatbuf_r+0x24>
 80075f2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80075f6:	2200      	movs	r2, #0
 80075f8:	602a      	str	r2, [r5, #0]
 80075fa:	061a      	lsls	r2, r3, #24
 80075fc:	d410      	bmi.n	8007620 <__swhatbuf_r+0x40>
 80075fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007602:	e00e      	b.n	8007622 <__swhatbuf_r+0x42>
 8007604:	466a      	mov	r2, sp
 8007606:	f000 fc9d 	bl	8007f44 <_fstat_r>
 800760a:	2800      	cmp	r0, #0
 800760c:	dbf1      	blt.n	80075f2 <__swhatbuf_r+0x12>
 800760e:	9a01      	ldr	r2, [sp, #4]
 8007610:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007614:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007618:	425a      	negs	r2, r3
 800761a:	415a      	adcs	r2, r3
 800761c:	602a      	str	r2, [r5, #0]
 800761e:	e7ee      	b.n	80075fe <__swhatbuf_r+0x1e>
 8007620:	2340      	movs	r3, #64	; 0x40
 8007622:	2000      	movs	r0, #0
 8007624:	6023      	str	r3, [r4, #0]
 8007626:	b016      	add	sp, #88	; 0x58
 8007628:	bd70      	pop	{r4, r5, r6, pc}
	...

0800762c <__smakebuf_r>:
 800762c:	898b      	ldrh	r3, [r1, #12]
 800762e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007630:	079d      	lsls	r5, r3, #30
 8007632:	4606      	mov	r6, r0
 8007634:	460c      	mov	r4, r1
 8007636:	d507      	bpl.n	8007648 <__smakebuf_r+0x1c>
 8007638:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800763c:	6023      	str	r3, [r4, #0]
 800763e:	6123      	str	r3, [r4, #16]
 8007640:	2301      	movs	r3, #1
 8007642:	6163      	str	r3, [r4, #20]
 8007644:	b002      	add	sp, #8
 8007646:	bd70      	pop	{r4, r5, r6, pc}
 8007648:	ab01      	add	r3, sp, #4
 800764a:	466a      	mov	r2, sp
 800764c:	f7ff ffc8 	bl	80075e0 <__swhatbuf_r>
 8007650:	9900      	ldr	r1, [sp, #0]
 8007652:	4605      	mov	r5, r0
 8007654:	4630      	mov	r0, r6
 8007656:	f000 f89d 	bl	8007794 <_malloc_r>
 800765a:	b948      	cbnz	r0, 8007670 <__smakebuf_r+0x44>
 800765c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007660:	059a      	lsls	r2, r3, #22
 8007662:	d4ef      	bmi.n	8007644 <__smakebuf_r+0x18>
 8007664:	f023 0303 	bic.w	r3, r3, #3
 8007668:	f043 0302 	orr.w	r3, r3, #2
 800766c:	81a3      	strh	r3, [r4, #12]
 800766e:	e7e3      	b.n	8007638 <__smakebuf_r+0xc>
 8007670:	4b0d      	ldr	r3, [pc, #52]	; (80076a8 <__smakebuf_r+0x7c>)
 8007672:	62b3      	str	r3, [r6, #40]	; 0x28
 8007674:	89a3      	ldrh	r3, [r4, #12]
 8007676:	6020      	str	r0, [r4, #0]
 8007678:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800767c:	81a3      	strh	r3, [r4, #12]
 800767e:	9b00      	ldr	r3, [sp, #0]
 8007680:	6163      	str	r3, [r4, #20]
 8007682:	9b01      	ldr	r3, [sp, #4]
 8007684:	6120      	str	r0, [r4, #16]
 8007686:	b15b      	cbz	r3, 80076a0 <__smakebuf_r+0x74>
 8007688:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800768c:	4630      	mov	r0, r6
 800768e:	f000 fc6b 	bl	8007f68 <_isatty_r>
 8007692:	b128      	cbz	r0, 80076a0 <__smakebuf_r+0x74>
 8007694:	89a3      	ldrh	r3, [r4, #12]
 8007696:	f023 0303 	bic.w	r3, r3, #3
 800769a:	f043 0301 	orr.w	r3, r3, #1
 800769e:	81a3      	strh	r3, [r4, #12]
 80076a0:	89a0      	ldrh	r0, [r4, #12]
 80076a2:	4305      	orrs	r5, r0
 80076a4:	81a5      	strh	r5, [r4, #12]
 80076a6:	e7cd      	b.n	8007644 <__smakebuf_r+0x18>
 80076a8:	08007439 	.word	0x08007439

080076ac <malloc>:
 80076ac:	4b02      	ldr	r3, [pc, #8]	; (80076b8 <malloc+0xc>)
 80076ae:	4601      	mov	r1, r0
 80076b0:	6818      	ldr	r0, [r3, #0]
 80076b2:	f000 b86f 	b.w	8007794 <_malloc_r>
 80076b6:	bf00      	nop
 80076b8:	20000010 	.word	0x20000010

080076bc <_free_r>:
 80076bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80076be:	2900      	cmp	r1, #0
 80076c0:	d044      	beq.n	800774c <_free_r+0x90>
 80076c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80076c6:	9001      	str	r0, [sp, #4]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	f1a1 0404 	sub.w	r4, r1, #4
 80076ce:	bfb8      	it	lt
 80076d0:	18e4      	addlt	r4, r4, r3
 80076d2:	f000 fc6b 	bl	8007fac <__malloc_lock>
 80076d6:	4a1e      	ldr	r2, [pc, #120]	; (8007750 <_free_r+0x94>)
 80076d8:	9801      	ldr	r0, [sp, #4]
 80076da:	6813      	ldr	r3, [r2, #0]
 80076dc:	b933      	cbnz	r3, 80076ec <_free_r+0x30>
 80076de:	6063      	str	r3, [r4, #4]
 80076e0:	6014      	str	r4, [r2, #0]
 80076e2:	b003      	add	sp, #12
 80076e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80076e8:	f000 bc66 	b.w	8007fb8 <__malloc_unlock>
 80076ec:	42a3      	cmp	r3, r4
 80076ee:	d908      	bls.n	8007702 <_free_r+0x46>
 80076f0:	6825      	ldr	r5, [r4, #0]
 80076f2:	1961      	adds	r1, r4, r5
 80076f4:	428b      	cmp	r3, r1
 80076f6:	bf01      	itttt	eq
 80076f8:	6819      	ldreq	r1, [r3, #0]
 80076fa:	685b      	ldreq	r3, [r3, #4]
 80076fc:	1949      	addeq	r1, r1, r5
 80076fe:	6021      	streq	r1, [r4, #0]
 8007700:	e7ed      	b.n	80076de <_free_r+0x22>
 8007702:	461a      	mov	r2, r3
 8007704:	685b      	ldr	r3, [r3, #4]
 8007706:	b10b      	cbz	r3, 800770c <_free_r+0x50>
 8007708:	42a3      	cmp	r3, r4
 800770a:	d9fa      	bls.n	8007702 <_free_r+0x46>
 800770c:	6811      	ldr	r1, [r2, #0]
 800770e:	1855      	adds	r5, r2, r1
 8007710:	42a5      	cmp	r5, r4
 8007712:	d10b      	bne.n	800772c <_free_r+0x70>
 8007714:	6824      	ldr	r4, [r4, #0]
 8007716:	4421      	add	r1, r4
 8007718:	1854      	adds	r4, r2, r1
 800771a:	42a3      	cmp	r3, r4
 800771c:	6011      	str	r1, [r2, #0]
 800771e:	d1e0      	bne.n	80076e2 <_free_r+0x26>
 8007720:	681c      	ldr	r4, [r3, #0]
 8007722:	685b      	ldr	r3, [r3, #4]
 8007724:	6053      	str	r3, [r2, #4]
 8007726:	4421      	add	r1, r4
 8007728:	6011      	str	r1, [r2, #0]
 800772a:	e7da      	b.n	80076e2 <_free_r+0x26>
 800772c:	d902      	bls.n	8007734 <_free_r+0x78>
 800772e:	230c      	movs	r3, #12
 8007730:	6003      	str	r3, [r0, #0]
 8007732:	e7d6      	b.n	80076e2 <_free_r+0x26>
 8007734:	6825      	ldr	r5, [r4, #0]
 8007736:	1961      	adds	r1, r4, r5
 8007738:	428b      	cmp	r3, r1
 800773a:	bf04      	itt	eq
 800773c:	6819      	ldreq	r1, [r3, #0]
 800773e:	685b      	ldreq	r3, [r3, #4]
 8007740:	6063      	str	r3, [r4, #4]
 8007742:	bf04      	itt	eq
 8007744:	1949      	addeq	r1, r1, r5
 8007746:	6021      	streq	r1, [r4, #0]
 8007748:	6054      	str	r4, [r2, #4]
 800774a:	e7ca      	b.n	80076e2 <_free_r+0x26>
 800774c:	b003      	add	sp, #12
 800774e:	bd30      	pop	{r4, r5, pc}
 8007750:	20004d38 	.word	0x20004d38

08007754 <sbrk_aligned>:
 8007754:	b570      	push	{r4, r5, r6, lr}
 8007756:	4e0e      	ldr	r6, [pc, #56]	; (8007790 <sbrk_aligned+0x3c>)
 8007758:	460c      	mov	r4, r1
 800775a:	6831      	ldr	r1, [r6, #0]
 800775c:	4605      	mov	r5, r0
 800775e:	b911      	cbnz	r1, 8007766 <sbrk_aligned+0x12>
 8007760:	f000 fb7a 	bl	8007e58 <_sbrk_r>
 8007764:	6030      	str	r0, [r6, #0]
 8007766:	4621      	mov	r1, r4
 8007768:	4628      	mov	r0, r5
 800776a:	f000 fb75 	bl	8007e58 <_sbrk_r>
 800776e:	1c43      	adds	r3, r0, #1
 8007770:	d00a      	beq.n	8007788 <sbrk_aligned+0x34>
 8007772:	1cc4      	adds	r4, r0, #3
 8007774:	f024 0403 	bic.w	r4, r4, #3
 8007778:	42a0      	cmp	r0, r4
 800777a:	d007      	beq.n	800778c <sbrk_aligned+0x38>
 800777c:	1a21      	subs	r1, r4, r0
 800777e:	4628      	mov	r0, r5
 8007780:	f000 fb6a 	bl	8007e58 <_sbrk_r>
 8007784:	3001      	adds	r0, #1
 8007786:	d101      	bne.n	800778c <sbrk_aligned+0x38>
 8007788:	f04f 34ff 	mov.w	r4, #4294967295
 800778c:	4620      	mov	r0, r4
 800778e:	bd70      	pop	{r4, r5, r6, pc}
 8007790:	20004d3c 	.word	0x20004d3c

08007794 <_malloc_r>:
 8007794:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007798:	1ccd      	adds	r5, r1, #3
 800779a:	f025 0503 	bic.w	r5, r5, #3
 800779e:	3508      	adds	r5, #8
 80077a0:	2d0c      	cmp	r5, #12
 80077a2:	bf38      	it	cc
 80077a4:	250c      	movcc	r5, #12
 80077a6:	2d00      	cmp	r5, #0
 80077a8:	4607      	mov	r7, r0
 80077aa:	db01      	blt.n	80077b0 <_malloc_r+0x1c>
 80077ac:	42a9      	cmp	r1, r5
 80077ae:	d905      	bls.n	80077bc <_malloc_r+0x28>
 80077b0:	230c      	movs	r3, #12
 80077b2:	603b      	str	r3, [r7, #0]
 80077b4:	2600      	movs	r6, #0
 80077b6:	4630      	mov	r0, r6
 80077b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80077bc:	4e2e      	ldr	r6, [pc, #184]	; (8007878 <_malloc_r+0xe4>)
 80077be:	f000 fbf5 	bl	8007fac <__malloc_lock>
 80077c2:	6833      	ldr	r3, [r6, #0]
 80077c4:	461c      	mov	r4, r3
 80077c6:	bb34      	cbnz	r4, 8007816 <_malloc_r+0x82>
 80077c8:	4629      	mov	r1, r5
 80077ca:	4638      	mov	r0, r7
 80077cc:	f7ff ffc2 	bl	8007754 <sbrk_aligned>
 80077d0:	1c43      	adds	r3, r0, #1
 80077d2:	4604      	mov	r4, r0
 80077d4:	d14d      	bne.n	8007872 <_malloc_r+0xde>
 80077d6:	6834      	ldr	r4, [r6, #0]
 80077d8:	4626      	mov	r6, r4
 80077da:	2e00      	cmp	r6, #0
 80077dc:	d140      	bne.n	8007860 <_malloc_r+0xcc>
 80077de:	6823      	ldr	r3, [r4, #0]
 80077e0:	4631      	mov	r1, r6
 80077e2:	4638      	mov	r0, r7
 80077e4:	eb04 0803 	add.w	r8, r4, r3
 80077e8:	f000 fb36 	bl	8007e58 <_sbrk_r>
 80077ec:	4580      	cmp	r8, r0
 80077ee:	d13a      	bne.n	8007866 <_malloc_r+0xd2>
 80077f0:	6821      	ldr	r1, [r4, #0]
 80077f2:	3503      	adds	r5, #3
 80077f4:	1a6d      	subs	r5, r5, r1
 80077f6:	f025 0503 	bic.w	r5, r5, #3
 80077fa:	3508      	adds	r5, #8
 80077fc:	2d0c      	cmp	r5, #12
 80077fe:	bf38      	it	cc
 8007800:	250c      	movcc	r5, #12
 8007802:	4629      	mov	r1, r5
 8007804:	4638      	mov	r0, r7
 8007806:	f7ff ffa5 	bl	8007754 <sbrk_aligned>
 800780a:	3001      	adds	r0, #1
 800780c:	d02b      	beq.n	8007866 <_malloc_r+0xd2>
 800780e:	6823      	ldr	r3, [r4, #0]
 8007810:	442b      	add	r3, r5
 8007812:	6023      	str	r3, [r4, #0]
 8007814:	e00e      	b.n	8007834 <_malloc_r+0xa0>
 8007816:	6822      	ldr	r2, [r4, #0]
 8007818:	1b52      	subs	r2, r2, r5
 800781a:	d41e      	bmi.n	800785a <_malloc_r+0xc6>
 800781c:	2a0b      	cmp	r2, #11
 800781e:	d916      	bls.n	800784e <_malloc_r+0xba>
 8007820:	1961      	adds	r1, r4, r5
 8007822:	42a3      	cmp	r3, r4
 8007824:	6025      	str	r5, [r4, #0]
 8007826:	bf18      	it	ne
 8007828:	6059      	strne	r1, [r3, #4]
 800782a:	6863      	ldr	r3, [r4, #4]
 800782c:	bf08      	it	eq
 800782e:	6031      	streq	r1, [r6, #0]
 8007830:	5162      	str	r2, [r4, r5]
 8007832:	604b      	str	r3, [r1, #4]
 8007834:	4638      	mov	r0, r7
 8007836:	f104 060b 	add.w	r6, r4, #11
 800783a:	f000 fbbd 	bl	8007fb8 <__malloc_unlock>
 800783e:	f026 0607 	bic.w	r6, r6, #7
 8007842:	1d23      	adds	r3, r4, #4
 8007844:	1af2      	subs	r2, r6, r3
 8007846:	d0b6      	beq.n	80077b6 <_malloc_r+0x22>
 8007848:	1b9b      	subs	r3, r3, r6
 800784a:	50a3      	str	r3, [r4, r2]
 800784c:	e7b3      	b.n	80077b6 <_malloc_r+0x22>
 800784e:	6862      	ldr	r2, [r4, #4]
 8007850:	42a3      	cmp	r3, r4
 8007852:	bf0c      	ite	eq
 8007854:	6032      	streq	r2, [r6, #0]
 8007856:	605a      	strne	r2, [r3, #4]
 8007858:	e7ec      	b.n	8007834 <_malloc_r+0xa0>
 800785a:	4623      	mov	r3, r4
 800785c:	6864      	ldr	r4, [r4, #4]
 800785e:	e7b2      	b.n	80077c6 <_malloc_r+0x32>
 8007860:	4634      	mov	r4, r6
 8007862:	6876      	ldr	r6, [r6, #4]
 8007864:	e7b9      	b.n	80077da <_malloc_r+0x46>
 8007866:	230c      	movs	r3, #12
 8007868:	603b      	str	r3, [r7, #0]
 800786a:	4638      	mov	r0, r7
 800786c:	f000 fba4 	bl	8007fb8 <__malloc_unlock>
 8007870:	e7a1      	b.n	80077b6 <_malloc_r+0x22>
 8007872:	6025      	str	r5, [r4, #0]
 8007874:	e7de      	b.n	8007834 <_malloc_r+0xa0>
 8007876:	bf00      	nop
 8007878:	20004d38 	.word	0x20004d38

0800787c <__sfputc_r>:
 800787c:	6893      	ldr	r3, [r2, #8]
 800787e:	3b01      	subs	r3, #1
 8007880:	2b00      	cmp	r3, #0
 8007882:	b410      	push	{r4}
 8007884:	6093      	str	r3, [r2, #8]
 8007886:	da08      	bge.n	800789a <__sfputc_r+0x1e>
 8007888:	6994      	ldr	r4, [r2, #24]
 800788a:	42a3      	cmp	r3, r4
 800788c:	db01      	blt.n	8007892 <__sfputc_r+0x16>
 800788e:	290a      	cmp	r1, #10
 8007890:	d103      	bne.n	800789a <__sfputc_r+0x1e>
 8007892:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007896:	f7ff bc29 	b.w	80070ec <__swbuf_r>
 800789a:	6813      	ldr	r3, [r2, #0]
 800789c:	1c58      	adds	r0, r3, #1
 800789e:	6010      	str	r0, [r2, #0]
 80078a0:	7019      	strb	r1, [r3, #0]
 80078a2:	4608      	mov	r0, r1
 80078a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80078a8:	4770      	bx	lr

080078aa <__sfputs_r>:
 80078aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078ac:	4606      	mov	r6, r0
 80078ae:	460f      	mov	r7, r1
 80078b0:	4614      	mov	r4, r2
 80078b2:	18d5      	adds	r5, r2, r3
 80078b4:	42ac      	cmp	r4, r5
 80078b6:	d101      	bne.n	80078bc <__sfputs_r+0x12>
 80078b8:	2000      	movs	r0, #0
 80078ba:	e007      	b.n	80078cc <__sfputs_r+0x22>
 80078bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078c0:	463a      	mov	r2, r7
 80078c2:	4630      	mov	r0, r6
 80078c4:	f7ff ffda 	bl	800787c <__sfputc_r>
 80078c8:	1c43      	adds	r3, r0, #1
 80078ca:	d1f3      	bne.n	80078b4 <__sfputs_r+0xa>
 80078cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080078d0 <_vfiprintf_r>:
 80078d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078d4:	460d      	mov	r5, r1
 80078d6:	b09d      	sub	sp, #116	; 0x74
 80078d8:	4614      	mov	r4, r2
 80078da:	4698      	mov	r8, r3
 80078dc:	4606      	mov	r6, r0
 80078de:	b118      	cbz	r0, 80078e8 <_vfiprintf_r+0x18>
 80078e0:	6983      	ldr	r3, [r0, #24]
 80078e2:	b90b      	cbnz	r3, 80078e8 <_vfiprintf_r+0x18>
 80078e4:	f7ff fddc 	bl	80074a0 <__sinit>
 80078e8:	4b89      	ldr	r3, [pc, #548]	; (8007b10 <_vfiprintf_r+0x240>)
 80078ea:	429d      	cmp	r5, r3
 80078ec:	d11b      	bne.n	8007926 <_vfiprintf_r+0x56>
 80078ee:	6875      	ldr	r5, [r6, #4]
 80078f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80078f2:	07d9      	lsls	r1, r3, #31
 80078f4:	d405      	bmi.n	8007902 <_vfiprintf_r+0x32>
 80078f6:	89ab      	ldrh	r3, [r5, #12]
 80078f8:	059a      	lsls	r2, r3, #22
 80078fa:	d402      	bmi.n	8007902 <_vfiprintf_r+0x32>
 80078fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80078fe:	f7ff fe6d 	bl	80075dc <__retarget_lock_acquire_recursive>
 8007902:	89ab      	ldrh	r3, [r5, #12]
 8007904:	071b      	lsls	r3, r3, #28
 8007906:	d501      	bpl.n	800790c <_vfiprintf_r+0x3c>
 8007908:	692b      	ldr	r3, [r5, #16]
 800790a:	b9eb      	cbnz	r3, 8007948 <_vfiprintf_r+0x78>
 800790c:	4629      	mov	r1, r5
 800790e:	4630      	mov	r0, r6
 8007910:	f7ff fc3e 	bl	8007190 <__swsetup_r>
 8007914:	b1c0      	cbz	r0, 8007948 <_vfiprintf_r+0x78>
 8007916:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007918:	07dc      	lsls	r4, r3, #31
 800791a:	d50e      	bpl.n	800793a <_vfiprintf_r+0x6a>
 800791c:	f04f 30ff 	mov.w	r0, #4294967295
 8007920:	b01d      	add	sp, #116	; 0x74
 8007922:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007926:	4b7b      	ldr	r3, [pc, #492]	; (8007b14 <_vfiprintf_r+0x244>)
 8007928:	429d      	cmp	r5, r3
 800792a:	d101      	bne.n	8007930 <_vfiprintf_r+0x60>
 800792c:	68b5      	ldr	r5, [r6, #8]
 800792e:	e7df      	b.n	80078f0 <_vfiprintf_r+0x20>
 8007930:	4b79      	ldr	r3, [pc, #484]	; (8007b18 <_vfiprintf_r+0x248>)
 8007932:	429d      	cmp	r5, r3
 8007934:	bf08      	it	eq
 8007936:	68f5      	ldreq	r5, [r6, #12]
 8007938:	e7da      	b.n	80078f0 <_vfiprintf_r+0x20>
 800793a:	89ab      	ldrh	r3, [r5, #12]
 800793c:	0598      	lsls	r0, r3, #22
 800793e:	d4ed      	bmi.n	800791c <_vfiprintf_r+0x4c>
 8007940:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007942:	f7ff fe4c 	bl	80075de <__retarget_lock_release_recursive>
 8007946:	e7e9      	b.n	800791c <_vfiprintf_r+0x4c>
 8007948:	2300      	movs	r3, #0
 800794a:	9309      	str	r3, [sp, #36]	; 0x24
 800794c:	2320      	movs	r3, #32
 800794e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007952:	f8cd 800c 	str.w	r8, [sp, #12]
 8007956:	2330      	movs	r3, #48	; 0x30
 8007958:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007b1c <_vfiprintf_r+0x24c>
 800795c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007960:	f04f 0901 	mov.w	r9, #1
 8007964:	4623      	mov	r3, r4
 8007966:	469a      	mov	sl, r3
 8007968:	f813 2b01 	ldrb.w	r2, [r3], #1
 800796c:	b10a      	cbz	r2, 8007972 <_vfiprintf_r+0xa2>
 800796e:	2a25      	cmp	r2, #37	; 0x25
 8007970:	d1f9      	bne.n	8007966 <_vfiprintf_r+0x96>
 8007972:	ebba 0b04 	subs.w	fp, sl, r4
 8007976:	d00b      	beq.n	8007990 <_vfiprintf_r+0xc0>
 8007978:	465b      	mov	r3, fp
 800797a:	4622      	mov	r2, r4
 800797c:	4629      	mov	r1, r5
 800797e:	4630      	mov	r0, r6
 8007980:	f7ff ff93 	bl	80078aa <__sfputs_r>
 8007984:	3001      	adds	r0, #1
 8007986:	f000 80aa 	beq.w	8007ade <_vfiprintf_r+0x20e>
 800798a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800798c:	445a      	add	r2, fp
 800798e:	9209      	str	r2, [sp, #36]	; 0x24
 8007990:	f89a 3000 	ldrb.w	r3, [sl]
 8007994:	2b00      	cmp	r3, #0
 8007996:	f000 80a2 	beq.w	8007ade <_vfiprintf_r+0x20e>
 800799a:	2300      	movs	r3, #0
 800799c:	f04f 32ff 	mov.w	r2, #4294967295
 80079a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80079a4:	f10a 0a01 	add.w	sl, sl, #1
 80079a8:	9304      	str	r3, [sp, #16]
 80079aa:	9307      	str	r3, [sp, #28]
 80079ac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80079b0:	931a      	str	r3, [sp, #104]	; 0x68
 80079b2:	4654      	mov	r4, sl
 80079b4:	2205      	movs	r2, #5
 80079b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079ba:	4858      	ldr	r0, [pc, #352]	; (8007b1c <_vfiprintf_r+0x24c>)
 80079bc:	f7f8 fc40 	bl	8000240 <memchr>
 80079c0:	9a04      	ldr	r2, [sp, #16]
 80079c2:	b9d8      	cbnz	r0, 80079fc <_vfiprintf_r+0x12c>
 80079c4:	06d1      	lsls	r1, r2, #27
 80079c6:	bf44      	itt	mi
 80079c8:	2320      	movmi	r3, #32
 80079ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80079ce:	0713      	lsls	r3, r2, #28
 80079d0:	bf44      	itt	mi
 80079d2:	232b      	movmi	r3, #43	; 0x2b
 80079d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80079d8:	f89a 3000 	ldrb.w	r3, [sl]
 80079dc:	2b2a      	cmp	r3, #42	; 0x2a
 80079de:	d015      	beq.n	8007a0c <_vfiprintf_r+0x13c>
 80079e0:	9a07      	ldr	r2, [sp, #28]
 80079e2:	4654      	mov	r4, sl
 80079e4:	2000      	movs	r0, #0
 80079e6:	f04f 0c0a 	mov.w	ip, #10
 80079ea:	4621      	mov	r1, r4
 80079ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 80079f0:	3b30      	subs	r3, #48	; 0x30
 80079f2:	2b09      	cmp	r3, #9
 80079f4:	d94e      	bls.n	8007a94 <_vfiprintf_r+0x1c4>
 80079f6:	b1b0      	cbz	r0, 8007a26 <_vfiprintf_r+0x156>
 80079f8:	9207      	str	r2, [sp, #28]
 80079fa:	e014      	b.n	8007a26 <_vfiprintf_r+0x156>
 80079fc:	eba0 0308 	sub.w	r3, r0, r8
 8007a00:	fa09 f303 	lsl.w	r3, r9, r3
 8007a04:	4313      	orrs	r3, r2
 8007a06:	9304      	str	r3, [sp, #16]
 8007a08:	46a2      	mov	sl, r4
 8007a0a:	e7d2      	b.n	80079b2 <_vfiprintf_r+0xe2>
 8007a0c:	9b03      	ldr	r3, [sp, #12]
 8007a0e:	1d19      	adds	r1, r3, #4
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	9103      	str	r1, [sp, #12]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	bfbb      	ittet	lt
 8007a18:	425b      	neglt	r3, r3
 8007a1a:	f042 0202 	orrlt.w	r2, r2, #2
 8007a1e:	9307      	strge	r3, [sp, #28]
 8007a20:	9307      	strlt	r3, [sp, #28]
 8007a22:	bfb8      	it	lt
 8007a24:	9204      	strlt	r2, [sp, #16]
 8007a26:	7823      	ldrb	r3, [r4, #0]
 8007a28:	2b2e      	cmp	r3, #46	; 0x2e
 8007a2a:	d10c      	bne.n	8007a46 <_vfiprintf_r+0x176>
 8007a2c:	7863      	ldrb	r3, [r4, #1]
 8007a2e:	2b2a      	cmp	r3, #42	; 0x2a
 8007a30:	d135      	bne.n	8007a9e <_vfiprintf_r+0x1ce>
 8007a32:	9b03      	ldr	r3, [sp, #12]
 8007a34:	1d1a      	adds	r2, r3, #4
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	9203      	str	r2, [sp, #12]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	bfb8      	it	lt
 8007a3e:	f04f 33ff 	movlt.w	r3, #4294967295
 8007a42:	3402      	adds	r4, #2
 8007a44:	9305      	str	r3, [sp, #20]
 8007a46:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007b2c <_vfiprintf_r+0x25c>
 8007a4a:	7821      	ldrb	r1, [r4, #0]
 8007a4c:	2203      	movs	r2, #3
 8007a4e:	4650      	mov	r0, sl
 8007a50:	f7f8 fbf6 	bl	8000240 <memchr>
 8007a54:	b140      	cbz	r0, 8007a68 <_vfiprintf_r+0x198>
 8007a56:	2340      	movs	r3, #64	; 0x40
 8007a58:	eba0 000a 	sub.w	r0, r0, sl
 8007a5c:	fa03 f000 	lsl.w	r0, r3, r0
 8007a60:	9b04      	ldr	r3, [sp, #16]
 8007a62:	4303      	orrs	r3, r0
 8007a64:	3401      	adds	r4, #1
 8007a66:	9304      	str	r3, [sp, #16]
 8007a68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a6c:	482c      	ldr	r0, [pc, #176]	; (8007b20 <_vfiprintf_r+0x250>)
 8007a6e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007a72:	2206      	movs	r2, #6
 8007a74:	f7f8 fbe4 	bl	8000240 <memchr>
 8007a78:	2800      	cmp	r0, #0
 8007a7a:	d03f      	beq.n	8007afc <_vfiprintf_r+0x22c>
 8007a7c:	4b29      	ldr	r3, [pc, #164]	; (8007b24 <_vfiprintf_r+0x254>)
 8007a7e:	bb1b      	cbnz	r3, 8007ac8 <_vfiprintf_r+0x1f8>
 8007a80:	9b03      	ldr	r3, [sp, #12]
 8007a82:	3307      	adds	r3, #7
 8007a84:	f023 0307 	bic.w	r3, r3, #7
 8007a88:	3308      	adds	r3, #8
 8007a8a:	9303      	str	r3, [sp, #12]
 8007a8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a8e:	443b      	add	r3, r7
 8007a90:	9309      	str	r3, [sp, #36]	; 0x24
 8007a92:	e767      	b.n	8007964 <_vfiprintf_r+0x94>
 8007a94:	fb0c 3202 	mla	r2, ip, r2, r3
 8007a98:	460c      	mov	r4, r1
 8007a9a:	2001      	movs	r0, #1
 8007a9c:	e7a5      	b.n	80079ea <_vfiprintf_r+0x11a>
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	3401      	adds	r4, #1
 8007aa2:	9305      	str	r3, [sp, #20]
 8007aa4:	4619      	mov	r1, r3
 8007aa6:	f04f 0c0a 	mov.w	ip, #10
 8007aaa:	4620      	mov	r0, r4
 8007aac:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007ab0:	3a30      	subs	r2, #48	; 0x30
 8007ab2:	2a09      	cmp	r2, #9
 8007ab4:	d903      	bls.n	8007abe <_vfiprintf_r+0x1ee>
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d0c5      	beq.n	8007a46 <_vfiprintf_r+0x176>
 8007aba:	9105      	str	r1, [sp, #20]
 8007abc:	e7c3      	b.n	8007a46 <_vfiprintf_r+0x176>
 8007abe:	fb0c 2101 	mla	r1, ip, r1, r2
 8007ac2:	4604      	mov	r4, r0
 8007ac4:	2301      	movs	r3, #1
 8007ac6:	e7f0      	b.n	8007aaa <_vfiprintf_r+0x1da>
 8007ac8:	ab03      	add	r3, sp, #12
 8007aca:	9300      	str	r3, [sp, #0]
 8007acc:	462a      	mov	r2, r5
 8007ace:	4b16      	ldr	r3, [pc, #88]	; (8007b28 <_vfiprintf_r+0x258>)
 8007ad0:	a904      	add	r1, sp, #16
 8007ad2:	4630      	mov	r0, r6
 8007ad4:	f3af 8000 	nop.w
 8007ad8:	4607      	mov	r7, r0
 8007ada:	1c78      	adds	r0, r7, #1
 8007adc:	d1d6      	bne.n	8007a8c <_vfiprintf_r+0x1bc>
 8007ade:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007ae0:	07d9      	lsls	r1, r3, #31
 8007ae2:	d405      	bmi.n	8007af0 <_vfiprintf_r+0x220>
 8007ae4:	89ab      	ldrh	r3, [r5, #12]
 8007ae6:	059a      	lsls	r2, r3, #22
 8007ae8:	d402      	bmi.n	8007af0 <_vfiprintf_r+0x220>
 8007aea:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007aec:	f7ff fd77 	bl	80075de <__retarget_lock_release_recursive>
 8007af0:	89ab      	ldrh	r3, [r5, #12]
 8007af2:	065b      	lsls	r3, r3, #25
 8007af4:	f53f af12 	bmi.w	800791c <_vfiprintf_r+0x4c>
 8007af8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007afa:	e711      	b.n	8007920 <_vfiprintf_r+0x50>
 8007afc:	ab03      	add	r3, sp, #12
 8007afe:	9300      	str	r3, [sp, #0]
 8007b00:	462a      	mov	r2, r5
 8007b02:	4b09      	ldr	r3, [pc, #36]	; (8007b28 <_vfiprintf_r+0x258>)
 8007b04:	a904      	add	r1, sp, #16
 8007b06:	4630      	mov	r0, r6
 8007b08:	f000 f880 	bl	8007c0c <_printf_i>
 8007b0c:	e7e4      	b.n	8007ad8 <_vfiprintf_r+0x208>
 8007b0e:	bf00      	nop
 8007b10:	0800812c 	.word	0x0800812c
 8007b14:	0800814c 	.word	0x0800814c
 8007b18:	0800810c 	.word	0x0800810c
 8007b1c:	0800816c 	.word	0x0800816c
 8007b20:	08008176 	.word	0x08008176
 8007b24:	00000000 	.word	0x00000000
 8007b28:	080078ab 	.word	0x080078ab
 8007b2c:	08008172 	.word	0x08008172

08007b30 <_printf_common>:
 8007b30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b34:	4616      	mov	r6, r2
 8007b36:	4699      	mov	r9, r3
 8007b38:	688a      	ldr	r2, [r1, #8]
 8007b3a:	690b      	ldr	r3, [r1, #16]
 8007b3c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007b40:	4293      	cmp	r3, r2
 8007b42:	bfb8      	it	lt
 8007b44:	4613      	movlt	r3, r2
 8007b46:	6033      	str	r3, [r6, #0]
 8007b48:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007b4c:	4607      	mov	r7, r0
 8007b4e:	460c      	mov	r4, r1
 8007b50:	b10a      	cbz	r2, 8007b56 <_printf_common+0x26>
 8007b52:	3301      	adds	r3, #1
 8007b54:	6033      	str	r3, [r6, #0]
 8007b56:	6823      	ldr	r3, [r4, #0]
 8007b58:	0699      	lsls	r1, r3, #26
 8007b5a:	bf42      	ittt	mi
 8007b5c:	6833      	ldrmi	r3, [r6, #0]
 8007b5e:	3302      	addmi	r3, #2
 8007b60:	6033      	strmi	r3, [r6, #0]
 8007b62:	6825      	ldr	r5, [r4, #0]
 8007b64:	f015 0506 	ands.w	r5, r5, #6
 8007b68:	d106      	bne.n	8007b78 <_printf_common+0x48>
 8007b6a:	f104 0a19 	add.w	sl, r4, #25
 8007b6e:	68e3      	ldr	r3, [r4, #12]
 8007b70:	6832      	ldr	r2, [r6, #0]
 8007b72:	1a9b      	subs	r3, r3, r2
 8007b74:	42ab      	cmp	r3, r5
 8007b76:	dc26      	bgt.n	8007bc6 <_printf_common+0x96>
 8007b78:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007b7c:	1e13      	subs	r3, r2, #0
 8007b7e:	6822      	ldr	r2, [r4, #0]
 8007b80:	bf18      	it	ne
 8007b82:	2301      	movne	r3, #1
 8007b84:	0692      	lsls	r2, r2, #26
 8007b86:	d42b      	bmi.n	8007be0 <_printf_common+0xb0>
 8007b88:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007b8c:	4649      	mov	r1, r9
 8007b8e:	4638      	mov	r0, r7
 8007b90:	47c0      	blx	r8
 8007b92:	3001      	adds	r0, #1
 8007b94:	d01e      	beq.n	8007bd4 <_printf_common+0xa4>
 8007b96:	6823      	ldr	r3, [r4, #0]
 8007b98:	68e5      	ldr	r5, [r4, #12]
 8007b9a:	6832      	ldr	r2, [r6, #0]
 8007b9c:	f003 0306 	and.w	r3, r3, #6
 8007ba0:	2b04      	cmp	r3, #4
 8007ba2:	bf08      	it	eq
 8007ba4:	1aad      	subeq	r5, r5, r2
 8007ba6:	68a3      	ldr	r3, [r4, #8]
 8007ba8:	6922      	ldr	r2, [r4, #16]
 8007baa:	bf0c      	ite	eq
 8007bac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007bb0:	2500      	movne	r5, #0
 8007bb2:	4293      	cmp	r3, r2
 8007bb4:	bfc4      	itt	gt
 8007bb6:	1a9b      	subgt	r3, r3, r2
 8007bb8:	18ed      	addgt	r5, r5, r3
 8007bba:	2600      	movs	r6, #0
 8007bbc:	341a      	adds	r4, #26
 8007bbe:	42b5      	cmp	r5, r6
 8007bc0:	d11a      	bne.n	8007bf8 <_printf_common+0xc8>
 8007bc2:	2000      	movs	r0, #0
 8007bc4:	e008      	b.n	8007bd8 <_printf_common+0xa8>
 8007bc6:	2301      	movs	r3, #1
 8007bc8:	4652      	mov	r2, sl
 8007bca:	4649      	mov	r1, r9
 8007bcc:	4638      	mov	r0, r7
 8007bce:	47c0      	blx	r8
 8007bd0:	3001      	adds	r0, #1
 8007bd2:	d103      	bne.n	8007bdc <_printf_common+0xac>
 8007bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8007bd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bdc:	3501      	adds	r5, #1
 8007bde:	e7c6      	b.n	8007b6e <_printf_common+0x3e>
 8007be0:	18e1      	adds	r1, r4, r3
 8007be2:	1c5a      	adds	r2, r3, #1
 8007be4:	2030      	movs	r0, #48	; 0x30
 8007be6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007bea:	4422      	add	r2, r4
 8007bec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007bf0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007bf4:	3302      	adds	r3, #2
 8007bf6:	e7c7      	b.n	8007b88 <_printf_common+0x58>
 8007bf8:	2301      	movs	r3, #1
 8007bfa:	4622      	mov	r2, r4
 8007bfc:	4649      	mov	r1, r9
 8007bfe:	4638      	mov	r0, r7
 8007c00:	47c0      	blx	r8
 8007c02:	3001      	adds	r0, #1
 8007c04:	d0e6      	beq.n	8007bd4 <_printf_common+0xa4>
 8007c06:	3601      	adds	r6, #1
 8007c08:	e7d9      	b.n	8007bbe <_printf_common+0x8e>
	...

08007c0c <_printf_i>:
 8007c0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007c10:	7e0f      	ldrb	r7, [r1, #24]
 8007c12:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007c14:	2f78      	cmp	r7, #120	; 0x78
 8007c16:	4691      	mov	r9, r2
 8007c18:	4680      	mov	r8, r0
 8007c1a:	460c      	mov	r4, r1
 8007c1c:	469a      	mov	sl, r3
 8007c1e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007c22:	d807      	bhi.n	8007c34 <_printf_i+0x28>
 8007c24:	2f62      	cmp	r7, #98	; 0x62
 8007c26:	d80a      	bhi.n	8007c3e <_printf_i+0x32>
 8007c28:	2f00      	cmp	r7, #0
 8007c2a:	f000 80d8 	beq.w	8007dde <_printf_i+0x1d2>
 8007c2e:	2f58      	cmp	r7, #88	; 0x58
 8007c30:	f000 80a3 	beq.w	8007d7a <_printf_i+0x16e>
 8007c34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007c38:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007c3c:	e03a      	b.n	8007cb4 <_printf_i+0xa8>
 8007c3e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007c42:	2b15      	cmp	r3, #21
 8007c44:	d8f6      	bhi.n	8007c34 <_printf_i+0x28>
 8007c46:	a101      	add	r1, pc, #4	; (adr r1, 8007c4c <_printf_i+0x40>)
 8007c48:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007c4c:	08007ca5 	.word	0x08007ca5
 8007c50:	08007cb9 	.word	0x08007cb9
 8007c54:	08007c35 	.word	0x08007c35
 8007c58:	08007c35 	.word	0x08007c35
 8007c5c:	08007c35 	.word	0x08007c35
 8007c60:	08007c35 	.word	0x08007c35
 8007c64:	08007cb9 	.word	0x08007cb9
 8007c68:	08007c35 	.word	0x08007c35
 8007c6c:	08007c35 	.word	0x08007c35
 8007c70:	08007c35 	.word	0x08007c35
 8007c74:	08007c35 	.word	0x08007c35
 8007c78:	08007dc5 	.word	0x08007dc5
 8007c7c:	08007ce9 	.word	0x08007ce9
 8007c80:	08007da7 	.word	0x08007da7
 8007c84:	08007c35 	.word	0x08007c35
 8007c88:	08007c35 	.word	0x08007c35
 8007c8c:	08007de7 	.word	0x08007de7
 8007c90:	08007c35 	.word	0x08007c35
 8007c94:	08007ce9 	.word	0x08007ce9
 8007c98:	08007c35 	.word	0x08007c35
 8007c9c:	08007c35 	.word	0x08007c35
 8007ca0:	08007daf 	.word	0x08007daf
 8007ca4:	682b      	ldr	r3, [r5, #0]
 8007ca6:	1d1a      	adds	r2, r3, #4
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	602a      	str	r2, [r5, #0]
 8007cac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007cb0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007cb4:	2301      	movs	r3, #1
 8007cb6:	e0a3      	b.n	8007e00 <_printf_i+0x1f4>
 8007cb8:	6820      	ldr	r0, [r4, #0]
 8007cba:	6829      	ldr	r1, [r5, #0]
 8007cbc:	0606      	lsls	r6, r0, #24
 8007cbe:	f101 0304 	add.w	r3, r1, #4
 8007cc2:	d50a      	bpl.n	8007cda <_printf_i+0xce>
 8007cc4:	680e      	ldr	r6, [r1, #0]
 8007cc6:	602b      	str	r3, [r5, #0]
 8007cc8:	2e00      	cmp	r6, #0
 8007cca:	da03      	bge.n	8007cd4 <_printf_i+0xc8>
 8007ccc:	232d      	movs	r3, #45	; 0x2d
 8007cce:	4276      	negs	r6, r6
 8007cd0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007cd4:	485e      	ldr	r0, [pc, #376]	; (8007e50 <_printf_i+0x244>)
 8007cd6:	230a      	movs	r3, #10
 8007cd8:	e019      	b.n	8007d0e <_printf_i+0x102>
 8007cda:	680e      	ldr	r6, [r1, #0]
 8007cdc:	602b      	str	r3, [r5, #0]
 8007cde:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007ce2:	bf18      	it	ne
 8007ce4:	b236      	sxthne	r6, r6
 8007ce6:	e7ef      	b.n	8007cc8 <_printf_i+0xbc>
 8007ce8:	682b      	ldr	r3, [r5, #0]
 8007cea:	6820      	ldr	r0, [r4, #0]
 8007cec:	1d19      	adds	r1, r3, #4
 8007cee:	6029      	str	r1, [r5, #0]
 8007cf0:	0601      	lsls	r1, r0, #24
 8007cf2:	d501      	bpl.n	8007cf8 <_printf_i+0xec>
 8007cf4:	681e      	ldr	r6, [r3, #0]
 8007cf6:	e002      	b.n	8007cfe <_printf_i+0xf2>
 8007cf8:	0646      	lsls	r6, r0, #25
 8007cfa:	d5fb      	bpl.n	8007cf4 <_printf_i+0xe8>
 8007cfc:	881e      	ldrh	r6, [r3, #0]
 8007cfe:	4854      	ldr	r0, [pc, #336]	; (8007e50 <_printf_i+0x244>)
 8007d00:	2f6f      	cmp	r7, #111	; 0x6f
 8007d02:	bf0c      	ite	eq
 8007d04:	2308      	moveq	r3, #8
 8007d06:	230a      	movne	r3, #10
 8007d08:	2100      	movs	r1, #0
 8007d0a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007d0e:	6865      	ldr	r5, [r4, #4]
 8007d10:	60a5      	str	r5, [r4, #8]
 8007d12:	2d00      	cmp	r5, #0
 8007d14:	bfa2      	ittt	ge
 8007d16:	6821      	ldrge	r1, [r4, #0]
 8007d18:	f021 0104 	bicge.w	r1, r1, #4
 8007d1c:	6021      	strge	r1, [r4, #0]
 8007d1e:	b90e      	cbnz	r6, 8007d24 <_printf_i+0x118>
 8007d20:	2d00      	cmp	r5, #0
 8007d22:	d04d      	beq.n	8007dc0 <_printf_i+0x1b4>
 8007d24:	4615      	mov	r5, r2
 8007d26:	fbb6 f1f3 	udiv	r1, r6, r3
 8007d2a:	fb03 6711 	mls	r7, r3, r1, r6
 8007d2e:	5dc7      	ldrb	r7, [r0, r7]
 8007d30:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007d34:	4637      	mov	r7, r6
 8007d36:	42bb      	cmp	r3, r7
 8007d38:	460e      	mov	r6, r1
 8007d3a:	d9f4      	bls.n	8007d26 <_printf_i+0x11a>
 8007d3c:	2b08      	cmp	r3, #8
 8007d3e:	d10b      	bne.n	8007d58 <_printf_i+0x14c>
 8007d40:	6823      	ldr	r3, [r4, #0]
 8007d42:	07de      	lsls	r6, r3, #31
 8007d44:	d508      	bpl.n	8007d58 <_printf_i+0x14c>
 8007d46:	6923      	ldr	r3, [r4, #16]
 8007d48:	6861      	ldr	r1, [r4, #4]
 8007d4a:	4299      	cmp	r1, r3
 8007d4c:	bfde      	ittt	le
 8007d4e:	2330      	movle	r3, #48	; 0x30
 8007d50:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007d54:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007d58:	1b52      	subs	r2, r2, r5
 8007d5a:	6122      	str	r2, [r4, #16]
 8007d5c:	f8cd a000 	str.w	sl, [sp]
 8007d60:	464b      	mov	r3, r9
 8007d62:	aa03      	add	r2, sp, #12
 8007d64:	4621      	mov	r1, r4
 8007d66:	4640      	mov	r0, r8
 8007d68:	f7ff fee2 	bl	8007b30 <_printf_common>
 8007d6c:	3001      	adds	r0, #1
 8007d6e:	d14c      	bne.n	8007e0a <_printf_i+0x1fe>
 8007d70:	f04f 30ff 	mov.w	r0, #4294967295
 8007d74:	b004      	add	sp, #16
 8007d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d7a:	4835      	ldr	r0, [pc, #212]	; (8007e50 <_printf_i+0x244>)
 8007d7c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007d80:	6829      	ldr	r1, [r5, #0]
 8007d82:	6823      	ldr	r3, [r4, #0]
 8007d84:	f851 6b04 	ldr.w	r6, [r1], #4
 8007d88:	6029      	str	r1, [r5, #0]
 8007d8a:	061d      	lsls	r5, r3, #24
 8007d8c:	d514      	bpl.n	8007db8 <_printf_i+0x1ac>
 8007d8e:	07df      	lsls	r7, r3, #31
 8007d90:	bf44      	itt	mi
 8007d92:	f043 0320 	orrmi.w	r3, r3, #32
 8007d96:	6023      	strmi	r3, [r4, #0]
 8007d98:	b91e      	cbnz	r6, 8007da2 <_printf_i+0x196>
 8007d9a:	6823      	ldr	r3, [r4, #0]
 8007d9c:	f023 0320 	bic.w	r3, r3, #32
 8007da0:	6023      	str	r3, [r4, #0]
 8007da2:	2310      	movs	r3, #16
 8007da4:	e7b0      	b.n	8007d08 <_printf_i+0xfc>
 8007da6:	6823      	ldr	r3, [r4, #0]
 8007da8:	f043 0320 	orr.w	r3, r3, #32
 8007dac:	6023      	str	r3, [r4, #0]
 8007dae:	2378      	movs	r3, #120	; 0x78
 8007db0:	4828      	ldr	r0, [pc, #160]	; (8007e54 <_printf_i+0x248>)
 8007db2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007db6:	e7e3      	b.n	8007d80 <_printf_i+0x174>
 8007db8:	0659      	lsls	r1, r3, #25
 8007dba:	bf48      	it	mi
 8007dbc:	b2b6      	uxthmi	r6, r6
 8007dbe:	e7e6      	b.n	8007d8e <_printf_i+0x182>
 8007dc0:	4615      	mov	r5, r2
 8007dc2:	e7bb      	b.n	8007d3c <_printf_i+0x130>
 8007dc4:	682b      	ldr	r3, [r5, #0]
 8007dc6:	6826      	ldr	r6, [r4, #0]
 8007dc8:	6961      	ldr	r1, [r4, #20]
 8007dca:	1d18      	adds	r0, r3, #4
 8007dcc:	6028      	str	r0, [r5, #0]
 8007dce:	0635      	lsls	r5, r6, #24
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	d501      	bpl.n	8007dd8 <_printf_i+0x1cc>
 8007dd4:	6019      	str	r1, [r3, #0]
 8007dd6:	e002      	b.n	8007dde <_printf_i+0x1d2>
 8007dd8:	0670      	lsls	r0, r6, #25
 8007dda:	d5fb      	bpl.n	8007dd4 <_printf_i+0x1c8>
 8007ddc:	8019      	strh	r1, [r3, #0]
 8007dde:	2300      	movs	r3, #0
 8007de0:	6123      	str	r3, [r4, #16]
 8007de2:	4615      	mov	r5, r2
 8007de4:	e7ba      	b.n	8007d5c <_printf_i+0x150>
 8007de6:	682b      	ldr	r3, [r5, #0]
 8007de8:	1d1a      	adds	r2, r3, #4
 8007dea:	602a      	str	r2, [r5, #0]
 8007dec:	681d      	ldr	r5, [r3, #0]
 8007dee:	6862      	ldr	r2, [r4, #4]
 8007df0:	2100      	movs	r1, #0
 8007df2:	4628      	mov	r0, r5
 8007df4:	f7f8 fa24 	bl	8000240 <memchr>
 8007df8:	b108      	cbz	r0, 8007dfe <_printf_i+0x1f2>
 8007dfa:	1b40      	subs	r0, r0, r5
 8007dfc:	6060      	str	r0, [r4, #4]
 8007dfe:	6863      	ldr	r3, [r4, #4]
 8007e00:	6123      	str	r3, [r4, #16]
 8007e02:	2300      	movs	r3, #0
 8007e04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e08:	e7a8      	b.n	8007d5c <_printf_i+0x150>
 8007e0a:	6923      	ldr	r3, [r4, #16]
 8007e0c:	462a      	mov	r2, r5
 8007e0e:	4649      	mov	r1, r9
 8007e10:	4640      	mov	r0, r8
 8007e12:	47d0      	blx	sl
 8007e14:	3001      	adds	r0, #1
 8007e16:	d0ab      	beq.n	8007d70 <_printf_i+0x164>
 8007e18:	6823      	ldr	r3, [r4, #0]
 8007e1a:	079b      	lsls	r3, r3, #30
 8007e1c:	d413      	bmi.n	8007e46 <_printf_i+0x23a>
 8007e1e:	68e0      	ldr	r0, [r4, #12]
 8007e20:	9b03      	ldr	r3, [sp, #12]
 8007e22:	4298      	cmp	r0, r3
 8007e24:	bfb8      	it	lt
 8007e26:	4618      	movlt	r0, r3
 8007e28:	e7a4      	b.n	8007d74 <_printf_i+0x168>
 8007e2a:	2301      	movs	r3, #1
 8007e2c:	4632      	mov	r2, r6
 8007e2e:	4649      	mov	r1, r9
 8007e30:	4640      	mov	r0, r8
 8007e32:	47d0      	blx	sl
 8007e34:	3001      	adds	r0, #1
 8007e36:	d09b      	beq.n	8007d70 <_printf_i+0x164>
 8007e38:	3501      	adds	r5, #1
 8007e3a:	68e3      	ldr	r3, [r4, #12]
 8007e3c:	9903      	ldr	r1, [sp, #12]
 8007e3e:	1a5b      	subs	r3, r3, r1
 8007e40:	42ab      	cmp	r3, r5
 8007e42:	dcf2      	bgt.n	8007e2a <_printf_i+0x21e>
 8007e44:	e7eb      	b.n	8007e1e <_printf_i+0x212>
 8007e46:	2500      	movs	r5, #0
 8007e48:	f104 0619 	add.w	r6, r4, #25
 8007e4c:	e7f5      	b.n	8007e3a <_printf_i+0x22e>
 8007e4e:	bf00      	nop
 8007e50:	0800817d 	.word	0x0800817d
 8007e54:	0800818e 	.word	0x0800818e

08007e58 <_sbrk_r>:
 8007e58:	b538      	push	{r3, r4, r5, lr}
 8007e5a:	4d06      	ldr	r5, [pc, #24]	; (8007e74 <_sbrk_r+0x1c>)
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	4604      	mov	r4, r0
 8007e60:	4608      	mov	r0, r1
 8007e62:	602b      	str	r3, [r5, #0]
 8007e64:	f7fa f898 	bl	8001f98 <_sbrk>
 8007e68:	1c43      	adds	r3, r0, #1
 8007e6a:	d102      	bne.n	8007e72 <_sbrk_r+0x1a>
 8007e6c:	682b      	ldr	r3, [r5, #0]
 8007e6e:	b103      	cbz	r3, 8007e72 <_sbrk_r+0x1a>
 8007e70:	6023      	str	r3, [r4, #0]
 8007e72:	bd38      	pop	{r3, r4, r5, pc}
 8007e74:	20004d40 	.word	0x20004d40

08007e78 <__sread>:
 8007e78:	b510      	push	{r4, lr}
 8007e7a:	460c      	mov	r4, r1
 8007e7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e80:	f000 f8a0 	bl	8007fc4 <_read_r>
 8007e84:	2800      	cmp	r0, #0
 8007e86:	bfab      	itete	ge
 8007e88:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007e8a:	89a3      	ldrhlt	r3, [r4, #12]
 8007e8c:	181b      	addge	r3, r3, r0
 8007e8e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007e92:	bfac      	ite	ge
 8007e94:	6563      	strge	r3, [r4, #84]	; 0x54
 8007e96:	81a3      	strhlt	r3, [r4, #12]
 8007e98:	bd10      	pop	{r4, pc}

08007e9a <__swrite>:
 8007e9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e9e:	461f      	mov	r7, r3
 8007ea0:	898b      	ldrh	r3, [r1, #12]
 8007ea2:	05db      	lsls	r3, r3, #23
 8007ea4:	4605      	mov	r5, r0
 8007ea6:	460c      	mov	r4, r1
 8007ea8:	4616      	mov	r6, r2
 8007eaa:	d505      	bpl.n	8007eb8 <__swrite+0x1e>
 8007eac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007eb0:	2302      	movs	r3, #2
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	f000 f868 	bl	8007f88 <_lseek_r>
 8007eb8:	89a3      	ldrh	r3, [r4, #12]
 8007eba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007ebe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007ec2:	81a3      	strh	r3, [r4, #12]
 8007ec4:	4632      	mov	r2, r6
 8007ec6:	463b      	mov	r3, r7
 8007ec8:	4628      	mov	r0, r5
 8007eca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007ece:	f000 b817 	b.w	8007f00 <_write_r>

08007ed2 <__sseek>:
 8007ed2:	b510      	push	{r4, lr}
 8007ed4:	460c      	mov	r4, r1
 8007ed6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007eda:	f000 f855 	bl	8007f88 <_lseek_r>
 8007ede:	1c43      	adds	r3, r0, #1
 8007ee0:	89a3      	ldrh	r3, [r4, #12]
 8007ee2:	bf15      	itete	ne
 8007ee4:	6560      	strne	r0, [r4, #84]	; 0x54
 8007ee6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007eea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007eee:	81a3      	strheq	r3, [r4, #12]
 8007ef0:	bf18      	it	ne
 8007ef2:	81a3      	strhne	r3, [r4, #12]
 8007ef4:	bd10      	pop	{r4, pc}

08007ef6 <__sclose>:
 8007ef6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007efa:	f000 b813 	b.w	8007f24 <_close_r>
	...

08007f00 <_write_r>:
 8007f00:	b538      	push	{r3, r4, r5, lr}
 8007f02:	4d07      	ldr	r5, [pc, #28]	; (8007f20 <_write_r+0x20>)
 8007f04:	4604      	mov	r4, r0
 8007f06:	4608      	mov	r0, r1
 8007f08:	4611      	mov	r1, r2
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	602a      	str	r2, [r5, #0]
 8007f0e:	461a      	mov	r2, r3
 8007f10:	f7f9 fff1 	bl	8001ef6 <_write>
 8007f14:	1c43      	adds	r3, r0, #1
 8007f16:	d102      	bne.n	8007f1e <_write_r+0x1e>
 8007f18:	682b      	ldr	r3, [r5, #0]
 8007f1a:	b103      	cbz	r3, 8007f1e <_write_r+0x1e>
 8007f1c:	6023      	str	r3, [r4, #0]
 8007f1e:	bd38      	pop	{r3, r4, r5, pc}
 8007f20:	20004d40 	.word	0x20004d40

08007f24 <_close_r>:
 8007f24:	b538      	push	{r3, r4, r5, lr}
 8007f26:	4d06      	ldr	r5, [pc, #24]	; (8007f40 <_close_r+0x1c>)
 8007f28:	2300      	movs	r3, #0
 8007f2a:	4604      	mov	r4, r0
 8007f2c:	4608      	mov	r0, r1
 8007f2e:	602b      	str	r3, [r5, #0]
 8007f30:	f7f9 fffd 	bl	8001f2e <_close>
 8007f34:	1c43      	adds	r3, r0, #1
 8007f36:	d102      	bne.n	8007f3e <_close_r+0x1a>
 8007f38:	682b      	ldr	r3, [r5, #0]
 8007f3a:	b103      	cbz	r3, 8007f3e <_close_r+0x1a>
 8007f3c:	6023      	str	r3, [r4, #0]
 8007f3e:	bd38      	pop	{r3, r4, r5, pc}
 8007f40:	20004d40 	.word	0x20004d40

08007f44 <_fstat_r>:
 8007f44:	b538      	push	{r3, r4, r5, lr}
 8007f46:	4d07      	ldr	r5, [pc, #28]	; (8007f64 <_fstat_r+0x20>)
 8007f48:	2300      	movs	r3, #0
 8007f4a:	4604      	mov	r4, r0
 8007f4c:	4608      	mov	r0, r1
 8007f4e:	4611      	mov	r1, r2
 8007f50:	602b      	str	r3, [r5, #0]
 8007f52:	f7f9 fff8 	bl	8001f46 <_fstat>
 8007f56:	1c43      	adds	r3, r0, #1
 8007f58:	d102      	bne.n	8007f60 <_fstat_r+0x1c>
 8007f5a:	682b      	ldr	r3, [r5, #0]
 8007f5c:	b103      	cbz	r3, 8007f60 <_fstat_r+0x1c>
 8007f5e:	6023      	str	r3, [r4, #0]
 8007f60:	bd38      	pop	{r3, r4, r5, pc}
 8007f62:	bf00      	nop
 8007f64:	20004d40 	.word	0x20004d40

08007f68 <_isatty_r>:
 8007f68:	b538      	push	{r3, r4, r5, lr}
 8007f6a:	4d06      	ldr	r5, [pc, #24]	; (8007f84 <_isatty_r+0x1c>)
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	4604      	mov	r4, r0
 8007f70:	4608      	mov	r0, r1
 8007f72:	602b      	str	r3, [r5, #0]
 8007f74:	f7f9 fff7 	bl	8001f66 <_isatty>
 8007f78:	1c43      	adds	r3, r0, #1
 8007f7a:	d102      	bne.n	8007f82 <_isatty_r+0x1a>
 8007f7c:	682b      	ldr	r3, [r5, #0]
 8007f7e:	b103      	cbz	r3, 8007f82 <_isatty_r+0x1a>
 8007f80:	6023      	str	r3, [r4, #0]
 8007f82:	bd38      	pop	{r3, r4, r5, pc}
 8007f84:	20004d40 	.word	0x20004d40

08007f88 <_lseek_r>:
 8007f88:	b538      	push	{r3, r4, r5, lr}
 8007f8a:	4d07      	ldr	r5, [pc, #28]	; (8007fa8 <_lseek_r+0x20>)
 8007f8c:	4604      	mov	r4, r0
 8007f8e:	4608      	mov	r0, r1
 8007f90:	4611      	mov	r1, r2
 8007f92:	2200      	movs	r2, #0
 8007f94:	602a      	str	r2, [r5, #0]
 8007f96:	461a      	mov	r2, r3
 8007f98:	f7f9 fff0 	bl	8001f7c <_lseek>
 8007f9c:	1c43      	adds	r3, r0, #1
 8007f9e:	d102      	bne.n	8007fa6 <_lseek_r+0x1e>
 8007fa0:	682b      	ldr	r3, [r5, #0]
 8007fa2:	b103      	cbz	r3, 8007fa6 <_lseek_r+0x1e>
 8007fa4:	6023      	str	r3, [r4, #0]
 8007fa6:	bd38      	pop	{r3, r4, r5, pc}
 8007fa8:	20004d40 	.word	0x20004d40

08007fac <__malloc_lock>:
 8007fac:	4801      	ldr	r0, [pc, #4]	; (8007fb4 <__malloc_lock+0x8>)
 8007fae:	f7ff bb15 	b.w	80075dc <__retarget_lock_acquire_recursive>
 8007fb2:	bf00      	nop
 8007fb4:	20004d34 	.word	0x20004d34

08007fb8 <__malloc_unlock>:
 8007fb8:	4801      	ldr	r0, [pc, #4]	; (8007fc0 <__malloc_unlock+0x8>)
 8007fba:	f7ff bb10 	b.w	80075de <__retarget_lock_release_recursive>
 8007fbe:	bf00      	nop
 8007fc0:	20004d34 	.word	0x20004d34

08007fc4 <_read_r>:
 8007fc4:	b538      	push	{r3, r4, r5, lr}
 8007fc6:	4d07      	ldr	r5, [pc, #28]	; (8007fe4 <_read_r+0x20>)
 8007fc8:	4604      	mov	r4, r0
 8007fca:	4608      	mov	r0, r1
 8007fcc:	4611      	mov	r1, r2
 8007fce:	2200      	movs	r2, #0
 8007fd0:	602a      	str	r2, [r5, #0]
 8007fd2:	461a      	mov	r2, r3
 8007fd4:	f7f9 ff72 	bl	8001ebc <_read>
 8007fd8:	1c43      	adds	r3, r0, #1
 8007fda:	d102      	bne.n	8007fe2 <_read_r+0x1e>
 8007fdc:	682b      	ldr	r3, [r5, #0]
 8007fde:	b103      	cbz	r3, 8007fe2 <_read_r+0x1e>
 8007fe0:	6023      	str	r3, [r4, #0]
 8007fe2:	bd38      	pop	{r3, r4, r5, pc}
 8007fe4:	20004d40 	.word	0x20004d40

08007fe8 <_init>:
 8007fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fea:	bf00      	nop
 8007fec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fee:	bc08      	pop	{r3}
 8007ff0:	469e      	mov	lr, r3
 8007ff2:	4770      	bx	lr

08007ff4 <_fini>:
 8007ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ff6:	bf00      	nop
 8007ff8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ffa:	bc08      	pop	{r3}
 8007ffc:	469e      	mov	lr, r3
 8007ffe:	4770      	bx	lr
