
RoboMas_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008aac  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000358  08008cac  08008cac  00018cac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009004  08009004  000201b4  2**0
                  CONTENTS
  4 .ARM          00000008  08009004  08009004  00019004  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800900c  0800900c  000201b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800900c  0800900c  0001900c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009010  08009010  00019010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08009014  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000074  08009088  00020074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000114  08009128  00020114  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00004eac  200001b8  080091c8  000201b8  2**3
                  ALLOC
 12 ._user_heap_stack 00000604  20005064  080091c8  00025064  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000201b4  2**0
                  CONTENTS, READONLY
 14 .debug_info   00019dc3  00000000  00000000  000201e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003498  00000000  00000000  00039fa5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001220  00000000  00000000  0003d440  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000010f8  00000000  00000000  0003e660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002aee4  00000000  00000000  0003f758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00016570  00000000  00000000  0006a63c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000fffdb  00000000  00000000  00080bac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  00180b87  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00005378  00000000  00000000  00180bd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001b8 	.word	0x200001b8
 800021c:	00000000 	.word	0x00000000
 8000220:	08008c94 	.word	0x08008c94

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001bc 	.word	0x200001bc
 800023c:	08008c94 	.word	0x08008c94

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_frsub>:
 80002e0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__addsf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_fsub>:
 80002e8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080002ec <__addsf3>:
 80002ec:	0042      	lsls	r2, r0, #1
 80002ee:	bf1f      	itttt	ne
 80002f0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80002f4:	ea92 0f03 	teqne	r2, r3
 80002f8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80002fc:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000300:	d06a      	beq.n	80003d8 <__addsf3+0xec>
 8000302:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000306:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800030a:	bfc1      	itttt	gt
 800030c:	18d2      	addgt	r2, r2, r3
 800030e:	4041      	eorgt	r1, r0
 8000310:	4048      	eorgt	r0, r1
 8000312:	4041      	eorgt	r1, r0
 8000314:	bfb8      	it	lt
 8000316:	425b      	neglt	r3, r3
 8000318:	2b19      	cmp	r3, #25
 800031a:	bf88      	it	hi
 800031c:	4770      	bxhi	lr
 800031e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000322:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000326:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800032a:	bf18      	it	ne
 800032c:	4240      	negne	r0, r0
 800032e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000332:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000336:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800033a:	bf18      	it	ne
 800033c:	4249      	negne	r1, r1
 800033e:	ea92 0f03 	teq	r2, r3
 8000342:	d03f      	beq.n	80003c4 <__addsf3+0xd8>
 8000344:	f1a2 0201 	sub.w	r2, r2, #1
 8000348:	fa41 fc03 	asr.w	ip, r1, r3
 800034c:	eb10 000c 	adds.w	r0, r0, ip
 8000350:	f1c3 0320 	rsb	r3, r3, #32
 8000354:	fa01 f103 	lsl.w	r1, r1, r3
 8000358:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800035c:	d502      	bpl.n	8000364 <__addsf3+0x78>
 800035e:	4249      	negs	r1, r1
 8000360:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000364:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000368:	d313      	bcc.n	8000392 <__addsf3+0xa6>
 800036a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800036e:	d306      	bcc.n	800037e <__addsf3+0x92>
 8000370:	0840      	lsrs	r0, r0, #1
 8000372:	ea4f 0131 	mov.w	r1, r1, rrx
 8000376:	f102 0201 	add.w	r2, r2, #1
 800037a:	2afe      	cmp	r2, #254	; 0xfe
 800037c:	d251      	bcs.n	8000422 <__addsf3+0x136>
 800037e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000382:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000386:	bf08      	it	eq
 8000388:	f020 0001 	biceq.w	r0, r0, #1
 800038c:	ea40 0003 	orr.w	r0, r0, r3
 8000390:	4770      	bx	lr
 8000392:	0049      	lsls	r1, r1, #1
 8000394:	eb40 0000 	adc.w	r0, r0, r0
 8000398:	3a01      	subs	r2, #1
 800039a:	bf28      	it	cs
 800039c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80003a0:	d2ed      	bcs.n	800037e <__addsf3+0x92>
 80003a2:	fab0 fc80 	clz	ip, r0
 80003a6:	f1ac 0c08 	sub.w	ip, ip, #8
 80003aa:	ebb2 020c 	subs.w	r2, r2, ip
 80003ae:	fa00 f00c 	lsl.w	r0, r0, ip
 80003b2:	bfaa      	itet	ge
 80003b4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80003b8:	4252      	neglt	r2, r2
 80003ba:	4318      	orrge	r0, r3
 80003bc:	bfbc      	itt	lt
 80003be:	40d0      	lsrlt	r0, r2
 80003c0:	4318      	orrlt	r0, r3
 80003c2:	4770      	bx	lr
 80003c4:	f092 0f00 	teq	r2, #0
 80003c8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80003cc:	bf06      	itte	eq
 80003ce:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80003d2:	3201      	addeq	r2, #1
 80003d4:	3b01      	subne	r3, #1
 80003d6:	e7b5      	b.n	8000344 <__addsf3+0x58>
 80003d8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80003dc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80003e0:	bf18      	it	ne
 80003e2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80003e6:	d021      	beq.n	800042c <__addsf3+0x140>
 80003e8:	ea92 0f03 	teq	r2, r3
 80003ec:	d004      	beq.n	80003f8 <__addsf3+0x10c>
 80003ee:	f092 0f00 	teq	r2, #0
 80003f2:	bf08      	it	eq
 80003f4:	4608      	moveq	r0, r1
 80003f6:	4770      	bx	lr
 80003f8:	ea90 0f01 	teq	r0, r1
 80003fc:	bf1c      	itt	ne
 80003fe:	2000      	movne	r0, #0
 8000400:	4770      	bxne	lr
 8000402:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000406:	d104      	bne.n	8000412 <__addsf3+0x126>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	bf28      	it	cs
 800040c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000410:	4770      	bx	lr
 8000412:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000416:	bf3c      	itt	cc
 8000418:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 800041c:	4770      	bxcc	lr
 800041e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000422:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000426:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800042a:	4770      	bx	lr
 800042c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000430:	bf16      	itet	ne
 8000432:	4608      	movne	r0, r1
 8000434:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000438:	4601      	movne	r1, r0
 800043a:	0242      	lsls	r2, r0, #9
 800043c:	bf06      	itte	eq
 800043e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000442:	ea90 0f01 	teqeq	r0, r1
 8000446:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800044a:	4770      	bx	lr

0800044c <__aeabi_ui2f>:
 800044c:	f04f 0300 	mov.w	r3, #0
 8000450:	e004      	b.n	800045c <__aeabi_i2f+0x8>
 8000452:	bf00      	nop

08000454 <__aeabi_i2f>:
 8000454:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000458:	bf48      	it	mi
 800045a:	4240      	negmi	r0, r0
 800045c:	ea5f 0c00 	movs.w	ip, r0
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000468:	4601      	mov	r1, r0
 800046a:	f04f 0000 	mov.w	r0, #0
 800046e:	e01c      	b.n	80004aa <__aeabi_l2f+0x2a>

08000470 <__aeabi_ul2f>:
 8000470:	ea50 0201 	orrs.w	r2, r0, r1
 8000474:	bf08      	it	eq
 8000476:	4770      	bxeq	lr
 8000478:	f04f 0300 	mov.w	r3, #0
 800047c:	e00a      	b.n	8000494 <__aeabi_l2f+0x14>
 800047e:	bf00      	nop

08000480 <__aeabi_l2f>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800048c:	d502      	bpl.n	8000494 <__aeabi_l2f+0x14>
 800048e:	4240      	negs	r0, r0
 8000490:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000494:	ea5f 0c01 	movs.w	ip, r1
 8000498:	bf02      	ittt	eq
 800049a:	4684      	moveq	ip, r0
 800049c:	4601      	moveq	r1, r0
 800049e:	2000      	moveq	r0, #0
 80004a0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80004a4:	bf08      	it	eq
 80004a6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80004aa:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80004ae:	fabc f28c 	clz	r2, ip
 80004b2:	3a08      	subs	r2, #8
 80004b4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80004b8:	db10      	blt.n	80004dc <__aeabi_l2f+0x5c>
 80004ba:	fa01 fc02 	lsl.w	ip, r1, r2
 80004be:	4463      	add	r3, ip
 80004c0:	fa00 fc02 	lsl.w	ip, r0, r2
 80004c4:	f1c2 0220 	rsb	r2, r2, #32
 80004c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004cc:	fa20 f202 	lsr.w	r2, r0, r2
 80004d0:	eb43 0002 	adc.w	r0, r3, r2
 80004d4:	bf08      	it	eq
 80004d6:	f020 0001 	biceq.w	r0, r0, #1
 80004da:	4770      	bx	lr
 80004dc:	f102 0220 	add.w	r2, r2, #32
 80004e0:	fa01 fc02 	lsl.w	ip, r1, r2
 80004e4:	f1c2 0220 	rsb	r2, r2, #32
 80004e8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80004ec:	fa21 f202 	lsr.w	r2, r1, r2
 80004f0:	eb43 0002 	adc.w	r0, r3, r2
 80004f4:	bf08      	it	eq
 80004f6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80004fa:	4770      	bx	lr

080004fc <__aeabi_uldivmod>:
 80004fc:	b953      	cbnz	r3, 8000514 <__aeabi_uldivmod+0x18>
 80004fe:	b94a      	cbnz	r2, 8000514 <__aeabi_uldivmod+0x18>
 8000500:	2900      	cmp	r1, #0
 8000502:	bf08      	it	eq
 8000504:	2800      	cmpeq	r0, #0
 8000506:	bf1c      	itt	ne
 8000508:	f04f 31ff 	movne.w	r1, #4294967295
 800050c:	f04f 30ff 	movne.w	r0, #4294967295
 8000510:	f000 b974 	b.w	80007fc <__aeabi_idiv0>
 8000514:	f1ad 0c08 	sub.w	ip, sp, #8
 8000518:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800051c:	f000 f806 	bl	800052c <__udivmoddi4>
 8000520:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000524:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000528:	b004      	add	sp, #16
 800052a:	4770      	bx	lr

0800052c <__udivmoddi4>:
 800052c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000530:	9d08      	ldr	r5, [sp, #32]
 8000532:	4604      	mov	r4, r0
 8000534:	468e      	mov	lr, r1
 8000536:	2b00      	cmp	r3, #0
 8000538:	d14d      	bne.n	80005d6 <__udivmoddi4+0xaa>
 800053a:	428a      	cmp	r2, r1
 800053c:	4694      	mov	ip, r2
 800053e:	d969      	bls.n	8000614 <__udivmoddi4+0xe8>
 8000540:	fab2 f282 	clz	r2, r2
 8000544:	b152      	cbz	r2, 800055c <__udivmoddi4+0x30>
 8000546:	fa01 f302 	lsl.w	r3, r1, r2
 800054a:	f1c2 0120 	rsb	r1, r2, #32
 800054e:	fa20 f101 	lsr.w	r1, r0, r1
 8000552:	fa0c fc02 	lsl.w	ip, ip, r2
 8000556:	ea41 0e03 	orr.w	lr, r1, r3
 800055a:	4094      	lsls	r4, r2
 800055c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000560:	0c21      	lsrs	r1, r4, #16
 8000562:	fbbe f6f8 	udiv	r6, lr, r8
 8000566:	fa1f f78c 	uxth.w	r7, ip
 800056a:	fb08 e316 	mls	r3, r8, r6, lr
 800056e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000572:	fb06 f107 	mul.w	r1, r6, r7
 8000576:	4299      	cmp	r1, r3
 8000578:	d90a      	bls.n	8000590 <__udivmoddi4+0x64>
 800057a:	eb1c 0303 	adds.w	r3, ip, r3
 800057e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000582:	f080 811f 	bcs.w	80007c4 <__udivmoddi4+0x298>
 8000586:	4299      	cmp	r1, r3
 8000588:	f240 811c 	bls.w	80007c4 <__udivmoddi4+0x298>
 800058c:	3e02      	subs	r6, #2
 800058e:	4463      	add	r3, ip
 8000590:	1a5b      	subs	r3, r3, r1
 8000592:	b2a4      	uxth	r4, r4
 8000594:	fbb3 f0f8 	udiv	r0, r3, r8
 8000598:	fb08 3310 	mls	r3, r8, r0, r3
 800059c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80005a0:	fb00 f707 	mul.w	r7, r0, r7
 80005a4:	42a7      	cmp	r7, r4
 80005a6:	d90a      	bls.n	80005be <__udivmoddi4+0x92>
 80005a8:	eb1c 0404 	adds.w	r4, ip, r4
 80005ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80005b0:	f080 810a 	bcs.w	80007c8 <__udivmoddi4+0x29c>
 80005b4:	42a7      	cmp	r7, r4
 80005b6:	f240 8107 	bls.w	80007c8 <__udivmoddi4+0x29c>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80005c2:	1be4      	subs	r4, r4, r7
 80005c4:	2600      	movs	r6, #0
 80005c6:	b11d      	cbz	r5, 80005d0 <__udivmoddi4+0xa4>
 80005c8:	40d4      	lsrs	r4, r2
 80005ca:	2300      	movs	r3, #0
 80005cc:	e9c5 4300 	strd	r4, r3, [r5]
 80005d0:	4631      	mov	r1, r6
 80005d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005d6:	428b      	cmp	r3, r1
 80005d8:	d909      	bls.n	80005ee <__udivmoddi4+0xc2>
 80005da:	2d00      	cmp	r5, #0
 80005dc:	f000 80ef 	beq.w	80007be <__udivmoddi4+0x292>
 80005e0:	2600      	movs	r6, #0
 80005e2:	e9c5 0100 	strd	r0, r1, [r5]
 80005e6:	4630      	mov	r0, r6
 80005e8:	4631      	mov	r1, r6
 80005ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ee:	fab3 f683 	clz	r6, r3
 80005f2:	2e00      	cmp	r6, #0
 80005f4:	d14a      	bne.n	800068c <__udivmoddi4+0x160>
 80005f6:	428b      	cmp	r3, r1
 80005f8:	d302      	bcc.n	8000600 <__udivmoddi4+0xd4>
 80005fa:	4282      	cmp	r2, r0
 80005fc:	f200 80f9 	bhi.w	80007f2 <__udivmoddi4+0x2c6>
 8000600:	1a84      	subs	r4, r0, r2
 8000602:	eb61 0303 	sbc.w	r3, r1, r3
 8000606:	2001      	movs	r0, #1
 8000608:	469e      	mov	lr, r3
 800060a:	2d00      	cmp	r5, #0
 800060c:	d0e0      	beq.n	80005d0 <__udivmoddi4+0xa4>
 800060e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000612:	e7dd      	b.n	80005d0 <__udivmoddi4+0xa4>
 8000614:	b902      	cbnz	r2, 8000618 <__udivmoddi4+0xec>
 8000616:	deff      	udf	#255	; 0xff
 8000618:	fab2 f282 	clz	r2, r2
 800061c:	2a00      	cmp	r2, #0
 800061e:	f040 8092 	bne.w	8000746 <__udivmoddi4+0x21a>
 8000622:	eba1 010c 	sub.w	r1, r1, ip
 8000626:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800062a:	fa1f fe8c 	uxth.w	lr, ip
 800062e:	2601      	movs	r6, #1
 8000630:	0c20      	lsrs	r0, r4, #16
 8000632:	fbb1 f3f7 	udiv	r3, r1, r7
 8000636:	fb07 1113 	mls	r1, r7, r3, r1
 800063a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800063e:	fb0e f003 	mul.w	r0, lr, r3
 8000642:	4288      	cmp	r0, r1
 8000644:	d908      	bls.n	8000658 <__udivmoddi4+0x12c>
 8000646:	eb1c 0101 	adds.w	r1, ip, r1
 800064a:	f103 38ff 	add.w	r8, r3, #4294967295
 800064e:	d202      	bcs.n	8000656 <__udivmoddi4+0x12a>
 8000650:	4288      	cmp	r0, r1
 8000652:	f200 80cb 	bhi.w	80007ec <__udivmoddi4+0x2c0>
 8000656:	4643      	mov	r3, r8
 8000658:	1a09      	subs	r1, r1, r0
 800065a:	b2a4      	uxth	r4, r4
 800065c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000660:	fb07 1110 	mls	r1, r7, r0, r1
 8000664:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000668:	fb0e fe00 	mul.w	lr, lr, r0
 800066c:	45a6      	cmp	lr, r4
 800066e:	d908      	bls.n	8000682 <__udivmoddi4+0x156>
 8000670:	eb1c 0404 	adds.w	r4, ip, r4
 8000674:	f100 31ff 	add.w	r1, r0, #4294967295
 8000678:	d202      	bcs.n	8000680 <__udivmoddi4+0x154>
 800067a:	45a6      	cmp	lr, r4
 800067c:	f200 80bb 	bhi.w	80007f6 <__udivmoddi4+0x2ca>
 8000680:	4608      	mov	r0, r1
 8000682:	eba4 040e 	sub.w	r4, r4, lr
 8000686:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800068a:	e79c      	b.n	80005c6 <__udivmoddi4+0x9a>
 800068c:	f1c6 0720 	rsb	r7, r6, #32
 8000690:	40b3      	lsls	r3, r6
 8000692:	fa22 fc07 	lsr.w	ip, r2, r7
 8000696:	ea4c 0c03 	orr.w	ip, ip, r3
 800069a:	fa20 f407 	lsr.w	r4, r0, r7
 800069e:	fa01 f306 	lsl.w	r3, r1, r6
 80006a2:	431c      	orrs	r4, r3
 80006a4:	40f9      	lsrs	r1, r7
 80006a6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80006aa:	fa00 f306 	lsl.w	r3, r0, r6
 80006ae:	fbb1 f8f9 	udiv	r8, r1, r9
 80006b2:	0c20      	lsrs	r0, r4, #16
 80006b4:	fa1f fe8c 	uxth.w	lr, ip
 80006b8:	fb09 1118 	mls	r1, r9, r8, r1
 80006bc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80006c0:	fb08 f00e 	mul.w	r0, r8, lr
 80006c4:	4288      	cmp	r0, r1
 80006c6:	fa02 f206 	lsl.w	r2, r2, r6
 80006ca:	d90b      	bls.n	80006e4 <__udivmoddi4+0x1b8>
 80006cc:	eb1c 0101 	adds.w	r1, ip, r1
 80006d0:	f108 3aff 	add.w	sl, r8, #4294967295
 80006d4:	f080 8088 	bcs.w	80007e8 <__udivmoddi4+0x2bc>
 80006d8:	4288      	cmp	r0, r1
 80006da:	f240 8085 	bls.w	80007e8 <__udivmoddi4+0x2bc>
 80006de:	f1a8 0802 	sub.w	r8, r8, #2
 80006e2:	4461      	add	r1, ip
 80006e4:	1a09      	subs	r1, r1, r0
 80006e6:	b2a4      	uxth	r4, r4
 80006e8:	fbb1 f0f9 	udiv	r0, r1, r9
 80006ec:	fb09 1110 	mls	r1, r9, r0, r1
 80006f0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80006f4:	fb00 fe0e 	mul.w	lr, r0, lr
 80006f8:	458e      	cmp	lr, r1
 80006fa:	d908      	bls.n	800070e <__udivmoddi4+0x1e2>
 80006fc:	eb1c 0101 	adds.w	r1, ip, r1
 8000700:	f100 34ff 	add.w	r4, r0, #4294967295
 8000704:	d26c      	bcs.n	80007e0 <__udivmoddi4+0x2b4>
 8000706:	458e      	cmp	lr, r1
 8000708:	d96a      	bls.n	80007e0 <__udivmoddi4+0x2b4>
 800070a:	3802      	subs	r0, #2
 800070c:	4461      	add	r1, ip
 800070e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000712:	fba0 9402 	umull	r9, r4, r0, r2
 8000716:	eba1 010e 	sub.w	r1, r1, lr
 800071a:	42a1      	cmp	r1, r4
 800071c:	46c8      	mov	r8, r9
 800071e:	46a6      	mov	lr, r4
 8000720:	d356      	bcc.n	80007d0 <__udivmoddi4+0x2a4>
 8000722:	d053      	beq.n	80007cc <__udivmoddi4+0x2a0>
 8000724:	b15d      	cbz	r5, 800073e <__udivmoddi4+0x212>
 8000726:	ebb3 0208 	subs.w	r2, r3, r8
 800072a:	eb61 010e 	sbc.w	r1, r1, lr
 800072e:	fa01 f707 	lsl.w	r7, r1, r7
 8000732:	fa22 f306 	lsr.w	r3, r2, r6
 8000736:	40f1      	lsrs	r1, r6
 8000738:	431f      	orrs	r7, r3
 800073a:	e9c5 7100 	strd	r7, r1, [r5]
 800073e:	2600      	movs	r6, #0
 8000740:	4631      	mov	r1, r6
 8000742:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000746:	f1c2 0320 	rsb	r3, r2, #32
 800074a:	40d8      	lsrs	r0, r3
 800074c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000750:	fa21 f303 	lsr.w	r3, r1, r3
 8000754:	4091      	lsls	r1, r2
 8000756:	4301      	orrs	r1, r0
 8000758:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800075c:	fa1f fe8c 	uxth.w	lr, ip
 8000760:	fbb3 f0f7 	udiv	r0, r3, r7
 8000764:	fb07 3610 	mls	r6, r7, r0, r3
 8000768:	0c0b      	lsrs	r3, r1, #16
 800076a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800076e:	fb00 f60e 	mul.w	r6, r0, lr
 8000772:	429e      	cmp	r6, r3
 8000774:	fa04 f402 	lsl.w	r4, r4, r2
 8000778:	d908      	bls.n	800078c <__udivmoddi4+0x260>
 800077a:	eb1c 0303 	adds.w	r3, ip, r3
 800077e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000782:	d22f      	bcs.n	80007e4 <__udivmoddi4+0x2b8>
 8000784:	429e      	cmp	r6, r3
 8000786:	d92d      	bls.n	80007e4 <__udivmoddi4+0x2b8>
 8000788:	3802      	subs	r0, #2
 800078a:	4463      	add	r3, ip
 800078c:	1b9b      	subs	r3, r3, r6
 800078e:	b289      	uxth	r1, r1
 8000790:	fbb3 f6f7 	udiv	r6, r3, r7
 8000794:	fb07 3316 	mls	r3, r7, r6, r3
 8000798:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800079c:	fb06 f30e 	mul.w	r3, r6, lr
 80007a0:	428b      	cmp	r3, r1
 80007a2:	d908      	bls.n	80007b6 <__udivmoddi4+0x28a>
 80007a4:	eb1c 0101 	adds.w	r1, ip, r1
 80007a8:	f106 38ff 	add.w	r8, r6, #4294967295
 80007ac:	d216      	bcs.n	80007dc <__udivmoddi4+0x2b0>
 80007ae:	428b      	cmp	r3, r1
 80007b0:	d914      	bls.n	80007dc <__udivmoddi4+0x2b0>
 80007b2:	3e02      	subs	r6, #2
 80007b4:	4461      	add	r1, ip
 80007b6:	1ac9      	subs	r1, r1, r3
 80007b8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80007bc:	e738      	b.n	8000630 <__udivmoddi4+0x104>
 80007be:	462e      	mov	r6, r5
 80007c0:	4628      	mov	r0, r5
 80007c2:	e705      	b.n	80005d0 <__udivmoddi4+0xa4>
 80007c4:	4606      	mov	r6, r0
 80007c6:	e6e3      	b.n	8000590 <__udivmoddi4+0x64>
 80007c8:	4618      	mov	r0, r3
 80007ca:	e6f8      	b.n	80005be <__udivmoddi4+0x92>
 80007cc:	454b      	cmp	r3, r9
 80007ce:	d2a9      	bcs.n	8000724 <__udivmoddi4+0x1f8>
 80007d0:	ebb9 0802 	subs.w	r8, r9, r2
 80007d4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80007d8:	3801      	subs	r0, #1
 80007da:	e7a3      	b.n	8000724 <__udivmoddi4+0x1f8>
 80007dc:	4646      	mov	r6, r8
 80007de:	e7ea      	b.n	80007b6 <__udivmoddi4+0x28a>
 80007e0:	4620      	mov	r0, r4
 80007e2:	e794      	b.n	800070e <__udivmoddi4+0x1e2>
 80007e4:	4640      	mov	r0, r8
 80007e6:	e7d1      	b.n	800078c <__udivmoddi4+0x260>
 80007e8:	46d0      	mov	r8, sl
 80007ea:	e77b      	b.n	80006e4 <__udivmoddi4+0x1b8>
 80007ec:	3b02      	subs	r3, #2
 80007ee:	4461      	add	r1, ip
 80007f0:	e732      	b.n	8000658 <__udivmoddi4+0x12c>
 80007f2:	4630      	mov	r0, r6
 80007f4:	e709      	b.n	800060a <__udivmoddi4+0xde>
 80007f6:	4464      	add	r4, ip
 80007f8:	3802      	subs	r0, #2
 80007fa:	e742      	b.n	8000682 <__udivmoddi4+0x156>

080007fc <__aeabi_idiv0>:
 80007fc:	4770      	bx	lr
 80007fe:	bf00      	nop

08000800 <PushTx8Bytes>:
CANTxBuf buffer[CAN_TXBUFFER_SIZE];
uint32_t readpoint = 0;
uint32_t writepoint = 0;
uint8_t isfull = 0;

HAL_StatusTypeDef PushTx8Bytes(uint32_t ExtId, uint8_t *bytes, uint32_t size){
 8000800:	b480      	push	{r7}
 8000802:	b087      	sub	sp, #28
 8000804:	af00      	add	r7, sp, #0
 8000806:	60f8      	str	r0, [r7, #12]
 8000808:	60b9      	str	r1, [r7, #8]
 800080a:	607a      	str	r2, [r7, #4]
	buffer[writepoint].DLC = size;
 800080c:	4b24      	ldr	r3, [pc, #144]	; (80008a0 <PushTx8Bytes+0xa0>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	4a24      	ldr	r2, [pc, #144]	; (80008a4 <PushTx8Bytes+0xa4>)
 8000812:	011b      	lsls	r3, r3, #4
 8000814:	4413      	add	r3, r2
 8000816:	3304      	adds	r3, #4
 8000818:	687a      	ldr	r2, [r7, #4]
 800081a:	601a      	str	r2, [r3, #0]
	buffer[writepoint].ExtId = ExtId;
 800081c:	4b20      	ldr	r3, [pc, #128]	; (80008a0 <PushTx8Bytes+0xa0>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4a20      	ldr	r2, [pc, #128]	; (80008a4 <PushTx8Bytes+0xa4>)
 8000822:	011b      	lsls	r3, r3, #4
 8000824:	4413      	add	r3, r2
 8000826:	68fa      	ldr	r2, [r7, #12]
 8000828:	601a      	str	r2, [r3, #0]
	for (uint8_t i = 0; i < size; i++)buffer[writepoint].bytes[i] = bytes[i];
 800082a:	2300      	movs	r3, #0
 800082c:	75fb      	strb	r3, [r7, #23]
 800082e:	e010      	b.n	8000852 <PushTx8Bytes+0x52>
 8000830:	7dfb      	ldrb	r3, [r7, #23]
 8000832:	68ba      	ldr	r2, [r7, #8]
 8000834:	18d1      	adds	r1, r2, r3
 8000836:	4b1a      	ldr	r3, [pc, #104]	; (80008a0 <PushTx8Bytes+0xa0>)
 8000838:	681a      	ldr	r2, [r3, #0]
 800083a:	7dfb      	ldrb	r3, [r7, #23]
 800083c:	7808      	ldrb	r0, [r1, #0]
 800083e:	4919      	ldr	r1, [pc, #100]	; (80008a4 <PushTx8Bytes+0xa4>)
 8000840:	0112      	lsls	r2, r2, #4
 8000842:	440a      	add	r2, r1
 8000844:	4413      	add	r3, r2
 8000846:	3308      	adds	r3, #8
 8000848:	4602      	mov	r2, r0
 800084a:	701a      	strb	r2, [r3, #0]
 800084c:	7dfb      	ldrb	r3, [r7, #23]
 800084e:	3301      	adds	r3, #1
 8000850:	75fb      	strb	r3, [r7, #23]
 8000852:	7dfb      	ldrb	r3, [r7, #23]
 8000854:	687a      	ldr	r2, [r7, #4]
 8000856:	429a      	cmp	r2, r3
 8000858:	d8ea      	bhi.n	8000830 <PushTx8Bytes+0x30>

	if (isfull == 1)readpoint = (readpoint + 1) & (CAN_TXBUFFER_SIZE - 1);
 800085a:	4b13      	ldr	r3, [pc, #76]	; (80008a8 <PushTx8Bytes+0xa8>)
 800085c:	781b      	ldrb	r3, [r3, #0]
 800085e:	2b01      	cmp	r3, #1
 8000860:	d106      	bne.n	8000870 <PushTx8Bytes+0x70>
 8000862:	4b12      	ldr	r3, [pc, #72]	; (80008ac <PushTx8Bytes+0xac>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	3301      	adds	r3, #1
 8000868:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800086c:	4a0f      	ldr	r2, [pc, #60]	; (80008ac <PushTx8Bytes+0xac>)
 800086e:	6013      	str	r3, [r2, #0]
	writepoint = (writepoint + 1) & (CAN_TXBUFFER_SIZE - 1);
 8000870:	4b0b      	ldr	r3, [pc, #44]	; (80008a0 <PushTx8Bytes+0xa0>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	3301      	adds	r3, #1
 8000876:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800087a:	4a09      	ldr	r2, [pc, #36]	; (80008a0 <PushTx8Bytes+0xa0>)
 800087c:	6013      	str	r3, [r2, #0]

	if (writepoint == readpoint){
 800087e:	4b08      	ldr	r3, [pc, #32]	; (80008a0 <PushTx8Bytes+0xa0>)
 8000880:	681a      	ldr	r2, [r3, #0]
 8000882:	4b0a      	ldr	r3, [pc, #40]	; (80008ac <PushTx8Bytes+0xac>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	429a      	cmp	r2, r3
 8000888:	d102      	bne.n	8000890 <PushTx8Bytes+0x90>
		isfull = 1;
 800088a:	4b07      	ldr	r3, [pc, #28]	; (80008a8 <PushTx8Bytes+0xa8>)
 800088c:	2201      	movs	r2, #1
 800088e:	701a      	strb	r2, [r3, #0]
	}

	return HAL_OK;
 8000890:	2300      	movs	r3, #0
}
 8000892:	4618      	mov	r0, r3
 8000894:	371c      	adds	r7, #28
 8000896:	46bd      	mov	sp, r7
 8000898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089c:	4770      	bx	lr
 800089e:	bf00      	nop
 80008a0:	200024ac 	.word	0x200024ac
 80008a4:	200004a8 	.word	0x200004a8
 80008a8:	200024b0 	.word	0x200024b0
 80008ac:	200024a8 	.word	0x200024a8

080008b0 <PopSendTx8Bytes>:

HAL_StatusTypeDef PopSendTx8Bytes(CAN_HandleTypeDef* phcan){
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b08a      	sub	sp, #40	; 0x28
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
	CAN_TxHeaderTypeDef txHeader;
	uint32_t txMailbox;

	txHeader.RTR = CAN_RTR_DATA; // Data frame
 80008b8:	2300      	movs	r3, #0
 80008ba:	61bb      	str	r3, [r7, #24]
	txHeader.IDE = CAN_ID_EXT;	 // CAN Extend ID
 80008bc:	2304      	movs	r3, #4
 80008be:	617b      	str	r3, [r7, #20]
	txHeader.TransmitGlobalTime = DISABLE;
 80008c0:	2300      	movs	r3, #0
 80008c2:	f887 3020 	strb.w	r3, [r7, #32]

	while (HAL_CAN_GetTxMailboxesFreeLevel(phcan) > 0){
 80008c6:	e039      	b.n	800093c <PopSendTx8Bytes+0x8c>
		if (isfull == 0 && readpoint == writepoint)break;
 80008c8:	4b23      	ldr	r3, [pc, #140]	; (8000958 <PopSendTx8Bytes+0xa8>)
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d105      	bne.n	80008dc <PopSendTx8Bytes+0x2c>
 80008d0:	4b22      	ldr	r3, [pc, #136]	; (800095c <PopSendTx8Bytes+0xac>)
 80008d2:	681a      	ldr	r2, [r3, #0]
 80008d4:	4b22      	ldr	r3, [pc, #136]	; (8000960 <PopSendTx8Bytes+0xb0>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	429a      	cmp	r2, r3
 80008da:	d036      	beq.n	800094a <PopSendTx8Bytes+0x9a>

		txHeader.DLC = buffer[readpoint].DLC;
 80008dc:	4b1f      	ldr	r3, [pc, #124]	; (800095c <PopSendTx8Bytes+0xac>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	4a20      	ldr	r2, [pc, #128]	; (8000964 <PopSendTx8Bytes+0xb4>)
 80008e2:	011b      	lsls	r3, r3, #4
 80008e4:	4413      	add	r3, r2
 80008e6:	3304      	adds	r3, #4
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	61fb      	str	r3, [r7, #28]
		txHeader.ExtId = buffer[readpoint].ExtId;
 80008ec:	4b1b      	ldr	r3, [pc, #108]	; (800095c <PopSendTx8Bytes+0xac>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	4a1c      	ldr	r2, [pc, #112]	; (8000964 <PopSendTx8Bytes+0xb4>)
 80008f2:	011b      	lsls	r3, r3, #4
 80008f4:	4413      	add	r3, r2
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	613b      	str	r3, [r7, #16]

		HAL_StatusTypeDef ret = HAL_CAN_AddTxMessage(phcan, &txHeader, buffer[readpoint].bytes, &txMailbox);
 80008fa:	4b18      	ldr	r3, [pc, #96]	; (800095c <PopSendTx8Bytes+0xac>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	011b      	lsls	r3, r3, #4
 8000900:	3308      	adds	r3, #8
 8000902:	4a18      	ldr	r2, [pc, #96]	; (8000964 <PopSendTx8Bytes+0xb4>)
 8000904:	441a      	add	r2, r3
 8000906:	f107 0308 	add.w	r3, r7, #8
 800090a:	f107 010c 	add.w	r1, r7, #12
 800090e:	6878      	ldr	r0, [r7, #4]
 8000910:	f002 fdb0 	bl	8003474 <HAL_CAN_AddTxMessage>
 8000914:	4603      	mov	r3, r0
 8000916:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (ret != HAL_OK)return ret;
 800091a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800091e:	2b00      	cmp	r3, #0
 8000920:	d002      	beq.n	8000928 <PopSendTx8Bytes+0x78>
 8000922:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000926:	e012      	b.n	800094e <PopSendTx8Bytes+0x9e>

		readpoint = (readpoint + 1) & (CAN_TXBUFFER_SIZE - 1);
 8000928:	4b0c      	ldr	r3, [pc, #48]	; (800095c <PopSendTx8Bytes+0xac>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	3301      	adds	r3, #1
 800092e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000932:	4a0a      	ldr	r2, [pc, #40]	; (800095c <PopSendTx8Bytes+0xac>)
 8000934:	6013      	str	r3, [r2, #0]
		isfull = 0;
 8000936:	4b08      	ldr	r3, [pc, #32]	; (8000958 <PopSendTx8Bytes+0xa8>)
 8000938:	2200      	movs	r2, #0
 800093a:	701a      	strb	r2, [r3, #0]
	while (HAL_CAN_GetTxMailboxesFreeLevel(phcan) > 0){
 800093c:	6878      	ldr	r0, [r7, #4]
 800093e:	f002 fe69 	bl	8003614 <HAL_CAN_GetTxMailboxesFreeLevel>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d1bf      	bne.n	80008c8 <PopSendTx8Bytes+0x18>
 8000948:	e000      	b.n	800094c <PopSendTx8Bytes+0x9c>
		if (isfull == 0 && readpoint == writepoint)break;
 800094a:	bf00      	nop
	}

	return HAL_OK;
 800094c:	2300      	movs	r3, #0
}
 800094e:	4618      	mov	r0, r3
 8000950:	3728      	adds	r7, #40	; 0x28
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	200024b0 	.word	0x200024b0
 800095c:	200024a8 	.word	0x200024a8
 8000960:	200024ac 	.word	0x200024ac
 8000964:	200004a8 	.word	0x200004a8

08000968 <CANLib_WhenTxMailbox0_1_2CompleteCallbackCalled>:

void CANLib_WhenTxMailbox0_1_2CompleteCallbackCalled(CAN_HandleTypeDef *phcan){
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
	if(phcan != _canlib_phcan)return;
 8000970:	4b07      	ldr	r3, [pc, #28]	; (8000990 <CANLib_WhenTxMailbox0_1_2CompleteCallbackCalled+0x28>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	687a      	ldr	r2, [r7, #4]
 8000976:	429a      	cmp	r2, r3
 8000978:	d105      	bne.n	8000986 <CANLib_WhenTxMailbox0_1_2CompleteCallbackCalled+0x1e>
    PopSendTx8Bytes(_canlib_phcan);
 800097a:	4b05      	ldr	r3, [pc, #20]	; (8000990 <CANLib_WhenTxMailbox0_1_2CompleteCallbackCalled+0x28>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	4618      	mov	r0, r3
 8000980:	f7ff ff96 	bl	80008b0 <PopSendTx8Bytes>
 8000984:	e000      	b.n	8000988 <CANLib_WhenTxMailbox0_1_2CompleteCallbackCalled+0x20>
	if(phcan != _canlib_phcan)return;
 8000986:	bf00      	nop
}
 8000988:	3708      	adds	r7, #8
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	200001d4 	.word	0x200001d4

08000994 <CANLib_WhenTxMailbox0_1_2AbortCallbackCalled>:

void CANLib_WhenTxMailbox0_1_2AbortCallbackCalled(CAN_HandleTypeDef *phcan){
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
    if(phcan != _canlib_phcan)return;
 800099c:	4b07      	ldr	r3, [pc, #28]	; (80009bc <CANLib_WhenTxMailbox0_1_2AbortCallbackCalled+0x28>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	687a      	ldr	r2, [r7, #4]
 80009a2:	429a      	cmp	r2, r3
 80009a4:	d105      	bne.n	80009b2 <CANLib_WhenTxMailbox0_1_2AbortCallbackCalled+0x1e>
	PopSendTx8Bytes(_canlib_phcan);
 80009a6:	4b05      	ldr	r3, [pc, #20]	; (80009bc <CANLib_WhenTxMailbox0_1_2AbortCallbackCalled+0x28>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	4618      	mov	r0, r3
 80009ac:	f7ff ff80 	bl	80008b0 <PopSendTx8Bytes>
 80009b0:	e000      	b.n	80009b4 <CANLib_WhenTxMailbox0_1_2AbortCallbackCalled+0x20>
    if(phcan != _canlib_phcan)return;
 80009b2:	bf00      	nop
}
 80009b4:	3708      	adds	r7, #8
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	200001d4 	.word	0x200001d4

080009c0 <WhenCANRxFifo0MsgPending>:

void WhenCANRxFifo0MsgPending(CAN_HandleTypeDef *phcan, NUM_OF_DEVICES *num_of){ // Fifo0MsgPendingで呼び出すこと. CAN受信時に呼び出される関数
 80009c0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80009c4:	b08e      	sub	sp, #56	; 0x38
 80009c6:	af00      	add	r7, sp, #0
 80009c8:	6078      	str	r0, [r7, #4]
 80009ca:	6039      	str	r1, [r7, #0]
//	if(phcan != _canlib_phcan)return;
    CAN_RxHeaderTypeDef rxHeader;
	uint8_t rxData[8];
	if (HAL_CAN_GetRxMessage(_canlib_phcan, CAN_RX_FIFO0, &rxHeader, rxData) != HAL_OK){
 80009cc:	4b74      	ldr	r3, [pc, #464]	; (8000ba0 <WhenCANRxFifo0MsgPending+0x1e0>)
 80009ce:	6818      	ldr	r0, [r3, #0]
 80009d0:	f107 0310 	add.w	r3, r7, #16
 80009d4:	f107 0218 	add.w	r2, r7, #24
 80009d8:	2100      	movs	r1, #0
 80009da:	f002 fe50 	bl	800367e <HAL_CAN_GetRxMessage>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d004      	beq.n	80009ee <WhenCANRxFifo0MsgPending+0x2e>
		// Reception Error
		printf("GetRxMessage error\n\r");
 80009e4:	486f      	ldr	r0, [pc, #444]	; (8000ba4 <WhenCANRxFifo0MsgPending+0x1e4>)
 80009e6:	f007 f951 	bl	8007c8c <iprintf>
		Error_Handler();
 80009ea:	f001 fe81 	bl	80026f0 <Error_Handler>
	}
	// awakeコマンドを受信した場合
	CAN_Device can_device = Extract_CAN_Device(rxHeader.ExtId);
 80009ee:	69fb      	ldr	r3, [r7, #28]
 80009f0:	2200      	movs	r2, #0
 80009f2:	4698      	mov	r8, r3
 80009f4:	4691      	mov	r9, r2
 80009f6:	4640      	mov	r0, r8
 80009f8:	4649      	mov	r1, r9
 80009fa:	f000 fedf 	bl	80017bc <Extract_CAN_Device>
 80009fe:	4603      	mov	r3, r0
 8000a00:	461a      	mov	r2, r3
 8000a02:	733a      	strb	r2, [r7, #12]
 8000a04:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8000a08:	737a      	strb	r2, [r7, #13]
 8000a0a:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8000a0e:	73bb      	strb	r3, [r7, #14]
	uint8_t extracted_cmd = Extract_CAN_CMD(rxHeader.ExtId);
 8000a10:	69fb      	ldr	r3, [r7, #28]
 8000a12:	2200      	movs	r2, #0
 8000a14:	461c      	mov	r4, r3
 8000a16:	4615      	mov	r5, r2
 8000a18:	4620      	mov	r0, r4
 8000a1a:	4629      	mov	r1, r5
 8000a1c:	f000 ff1a 	bl	8001854 <Extract_CAN_CMD>
 8000a20:	4603      	mov	r3, r0
 8000a22:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	if(extracted_cmd == AWAKE_CMD){
 8000a26:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d139      	bne.n	8000aa2 <WhenCANRxFifo0MsgPending+0xe2>
		for(uint8_t i = 0; i < num_detected[can_device.node_type]; i++){
 8000a2e:	2300      	movs	r3, #0
 8000a30:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000a34:	e013      	b.n	8000a5e <WhenCANRxFifo0MsgPending+0x9e>
			if(node_id_list[can_device.node_type][i] == rxData[0])return;
 8000a36:	7b3b      	ldrb	r3, [r7, #12]
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8000a3e:	495a      	ldr	r1, [pc, #360]	; (8000ba8 <WhenCANRxFifo0MsgPending+0x1e8>)
 8000a40:	4603      	mov	r3, r0
 8000a42:	00db      	lsls	r3, r3, #3
 8000a44:	1a1b      	subs	r3, r3, r0
 8000a46:	440b      	add	r3, r1
 8000a48:	4413      	add	r3, r2
 8000a4a:	781a      	ldrb	r2, [r3, #0]
 8000a4c:	7c3b      	ldrb	r3, [r7, #16]
 8000a4e:	429a      	cmp	r2, r3
 8000a50:	f000 80a0 	beq.w	8000b94 <WhenCANRxFifo0MsgPending+0x1d4>
		for(uint8_t i = 0; i < num_detected[can_device.node_type]; i++){
 8000a54:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000a58:	3301      	adds	r3, #1
 8000a5a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000a5e:	7b3b      	ldrb	r3, [r7, #12]
 8000a60:	461a      	mov	r2, r3
 8000a62:	4b52      	ldr	r3, [pc, #328]	; (8000bac <WhenCANRxFifo0MsgPending+0x1ec>)
 8000a64:	5c9b      	ldrb	r3, [r3, r2]
 8000a66:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8000a6a:	429a      	cmp	r2, r3
 8000a6c:	d3e3      	bcc.n	8000a36 <WhenCANRxFifo0MsgPending+0x76>
		}
		node_id_list[can_device.node_type][num_detected[can_device.node_type]] = rxData[0];
 8000a6e:	7b3b      	ldrb	r3, [r7, #12]
 8000a70:	4619      	mov	r1, r3
 8000a72:	7b3b      	ldrb	r3, [r7, #12]
 8000a74:	461a      	mov	r2, r3
 8000a76:	4b4d      	ldr	r3, [pc, #308]	; (8000bac <WhenCANRxFifo0MsgPending+0x1ec>)
 8000a78:	5c9b      	ldrb	r3, [r3, r2]
 8000a7a:	461c      	mov	r4, r3
 8000a7c:	7c38      	ldrb	r0, [r7, #16]
 8000a7e:	4a4a      	ldr	r2, [pc, #296]	; (8000ba8 <WhenCANRxFifo0MsgPending+0x1e8>)
 8000a80:	460b      	mov	r3, r1
 8000a82:	00db      	lsls	r3, r3, #3
 8000a84:	1a5b      	subs	r3, r3, r1
 8000a86:	4413      	add	r3, r2
 8000a88:	4423      	add	r3, r4
 8000a8a:	4602      	mov	r2, r0
 8000a8c:	701a      	strb	r2, [r3, #0]
		num_detected[can_device.node_type] += 1;
 8000a8e:	7b3b      	ldrb	r3, [r7, #12]
 8000a90:	461a      	mov	r2, r3
 8000a92:	4b46      	ldr	r3, [pc, #280]	; (8000bac <WhenCANRxFifo0MsgPending+0x1ec>)
 8000a94:	5c9b      	ldrb	r3, [r3, r2]
 8000a96:	7b3a      	ldrb	r2, [r7, #12]
 8000a98:	3301      	adds	r3, #1
 8000a9a:	b2d9      	uxtb	r1, r3
 8000a9c:	4b43      	ldr	r3, [pc, #268]	; (8000bac <WhenCANRxFifo0MsgPending+0x1ec>)
 8000a9e:	5499      	strb	r1, [r3, r2]
 8000aa0:	e04a      	b.n	8000b38 <WhenCANRxFifo0MsgPending+0x178>
	}else if(extracted_cmd == FB_CMD){
 8000aa2:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000aa6:	2b01      	cmp	r3, #1
 8000aa8:	d146      	bne.n	8000b38 <WhenCANRxFifo0MsgPending+0x178>
		if (can_device.node_type == NODE_MCMD1){
 8000aaa:	7b3b      	ldrb	r3, [r7, #12]
 8000aac:	2b01      	cmp	r3, #1
 8000aae:	d10d      	bne.n	8000acc <WhenCANRxFifo0MsgPending+0x10c>
			memcpy(&(_feedback_table_mcmd1[can_device.node_id].feedback_motor[can_device.device_num]),
 8000ab0:	7b7b      	ldrb	r3, [r7, #13]
 8000ab2:	7bba      	ldrb	r2, [r7, #14]
 8000ab4:	005b      	lsls	r3, r3, #1
 8000ab6:	4413      	add	r3, r2
 8000ab8:	00db      	lsls	r3, r3, #3
 8000aba:	4a3d      	ldr	r2, [pc, #244]	; (8000bb0 <WhenCANRxFifo0MsgPending+0x1f0>)
 8000abc:	4413      	add	r3, r2
 8000abe:	461a      	mov	r2, r3
 8000ac0:	f107 0310 	add.w	r3, r7, #16
 8000ac4:	cb03      	ldmia	r3!, {r0, r1}
 8000ac6:	6010      	str	r0, [r2, #0]
 8000ac8:	6051      	str	r1, [r2, #4]
 8000aca:	e035      	b.n	8000b38 <WhenCANRxFifo0MsgPending+0x178>
                   rxData, sizeof(MCMD_Feedback_Typedef));
		}else if(can_device.node_type == NODE_MCMD2){
 8000acc:	7b3b      	ldrb	r3, [r7, #12]
 8000ace:	2b02      	cmp	r3, #2
 8000ad0:	d10d      	bne.n	8000aee <WhenCANRxFifo0MsgPending+0x12e>
			memcpy(&(_feedback_table_mcmd2[can_device.node_id].feedback_motor[can_device.device_num]),
 8000ad2:	7b7b      	ldrb	r3, [r7, #13]
 8000ad4:	7bba      	ldrb	r2, [r7, #14]
 8000ad6:	005b      	lsls	r3, r3, #1
 8000ad8:	4413      	add	r3, r2
 8000ada:	00db      	lsls	r3, r3, #3
 8000adc:	4a35      	ldr	r2, [pc, #212]	; (8000bb4 <WhenCANRxFifo0MsgPending+0x1f4>)
 8000ade:	4413      	add	r3, r2
 8000ae0:	461a      	mov	r2, r3
 8000ae2:	f107 0310 	add.w	r3, r7, #16
 8000ae6:	cb03      	ldmia	r3!, {r0, r1}
 8000ae8:	6010      	str	r0, [r2, #0]
 8000aea:	6051      	str	r1, [r2, #4]
 8000aec:	e024      	b.n	8000b38 <WhenCANRxFifo0MsgPending+0x178>
				   rxData, sizeof(MCMD_Feedback_Typedef));
		}else if(can_device.node_type == NODE_MCMD3){
 8000aee:	7b3b      	ldrb	r3, [r7, #12]
 8000af0:	2b03      	cmp	r3, #3
 8000af2:	d10d      	bne.n	8000b10 <WhenCANRxFifo0MsgPending+0x150>
			memcpy(&(_feedback_table_mcmd3[can_device.node_id].feedback_motor[can_device.device_num]),
 8000af4:	7b7b      	ldrb	r3, [r7, #13]
 8000af6:	7bba      	ldrb	r2, [r7, #14]
 8000af8:	005b      	lsls	r3, r3, #1
 8000afa:	4413      	add	r3, r2
 8000afc:	00db      	lsls	r3, r3, #3
 8000afe:	4a2e      	ldr	r2, [pc, #184]	; (8000bb8 <WhenCANRxFifo0MsgPending+0x1f8>)
 8000b00:	4413      	add	r3, r2
 8000b02:	461a      	mov	r2, r3
 8000b04:	f107 0310 	add.w	r3, r7, #16
 8000b08:	cb03      	ldmia	r3!, {r0, r1}
 8000b0a:	6010      	str	r0, [r2, #0]
 8000b0c:	6051      	str	r1, [r2, #4]
 8000b0e:	e013      	b.n	8000b38 <WhenCANRxFifo0MsgPending+0x178>
				   rxData, sizeof(MCMD_Feedback_Typedef));
		}else if(can_device.node_type == NODE_MCMD4){
 8000b10:	7b3b      	ldrb	r3, [r7, #12]
 8000b12:	2b06      	cmp	r3, #6
 8000b14:	d10d      	bne.n	8000b32 <WhenCANRxFifo0MsgPending+0x172>
			memcpy(&(_feedback_table_mcmd4[can_device.node_id].feedback_motor[can_device.device_num]),
 8000b16:	7b7b      	ldrb	r3, [r7, #13]
 8000b18:	7bba      	ldrb	r2, [r7, #14]
 8000b1a:	005b      	lsls	r3, r3, #1
 8000b1c:	4413      	add	r3, r2
 8000b1e:	00db      	lsls	r3, r3, #3
 8000b20:	4a26      	ldr	r2, [pc, #152]	; (8000bbc <WhenCANRxFifo0MsgPending+0x1fc>)
 8000b22:	4413      	add	r3, r2
 8000b24:	461a      	mov	r2, r3
 8000b26:	f107 0310 	add.w	r3, r7, #16
 8000b2a:	cb03      	ldmia	r3!, {r0, r1}
 8000b2c:	6010      	str	r0, [r2, #0]
 8000b2e:	6051      	str	r1, [r2, #4]
 8000b30:	e002      	b.n	8000b38 <WhenCANRxFifo0MsgPending+0x178>
				   rxData, sizeof(MCMD_Feedback_Typedef));
		}else{
			printf("Error\n\r");
 8000b32:	4823      	ldr	r0, [pc, #140]	; (8000bc0 <WhenCANRxFifo0MsgPending+0x200>)
 8000b34:	f007 f8aa 	bl	8007c8c <iprintf>
		}
	}else{

    }
	if (num_detected[NODE_MCMD1] == num_of->mcmd1 && num_detected[NODE_MCMD2] == num_of->mcmd2 &&
 8000b38:	4b1c      	ldr	r3, [pc, #112]	; (8000bac <WhenCANRxFifo0MsgPending+0x1ec>)
 8000b3a:	785a      	ldrb	r2, [r3, #1]
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	429a      	cmp	r2, r3
 8000b42:	d128      	bne.n	8000b96 <WhenCANRxFifo0MsgPending+0x1d6>
 8000b44:	4b19      	ldr	r3, [pc, #100]	; (8000bac <WhenCANRxFifo0MsgPending+0x1ec>)
 8000b46:	789a      	ldrb	r2, [r3, #2]
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	785b      	ldrb	r3, [r3, #1]
 8000b4c:	429a      	cmp	r2, r3
 8000b4e:	d122      	bne.n	8000b96 <WhenCANRxFifo0MsgPending+0x1d6>
		    num_detected[NODE_MCMD3] == num_of->mcmd3 && num_detected[NODE_SERVO] == num_of->servo &&
 8000b50:	4b16      	ldr	r3, [pc, #88]	; (8000bac <WhenCANRxFifo0MsgPending+0x1ec>)
 8000b52:	78da      	ldrb	r2, [r3, #3]
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	789b      	ldrb	r3, [r3, #2]
	if (num_detected[NODE_MCMD1] == num_of->mcmd1 && num_detected[NODE_MCMD2] == num_of->mcmd2 &&
 8000b58:	429a      	cmp	r2, r3
 8000b5a:	d11c      	bne.n	8000b96 <WhenCANRxFifo0MsgPending+0x1d6>
		    num_detected[NODE_MCMD3] == num_of->mcmd3 && num_detected[NODE_SERVO] == num_of->servo &&
 8000b5c:	4b13      	ldr	r3, [pc, #76]	; (8000bac <WhenCANRxFifo0MsgPending+0x1ec>)
 8000b5e:	791a      	ldrb	r2, [r3, #4]
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	78db      	ldrb	r3, [r3, #3]
 8000b64:	429a      	cmp	r2, r3
 8000b66:	d116      	bne.n	8000b96 <WhenCANRxFifo0MsgPending+0x1d6>
		    num_detected[NODE_AIR] == num_of->air && num_detected[NODE_MCMD4]==num_of->mcmd4 &&num_detected[NODE_OTHER] == num_of->other){
 8000b68:	4b10      	ldr	r3, [pc, #64]	; (8000bac <WhenCANRxFifo0MsgPending+0x1ec>)
 8000b6a:	795a      	ldrb	r2, [r3, #5]
 8000b6c:	683b      	ldr	r3, [r7, #0]
 8000b6e:	791b      	ldrb	r3, [r3, #4]
		    num_detected[NODE_MCMD3] == num_of->mcmd3 && num_detected[NODE_SERVO] == num_of->servo &&
 8000b70:	429a      	cmp	r2, r3
 8000b72:	d110      	bne.n	8000b96 <WhenCANRxFifo0MsgPending+0x1d6>
		    num_detected[NODE_AIR] == num_of->air && num_detected[NODE_MCMD4]==num_of->mcmd4 &&num_detected[NODE_OTHER] == num_of->other){
 8000b74:	4b0d      	ldr	r3, [pc, #52]	; (8000bac <WhenCANRxFifo0MsgPending+0x1ec>)
 8000b76:	799a      	ldrb	r2, [r3, #6]
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	795b      	ldrb	r3, [r3, #5]
 8000b7c:	429a      	cmp	r2, r3
 8000b7e:	d10a      	bne.n	8000b96 <WhenCANRxFifo0MsgPending+0x1d6>
 8000b80:	4b0a      	ldr	r3, [pc, #40]	; (8000bac <WhenCANRxFifo0MsgPending+0x1ec>)
 8000b82:	7a1a      	ldrb	r2, [r3, #8]
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	799b      	ldrb	r3, [r3, #6]
 8000b88:	429a      	cmp	r2, r3
 8000b8a:	d104      	bne.n	8000b96 <WhenCANRxFifo0MsgPending+0x1d6>
		all_node_detected = 1;
 8000b8c:	4b0d      	ldr	r3, [pc, #52]	; (8000bc4 <WhenCANRxFifo0MsgPending+0x204>)
 8000b8e:	2201      	movs	r2, #1
 8000b90:	701a      	strb	r2, [r3, #0]
 8000b92:	e000      	b.n	8000b96 <WhenCANRxFifo0MsgPending+0x1d6>
			if(node_id_list[can_device.node_type][i] == rxData[0])return;
 8000b94:	bf00      	nop
	}
}
 8000b96:	3738      	adds	r7, #56	; 0x38
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8000b9e:	bf00      	nop
 8000ba0:	200001d4 	.word	0x200001d4
 8000ba4:	08008cac 	.word	0x08008cac
 8000ba8:	200001e8 	.word	0x200001e8
 8000bac:	200001dc 	.word	0x200001dc
 8000bb0:	20000228 	.word	0x20000228
 8000bb4:	200002c8 	.word	0x200002c8
 8000bb8:	20000368 	.word	0x20000368
 8000bbc:	20000408 	.word	0x20000408
 8000bc0:	08008cc4 	.word	0x08008cc4
 8000bc4:	200001d8 	.word	0x200001d8

08000bc8 <SendBytes>:

HAL_StatusTypeDef SendBytes(uint32_t ExtId, uint8_t *bytes, uint32_t size){ // 命令を送信する関数
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b088      	sub	sp, #32
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	60f8      	str	r0, [r7, #12]
 8000bd0:	60b9      	str	r1, [r7, #8]
 8000bd2:	607a      	str	r2, [r7, #4]
	uint32_t quotient = size / 8;
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	08db      	lsrs	r3, r3, #3
 8000bd8:	61bb      	str	r3, [r7, #24]
	uint32_t remainder = size - (8 * quotient);
 8000bda:	69bb      	ldr	r3, [r7, #24]
 8000bdc:	00db      	lsls	r3, r3, #3
 8000bde:	687a      	ldr	r2, [r7, #4]
 8000be0:	1ad3      	subs	r3, r2, r3
 8000be2:	617b      	str	r3, [r7, #20]
	HAL_StatusTypeDef ret;

	for (uint8_t i = 0; i < quotient; i++){
 8000be4:	2300      	movs	r3, #0
 8000be6:	77fb      	strb	r3, [r7, #31]
 8000be8:	e015      	b.n	8000c16 <SendBytes+0x4e>
		ret = PushTx8Bytes(ExtId, bytes + i * 8, 8);
 8000bea:	7ffb      	ldrb	r3, [r7, #31]
 8000bec:	00db      	lsls	r3, r3, #3
 8000bee:	461a      	mov	r2, r3
 8000bf0:	68bb      	ldr	r3, [r7, #8]
 8000bf2:	4413      	add	r3, r2
 8000bf4:	2208      	movs	r2, #8
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	68f8      	ldr	r0, [r7, #12]
 8000bfa:	f7ff fe01 	bl	8000800 <PushTx8Bytes>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	74fb      	strb	r3, [r7, #19]
		if (ret != HAL_OK){
 8000c02:	7cfb      	ldrb	r3, [r7, #19]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d003      	beq.n	8000c10 <SendBytes+0x48>
			Error_Handler();
 8000c08:	f001 fd72 	bl	80026f0 <Error_Handler>
			return ret;
 8000c0c:	7cfb      	ldrb	r3, [r7, #19]
 8000c0e:	e02a      	b.n	8000c66 <SendBytes+0x9e>
	for (uint8_t i = 0; i < quotient; i++){
 8000c10:	7ffb      	ldrb	r3, [r7, #31]
 8000c12:	3301      	adds	r3, #1
 8000c14:	77fb      	strb	r3, [r7, #31]
 8000c16:	7ffb      	ldrb	r3, [r7, #31]
 8000c18:	69ba      	ldr	r2, [r7, #24]
 8000c1a:	429a      	cmp	r2, r3
 8000c1c:	d8e5      	bhi.n	8000bea <SendBytes+0x22>
		}
	}

	if(remainder != 0){
 8000c1e:	697b      	ldr	r3, [r7, #20]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d011      	beq.n	8000c48 <SendBytes+0x80>
		ret = PushTx8Bytes(ExtId, bytes + quotient * 8, remainder);
 8000c24:	69bb      	ldr	r3, [r7, #24]
 8000c26:	00db      	lsls	r3, r3, #3
 8000c28:	68ba      	ldr	r2, [r7, #8]
 8000c2a:	4413      	add	r3, r2
 8000c2c:	697a      	ldr	r2, [r7, #20]
 8000c2e:	4619      	mov	r1, r3
 8000c30:	68f8      	ldr	r0, [r7, #12]
 8000c32:	f7ff fde5 	bl	8000800 <PushTx8Bytes>
 8000c36:	4603      	mov	r3, r0
 8000c38:	74fb      	strb	r3, [r7, #19]
		if (ret != HAL_OK){
 8000c3a:	7cfb      	ldrb	r3, [r7, #19]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d003      	beq.n	8000c48 <SendBytes+0x80>
			Error_Handler();
 8000c40:	f001 fd56 	bl	80026f0 <Error_Handler>
			return ret;
 8000c44:	7cfb      	ldrb	r3, [r7, #19]
 8000c46:	e00e      	b.n	8000c66 <SendBytes+0x9e>
		}
	}

	ret = PopSendTx8Bytes(_canlib_phcan);
 8000c48:	4b09      	ldr	r3, [pc, #36]	; (8000c70 <SendBytes+0xa8>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f7ff fe2f 	bl	80008b0 <PopSendTx8Bytes>
 8000c52:	4603      	mov	r3, r0
 8000c54:	74fb      	strb	r3, [r7, #19]
	if (ret != HAL_OK){
 8000c56:	7cfb      	ldrb	r3, [r7, #19]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d003      	beq.n	8000c64 <SendBytes+0x9c>
		Error_Handler();
 8000c5c:	f001 fd48 	bl	80026f0 <Error_Handler>
		return ret;
 8000c60:	7cfb      	ldrb	r3, [r7, #19]
 8000c62:	e000      	b.n	8000c66 <SendBytes+0x9e>
	}

	return HAL_OK;
 8000c64:	2300      	movs	r3, #0
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	3720      	adds	r7, #32
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	200001d4 	.word	0x200001d4

08000c74 <CAN_SystemInit>:
 * @brief CANのシステムをアクティベートする. 具体的にはメッセージフィルターの設定とhal_can_start.
 *
 * @param _hcan
 * @param can_param
 */
void CAN_SystemInit(CAN_HandleTypeDef *_hcan){ // CANの初期化
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b08e      	sub	sp, #56	; 0x38
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
	CAN_FilterTypeDef sFilterConfig;
    _canlib_phcan = _hcan;
 8000c7c:	4a09      	ldr	r2, [pc, #36]	; (8000ca4 <CAN_SystemInit+0x30>)
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	6013      	str	r3, [r2, #0]

	all_node_detected = 0;
 8000c82:	4b09      	ldr	r3, [pc, #36]	; (8000ca8 <CAN_SystemInit+0x34>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	701a      	strb	r2, [r3, #0]
	for (uint8_t type = 0; type < NODE_TYPES; type++){
 8000c88:	2300      	movs	r3, #0
 8000c8a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000c8e:	e029      	b.n	8000ce4 <CAN_SystemInit+0x70>
		num_detected[type] = 0;
 8000c90:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000c94:	4a05      	ldr	r2, [pc, #20]	; (8000cac <CAN_SystemInit+0x38>)
 8000c96:	2100      	movs	r1, #0
 8000c98:	54d1      	strb	r1, [r2, r3]
		for (uint8_t i = 0; i < 0b111; i++){
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8000ca0:	e017      	b.n	8000cd2 <CAN_SystemInit+0x5e>
 8000ca2:	bf00      	nop
 8000ca4:	200001d4 	.word	0x200001d4
 8000ca8:	200001d8 	.word	0x200001d8
 8000cac:	200001dc 	.word	0x200001dc
			node_id_list[type][i] = 0xff;
 8000cb0:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8000cb4:	f897 1036 	ldrb.w	r1, [r7, #54]	; 0x36
 8000cb8:	48d7      	ldr	r0, [pc, #860]	; (8001018 <CAN_SystemInit+0x3a4>)
 8000cba:	4613      	mov	r3, r2
 8000cbc:	00db      	lsls	r3, r3, #3
 8000cbe:	1a9b      	subs	r3, r3, r2
 8000cc0:	4403      	add	r3, r0
 8000cc2:	440b      	add	r3, r1
 8000cc4:	22ff      	movs	r2, #255	; 0xff
 8000cc6:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i < 0b111; i++){
 8000cc8:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000ccc:	3301      	adds	r3, #1
 8000cce:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8000cd2:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000cd6:	2b06      	cmp	r3, #6
 8000cd8:	d9ea      	bls.n	8000cb0 <CAN_SystemInit+0x3c>
	for (uint8_t type = 0; type < NODE_TYPES; type++){
 8000cda:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000cde:	3301      	adds	r3, #1
 8000ce0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000ce4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000ce8:	2b08      	cmp	r3, #8
 8000cea:	d9d1      	bls.n	8000c90 <CAN_SystemInit+0x1c>
		}
	}

	//フィルタバンク設定
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000cec:	2300      	movs	r3, #0
 8000cee:	627b      	str	r3, [r7, #36]	; 0x24
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	62bb      	str	r3, [r7, #40]	; 0x28
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterActivation = ENABLE;
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
	sFilterConfig.SlaveStartFilterBank = 14;
 8000cfc:	230e      	movs	r3, #14
 8000cfe:	633b      	str	r3, [r7, #48]	; 0x30

	// FIFO0に初期化用のフィルタを設定
    // CAN2をつかうならSlaveStartFilterBank以上の値をFilterBankに設定する必要がある
	sFilterConfig.FilterBank = 15;
 8000d00:	230f      	movs	r3, #15
 8000d02:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterIdHigh = Make_CAN_ID(NODE_MCMD1, 0, 0, MCMD_CMD_AWAKE) >> 13; // 上16bit
 8000d04:	2300      	movs	r3, #0
 8000d06:	2200      	movs	r2, #0
 8000d08:	2100      	movs	r1, #0
 8000d0a:	2001      	movs	r0, #1
 8000d0c:	f000 fd29 	bl	8001762 <Make_CAN_ID>
 8000d10:	f04f 0200 	mov.w	r2, #0
 8000d14:	f04f 0300 	mov.w	r3, #0
 8000d18:	0b42      	lsrs	r2, r0, #13
 8000d1a:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8000d1e:	0b4b      	lsrs	r3, r1, #13
 8000d20:	4613      	mov	r3, r2
 8000d22:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh = Make_CAN_ID(NODE_MCMD1, 0, 0, 0b11111) >> 13;
 8000d24:	231f      	movs	r3, #31
 8000d26:	2200      	movs	r2, #0
 8000d28:	2100      	movs	r1, #0
 8000d2a:	2001      	movs	r0, #1
 8000d2c:	f000 fd19 	bl	8001762 <Make_CAN_ID>
 8000d30:	f04f 0200 	mov.w	r2, #0
 8000d34:	f04f 0300 	mov.w	r3, #0
 8000d38:	0b42      	lsrs	r2, r0, #13
 8000d3a:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8000d3e:	0b4b      	lsrs	r3, r1, #13
 8000d40:	4613      	mov	r3, r2
 8000d42:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterIdLow = (Make_CAN_ID(NODE_MCMD1, 0, 0, MCMD_CMD_AWAKE) & 0x1FFF) << 3 | 0b100; // 下16bit
 8000d44:	2300      	movs	r3, #0
 8000d46:	2200      	movs	r2, #0
 8000d48:	2100      	movs	r1, #0
 8000d4a:	2001      	movs	r0, #1
 8000d4c:	f000 fd09 	bl	8001762 <Make_CAN_ID>
 8000d50:	4602      	mov	r2, r0
 8000d52:	460b      	mov	r3, r1
 8000d54:	4613      	mov	r3, r2
 8000d56:	00da      	lsls	r2, r3, #3
 8000d58:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	f043 0304 	orr.w	r3, r3, #4
 8000d62:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterMaskIdLow = (Make_CAN_ID(NODE_MCMD1, 0, 0, 0b11111) & 0x1FFF) << 3 | 0b100;
 8000d64:	231f      	movs	r3, #31
 8000d66:	2200      	movs	r2, #0
 8000d68:	2100      	movs	r1, #0
 8000d6a:	2001      	movs	r0, #1
 8000d6c:	f000 fcf9 	bl	8001762 <Make_CAN_ID>
 8000d70:	4602      	mov	r2, r0
 8000d72:	460b      	mov	r3, r1
 8000d74:	4613      	mov	r3, r2
 8000d76:	00da      	lsls	r2, r3, #3
 8000d78:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8000d7c:	4013      	ands	r3, r2
 8000d7e:	f043 0304 	orr.w	r3, r3, #4
 8000d82:	61bb      	str	r3, [r7, #24]
	if (HAL_CAN_ConfigFilter(_canlib_phcan, &sFilterConfig) != HAL_OK){
 8000d84:	4ba5      	ldr	r3, [pc, #660]	; (800101c <CAN_SystemInit+0x3a8>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	f107 020c 	add.w	r2, r7, #12
 8000d8c:	4611      	mov	r1, r2
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f002 fa40 	bl	8003214 <HAL_CAN_ConfigFilter>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <CAN_SystemInit+0x12a>
		/* Filter configuration Error */
		Error_Handler();
 8000d9a:	f001 fca9 	bl	80026f0 <Error_Handler>
	}

	// FIFO0に初期化用のフィルタを設定
	sFilterConfig.FilterBank = 16;
 8000d9e:	2310      	movs	r3, #16
 8000da0:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterIdHigh = Make_CAN_ID(NODE_MCMD2, 0, 0, MCMD_CMD_AWAKE) >> 13; // 上16bit
 8000da2:	2300      	movs	r3, #0
 8000da4:	2200      	movs	r2, #0
 8000da6:	2100      	movs	r1, #0
 8000da8:	2002      	movs	r0, #2
 8000daa:	f000 fcda 	bl	8001762 <Make_CAN_ID>
 8000dae:	f04f 0200 	mov.w	r2, #0
 8000db2:	f04f 0300 	mov.w	r3, #0
 8000db6:	0b42      	lsrs	r2, r0, #13
 8000db8:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8000dbc:	0b4b      	lsrs	r3, r1, #13
 8000dbe:	4613      	mov	r3, r2
 8000dc0:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh = Make_CAN_ID(NODE_MCMD2, 0, 0, 0b11111) >> 13;
 8000dc2:	231f      	movs	r3, #31
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	2100      	movs	r1, #0
 8000dc8:	2002      	movs	r0, #2
 8000dca:	f000 fcca 	bl	8001762 <Make_CAN_ID>
 8000dce:	f04f 0200 	mov.w	r2, #0
 8000dd2:	f04f 0300 	mov.w	r3, #0
 8000dd6:	0b42      	lsrs	r2, r0, #13
 8000dd8:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8000ddc:	0b4b      	lsrs	r3, r1, #13
 8000dde:	4613      	mov	r3, r2
 8000de0:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterIdLow = (Make_CAN_ID(NODE_MCMD2, 0, 0, MCMD_CMD_AWAKE) & 0x1FFF) << 3 | 0b100; // 下16bit
 8000de2:	2300      	movs	r3, #0
 8000de4:	2200      	movs	r2, #0
 8000de6:	2100      	movs	r1, #0
 8000de8:	2002      	movs	r0, #2
 8000dea:	f000 fcba 	bl	8001762 <Make_CAN_ID>
 8000dee:	4602      	mov	r2, r0
 8000df0:	460b      	mov	r3, r1
 8000df2:	4613      	mov	r3, r2
 8000df4:	00da      	lsls	r2, r3, #3
 8000df6:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8000dfa:	4013      	ands	r3, r2
 8000dfc:	f043 0304 	orr.w	r3, r3, #4
 8000e00:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterMaskIdLow = (Make_CAN_ID(NODE_MCMD2, 0, 0, 0b11111) & 0x1FFF) << 3 | 0b100;
 8000e02:	231f      	movs	r3, #31
 8000e04:	2200      	movs	r2, #0
 8000e06:	2100      	movs	r1, #0
 8000e08:	2002      	movs	r0, #2
 8000e0a:	f000 fcaa 	bl	8001762 <Make_CAN_ID>
 8000e0e:	4602      	mov	r2, r0
 8000e10:	460b      	mov	r3, r1
 8000e12:	4613      	mov	r3, r2
 8000e14:	00da      	lsls	r2, r3, #3
 8000e16:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8000e1a:	4013      	ands	r3, r2
 8000e1c:	f043 0304 	orr.w	r3, r3, #4
 8000e20:	61bb      	str	r3, [r7, #24]
	if (HAL_CAN_ConfigFilter(_canlib_phcan, &sFilterConfig) != HAL_OK){
 8000e22:	4b7e      	ldr	r3, [pc, #504]	; (800101c <CAN_SystemInit+0x3a8>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	f107 020c 	add.w	r2, r7, #12
 8000e2a:	4611      	mov	r1, r2
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f002 f9f1 	bl	8003214 <HAL_CAN_ConfigFilter>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d001      	beq.n	8000e3c <CAN_SystemInit+0x1c8>
		/* Filter configuration Error */
		Error_Handler();
 8000e38:	f001 fc5a 	bl	80026f0 <Error_Handler>
	}

	// FIFO0に初期化用のフィルタを設定
	sFilterConfig.FilterBank = 17;
 8000e3c:	2311      	movs	r3, #17
 8000e3e:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterIdHigh = Make_CAN_ID(NODE_MCMD3, 0, 0, MCMD_CMD_AWAKE) >> 13;				   // 上16bit
 8000e40:	2300      	movs	r3, #0
 8000e42:	2200      	movs	r2, #0
 8000e44:	2100      	movs	r1, #0
 8000e46:	2003      	movs	r0, #3
 8000e48:	f000 fc8b 	bl	8001762 <Make_CAN_ID>
 8000e4c:	f04f 0200 	mov.w	r2, #0
 8000e50:	f04f 0300 	mov.w	r3, #0
 8000e54:	0b42      	lsrs	r2, r0, #13
 8000e56:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8000e5a:	0b4b      	lsrs	r3, r1, #13
 8000e5c:	4613      	mov	r3, r2
 8000e5e:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh = Make_CAN_ID(NODE_MCMD3, 0, 0, 0b11111) >> 13;					   // TODO : 治す
 8000e60:	231f      	movs	r3, #31
 8000e62:	2200      	movs	r2, #0
 8000e64:	2100      	movs	r1, #0
 8000e66:	2003      	movs	r0, #3
 8000e68:	f000 fc7b 	bl	8001762 <Make_CAN_ID>
 8000e6c:	f04f 0200 	mov.w	r2, #0
 8000e70:	f04f 0300 	mov.w	r3, #0
 8000e74:	0b42      	lsrs	r2, r0, #13
 8000e76:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8000e7a:	0b4b      	lsrs	r3, r1, #13
 8000e7c:	4613      	mov	r3, r2
 8000e7e:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterIdLow = (Make_CAN_ID(NODE_MCMD3, 0, 0, MCMD_CMD_AWAKE) & 0x1FFF) << 3 | 0b100; // 下16bit
 8000e80:	2300      	movs	r3, #0
 8000e82:	2200      	movs	r2, #0
 8000e84:	2100      	movs	r1, #0
 8000e86:	2003      	movs	r0, #3
 8000e88:	f000 fc6b 	bl	8001762 <Make_CAN_ID>
 8000e8c:	4602      	mov	r2, r0
 8000e8e:	460b      	mov	r3, r1
 8000e90:	4613      	mov	r3, r2
 8000e92:	00da      	lsls	r2, r3, #3
 8000e94:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8000e98:	4013      	ands	r3, r2
 8000e9a:	f043 0304 	orr.w	r3, r3, #4
 8000e9e:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterMaskIdLow = (Make_CAN_ID(NODE_MCMD3, 0, 0, 0b11111) & 0x1FFF) << 3 | 0b100;
 8000ea0:	231f      	movs	r3, #31
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	2003      	movs	r0, #3
 8000ea8:	f000 fc5b 	bl	8001762 <Make_CAN_ID>
 8000eac:	4602      	mov	r2, r0
 8000eae:	460b      	mov	r3, r1
 8000eb0:	4613      	mov	r3, r2
 8000eb2:	00da      	lsls	r2, r3, #3
 8000eb4:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8000eb8:	4013      	ands	r3, r2
 8000eba:	f043 0304 	orr.w	r3, r3, #4
 8000ebe:	61bb      	str	r3, [r7, #24]
	if (HAL_CAN_ConfigFilter(_canlib_phcan, &sFilterConfig) != HAL_OK){
 8000ec0:	4b56      	ldr	r3, [pc, #344]	; (800101c <CAN_SystemInit+0x3a8>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	f107 020c 	add.w	r2, r7, #12
 8000ec8:	4611      	mov	r1, r2
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f002 f9a2 	bl	8003214 <HAL_CAN_ConfigFilter>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <CAN_SystemInit+0x266>
		/* Filter configuration Error */
		Error_Handler();
 8000ed6:	f001 fc0b 	bl	80026f0 <Error_Handler>
	}

	// FIFO0にfeedback用のフィルタを設定
	sFilterConfig.FilterBank = 18;
 8000eda:	2312      	movs	r3, #18
 8000edc:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterIdHigh = Make_CAN_ID(0, 0, 0, MCMD_CMD_FB) >> 13; // 上16bit
 8000ede:	2301      	movs	r3, #1
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	2100      	movs	r1, #0
 8000ee4:	2000      	movs	r0, #0
 8000ee6:	f000 fc3c 	bl	8001762 <Make_CAN_ID>
 8000eea:	f04f 0200 	mov.w	r2, #0
 8000eee:	f04f 0300 	mov.w	r3, #0
 8000ef2:	0b42      	lsrs	r2, r0, #13
 8000ef4:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8000ef8:	0b4b      	lsrs	r3, r1, #13
 8000efa:	4613      	mov	r3, r2
 8000efc:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh = Make_CAN_ID(0, 0, 0, 0b11111) >> 13;
 8000efe:	231f      	movs	r3, #31
 8000f00:	2200      	movs	r2, #0
 8000f02:	2100      	movs	r1, #0
 8000f04:	2000      	movs	r0, #0
 8000f06:	f000 fc2c 	bl	8001762 <Make_CAN_ID>
 8000f0a:	f04f 0200 	mov.w	r2, #0
 8000f0e:	f04f 0300 	mov.w	r3, #0
 8000f12:	0b42      	lsrs	r2, r0, #13
 8000f14:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8000f18:	0b4b      	lsrs	r3, r1, #13
 8000f1a:	4613      	mov	r3, r2
 8000f1c:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterIdLow = (Make_CAN_ID(0, 0, 0, MCMD_CMD_FB) & 0x1FFF) << 3 | 0b100; // 下16bit
 8000f1e:	2301      	movs	r3, #1
 8000f20:	2200      	movs	r2, #0
 8000f22:	2100      	movs	r1, #0
 8000f24:	2000      	movs	r0, #0
 8000f26:	f000 fc1c 	bl	8001762 <Make_CAN_ID>
 8000f2a:	4602      	mov	r2, r0
 8000f2c:	460b      	mov	r3, r1
 8000f2e:	4613      	mov	r3, r2
 8000f30:	00da      	lsls	r2, r3, #3
 8000f32:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8000f36:	4013      	ands	r3, r2
 8000f38:	f043 0304 	orr.w	r3, r3, #4
 8000f3c:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterMaskIdLow = (Make_CAN_ID(0, 0, 0, 0b11111) & 0x1FFF) << 3 | 0b100;
 8000f3e:	231f      	movs	r3, #31
 8000f40:	2200      	movs	r2, #0
 8000f42:	2100      	movs	r1, #0
 8000f44:	2000      	movs	r0, #0
 8000f46:	f000 fc0c 	bl	8001762 <Make_CAN_ID>
 8000f4a:	4602      	mov	r2, r0
 8000f4c:	460b      	mov	r3, r1
 8000f4e:	4613      	mov	r3, r2
 8000f50:	00da      	lsls	r2, r3, #3
 8000f52:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8000f56:	4013      	ands	r3, r2
 8000f58:	f043 0304 	orr.w	r3, r3, #4
 8000f5c:	61bb      	str	r3, [r7, #24]
	if (HAL_CAN_ConfigFilter(_canlib_phcan, &sFilterConfig) != HAL_OK){
 8000f5e:	4b2f      	ldr	r3, [pc, #188]	; (800101c <CAN_SystemInit+0x3a8>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f107 020c 	add.w	r2, r7, #12
 8000f66:	4611      	mov	r1, r2
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f002 f953 	bl	8003214 <HAL_CAN_ConfigFilter>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <CAN_SystemInit+0x304>
		/* Filter configuration Error */
		Error_Handler();
 8000f74:	f001 fbbc 	bl	80026f0 <Error_Handler>
	}

	// FIFO0に初期化用のフィルタを設定
	sFilterConfig.FilterBank = 19;
 8000f78:	2313      	movs	r3, #19
 8000f7a:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterIdHigh = Make_CAN_ID(NODE_SERVO, 0, 0, SERVO_CMD_AWAKE) >> 13; // 上16bit
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	2200      	movs	r2, #0
 8000f80:	2100      	movs	r1, #0
 8000f82:	2004      	movs	r0, #4
 8000f84:	f000 fbed 	bl	8001762 <Make_CAN_ID>
 8000f88:	f04f 0200 	mov.w	r2, #0
 8000f8c:	f04f 0300 	mov.w	r3, #0
 8000f90:	0b42      	lsrs	r2, r0, #13
 8000f92:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8000f96:	0b4b      	lsrs	r3, r1, #13
 8000f98:	4613      	mov	r3, r2
 8000f9a:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh = Make_CAN_ID(NODE_SERVO, 0, 0, 0b11111) >> 13;
 8000f9c:	231f      	movs	r3, #31
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	2100      	movs	r1, #0
 8000fa2:	2004      	movs	r0, #4
 8000fa4:	f000 fbdd 	bl	8001762 <Make_CAN_ID>
 8000fa8:	f04f 0200 	mov.w	r2, #0
 8000fac:	f04f 0300 	mov.w	r3, #0
 8000fb0:	0b42      	lsrs	r2, r0, #13
 8000fb2:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8000fb6:	0b4b      	lsrs	r3, r1, #13
 8000fb8:	4613      	mov	r3, r2
 8000fba:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterIdLow = (Make_CAN_ID(NODE_SERVO, 0, 0, SERVO_CMD_AWAKE) & 0x1FFF) << 3 | 0b100; // 下16bit
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	2004      	movs	r0, #4
 8000fc4:	f000 fbcd 	bl	8001762 <Make_CAN_ID>
 8000fc8:	4602      	mov	r2, r0
 8000fca:	460b      	mov	r3, r1
 8000fcc:	4613      	mov	r3, r2
 8000fce:	00da      	lsls	r2, r3, #3
 8000fd0:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	f043 0304 	orr.w	r3, r3, #4
 8000fda:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterMaskIdLow = (Make_CAN_ID(NODE_SERVO, 0, 0, 0b11111) & 0x1FFF) << 3 | 0b100;
 8000fdc:	231f      	movs	r3, #31
 8000fde:	2200      	movs	r2, #0
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	2004      	movs	r0, #4
 8000fe4:	f000 fbbd 	bl	8001762 <Make_CAN_ID>
 8000fe8:	4602      	mov	r2, r0
 8000fea:	460b      	mov	r3, r1
 8000fec:	4613      	mov	r3, r2
 8000fee:	00da      	lsls	r2, r3, #3
 8000ff0:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	f043 0304 	orr.w	r3, r3, #4
 8000ffa:	61bb      	str	r3, [r7, #24]
	if (HAL_CAN_ConfigFilter(_canlib_phcan, &sFilterConfig) != HAL_OK){
 8000ffc:	4b07      	ldr	r3, [pc, #28]	; (800101c <CAN_SystemInit+0x3a8>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f107 020c 	add.w	r2, r7, #12
 8001004:	4611      	mov	r1, r2
 8001006:	4618      	mov	r0, r3
 8001008:	f002 f904 	bl	8003214 <HAL_CAN_ConfigFilter>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d006      	beq.n	8001020 <CAN_SystemInit+0x3ac>
		/* Filter configuration Error */
		Error_Handler();
 8001012:	f001 fb6d 	bl	80026f0 <Error_Handler>
 8001016:	e003      	b.n	8001020 <CAN_SystemInit+0x3ac>
 8001018:	200001e8 	.word	0x200001e8
 800101c:	200001d4 	.word	0x200001d4
	}

	// FIFO0に初期化用のフィルタを設定
	sFilterConfig.FilterBank = 20;
 8001020:	2314      	movs	r3, #20
 8001022:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterIdHigh = Make_CAN_ID(NODE_AIR, 0, 0, AIR_CMD_AWAKE) >> 13; // 上16bit
 8001024:	2300      	movs	r3, #0
 8001026:	2200      	movs	r2, #0
 8001028:	2100      	movs	r1, #0
 800102a:	2005      	movs	r0, #5
 800102c:	f000 fb99 	bl	8001762 <Make_CAN_ID>
 8001030:	f04f 0200 	mov.w	r2, #0
 8001034:	f04f 0300 	mov.w	r3, #0
 8001038:	0b42      	lsrs	r2, r0, #13
 800103a:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 800103e:	0b4b      	lsrs	r3, r1, #13
 8001040:	4613      	mov	r3, r2
 8001042:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh = Make_CAN_ID(NODE_AIR, 0, 0, 0b11111) >> 13;
 8001044:	231f      	movs	r3, #31
 8001046:	2200      	movs	r2, #0
 8001048:	2100      	movs	r1, #0
 800104a:	2005      	movs	r0, #5
 800104c:	f000 fb89 	bl	8001762 <Make_CAN_ID>
 8001050:	f04f 0200 	mov.w	r2, #0
 8001054:	f04f 0300 	mov.w	r3, #0
 8001058:	0b42      	lsrs	r2, r0, #13
 800105a:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 800105e:	0b4b      	lsrs	r3, r1, #13
 8001060:	4613      	mov	r3, r2
 8001062:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterIdLow = (Make_CAN_ID(NODE_AIR, 0, 0, AIR_CMD_AWAKE) & 0x1FFF) << 3 | 0b100; // 下16bit
 8001064:	2300      	movs	r3, #0
 8001066:	2200      	movs	r2, #0
 8001068:	2100      	movs	r1, #0
 800106a:	2005      	movs	r0, #5
 800106c:	f000 fb79 	bl	8001762 <Make_CAN_ID>
 8001070:	4602      	mov	r2, r0
 8001072:	460b      	mov	r3, r1
 8001074:	4613      	mov	r3, r2
 8001076:	00da      	lsls	r2, r3, #3
 8001078:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 800107c:	4013      	ands	r3, r2
 800107e:	f043 0304 	orr.w	r3, r3, #4
 8001082:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterMaskIdLow = (Make_CAN_ID(NODE_AIR, 0, 0, 0b11111) & 0x1FFF) << 3 | 0b100;
 8001084:	231f      	movs	r3, #31
 8001086:	2200      	movs	r2, #0
 8001088:	2100      	movs	r1, #0
 800108a:	2005      	movs	r0, #5
 800108c:	f000 fb69 	bl	8001762 <Make_CAN_ID>
 8001090:	4602      	mov	r2, r0
 8001092:	460b      	mov	r3, r1
 8001094:	4613      	mov	r3, r2
 8001096:	00da      	lsls	r2, r3, #3
 8001098:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 800109c:	4013      	ands	r3, r2
 800109e:	f043 0304 	orr.w	r3, r3, #4
 80010a2:	61bb      	str	r3, [r7, #24]
	if (HAL_CAN_ConfigFilter(_canlib_phcan, &sFilterConfig) != HAL_OK){
 80010a4:	4b44      	ldr	r3, [pc, #272]	; (80011b8 <CAN_SystemInit+0x544>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f107 020c 	add.w	r2, r7, #12
 80010ac:	4611      	mov	r1, r2
 80010ae:	4618      	mov	r0, r3
 80010b0:	f002 f8b0 	bl	8003214 <HAL_CAN_ConfigFilter>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <CAN_SystemInit+0x44a>
		/* Filter configuration Error */
		Error_Handler();
 80010ba:	f001 fb19 	bl	80026f0 <Error_Handler>
	}

	// FIFO0に初期化用のフィルタを設定
	sFilterConfig.FilterBank = 21;
 80010be:	2315      	movs	r3, #21
 80010c0:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterIdHigh = Make_CAN_ID(NODE_MCMD4, 0, 0, AIR_CMD_AWAKE) >> 13; // 上16bit
 80010c2:	2300      	movs	r3, #0
 80010c4:	2200      	movs	r2, #0
 80010c6:	2100      	movs	r1, #0
 80010c8:	2006      	movs	r0, #6
 80010ca:	f000 fb4a 	bl	8001762 <Make_CAN_ID>
 80010ce:	f04f 0200 	mov.w	r2, #0
 80010d2:	f04f 0300 	mov.w	r3, #0
 80010d6:	0b42      	lsrs	r2, r0, #13
 80010d8:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 80010dc:	0b4b      	lsrs	r3, r1, #13
 80010de:	4613      	mov	r3, r2
 80010e0:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh = Make_CAN_ID(NODE_MCMD4, 0, 0, 0b11111) >> 13;
 80010e2:	231f      	movs	r3, #31
 80010e4:	2200      	movs	r2, #0
 80010e6:	2100      	movs	r1, #0
 80010e8:	2006      	movs	r0, #6
 80010ea:	f000 fb3a 	bl	8001762 <Make_CAN_ID>
 80010ee:	f04f 0200 	mov.w	r2, #0
 80010f2:	f04f 0300 	mov.w	r3, #0
 80010f6:	0b42      	lsrs	r2, r0, #13
 80010f8:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 80010fc:	0b4b      	lsrs	r3, r1, #13
 80010fe:	4613      	mov	r3, r2
 8001100:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterIdLow = (Make_CAN_ID(NODE_MCMD4, 0, 0, AIR_CMD_AWAKE) & 0x1FFF) << 3 | 0b100; // 下16bit
 8001102:	2300      	movs	r3, #0
 8001104:	2200      	movs	r2, #0
 8001106:	2100      	movs	r1, #0
 8001108:	2006      	movs	r0, #6
 800110a:	f000 fb2a 	bl	8001762 <Make_CAN_ID>
 800110e:	4602      	mov	r2, r0
 8001110:	460b      	mov	r3, r1
 8001112:	4613      	mov	r3, r2
 8001114:	00da      	lsls	r2, r3, #3
 8001116:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 800111a:	4013      	ands	r3, r2
 800111c:	f043 0304 	orr.w	r3, r3, #4
 8001120:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterMaskIdLow = (Make_CAN_ID(NODE_MCMD4, 0, 0, 0b11111) & 0x1FFF) << 3 | 0b100;
 8001122:	231f      	movs	r3, #31
 8001124:	2200      	movs	r2, #0
 8001126:	2100      	movs	r1, #0
 8001128:	2006      	movs	r0, #6
 800112a:	f000 fb1a 	bl	8001762 <Make_CAN_ID>
 800112e:	4602      	mov	r2, r0
 8001130:	460b      	mov	r3, r1
 8001132:	4613      	mov	r3, r2
 8001134:	00da      	lsls	r2, r3, #3
 8001136:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 800113a:	4013      	ands	r3, r2
 800113c:	f043 0304 	orr.w	r3, r3, #4
 8001140:	61bb      	str	r3, [r7, #24]
	if (HAL_CAN_ConfigFilter(_canlib_phcan, &sFilterConfig) != HAL_OK){
 8001142:	4b1d      	ldr	r3, [pc, #116]	; (80011b8 <CAN_SystemInit+0x544>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f107 020c 	add.w	r2, r7, #12
 800114a:	4611      	mov	r1, r2
 800114c:	4618      	mov	r0, r3
 800114e:	f002 f861 	bl	8003214 <HAL_CAN_ConfigFilter>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <CAN_SystemInit+0x4e8>
		/* Filter configuration Error */
		Error_Handler();
 8001158:	f001 faca 	bl	80026f0 <Error_Handler>
	}

	if (HAL_CAN_Start(_canlib_phcan) != HAL_OK){
 800115c:	4b16      	ldr	r3, [pc, #88]	; (80011b8 <CAN_SystemInit+0x544>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4618      	mov	r0, r3
 8001162:	f002 f943 	bl	80033ec <HAL_CAN_Start>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d004      	beq.n	8001176 <CAN_SystemInit+0x502>
		printf(" -> Start Error\n");
 800116c:	4813      	ldr	r0, [pc, #76]	; (80011bc <CAN_SystemInit+0x548>)
 800116e:	f006 fe13 	bl	8007d98 <puts>
		Error_Handler();
 8001172:	f001 fabd 	bl	80026f0 <Error_Handler>
	}

	if (HAL_CAN_ActivateNotification(_canlib_phcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK){
 8001176:	4b10      	ldr	r3, [pc, #64]	; (80011b8 <CAN_SystemInit+0x544>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	2102      	movs	r1, #2
 800117c:	4618      	mov	r0, r3
 800117e:	f002 fb90 	bl	80038a2 <HAL_CAN_ActivateNotification>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d004      	beq.n	8001192 <CAN_SystemInit+0x51e>
		printf(" -> FIFO0 CAN_Activation error\n\r");
 8001188:	480d      	ldr	r0, [pc, #52]	; (80011c0 <CAN_SystemInit+0x54c>)
 800118a:	f006 fd7f 	bl	8007c8c <iprintf>
		Error_Handler();
 800118e:	f001 faaf 	bl	80026f0 <Error_Handler>
	}

	if (HAL_CAN_ActivateNotification(_canlib_phcan, CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK){
 8001192:	4b09      	ldr	r3, [pc, #36]	; (80011b8 <CAN_SystemInit+0x544>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	2101      	movs	r1, #1
 8001198:	4618      	mov	r0, r3
 800119a:	f002 fb82 	bl	80038a2 <HAL_CAN_ActivateNotification>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d004      	beq.n	80011ae <CAN_SystemInit+0x53a>
		printf(" -> FIFO0 CAN_Activation error\n\r");
 80011a4:	4806      	ldr	r0, [pc, #24]	; (80011c0 <CAN_SystemInit+0x54c>)
 80011a6:	f006 fd71 	bl	8007c8c <iprintf>
		Error_Handler();
 80011aa:	f001 faa1 	bl	80026f0 <Error_Handler>
	}
}
 80011ae:	bf00      	nop
 80011b0:	3738      	adds	r7, #56	; 0x38
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	200001d4 	.word	0x200001d4
 80011bc:	08008ccc 	.word	0x08008ccc
 80011c0:	08008cdc 	.word	0x08008cdc

080011c4 <CAN_WaitConnect>:

/**
 * @brief CANの全デバイスの接続が確認されるまで待つ.
 *
 */
void CAN_WaitConnect(NUM_OF_DEVICES *num_of){ // 他のデバイスが接続されるのを待つ
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b084      	sub	sp, #16
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
	if(num_of->mcmd1 == 0 && num_of->mcmd2 == 0 && num_of->mcmd3 == 0 && num_of->mcmd4 == 0 && num_of->air == 0
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d122      	bne.n	800121a <CAN_WaitConnect+0x56>
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	785b      	ldrb	r3, [r3, #1]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d11e      	bne.n	800121a <CAN_WaitConnect+0x56>
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	789b      	ldrb	r3, [r3, #2]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d11a      	bne.n	800121a <CAN_WaitConnect+0x56>
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	795b      	ldrb	r3, [r3, #5]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d116      	bne.n	800121a <CAN_WaitConnect+0x56>
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	791b      	ldrb	r3, [r3, #4]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d112      	bne.n	800121a <CAN_WaitConnect+0x56>
		&& num_of->servo == 0 && num_of->other == 0){
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	78db      	ldrb	r3, [r3, #3]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d10e      	bne.n	800121a <CAN_WaitConnect+0x56>
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	799b      	ldrb	r3, [r3, #6]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d10a      	bne.n	800121a <CAN_WaitConnect+0x56>
		all_node_detected = 1;
 8001204:	4b4e      	ldr	r3, [pc, #312]	; (8001340 <CAN_WaitConnect+0x17c>)
 8001206:	2201      	movs	r2, #1
 8001208:	701a      	strb	r2, [r3, #0]
	}
	while (all_node_detected == 0){
 800120a:	e006      	b.n	800121a <CAN_WaitConnect+0x56>
		printf("Waiting CAN_NODES Wake Up...\n\r");
 800120c:	484d      	ldr	r0, [pc, #308]	; (8001344 <CAN_WaitConnect+0x180>)
 800120e:	f006 fd3d 	bl	8007c8c <iprintf>
		HAL_Delay(500);
 8001212:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001216:	f001 fedd 	bl	8002fd4 <HAL_Delay>
	while (all_node_detected == 0){
 800121a:	4b49      	ldr	r3, [pc, #292]	; (8001340 <CAN_WaitConnect+0x17c>)
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	b2db      	uxtb	r3, r3
 8001220:	2b00      	cmp	r3, #0
 8001222:	d0f3      	beq.n	800120c <CAN_WaitConnect+0x48>
	}
	for (uint8_t i = 0; i < num_of->mcmd1; i++)
 8001224:	2300      	movs	r3, #0
 8001226:	73fb      	strb	r3, [r7, #15]
 8001228:	e00a      	b.n	8001240 <CAN_WaitConnect+0x7c>
		printf("MCMD1 No.%d\n\r", node_id_list[NODE_MCMD1][i]);
 800122a:	7bfb      	ldrb	r3, [r7, #15]
 800122c:	4a46      	ldr	r2, [pc, #280]	; (8001348 <CAN_WaitConnect+0x184>)
 800122e:	4413      	add	r3, r2
 8001230:	79db      	ldrb	r3, [r3, #7]
 8001232:	4619      	mov	r1, r3
 8001234:	4845      	ldr	r0, [pc, #276]	; (800134c <CAN_WaitConnect+0x188>)
 8001236:	f006 fd29 	bl	8007c8c <iprintf>
	for (uint8_t i = 0; i < num_of->mcmd1; i++)
 800123a:	7bfb      	ldrb	r3, [r7, #15]
 800123c:	3301      	adds	r3, #1
 800123e:	73fb      	strb	r3, [r7, #15]
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	7bfa      	ldrb	r2, [r7, #15]
 8001246:	429a      	cmp	r2, r3
 8001248:	d3ef      	bcc.n	800122a <CAN_WaitConnect+0x66>
	for (uint8_t i = 0; i < num_of->mcmd2; i++)
 800124a:	2300      	movs	r3, #0
 800124c:	73bb      	strb	r3, [r7, #14]
 800124e:	e00a      	b.n	8001266 <CAN_WaitConnect+0xa2>
		printf("MCMD2 No.%d\n\r", node_id_list[NODE_MCMD2][i]);
 8001250:	7bbb      	ldrb	r3, [r7, #14]
 8001252:	4a3d      	ldr	r2, [pc, #244]	; (8001348 <CAN_WaitConnect+0x184>)
 8001254:	4413      	add	r3, r2
 8001256:	7b9b      	ldrb	r3, [r3, #14]
 8001258:	4619      	mov	r1, r3
 800125a:	483d      	ldr	r0, [pc, #244]	; (8001350 <CAN_WaitConnect+0x18c>)
 800125c:	f006 fd16 	bl	8007c8c <iprintf>
	for (uint8_t i = 0; i < num_of->mcmd2; i++)
 8001260:	7bbb      	ldrb	r3, [r7, #14]
 8001262:	3301      	adds	r3, #1
 8001264:	73bb      	strb	r3, [r7, #14]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	785b      	ldrb	r3, [r3, #1]
 800126a:	7bba      	ldrb	r2, [r7, #14]
 800126c:	429a      	cmp	r2, r3
 800126e:	d3ef      	bcc.n	8001250 <CAN_WaitConnect+0x8c>
	for (uint8_t i = 0; i < num_of->mcmd3; i++)
 8001270:	2300      	movs	r3, #0
 8001272:	737b      	strb	r3, [r7, #13]
 8001274:	e00a      	b.n	800128c <CAN_WaitConnect+0xc8>
		printf("MCMD3 No.%d\n\r", node_id_list[NODE_MCMD3][i]);
 8001276:	7b7b      	ldrb	r3, [r7, #13]
 8001278:	4a33      	ldr	r2, [pc, #204]	; (8001348 <CAN_WaitConnect+0x184>)
 800127a:	4413      	add	r3, r2
 800127c:	7d5b      	ldrb	r3, [r3, #21]
 800127e:	4619      	mov	r1, r3
 8001280:	4834      	ldr	r0, [pc, #208]	; (8001354 <CAN_WaitConnect+0x190>)
 8001282:	f006 fd03 	bl	8007c8c <iprintf>
	for (uint8_t i = 0; i < num_of->mcmd3; i++)
 8001286:	7b7b      	ldrb	r3, [r7, #13]
 8001288:	3301      	adds	r3, #1
 800128a:	737b      	strb	r3, [r7, #13]
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	789b      	ldrb	r3, [r3, #2]
 8001290:	7b7a      	ldrb	r2, [r7, #13]
 8001292:	429a      	cmp	r2, r3
 8001294:	d3ef      	bcc.n	8001276 <CAN_WaitConnect+0xb2>
	for (uint8_t i = 0; i < num_of->mcmd4; i++)
 8001296:	2300      	movs	r3, #0
 8001298:	733b      	strb	r3, [r7, #12]
 800129a:	e00b      	b.n	80012b4 <CAN_WaitConnect+0xf0>
		printf("MCMD4 No.%d\n\r", node_id_list[NODE_MCMD4][i]);
 800129c:	7b3b      	ldrb	r3, [r7, #12]
 800129e:	4a2a      	ldr	r2, [pc, #168]	; (8001348 <CAN_WaitConnect+0x184>)
 80012a0:	4413      	add	r3, r2
 80012a2:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80012a6:	4619      	mov	r1, r3
 80012a8:	482b      	ldr	r0, [pc, #172]	; (8001358 <CAN_WaitConnect+0x194>)
 80012aa:	f006 fcef 	bl	8007c8c <iprintf>
	for (uint8_t i = 0; i < num_of->mcmd4; i++)
 80012ae:	7b3b      	ldrb	r3, [r7, #12]
 80012b0:	3301      	adds	r3, #1
 80012b2:	733b      	strb	r3, [r7, #12]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	795b      	ldrb	r3, [r3, #5]
 80012b8:	7b3a      	ldrb	r2, [r7, #12]
 80012ba:	429a      	cmp	r2, r3
 80012bc:	d3ee      	bcc.n	800129c <CAN_WaitConnect+0xd8>
	for (uint8_t i = 0; i < num_of->servo; i++)
 80012be:	2300      	movs	r3, #0
 80012c0:	72fb      	strb	r3, [r7, #11]
 80012c2:	e00a      	b.n	80012da <CAN_WaitConnect+0x116>
		printf("Servo No.%d\n\r", node_id_list[NODE_SERVO][i]);
 80012c4:	7afb      	ldrb	r3, [r7, #11]
 80012c6:	4a20      	ldr	r2, [pc, #128]	; (8001348 <CAN_WaitConnect+0x184>)
 80012c8:	4413      	add	r3, r2
 80012ca:	7f1b      	ldrb	r3, [r3, #28]
 80012cc:	4619      	mov	r1, r3
 80012ce:	4823      	ldr	r0, [pc, #140]	; (800135c <CAN_WaitConnect+0x198>)
 80012d0:	f006 fcdc 	bl	8007c8c <iprintf>
	for (uint8_t i = 0; i < num_of->servo; i++)
 80012d4:	7afb      	ldrb	r3, [r7, #11]
 80012d6:	3301      	adds	r3, #1
 80012d8:	72fb      	strb	r3, [r7, #11]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	78db      	ldrb	r3, [r3, #3]
 80012de:	7afa      	ldrb	r2, [r7, #11]
 80012e0:	429a      	cmp	r2, r3
 80012e2:	d3ef      	bcc.n	80012c4 <CAN_WaitConnect+0x100>
	for (uint8_t i = 0; i < num_of->air; i++)
 80012e4:	2300      	movs	r3, #0
 80012e6:	72bb      	strb	r3, [r7, #10]
 80012e8:	e00b      	b.n	8001302 <CAN_WaitConnect+0x13e>
		printf("Air No.%d\n\r", node_id_list[NODE_AIR][i]);
 80012ea:	7abb      	ldrb	r3, [r7, #10]
 80012ec:	4a16      	ldr	r2, [pc, #88]	; (8001348 <CAN_WaitConnect+0x184>)
 80012ee:	4413      	add	r3, r2
 80012f0:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80012f4:	4619      	mov	r1, r3
 80012f6:	481a      	ldr	r0, [pc, #104]	; (8001360 <CAN_WaitConnect+0x19c>)
 80012f8:	f006 fcc8 	bl	8007c8c <iprintf>
	for (uint8_t i = 0; i < num_of->air; i++)
 80012fc:	7abb      	ldrb	r3, [r7, #10]
 80012fe:	3301      	adds	r3, #1
 8001300:	72bb      	strb	r3, [r7, #10]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	791b      	ldrb	r3, [r3, #4]
 8001306:	7aba      	ldrb	r2, [r7, #10]
 8001308:	429a      	cmp	r2, r3
 800130a:	d3ee      	bcc.n	80012ea <CAN_WaitConnect+0x126>
	for (uint8_t i = 0; i < num_of->other; i++)
 800130c:	2300      	movs	r3, #0
 800130e:	727b      	strb	r3, [r7, #9]
 8001310:	e00b      	b.n	800132a <CAN_WaitConnect+0x166>
		printf("Others No.%d\n\r", node_id_list[NODE_OTHER][i]);
 8001312:	7a7b      	ldrb	r3, [r7, #9]
 8001314:	4a0c      	ldr	r2, [pc, #48]	; (8001348 <CAN_WaitConnect+0x184>)
 8001316:	4413      	add	r3, r2
 8001318:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800131c:	4619      	mov	r1, r3
 800131e:	4811      	ldr	r0, [pc, #68]	; (8001364 <CAN_WaitConnect+0x1a0>)
 8001320:	f006 fcb4 	bl	8007c8c <iprintf>
	for (uint8_t i = 0; i < num_of->other; i++)
 8001324:	7a7b      	ldrb	r3, [r7, #9]
 8001326:	3301      	adds	r3, #1
 8001328:	727b      	strb	r3, [r7, #9]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	799b      	ldrb	r3, [r3, #6]
 800132e:	7a7a      	ldrb	r2, [r7, #9]
 8001330:	429a      	cmp	r2, r3
 8001332:	d3ee      	bcc.n	8001312 <CAN_WaitConnect+0x14e>
}
 8001334:	bf00      	nop
 8001336:	bf00      	nop
 8001338:	3710      	adds	r7, #16
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	200001d8 	.word	0x200001d8
 8001344:	08008d00 	.word	0x08008d00
 8001348:	200001e8 	.word	0x200001e8
 800134c:	08008d20 	.word	0x08008d20
 8001350:	08008d30 	.word	0x08008d30
 8001354:	08008d40 	.word	0x08008d40
 8001358:	08008d50 	.word	0x08008d50
 800135c:	08008d60 	.word	0x08008d60
 8001360:	08008d70 	.word	0x08008d70
 8001364:	08008d7c 	.word	0x08008d7c

08001368 <MCMD_ChangeControl>:

//// MCMD
void MCMD_ChangeControl(MCMD_HandleTypedef *hmcmd){ // Ctrl typeを変更する.
 8001368:	b580      	push	{r7, lr}
 800136a:	b086      	sub	sp, #24
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
	float fdata[2];
	fdata[0] = hmcmd->ctrl_param.PID_param.kp;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	699b      	ldr	r3, [r3, #24]
 8001374:	613b      	str	r3, [r7, #16]
	fdata[1] = hmcmd->ctrl_param.PID_param.ki;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	69db      	ldr	r3, [r3, #28]
 800137a:	617b      	str	r3, [r7, #20]
	SendBytes(Make_CAN_ID_from_CAN_Device(&(hmcmd->device), MCMD_CMD_CHANGE_CTRL1), (uint8_t *)&fdata, sizeof(fdata));
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2105      	movs	r1, #5
 8001380:	4618      	mov	r0, r3
 8001382:	f000 f9c5 	bl	8001710 <Make_CAN_ID_from_CAN_Device>
 8001386:	4602      	mov	r2, r0
 8001388:	460b      	mov	r3, r1
 800138a:	4610      	mov	r0, r2
 800138c:	f107 0310 	add.w	r3, r7, #16
 8001390:	2208      	movs	r2, #8
 8001392:	4619      	mov	r1, r3
 8001394:	f7ff fc18 	bl	8000bc8 <SendBytes>
	fdata[0] = hmcmd->ctrl_param.PID_param.kd;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6a1b      	ldr	r3, [r3, #32]
 800139c:	613b      	str	r3, [r7, #16]
	fdata[1] = hmcmd->ctrl_param.accel_limit_size;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013a2:	617b      	str	r3, [r7, #20]
	SendBytes(Make_CAN_ID_from_CAN_Device(&(hmcmd->device), MCMD_CMD_CHANGE_CTRL2), (uint8_t *)&fdata, sizeof(fdata));
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2106      	movs	r1, #6
 80013a8:	4618      	mov	r0, r3
 80013aa:	f000 f9b1 	bl	8001710 <Make_CAN_ID_from_CAN_Device>
 80013ae:	4602      	mov	r2, r0
 80013b0:	460b      	mov	r3, r1
 80013b2:	4610      	mov	r0, r2
 80013b4:	f107 0310 	add.w	r3, r7, #16
 80013b8:	2208      	movs	r2, #8
 80013ba:	4619      	mov	r1, r3
 80013bc:	f7ff fc04 	bl	8000bc8 <SendBytes>

    fdata[0] = hmcmd->ctrl_param.PID_param.kff;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013c4:	613b      	str	r3, [r7, #16]
    fdata[1] = hmcmd->ctrl_param.gravity_compensation_gain;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013ca:	617b      	str	r3, [r7, #20]
    SendBytes(Make_CAN_ID_from_CAN_Device(&(hmcmd->device), MCMD_CMD_CHANGE_CTRL3), (uint8_t *)&fdata, sizeof(fdata));
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2107      	movs	r1, #7
 80013d0:	4618      	mov	r0, r3
 80013d2:	f000 f99d 	bl	8001710 <Make_CAN_ID_from_CAN_Device>
 80013d6:	4602      	mov	r2, r0
 80013d8:	460b      	mov	r3, r1
 80013da:	4610      	mov	r0, r2
 80013dc:	f107 0310 	add.w	r3, r7, #16
 80013e0:	2208      	movs	r2, #8
 80013e2:	4619      	mov	r1, r3
 80013e4:	f7ff fbf0 	bl	8000bc8 <SendBytes>

	uint8_t bdata[6];
	bdata[0] = hmcmd->ctrl_param.ctrl_type;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	7d1b      	ldrb	r3, [r3, #20]
 80013ec:	723b      	strb	r3, [r7, #8]
	bdata[1] = hmcmd->ctrl_param.accel_limit;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80013f4:	727b      	strb	r3, [r7, #9]
	bdata[2] = hmcmd->ctrl_param.feedback;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80013fc:	72bb      	strb	r3, [r7, #10]
	bdata[3] = hmcmd->ctrl_param.timup_monitor;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001404:	72fb      	strb	r3, [r7, #11]
	bdata[4] = hmcmd->fb_type;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	78db      	ldrb	r3, [r3, #3]
 800140a:	733b      	strb	r3, [r7, #12]
    bdata[5] = hmcmd->ctrl_param.gravity_compensation; // TODO : new
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001412:	737b      	strb	r3, [r7, #13]
	SendBytes(Make_CAN_ID_from_CAN_Device(&(hmcmd->device), MCMD_CMD_CHANGE_CTRL4), (uint8_t *)&bdata, sizeof(bdata));
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2108      	movs	r1, #8
 8001418:	4618      	mov	r0, r3
 800141a:	f000 f979 	bl	8001710 <Make_CAN_ID_from_CAN_Device>
 800141e:	4602      	mov	r2, r0
 8001420:	460b      	mov	r3, r1
 8001422:	4610      	mov	r0, r2
 8001424:	f107 0308 	add.w	r3, r7, #8
 8001428:	2206      	movs	r2, #6
 800142a:	4619      	mov	r1, r3
 800142c:	f7ff fbcc 	bl	8000bc8 <SendBytes>
}
 8001430:	bf00      	nop
 8001432:	3718      	adds	r7, #24
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}

08001438 <MCMD_init>:

void MCMD_init(MCMD_HandleTypedef *hmcmd){
 8001438:	b580      	push	{r7, lr}
 800143a:	b086      	sub	sp, #24
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
	uint8_t bdata[4];
	bdata[0] = hmcmd->enc_dir;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	791b      	ldrb	r3, [r3, #4]
 8001444:	753b      	strb	r3, [r7, #20]
	bdata[1] = hmcmd->rot_dir;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	795b      	ldrb	r3, [r3, #5]
 800144a:	757b      	strb	r3, [r7, #21]
	bdata[2] = hmcmd->calib;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	79db      	ldrb	r3, [r3, #7]
 8001450:	75bb      	strb	r3, [r7, #22]
	bdata[3] = hmcmd->limit_sw_type;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	799b      	ldrb	r3, [r3, #6]
 8001456:	75fb      	strb	r3, [r7, #23]
	SendBytes(Make_CAN_ID_from_CAN_Device(&(hmcmd->device), MCMD_CMD_INIT1), bdata, sizeof(bdata));
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2102      	movs	r1, #2
 800145c:	4618      	mov	r0, r3
 800145e:	f000 f957 	bl	8001710 <Make_CAN_ID_from_CAN_Device>
 8001462:	4602      	mov	r2, r0
 8001464:	460b      	mov	r3, r1
 8001466:	4610      	mov	r0, r2
 8001468:	f107 0314 	add.w	r3, r7, #20
 800146c:	2204      	movs	r2, #4
 800146e:	4619      	mov	r1, r3
 8001470:	f7ff fbaa 	bl	8000bc8 <SendBytes>
	float fdata[2];
	fdata[0] = hmcmd->offset;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	68db      	ldr	r3, [r3, #12]
 8001478:	60fb      	str	r3, [r7, #12]
	fdata[1] = hmcmd->calib_duty;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	689b      	ldr	r3, [r3, #8]
 800147e:	613b      	str	r3, [r7, #16]
	SendBytes(Make_CAN_ID_from_CAN_Device(&(hmcmd->device), MCMD_CMD_INIT2), (uint8_t *)&fdata, sizeof(fdata));
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2103      	movs	r1, #3
 8001484:	4618      	mov	r0, r3
 8001486:	f000 f943 	bl	8001710 <Make_CAN_ID_from_CAN_Device>
 800148a:	4602      	mov	r2, r0
 800148c:	460b      	mov	r3, r1
 800148e:	4610      	mov	r0, r2
 8001490:	f107 030c 	add.w	r3, r7, #12
 8001494:	2208      	movs	r2, #8
 8001496:	4619      	mov	r1, r3
 8001498:	f7ff fb96 	bl	8000bc8 <SendBytes>

	fdata[0] = hmcmd->quant_per_unit;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	691b      	ldr	r3, [r3, #16]
 80014a0:	60fb      	str	r3, [r7, #12]
	fdata[1] = 0;
 80014a2:	f04f 0300 	mov.w	r3, #0
 80014a6:	613b      	str	r3, [r7, #16]
	SendBytes(Make_CAN_ID_from_CAN_Device(&(hmcmd->device), MCMD_CMD_INIT3), (uint8_t *)&fdata, sizeof(fdata));
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2104      	movs	r1, #4
 80014ac:	4618      	mov	r0, r3
 80014ae:	f000 f92f 	bl	8001710 <Make_CAN_ID_from_CAN_Device>
 80014b2:	4602      	mov	r2, r0
 80014b4:	460b      	mov	r3, r1
 80014b6:	4610      	mov	r0, r2
 80014b8:	f107 030c 	add.w	r3, r7, #12
 80014bc:	2208      	movs	r2, #8
 80014be:	4619      	mov	r1, r3
 80014c0:	f7ff fb82 	bl	8000bc8 <SendBytes>
	HAL_Delay(50); // これないと動かない(なぜ?)
 80014c4:	2032      	movs	r0, #50	; 0x32
 80014c6:	f001 fd85 	bl	8002fd4 <HAL_Delay>
	MCMD_ChangeControl(hmcmd);
 80014ca:	6878      	ldr	r0, [r7, #4]
 80014cc:	f7ff ff4c 	bl	8001368 <MCMD_ChangeControl>
}
 80014d0:	bf00      	nop
 80014d2:	3718      	adds	r7, #24
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}

080014d8 <MCMD_Calib>:

void MCMD_Calib(MCMD_HandleTypedef *hmcmd){
 80014d8:	b580      	push	{r7, lr}
 80014da:	b084      	sub	sp, #16
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
	uint8_t bdata[4];
	SendBytes(Make_CAN_ID_from_CAN_Device(&(hmcmd->device), MCMD_CMD_CALIB), bdata, sizeof(bdata));
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2109      	movs	r1, #9
 80014e4:	4618      	mov	r0, r3
 80014e6:	f000 f913 	bl	8001710 <Make_CAN_ID_from_CAN_Device>
 80014ea:	4602      	mov	r2, r0
 80014ec:	460b      	mov	r3, r1
 80014ee:	4610      	mov	r0, r2
 80014f0:	f107 030c 	add.w	r3, r7, #12
 80014f4:	2204      	movs	r2, #4
 80014f6:	4619      	mov	r1, r3
 80014f8:	f7ff fb66 	bl	8000bc8 <SendBytes>
}
 80014fc:	bf00      	nop
 80014fe:	3710      	adds	r7, #16
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}

08001504 <MCMD_Control_Enable>:

void MCMD_Control_Enable(MCMD_HandleTypedef *hmcmd){
 8001504:	b580      	push	{r7, lr}
 8001506:	b084      	sub	sp, #16
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
	uint8_t bdata[4];
	SendBytes(Make_CAN_ID_from_CAN_Device(&(hmcmd->device), MCMD_CMD_ENABLE), bdata, sizeof(bdata));
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	210a      	movs	r1, #10
 8001510:	4618      	mov	r0, r3
 8001512:	f000 f8fd 	bl	8001710 <Make_CAN_ID_from_CAN_Device>
 8001516:	4602      	mov	r2, r0
 8001518:	460b      	mov	r3, r1
 800151a:	4610      	mov	r0, r2
 800151c:	f107 030c 	add.w	r3, r7, #12
 8001520:	2204      	movs	r2, #4
 8001522:	4619      	mov	r1, r3
 8001524:	f7ff fb50 	bl	8000bc8 <SendBytes>
}
 8001528:	bf00      	nop
 800152a:	3710      	adds	r7, #16
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}

08001530 <MCMD_SetTarget>:
void MCMD_Control_Disable(MCMD_HandleTypedef *hmcmd){
	uint8_t bdata[4];
	SendBytes(Make_CAN_ID_from_CAN_Device(&(hmcmd->device), MCMD_CMD_DISABLE), bdata, sizeof(bdata));
}

void MCMD_SetTarget(MCMD_HandleTypedef *hmcmd, float target){
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
 8001538:	ed87 0a00 	vstr	s0, [r7]
	SendBytes(Make_CAN_ID_from_CAN_Device(&(hmcmd->device), MCMD_CMD_SET_TARGET), (uint8_t *)&target, sizeof(target));
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	210c      	movs	r1, #12
 8001540:	4618      	mov	r0, r3
 8001542:	f000 f8e5 	bl	8001710 <Make_CAN_ID_from_CAN_Device>
 8001546:	4602      	mov	r2, r0
 8001548:	460b      	mov	r3, r1
 800154a:	4610      	mov	r0, r2
 800154c:	463b      	mov	r3, r7
 800154e:	2204      	movs	r2, #4
 8001550:	4619      	mov	r1, r3
 8001552:	f7ff fb39 	bl	8000bc8 <SendBytes>
}
 8001556:	bf00      	nop
 8001558:	3708      	adds	r7, #8
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
	...

08001560 <Get_MCMD_Feedback>:

MCMD_Feedback_Typedef Get_MCMD_Feedback(CAN_Device *can_device){
 8001560:	b590      	push	{r4, r7, lr}
 8001562:	b085      	sub	sp, #20
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
 8001568:	6039      	str	r1, [r7, #0]
	MCMD_Feedback_Typedef ans;
	if (can_device->node_type == NODE_MCMD1){
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	781b      	ldrb	r3, [r3, #0]
 800156e:	2b01      	cmp	r3, #1
 8001570:	d12f      	bne.n	80015d2 <Get_MCMD_Feedback+0x72>
		ans.fb_type = _feedback_table_mcmd1[(can_device->node_id)].feedback_motor[(can_device->device_num)].fb_type;
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	785b      	ldrb	r3, [r3, #1]
 8001576:	4618      	mov	r0, r3
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	789b      	ldrb	r3, [r3, #2]
 800157c:	4619      	mov	r1, r3
 800157e:	4a5f      	ldr	r2, [pc, #380]	; (80016fc <Get_MCMD_Feedback+0x19c>)
 8001580:	0043      	lsls	r3, r0, #1
 8001582:	440b      	add	r3, r1
 8001584:	00db      	lsls	r3, r3, #3
 8001586:	4413      	add	r3, r2
 8001588:	791b      	ldrb	r3, [r3, #4]
 800158a:	733b      	strb	r3, [r7, #12]
		ans.status = _feedback_table_mcmd1[(can_device->node_id)].feedback_motor[(can_device->device_num)].status;
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	785b      	ldrb	r3, [r3, #1]
 8001590:	4618      	mov	r0, r3
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	789b      	ldrb	r3, [r3, #2]
 8001596:	4619      	mov	r1, r3
 8001598:	4a58      	ldr	r2, [pc, #352]	; (80016fc <Get_MCMD_Feedback+0x19c>)
 800159a:	0043      	lsls	r3, r0, #1
 800159c:	440b      	add	r3, r1
 800159e:	00db      	lsls	r3, r3, #3
 80015a0:	4413      	add	r3, r2
 80015a2:	795b      	ldrb	r3, [r3, #5]
 80015a4:	737b      	strb	r3, [r7, #13]
		ans.value = _feedback_table_mcmd1[(can_device->node_id)].feedback_motor[(can_device->device_num)].value;
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	785b      	ldrb	r3, [r3, #1]
 80015aa:	4618      	mov	r0, r3
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	789b      	ldrb	r3, [r3, #2]
 80015b0:	4619      	mov	r1, r3
 80015b2:	4a52      	ldr	r2, [pc, #328]	; (80016fc <Get_MCMD_Feedback+0x19c>)
 80015b4:	0043      	lsls	r3, r0, #1
 80015b6:	440b      	add	r3, r1
 80015b8:	00db      	lsls	r3, r3, #3
 80015ba:	4413      	add	r3, r2
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	60bb      	str	r3, [r7, #8]
		return ans;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	461a      	mov	r2, r3
 80015c4:	f107 0308 	add.w	r3, r7, #8
 80015c8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80015cc:	e882 0003 	stmia.w	r2, {r0, r1}
 80015d0:	e08f      	b.n	80016f2 <Get_MCMD_Feedback+0x192>
	}else if (can_device->node_type == NODE_MCMD2){
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	781b      	ldrb	r3, [r3, #0]
 80015d6:	2b02      	cmp	r3, #2
 80015d8:	d111      	bne.n	80015fe <Get_MCMD_Feedback+0x9e>
		return _feedback_table_mcmd2[(can_device->node_id)].feedback_motor[(can_device->device_num)];
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	785b      	ldrb	r3, [r3, #1]
 80015de:	461c      	mov	r4, r3
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	789b      	ldrb	r3, [r3, #2]
 80015e4:	4618      	mov	r0, r3
 80015e6:	6879      	ldr	r1, [r7, #4]
 80015e8:	4a45      	ldr	r2, [pc, #276]	; (8001700 <Get_MCMD_Feedback+0x1a0>)
 80015ea:	0063      	lsls	r3, r4, #1
 80015ec:	4403      	add	r3, r0
 80015ee:	460c      	mov	r4, r1
 80015f0:	00db      	lsls	r3, r3, #3
 80015f2:	4413      	add	r3, r2
 80015f4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80015f8:	e884 0003 	stmia.w	r4, {r0, r1}
 80015fc:	e079      	b.n	80016f2 <Get_MCMD_Feedback+0x192>
	}else if (can_device->node_type == NODE_MCMD3){
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	781b      	ldrb	r3, [r3, #0]
 8001602:	2b03      	cmp	r3, #3
 8001604:	d12f      	bne.n	8001666 <Get_MCMD_Feedback+0x106>
		ans.fb_type = _feedback_table_mcmd3[(can_device->node_id)].feedback_motor[(can_device->device_num)].fb_type;
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	785b      	ldrb	r3, [r3, #1]
 800160a:	4618      	mov	r0, r3
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	789b      	ldrb	r3, [r3, #2]
 8001610:	4619      	mov	r1, r3
 8001612:	4a3c      	ldr	r2, [pc, #240]	; (8001704 <Get_MCMD_Feedback+0x1a4>)
 8001614:	0043      	lsls	r3, r0, #1
 8001616:	440b      	add	r3, r1
 8001618:	00db      	lsls	r3, r3, #3
 800161a:	4413      	add	r3, r2
 800161c:	791b      	ldrb	r3, [r3, #4]
 800161e:	733b      	strb	r3, [r7, #12]
		ans.status = _feedback_table_mcmd3[(can_device->node_id)].feedback_motor[(can_device->device_num)].status;
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	785b      	ldrb	r3, [r3, #1]
 8001624:	4618      	mov	r0, r3
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	789b      	ldrb	r3, [r3, #2]
 800162a:	4619      	mov	r1, r3
 800162c:	4a35      	ldr	r2, [pc, #212]	; (8001704 <Get_MCMD_Feedback+0x1a4>)
 800162e:	0043      	lsls	r3, r0, #1
 8001630:	440b      	add	r3, r1
 8001632:	00db      	lsls	r3, r3, #3
 8001634:	4413      	add	r3, r2
 8001636:	795b      	ldrb	r3, [r3, #5]
 8001638:	737b      	strb	r3, [r7, #13]
		ans.value = _feedback_table_mcmd3[(can_device->node_id)].feedback_motor[(can_device->device_num)].value;
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	785b      	ldrb	r3, [r3, #1]
 800163e:	4618      	mov	r0, r3
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	789b      	ldrb	r3, [r3, #2]
 8001644:	4619      	mov	r1, r3
 8001646:	4a2f      	ldr	r2, [pc, #188]	; (8001704 <Get_MCMD_Feedback+0x1a4>)
 8001648:	0043      	lsls	r3, r0, #1
 800164a:	440b      	add	r3, r1
 800164c:	00db      	lsls	r3, r3, #3
 800164e:	4413      	add	r3, r2
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	60bb      	str	r3, [r7, #8]
		return ans;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	461a      	mov	r2, r3
 8001658:	f107 0308 	add.w	r3, r7, #8
 800165c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001660:	e882 0003 	stmia.w	r2, {r0, r1}
 8001664:	e045      	b.n	80016f2 <Get_MCMD_Feedback+0x192>
	}else if (can_device->node_type == NODE_MCMD4){
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	2b06      	cmp	r3, #6
 800166c:	d12f      	bne.n	80016ce <Get_MCMD_Feedback+0x16e>
		ans.fb_type = _feedback_table_mcmd4[(can_device->node_id)].feedback_motor[(can_device->device_num)].fb_type;
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	785b      	ldrb	r3, [r3, #1]
 8001672:	4618      	mov	r0, r3
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	789b      	ldrb	r3, [r3, #2]
 8001678:	4619      	mov	r1, r3
 800167a:	4a23      	ldr	r2, [pc, #140]	; (8001708 <Get_MCMD_Feedback+0x1a8>)
 800167c:	0043      	lsls	r3, r0, #1
 800167e:	440b      	add	r3, r1
 8001680:	00db      	lsls	r3, r3, #3
 8001682:	4413      	add	r3, r2
 8001684:	791b      	ldrb	r3, [r3, #4]
 8001686:	733b      	strb	r3, [r7, #12]
		ans.status = _feedback_table_mcmd4[(can_device->node_id)].feedback_motor[(can_device->device_num)].status;
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	785b      	ldrb	r3, [r3, #1]
 800168c:	4618      	mov	r0, r3
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	789b      	ldrb	r3, [r3, #2]
 8001692:	4619      	mov	r1, r3
 8001694:	4a1c      	ldr	r2, [pc, #112]	; (8001708 <Get_MCMD_Feedback+0x1a8>)
 8001696:	0043      	lsls	r3, r0, #1
 8001698:	440b      	add	r3, r1
 800169a:	00db      	lsls	r3, r3, #3
 800169c:	4413      	add	r3, r2
 800169e:	795b      	ldrb	r3, [r3, #5]
 80016a0:	737b      	strb	r3, [r7, #13]
		ans.value = _feedback_table_mcmd4[(can_device->node_id)].feedback_motor[(can_device->device_num)].value;
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	785b      	ldrb	r3, [r3, #1]
 80016a6:	4618      	mov	r0, r3
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	789b      	ldrb	r3, [r3, #2]
 80016ac:	4619      	mov	r1, r3
 80016ae:	4a16      	ldr	r2, [pc, #88]	; (8001708 <Get_MCMD_Feedback+0x1a8>)
 80016b0:	0043      	lsls	r3, r0, #1
 80016b2:	440b      	add	r3, r1
 80016b4:	00db      	lsls	r3, r3, #3
 80016b6:	4413      	add	r3, r2
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	60bb      	str	r3, [r7, #8]
		return ans;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	461a      	mov	r2, r3
 80016c0:	f107 0308 	add.w	r3, r7, #8
 80016c4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80016c8:	e882 0003 	stmia.w	r2, {r0, r1}
 80016cc:	e011      	b.n	80016f2 <Get_MCMD_Feedback+0x192>
	}else{
		ans.fb_type = 0;
 80016ce:	2300      	movs	r3, #0
 80016d0:	733b      	strb	r3, [r7, #12]
		ans.status = 0;
 80016d2:	2300      	movs	r3, #0
 80016d4:	737b      	strb	r3, [r7, #13]
		ans.value = 0.0f;
 80016d6:	f04f 0300 	mov.w	r3, #0
 80016da:	60bb      	str	r3, [r7, #8]
		printf("get feed back error\n\r");
 80016dc:	480b      	ldr	r0, [pc, #44]	; (800170c <Get_MCMD_Feedback+0x1ac>)
 80016de:	f006 fad5 	bl	8007c8c <iprintf>
		return ans;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	461a      	mov	r2, r3
 80016e6:	f107 0308 	add.w	r3, r7, #8
 80016ea:	e893 0003 	ldmia.w	r3, {r0, r1}
 80016ee:	e882 0003 	stmia.w	r2, {r0, r1}
	}
}
 80016f2:	6878      	ldr	r0, [r7, #4]
 80016f4:	3714      	adds	r7, #20
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd90      	pop	{r4, r7, pc}
 80016fa:	bf00      	nop
 80016fc:	20000228 	.word	0x20000228
 8001700:	200002c8 	.word	0x200002c8
 8001704:	20000368 	.word	0x20000368
 8001708:	20000408 	.word	0x20000408
 800170c:	08008d8c 	.word	0x08008d8c

08001710 <Make_CAN_ID_from_CAN_Device>:
/**
 * @brief CANのIDを設定する. 上16bitのみを使用
 * @param CAN_Device*
 * @param cmd
 */
uint64_t Make_CAN_ID_from_CAN_Device(CAN_Device* _can_device, uint8_t cmd){  // mainからmcmdなどへの送信
 8001710:	b4b0      	push	{r4, r5, r7}
 8001712:	b085      	sub	sp, #20
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
 8001718:	460b      	mov	r3, r1
 800171a:	70fb      	strb	r3, [r7, #3]
    uint8_t node_type = (uint8_t)(_can_device->node_type) & (0b111);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	f003 0307 	and.w	r3, r3, #7
 8001724:	73fb      	strb	r3, [r7, #15]
    return (((node_type&0b111)<<11) | (((_can_device->node_id)&0b111)<<8) | (((_can_device->device_num)&0b111)<<5)
 8001726:	7bfb      	ldrb	r3, [r7, #15]
 8001728:	02db      	lsls	r3, r3, #11
 800172a:	f403 5260 	and.w	r2, r3, #14336	; 0x3800
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	785b      	ldrb	r3, [r3, #1]
 8001732:	021b      	lsls	r3, r3, #8
 8001734:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001738:	431a      	orrs	r2, r3
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	789b      	ldrb	r3, [r3, #2]
 800173e:	015b      	lsls	r3, r3, #5
 8001740:	b2db      	uxtb	r3, r3
 8001742:	431a      	orrs	r2, r3
            | (cmd&0b11111) );
 8001744:	78fb      	ldrb	r3, [r7, #3]
 8001746:	f003 031f 	and.w	r3, r3, #31
 800174a:	4313      	orrs	r3, r2
 800174c:	17da      	asrs	r2, r3, #31
 800174e:	461c      	mov	r4, r3
 8001750:	4615      	mov	r5, r2
 8001752:	4622      	mov	r2, r4
 8001754:	462b      	mov	r3, r5
}
 8001756:	4610      	mov	r0, r2
 8001758:	4619      	mov	r1, r3
 800175a:	3714      	adds	r7, #20
 800175c:	46bd      	mov	sp, r7
 800175e:	bcb0      	pop	{r4, r5, r7}
 8001760:	4770      	bx	lr

08001762 <Make_CAN_ID>:
 * @param node_type
 * @param node_id
 * @param device_num
 * @param cmd
 */
uint64_t Make_CAN_ID(Node_Type node_type, uint8_t node_id, uint8_t device_num, uint8_t cmd){
 8001762:	e92d 0390 	stmdb	sp!, {r4, r7, r8, r9}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
 800176a:	4604      	mov	r4, r0
 800176c:	4608      	mov	r0, r1
 800176e:	4611      	mov	r1, r2
 8001770:	461a      	mov	r2, r3
 8001772:	4623      	mov	r3, r4
 8001774:	71fb      	strb	r3, [r7, #7]
 8001776:	4603      	mov	r3, r0
 8001778:	71bb      	strb	r3, [r7, #6]
 800177a:	460b      	mov	r3, r1
 800177c:	717b      	strb	r3, [r7, #5]
 800177e:	4613      	mov	r3, r2
 8001780:	713b      	strb	r3, [r7, #4]
    return ( (((uint8_t)node_type & 0b111) << 11) | (((node_id)&0b111) << 8) | ((device_num&0b111) << 5)
 8001782:	79fb      	ldrb	r3, [r7, #7]
 8001784:	02db      	lsls	r3, r3, #11
 8001786:	f403 5260 	and.w	r2, r3, #14336	; 0x3800
 800178a:	79bb      	ldrb	r3, [r7, #6]
 800178c:	021b      	lsls	r3, r3, #8
 800178e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001792:	431a      	orrs	r2, r3
 8001794:	797b      	ldrb	r3, [r7, #5]
 8001796:	015b      	lsls	r3, r3, #5
 8001798:	b2db      	uxtb	r3, r3
 800179a:	431a      	orrs	r2, r3
             | (cmd&0b11111) );
 800179c:	793b      	ldrb	r3, [r7, #4]
 800179e:	f003 031f 	and.w	r3, r3, #31
 80017a2:	4313      	orrs	r3, r2
 80017a4:	17da      	asrs	r2, r3, #31
 80017a6:	4698      	mov	r8, r3
 80017a8:	4691      	mov	r9, r2
 80017aa:	4642      	mov	r2, r8
 80017ac:	464b      	mov	r3, r9
}
 80017ae:	4610      	mov	r0, r2
 80017b0:	4619      	mov	r1, r3
 80017b2:	3708      	adds	r7, #8
 80017b4:	46bd      	mov	sp, r7
 80017b6:	e8bd 0390 	ldmia.w	sp!, {r4, r7, r8, r9}
 80017ba:	4770      	bx	lr

080017bc <Extract_CAN_Device>:

CAN_Device Extract_CAN_Device(uint64_t can_id) {  // CAN_IDからCAN_Deviceを抽出する
 80017bc:	b480      	push	{r7}
 80017be:	b085      	sub	sp, #20
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	e9c7 0100 	strd	r0, r1, [r7]
    CAN_Device ans;
    ans.device_num = ((can_id>>5) & 0b111);
 80017c6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80017ca:	f04f 0200 	mov.w	r2, #0
 80017ce:	f04f 0300 	mov.w	r3, #0
 80017d2:	0942      	lsrs	r2, r0, #5
 80017d4:	ea42 62c1 	orr.w	r2, r2, r1, lsl #27
 80017d8:	094b      	lsrs	r3, r1, #5
 80017da:	b2d3      	uxtb	r3, r2
 80017dc:	f003 0307 	and.w	r3, r3, #7
 80017e0:	b2db      	uxtb	r3, r3
 80017e2:	72bb      	strb	r3, [r7, #10]
    ans.node_id = ((can_id>>8) & 0b111);
 80017e4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80017e8:	f04f 0200 	mov.w	r2, #0
 80017ec:	f04f 0300 	mov.w	r3, #0
 80017f0:	0a02      	lsrs	r2, r0, #8
 80017f2:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80017f6:	0a0b      	lsrs	r3, r1, #8
 80017f8:	b2d3      	uxtb	r3, r2
 80017fa:	f003 0307 	and.w	r3, r3, #7
 80017fe:	b2db      	uxtb	r3, r3
 8001800:	727b      	strb	r3, [r7, #9]
    ans.node_type = (Node_Type)( (can_id>>11) & 0b111);
 8001802:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001806:	f04f 0200 	mov.w	r2, #0
 800180a:	f04f 0300 	mov.w	r3, #0
 800180e:	0ac2      	lsrs	r2, r0, #11
 8001810:	ea42 5241 	orr.w	r2, r2, r1, lsl #21
 8001814:	0acb      	lsrs	r3, r1, #11
 8001816:	b2d3      	uxtb	r3, r2
 8001818:	f003 0307 	and.w	r3, r3, #7
 800181c:	b2db      	uxtb	r3, r3
 800181e:	723b      	strb	r3, [r7, #8]
    return ans;
 8001820:	f107 030c 	add.w	r3, r7, #12
 8001824:	f107 0208 	add.w	r2, r7, #8
 8001828:	6812      	ldr	r2, [r2, #0]
 800182a:	4611      	mov	r1, r2
 800182c:	8019      	strh	r1, [r3, #0]
 800182e:	3302      	adds	r3, #2
 8001830:	0c12      	lsrs	r2, r2, #16
 8001832:	701a      	strb	r2, [r3, #0]
 8001834:	2300      	movs	r3, #0
 8001836:	7b3a      	ldrb	r2, [r7, #12]
 8001838:	f362 0307 	bfi	r3, r2, #0, #8
 800183c:	7b7a      	ldrb	r2, [r7, #13]
 800183e:	f362 230f 	bfi	r3, r2, #8, #8
 8001842:	7bba      	ldrb	r2, [r7, #14]
 8001844:	f362 4317 	bfi	r3, r2, #16, #8
}
 8001848:	4618      	mov	r0, r3
 800184a:	3714      	adds	r7, #20
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr

08001854 <Extract_CAN_CMD>:

uint8_t Extract_CAN_CMD(uint64_t can_id){ return ( can_id & 0b11111); }  // cmdを抽出
 8001854:	b480      	push	{r7}
 8001856:	b083      	sub	sp, #12
 8001858:	af00      	add	r7, sp, #0
 800185a:	e9c7 0100 	strd	r0, r1, [r7]
 800185e:	783b      	ldrb	r3, [r7, #0]
 8001860:	f003 031f 	and.w	r3, r3, #31
 8001864:	b2db      	uxtb	r3, r3
 8001866:	4618      	mov	r0, r3
 8001868:	370c      	adds	r7, #12
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr
	...

08001874 <C620_WaitForConnect>:
    }
    if (flag_1)C620_SendBytes(phcan, 0x200, (uint8_t *) data1, sizeof(data1));
    if (flag_2)C620_SendBytes(phcan, 0x1FF, (uint8_t *) data2, sizeof(data2));
}

void C620_WaitForConnect(C620_DeviceInfo dev_info_array[], uint8_t size) {
 8001874:	b580      	push	{r7, lr}
 8001876:	b088      	sub	sp, #32
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
 800187c:	460b      	mov	r3, r1
 800187e:	70fb      	strb	r3, [r7, #3]
    uint8_t flag = 0;
 8001880:	2300      	movs	r3, #0
 8001882:	77fb      	strb	r3, [r7, #31]
    printf("[C620] Wait for Connection...\n");
 8001884:	4815      	ldr	r0, [pc, #84]	; (80018dc <C620_WaitForConnect+0x68>)
 8001886:	f006 fa87 	bl	8007d98 <puts>
    while (!flag) {
 800188a:	e01d      	b.n	80018c8 <C620_WaitForConnect+0x54>
        flag = 1;
 800188c:	2301      	movs	r3, #1
 800188e:	77fb      	strb	r3, [r7, #31]
        for (uint8_t i = 0; i < size; i++) {
 8001890:	2300      	movs	r3, #0
 8001892:	77bb      	strb	r3, [r7, #30]
 8001894:	e014      	b.n	80018c0 <C620_WaitForConnect+0x4c>
            if (!Get_C620_FeedbackData(&dev_info_array[i]).get_flag) {
 8001896:	7fbb      	ldrb	r3, [r7, #30]
 8001898:	224c      	movs	r2, #76	; 0x4c
 800189a:	fb02 f303 	mul.w	r3, r2, r3
 800189e:	687a      	ldr	r2, [r7, #4]
 80018a0:	441a      	add	r2, r3
 80018a2:	f107 030c 	add.w	r3, r7, #12
 80018a6:	4611      	mov	r1, r2
 80018a8:	4618      	mov	r0, r3
 80018aa:	f000 fa0d 	bl	8001cc8 <Get_C620_FeedbackData>
 80018ae:	7b7b      	ldrb	r3, [r7, #13]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d102      	bne.n	80018ba <C620_WaitForConnect+0x46>
                flag = 0;
 80018b4:	2300      	movs	r3, #0
 80018b6:	77fb      	strb	r3, [r7, #31]
                break;
 80018b8:	e006      	b.n	80018c8 <C620_WaitForConnect+0x54>
        for (uint8_t i = 0; i < size; i++) {
 80018ba:	7fbb      	ldrb	r3, [r7, #30]
 80018bc:	3301      	adds	r3, #1
 80018be:	77bb      	strb	r3, [r7, #30]
 80018c0:	7fba      	ldrb	r2, [r7, #30]
 80018c2:	78fb      	ldrb	r3, [r7, #3]
 80018c4:	429a      	cmp	r2, r3
 80018c6:	d3e6      	bcc.n	8001896 <C620_WaitForConnect+0x22>
    while (!flag) {
 80018c8:	7ffb      	ldrb	r3, [r7, #31]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d0de      	beq.n	800188c <C620_WaitForConnect+0x18>
            }
        }
    }
    printf("[C620] All Connected!\n");
 80018ce:	4804      	ldr	r0, [pc, #16]	; (80018e0 <C620_WaitForConnect+0x6c>)
 80018d0:	f006 fa62 	bl	8007d98 <puts>
}
 80018d4:	bf00      	nop
 80018d6:	3720      	adds	r7, #32
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	08008dc8 	.word	0x08008dc8
 80018e0:	08008de8 	.word	0x08008de8

080018e4 <C620_SetTarget>:
void C620_ChangeControl(C620_DeviceInfo *dev_info, C620_CTRL_TYPE new_ctrl_type) {
    C620_Ctrl_Struct_init(&(dev_info->ctrl_param));
    dev_info->ctrl_param.ctrl_type = new_ctrl_type;
}

void C620_SetTarget(C620_DeviceInfo *device_info, float target_value) {
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
 80018ec:	ed87 0a00 	vstr	s0, [r7]
    device_info->ctrl_param._target_value = target_value;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	683a      	ldr	r2, [r7, #0]
 80018f4:	641a      	str	r2, [r3, #64]	; 0x40
}
 80018f6:	bf00      	nop
 80018f8:	370c      	adds	r7, #12
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr

08001902 <C620_ControlEnable>:

void C620_ControlEnable(C620_DeviceInfo *dev_info) {
 8001902:	b480      	push	{r7}
 8001904:	b083      	sub	sp, #12
 8001906:	af00      	add	r7, sp, #0
 8001908:	6078      	str	r0, [r7, #4]
    dev_info->ctrl_param._enable_flag = 1;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2201      	movs	r2, #1
 800190e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
}
 8001912:	bf00      	nop
 8001914:	370c      	adds	r7, #12
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr

0800191e <_C620_PopSendTx8Bytes>:
        p_can_ring->is_full = 1;
    }
    return HAL_OK;
}

HAL_StatusTypeDef _C620_PopSendTx8Bytes(CAN_HandleTypeDef *phcan, CAN_RingBuf *p_can_ring) {
 800191e:	b580      	push	{r7, lr}
 8001920:	b08a      	sub	sp, #40	; 0x28
 8001922:	af00      	add	r7, sp, #0
 8001924:	6078      	str	r0, [r7, #4]
 8001926:	6039      	str	r1, [r7, #0]
    CAN_TxHeaderTypeDef txHeader;
    uint32_t txMailbox;

    txHeader.RTR = CAN_RTR_DATA;
 8001928:	2300      	movs	r3, #0
 800192a:	61bb      	str	r3, [r7, #24]
    txHeader.IDE = CAN_ID_STD;
 800192c:	2300      	movs	r3, #0
 800192e:	617b      	str	r3, [r7, #20]
    txHeader.TransmitGlobalTime = DISABLE;
 8001930:	2300      	movs	r3, #0
 8001932:	f887 3020 	strb.w	r3, [r7, #32]
    while (HAL_CAN_GetTxMailboxesFreeLevel(phcan) > 0) {
 8001936:	e04d      	b.n	80019d4 <_C620_PopSendTx8Bytes+0xb6>
        if ((p_can_ring->is_full == 0) && (p_can_ring->read_point == p_can_ring->write_point))break;
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800193e:	7a1b      	ldrb	r3, [r3, #8]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d109      	bne.n	8001958 <_C620_PopSendTx8Bytes+0x3a>
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	429a      	cmp	r2, r3
 8001956:	d044      	beq.n	80019e2 <_C620_PopSendTx8Bytes+0xc4>

        txHeader.DLC = p_can_ring->buffer[p_can_ring->read_point].DLC;
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	683a      	ldr	r2, [r7, #0]
 8001962:	011b      	lsls	r3, r3, #4
 8001964:	4413      	add	r3, r2
 8001966:	3304      	adds	r3, #4
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	61fb      	str	r3, [r7, #28]
        txHeader.StdId = p_can_ring->buffer[p_can_ring->read_point].StdId;
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	683a      	ldr	r2, [r7, #0]
 8001976:	011b      	lsls	r3, r3, #4
 8001978:	4413      	add	r3, r2
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	60fb      	str	r3, [r7, #12]
        txHeader.ExtId = 0;
 800197e:	2300      	movs	r3, #0
 8001980:	613b      	str	r3, [r7, #16]

        HAL_StatusTypeDef ret = HAL_CAN_AddTxMessage(phcan, &txHeader, p_can_ring->buffer[p_can_ring->read_point].bytes,
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	011b      	lsls	r3, r3, #4
 800198c:	3308      	adds	r3, #8
 800198e:	683a      	ldr	r2, [r7, #0]
 8001990:	441a      	add	r2, r3
 8001992:	f107 0308 	add.w	r3, r7, #8
 8001996:	f107 010c 	add.w	r1, r7, #12
 800199a:	6878      	ldr	r0, [r7, #4]
 800199c:	f001 fd6a 	bl	8003474 <HAL_CAN_AddTxMessage>
 80019a0:	4603      	mov	r3, r0
 80019a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                                                     &txMailbox);
        if (ret != HAL_OK)return ret;
 80019a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d002      	beq.n	80019b4 <_C620_PopSendTx8Bytes+0x96>
 80019ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80019b2:	e018      	b.n	80019e6 <_C620_PopSendTx8Bytes+0xc8>
        p_can_ring->read_point = ((p_can_ring->read_point) + 1) & (CAN_TXBUFFER_SIZE - 1);
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	3301      	adds	r3, #1
 80019be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019c2:	683a      	ldr	r2, [r7, #0]
 80019c4:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 80019c8:	6013      	str	r3, [r2, #0]
        p_can_ring->is_full = 0;
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80019d0:	2200      	movs	r2, #0
 80019d2:	721a      	strb	r2, [r3, #8]
    while (HAL_CAN_GetTxMailboxesFreeLevel(phcan) > 0) {
 80019d4:	6878      	ldr	r0, [r7, #4]
 80019d6:	f001 fe1d 	bl	8003614 <HAL_CAN_GetTxMailboxesFreeLevel>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d1ab      	bne.n	8001938 <_C620_PopSendTx8Bytes+0x1a>
 80019e0:	e000      	b.n	80019e4 <_C620_PopSendTx8Bytes+0xc6>
        if ((p_can_ring->is_full == 0) && (p_can_ring->read_point == p_can_ring->write_point))break;
 80019e2:	bf00      	nop
    }
    return HAL_OK;
 80019e4:	2300      	movs	r3, #0
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	3728      	adds	r7, #40	; 0x28
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
	...

080019f0 <C620_WhenTxMailboxCompleteCallbackCalled>:
    }
    return HAL_OK;
}


void C620_WhenTxMailboxCompleteCallbackCalled(CAN_HandleTypeDef *phcan) {
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
    if (_c620_phcan_global != phcan)return;
 80019f8:	4b06      	ldr	r3, [pc, #24]	; (8001a14 <C620_WhenTxMailboxCompleteCallbackCalled+0x24>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	687a      	ldr	r2, [r7, #4]
 80019fe:	429a      	cmp	r2, r3
 8001a00:	d104      	bne.n	8001a0c <C620_WhenTxMailboxCompleteCallbackCalled+0x1c>
    _C620_PopSendTx8Bytes(phcan, &_can_buf_ring1);
 8001a02:	4905      	ldr	r1, [pc, #20]	; (8001a18 <C620_WhenTxMailboxCompleteCallbackCalled+0x28>)
 8001a04:	6878      	ldr	r0, [r7, #4]
 8001a06:	f7ff ff8a 	bl	800191e <_C620_PopSendTx8Bytes>
 8001a0a:	e000      	b.n	8001a0e <C620_WhenTxMailboxCompleteCallbackCalled+0x1e>
    if (_c620_phcan_global != phcan)return;
 8001a0c:	bf00      	nop
}
 8001a0e:	3708      	adds	r7, #8
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	200024b4 	.word	0x200024b4
 8001a18:	200024b8 	.word	0x200024b8

08001a1c <C620_WhenTxMailboxAbortCallbackCalled>:

void C620_WhenTxMailboxAbortCallbackCalled(CAN_HandleTypeDef *phcan) {
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b082      	sub	sp, #8
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
    if (_c620_phcan_global != phcan)return;
 8001a24:	4b06      	ldr	r3, [pc, #24]	; (8001a40 <C620_WhenTxMailboxAbortCallbackCalled+0x24>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	687a      	ldr	r2, [r7, #4]
 8001a2a:	429a      	cmp	r2, r3
 8001a2c:	d104      	bne.n	8001a38 <C620_WhenTxMailboxAbortCallbackCalled+0x1c>
    _C620_PopSendTx8Bytes(phcan, &_can_buf_ring1);
 8001a2e:	4905      	ldr	r1, [pc, #20]	; (8001a44 <C620_WhenTxMailboxAbortCallbackCalled+0x28>)
 8001a30:	6878      	ldr	r0, [r7, #4]
 8001a32:	f7ff ff74 	bl	800191e <_C620_PopSendTx8Bytes>
 8001a36:	e000      	b.n	8001a3a <C620_WhenTxMailboxAbortCallbackCalled+0x1e>
    if (_c620_phcan_global != phcan)return;
 8001a38:	bf00      	nop
}
 8001a3a:	3708      	adds	r7, #8
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	200024b4 	.word	0x200024b4
 8001a44:	200024b8 	.word	0x200024b8

08001a48 <_set_fb_data_raw>:


void _set_fb_data_raw(const uint8_t rxData[], uint8_t device_id) {
 8001a48:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 8001a4c:	b085      	sub	sp, #20
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	6078      	str	r0, [r7, #4]
 8001a52:	460b      	mov	r3, r1
 8001a54:	70fb      	strb	r3, [r7, #3]
    if (device_id > 9 || device_id <= 0)return;
 8001a56:	78fb      	ldrb	r3, [r7, #3]
 8001a58:	2b09      	cmp	r3, #9
 8001a5a:	f200 80f5 	bhi.w	8001c48 <_set_fb_data_raw+0x200>
 8001a5e:	78fb      	ldrb	r3, [r7, #3]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	f000 80f1 	beq.w	8001c48 <_set_fb_data_raw+0x200>

    _c620_feedback_data_raw_global[device_id]._get_counter += 1;
 8001a66:	78fb      	ldrb	r3, [r7, #3]
 8001a68:	4a7a      	ldr	r2, [pc, #488]	; (8001c54 <_set_fb_data_raw+0x20c>)
 8001a6a:	015b      	lsls	r3, r3, #5
 8001a6c:	4413      	add	r3, r2
 8001a6e:	781a      	ldrb	r2, [r3, #0]
 8001a70:	78fb      	ldrb	r3, [r7, #3]
 8001a72:	3201      	adds	r2, #1
 8001a74:	b2d1      	uxtb	r1, r2
 8001a76:	4a77      	ldr	r2, [pc, #476]	; (8001c54 <_set_fb_data_raw+0x20c>)
 8001a78:	015b      	lsls	r3, r3, #5
 8001a7a:	4413      	add	r3, r2
 8001a7c:	460a      	mov	r2, r1
 8001a7e:	701a      	strb	r2, [r3, #0]
    if (_c620_feedback_data_raw_global[device_id]._get_counter > 128) {
 8001a80:	78fb      	ldrb	r3, [r7, #3]
 8001a82:	4a74      	ldr	r2, [pc, #464]	; (8001c54 <_set_fb_data_raw+0x20c>)
 8001a84:	015b      	lsls	r3, r3, #5
 8001a86:	4413      	add	r3, r2
 8001a88:	781b      	ldrb	r3, [r3, #0]
 8001a8a:	2b80      	cmp	r3, #128	; 0x80
 8001a8c:	d905      	bls.n	8001a9a <_set_fb_data_raw+0x52>
        _c620_feedback_data_raw_global[device_id]._get_counter = 128;  // overflow対策
 8001a8e:	78fb      	ldrb	r3, [r7, #3]
 8001a90:	4a70      	ldr	r2, [pc, #448]	; (8001c54 <_set_fb_data_raw+0x20c>)
 8001a92:	015b      	lsls	r3, r3, #5
 8001a94:	4413      	add	r3, r2
 8001a96:	2280      	movs	r2, #128	; 0x80
 8001a98:	701a      	strb	r2, [r3, #0]
    }

    if (_c620_feedback_data_raw_global[device_id]._get_counter < 50) {  // M3508のEncoderの初期位置を取得
 8001a9a:	78fb      	ldrb	r3, [r7, #3]
 8001a9c:	4a6d      	ldr	r2, [pc, #436]	; (8001c54 <_set_fb_data_raw+0x20c>)
 8001a9e:	015b      	lsls	r3, r3, #5
 8001aa0:	4413      	add	r3, r2
 8001aa2:	781b      	ldrb	r3, [r3, #0]
 8001aa4:	2b31      	cmp	r3, #49	; 0x31
 8001aa6:	d836      	bhi.n	8001b16 <_set_fb_data_raw+0xce>
        _c620_feedback_data_raw_global[device_id]._internal_offset_pos = (uint16_t) (rxData[0] << 8 | rxData[1]);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	021b      	lsls	r3, r3, #8
 8001aae:	b21a      	sxth	r2, r3
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	3301      	adds	r3, #1
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	b21b      	sxth	r3, r3
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	b21a      	sxth	r2, r3
 8001abc:	78fb      	ldrb	r3, [r7, #3]
 8001abe:	b291      	uxth	r1, r2
 8001ac0:	4a64      	ldr	r2, [pc, #400]	; (8001c54 <_set_fb_data_raw+0x20c>)
 8001ac2:	015b      	lsls	r3, r3, #5
 8001ac4:	4413      	add	r3, r2
 8001ac6:	3312      	adds	r3, #18
 8001ac8:	460a      	mov	r2, r1
 8001aca:	801a      	strh	r2, [r3, #0]
        _c620_feedback_data_raw_global[device_id].pos_pre = (uint16_t) (rxData[0] << 8 | rxData[1]);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	021b      	lsls	r3, r3, #8
 8001ad2:	b21a      	sxth	r2, r3
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	3301      	adds	r3, #1
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	b21b      	sxth	r3, r3
 8001adc:	4313      	orrs	r3, r2
 8001ade:	b21a      	sxth	r2, r3
 8001ae0:	78fb      	ldrb	r3, [r7, #3]
 8001ae2:	b291      	uxth	r1, r2
 8001ae4:	4a5b      	ldr	r2, [pc, #364]	; (8001c54 <_set_fb_data_raw+0x20c>)
 8001ae6:	015b      	lsls	r3, r3, #5
 8001ae8:	4413      	add	r3, r2
 8001aea:	3314      	adds	r3, #20
 8001aec:	460a      	mov	r2, r1
 8001aee:	801a      	strh	r2, [r3, #0]
        _c620_feedback_data_raw_global[device_id].pos = (uint16_t) (rxData[0] << 8 | rxData[1]);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	021b      	lsls	r3, r3, #8
 8001af6:	b21a      	sxth	r2, r3
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	3301      	adds	r3, #1
 8001afc:	781b      	ldrb	r3, [r3, #0]
 8001afe:	b21b      	sxth	r3, r3
 8001b00:	4313      	orrs	r3, r2
 8001b02:	b21a      	sxth	r2, r3
 8001b04:	78fb      	ldrb	r3, [r7, #3]
 8001b06:	b291      	uxth	r1, r2
 8001b08:	4a52      	ldr	r2, [pc, #328]	; (8001c54 <_set_fb_data_raw+0x20c>)
 8001b0a:	015b      	lsls	r3, r3, #5
 8001b0c:	4413      	add	r3, r2
 8001b0e:	3310      	adds	r3, #16
 8001b10:	460a      	mov	r2, r1
 8001b12:	801a      	strh	r2, [r3, #0]
        return;
 8001b14:	e099      	b.n	8001c4a <_set_fb_data_raw+0x202>
    }

    // dataの設定
    _c620_feedback_data_raw_global[device_id].pos_pre = _c620_feedback_data_raw_global[device_id].pos;
 8001b16:	78fa      	ldrb	r2, [r7, #3]
 8001b18:	78fb      	ldrb	r3, [r7, #3]
 8001b1a:	494e      	ldr	r1, [pc, #312]	; (8001c54 <_set_fb_data_raw+0x20c>)
 8001b1c:	0152      	lsls	r2, r2, #5
 8001b1e:	440a      	add	r2, r1
 8001b20:	3210      	adds	r2, #16
 8001b22:	8811      	ldrh	r1, [r2, #0]
 8001b24:	4a4b      	ldr	r2, [pc, #300]	; (8001c54 <_set_fb_data_raw+0x20c>)
 8001b26:	015b      	lsls	r3, r3, #5
 8001b28:	4413      	add	r3, r2
 8001b2a:	3314      	adds	r3, #20
 8001b2c:	460a      	mov	r2, r1
 8001b2e:	801a      	strh	r2, [r3, #0]
    _c620_feedback_data_raw_global[device_id].pos = (uint16_t) (rxData[0] << 8 | rxData[1]);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	021b      	lsls	r3, r3, #8
 8001b36:	b21a      	sxth	r2, r3
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	3301      	adds	r3, #1
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	b21b      	sxth	r3, r3
 8001b40:	4313      	orrs	r3, r2
 8001b42:	b21a      	sxth	r2, r3
 8001b44:	78fb      	ldrb	r3, [r7, #3]
 8001b46:	b291      	uxth	r1, r2
 8001b48:	4a42      	ldr	r2, [pc, #264]	; (8001c54 <_set_fb_data_raw+0x20c>)
 8001b4a:	015b      	lsls	r3, r3, #5
 8001b4c:	4413      	add	r3, r2
 8001b4e:	3310      	adds	r3, #16
 8001b50:	460a      	mov	r2, r1
 8001b52:	801a      	strh	r2, [r3, #0]
    _c620_feedback_data_raw_global[device_id].vel = (int16_t) (rxData[2] << 8 | rxData[3]);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	3302      	adds	r3, #2
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	021b      	lsls	r3, r3, #8
 8001b5c:	b219      	sxth	r1, r3
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	3303      	adds	r3, #3
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	b21a      	sxth	r2, r3
 8001b66:	78fb      	ldrb	r3, [r7, #3]
 8001b68:	430a      	orrs	r2, r1
 8001b6a:	b211      	sxth	r1, r2
 8001b6c:	4a39      	ldr	r2, [pc, #228]	; (8001c54 <_set_fb_data_raw+0x20c>)
 8001b6e:	015b      	lsls	r3, r3, #5
 8001b70:	4413      	add	r3, r2
 8001b72:	3316      	adds	r3, #22
 8001b74:	460a      	mov	r2, r1
 8001b76:	801a      	strh	r2, [r3, #0]
    _c620_feedback_data_raw_global[device_id].cur = (int16_t) (rxData[4] << 8 | rxData[5]);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	3304      	adds	r3, #4
 8001b7c:	781b      	ldrb	r3, [r3, #0]
 8001b7e:	021b      	lsls	r3, r3, #8
 8001b80:	b219      	sxth	r1, r3
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	3305      	adds	r3, #5
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	b21a      	sxth	r2, r3
 8001b8a:	78fb      	ldrb	r3, [r7, #3]
 8001b8c:	430a      	orrs	r2, r1
 8001b8e:	b211      	sxth	r1, r2
 8001b90:	4a30      	ldr	r2, [pc, #192]	; (8001c54 <_set_fb_data_raw+0x20c>)
 8001b92:	015b      	lsls	r3, r3, #5
 8001b94:	4413      	add	r3, r2
 8001b96:	3318      	adds	r3, #24
 8001b98:	460a      	mov	r2, r1
 8001b9a:	801a      	strh	r2, [r3, #0]

    // 回転数の計算
    int32_t diff_pos = (int32_t) (_c620_feedback_data_raw_global[device_id].pos) -
 8001b9c:	78fb      	ldrb	r3, [r7, #3]
 8001b9e:	4a2d      	ldr	r2, [pc, #180]	; (8001c54 <_set_fb_data_raw+0x20c>)
 8001ba0:	015b      	lsls	r3, r3, #5
 8001ba2:	4413      	add	r3, r2
 8001ba4:	3310      	adds	r3, #16
 8001ba6:	881b      	ldrh	r3, [r3, #0]
 8001ba8:	4619      	mov	r1, r3
                       (int32_t) (_c620_feedback_data_raw_global[device_id].pos_pre);
 8001baa:	78fb      	ldrb	r3, [r7, #3]
 8001bac:	4a29      	ldr	r2, [pc, #164]	; (8001c54 <_set_fb_data_raw+0x20c>)
 8001bae:	015b      	lsls	r3, r3, #5
 8001bb0:	4413      	add	r3, r2
 8001bb2:	3314      	adds	r3, #20
 8001bb4:	881b      	ldrh	r3, [r3, #0]
    int32_t diff_pos = (int32_t) (_c620_feedback_data_raw_global[device_id].pos) -
 8001bb6:	1acb      	subs	r3, r1, r3
 8001bb8:	60fb      	str	r3, [r7, #12]
    if (diff_pos > 4096) {
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001bc0:	dd1f      	ble.n	8001c02 <_set_fb_data_raw+0x1ba>
        if (_c620_feedback_data_raw_global[device_id]._rot_num != -(INT64_MAX / 10)) {
 8001bc2:	78fb      	ldrb	r3, [r7, #3]
 8001bc4:	4a23      	ldr	r2, [pc, #140]	; (8001c54 <_set_fb_data_raw+0x20c>)
 8001bc6:	015b      	lsls	r3, r3, #5
 8001bc8:	4413      	add	r3, r2
 8001bca:	3308      	adds	r3, #8
 8001bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bd0:	4921      	ldr	r1, [pc, #132]	; (8001c58 <_set_fb_data_raw+0x210>)
 8001bd2:	428b      	cmp	r3, r1
 8001bd4:	bf08      	it	eq
 8001bd6:	f112 3fcc 	cmneq.w	r2, #3435973836	; 0xcccccccc
 8001bda:	d036      	beq.n	8001c4a <_set_fb_data_raw+0x202>
            _c620_feedback_data_raw_global[device_id]._rot_num -= 1;
 8001bdc:	78fb      	ldrb	r3, [r7, #3]
 8001bde:	4a1d      	ldr	r2, [pc, #116]	; (8001c54 <_set_fb_data_raw+0x20c>)
 8001be0:	015b      	lsls	r3, r3, #5
 8001be2:	4413      	add	r3, r2
 8001be4:	3308      	adds	r3, #8
 8001be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bea:	78f9      	ldrb	r1, [r7, #3]
 8001bec:	f112 38ff 	adds.w	r8, r2, #4294967295
 8001bf0:	f143 39ff 	adc.w	r9, r3, #4294967295
 8001bf4:	4a17      	ldr	r2, [pc, #92]	; (8001c54 <_set_fb_data_raw+0x20c>)
 8001bf6:	014b      	lsls	r3, r1, #5
 8001bf8:	4413      	add	r3, r2
 8001bfa:	3308      	adds	r3, #8
 8001bfc:	e9c3 8900 	strd	r8, r9, [r3]
 8001c00:	e023      	b.n	8001c4a <_set_fb_data_raw+0x202>
        }  // overflow対策
    } else if (diff_pos < -4096) {
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	f513 5f80 	cmn.w	r3, #4096	; 0x1000
 8001c08:	da1f      	bge.n	8001c4a <_set_fb_data_raw+0x202>
        if (_c620_feedback_data_raw_global[device_id]._rot_num != (INT64_MAX / 10)) {
 8001c0a:	78fb      	ldrb	r3, [r7, #3]
 8001c0c:	4a11      	ldr	r2, [pc, #68]	; (8001c54 <_set_fb_data_raw+0x20c>)
 8001c0e:	015b      	lsls	r3, r3, #5
 8001c10:	4413      	add	r3, r2
 8001c12:	3308      	adds	r3, #8
 8001c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c18:	4910      	ldr	r1, [pc, #64]	; (8001c5c <_set_fb_data_raw+0x214>)
 8001c1a:	428b      	cmp	r3, r1
 8001c1c:	bf08      	it	eq
 8001c1e:	f1b2 3fcc 	cmpeq.w	r2, #3435973836	; 0xcccccccc
 8001c22:	d012      	beq.n	8001c4a <_set_fb_data_raw+0x202>
            _c620_feedback_data_raw_global[device_id]._rot_num += 1;
 8001c24:	78fb      	ldrb	r3, [r7, #3]
 8001c26:	4a0b      	ldr	r2, [pc, #44]	; (8001c54 <_set_fb_data_raw+0x20c>)
 8001c28:	015b      	lsls	r3, r3, #5
 8001c2a:	4413      	add	r3, r2
 8001c2c:	3308      	adds	r3, #8
 8001c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c32:	78f9      	ldrb	r1, [r7, #3]
 8001c34:	1c54      	adds	r4, r2, #1
 8001c36:	f143 0500 	adc.w	r5, r3, #0
 8001c3a:	4a06      	ldr	r2, [pc, #24]	; (8001c54 <_set_fb_data_raw+0x20c>)
 8001c3c:	014b      	lsls	r3, r1, #5
 8001c3e:	4413      	add	r3, r2
 8001c40:	3308      	adds	r3, #8
 8001c42:	e9c3 4500 	strd	r4, r5, [r3]
 8001c46:	e000      	b.n	8001c4a <_set_fb_data_raw+0x202>
    if (device_id > 9 || device_id <= 0)return;
 8001c48:	bf00      	nop
        }  // overflow対策
    }
}
 8001c4a:	3714      	adds	r7, #20
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 8001c52:	4770      	bx	lr
 8001c54:	200044c8 	.word	0x200044c8
 8001c58:	f3333333 	.word	0xf3333333
 8001c5c:	0ccccccc 	.word	0x0ccccccc

08001c60 <C620_WhenCANRxFifo1MsgPending>:

void C620_WhenCANRxFifo1MsgPending(CAN_HandleTypeDef *phcan) {
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b08c      	sub	sp, #48	; 0x30
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
    // Fifo0はCANLibで使うので、Fifo1を使う事。
    if (_c620_phcan_global != phcan)return;
 8001c68:	4b15      	ldr	r3, [pc, #84]	; (8001cc0 <C620_WhenCANRxFifo1MsgPending+0x60>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	687a      	ldr	r2, [r7, #4]
 8001c6e:	429a      	cmp	r2, r3
 8001c70:	d121      	bne.n	8001cb6 <C620_WhenCANRxFifo1MsgPending+0x56>
    CAN_RxHeaderTypeDef rxHeader;
    uint8_t rxData[8];
    if (HAL_CAN_GetRxMessage(phcan, CAN_RX_FIFO1, &rxHeader, rxData) != HAL_OK) {
 8001c72:	f107 030c 	add.w	r3, r7, #12
 8001c76:	f107 0214 	add.w	r2, r7, #20
 8001c7a:	2101      	movs	r1, #1
 8001c7c:	6878      	ldr	r0, [r7, #4]
 8001c7e:	f001 fcfe 	bl	800367e <HAL_CAN_GetRxMessage>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d004      	beq.n	8001c92 <C620_WhenCANRxFifo1MsgPending+0x32>
        // Reception Error
        printf("GetRxMessage error\n\r");
 8001c88:	480e      	ldr	r0, [pc, #56]	; (8001cc4 <C620_WhenCANRxFifo1MsgPending+0x64>)
 8001c8a:	f005 ffff 	bl	8007c8c <iprintf>
        Error_Handler();
 8001c8e:	f000 fd2f 	bl	80026f0 <Error_Handler>
    }

    if (((rxHeader.StdId - 0x200) < 9) && ((rxHeader.StdId - 0x200) >= 1)) {
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8001c98:	2b08      	cmp	r3, #8
 8001c9a:	d80d      	bhi.n	8001cb8 <C620_WhenCANRxFifo1MsgPending+0x58>
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ca2:	d009      	beq.n	8001cb8 <C620_WhenCANRxFifo1MsgPending+0x58>
        _set_fb_data_raw(rxData, rxHeader.StdId - 0x200);  // fb_data_rawにデータを入力
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	b2da      	uxtb	r2, r3
 8001ca8:	f107 030c 	add.w	r3, r7, #12
 8001cac:	4611      	mov	r1, r2
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f7ff feca 	bl	8001a48 <_set_fb_data_raw>
 8001cb4:	e000      	b.n	8001cb8 <C620_WhenCANRxFifo1MsgPending+0x58>
    if (_c620_phcan_global != phcan)return;
 8001cb6:	bf00      	nop
    }
}
 8001cb8:	3730      	adds	r7, #48	; 0x30
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	200024b4 	.word	0x200024b4
 8001cc4:	08008e00 	.word	0x08008e00

08001cc8 <Get_C620_FeedbackData>:
        _c620_feedback_data_raw_global[i]._internal_offset_pos = 0;
    }
}


C620_FeedbackData Get_C620_FeedbackData(C620_DeviceInfo *device_info) {
 8001cc8:	b590      	push	{r4, r7, lr}
 8001cca:	ed2d 8b02 	vpush	{d8}
 8001cce:	b08b      	sub	sp, #44	; 0x2c
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
 8001cd4:	6039      	str	r1, [r7, #0]
    uint8_t device_id = device_info->device_id;
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	781b      	ldrb	r3, [r3, #0]
 8001cda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (device_id >= 9)device_id = 0;
 8001cde:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001ce2:	2b08      	cmp	r3, #8
 8001ce4:	d902      	bls.n	8001cec <Get_C620_FeedbackData+0x24>
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    C620_FeedbackData fb_data;
    fb_data.device_id = device_id;
 8001cec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001cf0:	733b      	strb	r3, [r7, #12]
    c620_feedback_data_raw *data = &(_c620_feedback_data_raw_global[device_id]);
 8001cf2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001cf6:	015b      	lsls	r3, r3, #5
 8001cf8:	4a49      	ldr	r2, [pc, #292]	; (8001e20 <Get_C620_FeedbackData+0x158>)
 8001cfa:	4413      	add	r3, r2
 8001cfc:	623b      	str	r3, [r7, #32]

    int32_t offset_pos = (int32_t) (data->pos) - (int32_t) (data->_internal_offset_pos);
 8001cfe:	6a3b      	ldr	r3, [r7, #32]
 8001d00:	8a1b      	ldrh	r3, [r3, #16]
 8001d02:	461a      	mov	r2, r3
 8001d04:	6a3b      	ldr	r3, [r7, #32]
 8001d06:	8a5b      	ldrh	r3, [r3, #18]
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	61fb      	str	r3, [r7, #28]
    if (device_info->ctrl_param.use_internal_offset != C620_USE_OFFSET_POS_DISABLE) {
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d016      	beq.n	8001d44 <Get_C620_FeedbackData+0x7c>
        fb_data.position = ((float)offset_pos) / 8192.0f + (float) (data->_rot_num);
 8001d16:	69fb      	ldr	r3, [r7, #28]
 8001d18:	ee07 3a90 	vmov	s15, r3
 8001d1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d20:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8001e24 <Get_C620_FeedbackData+0x15c>
 8001d24:	ee87 8a87 	vdiv.f32	s16, s15, s14
 8001d28:	6a3b      	ldr	r3, [r7, #32]
 8001d2a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001d2e:	4610      	mov	r0, r2
 8001d30:	4619      	mov	r1, r3
 8001d32:	f7fe fba5 	bl	8000480 <__aeabi_l2f>
 8001d36:	ee07 0a90 	vmov	s15, r0
 8001d3a:	ee78 7a27 	vadd.f32	s15, s16, s15
 8001d3e:	edc7 7a04 	vstr	s15, [r7, #16]
 8001d42:	e016      	b.n	8001d72 <Get_C620_FeedbackData+0xaa>
    } else {
        fb_data.position = ((float)data->pos) / 8192.0f + (float) (data->_rot_num);
 8001d44:	6a3b      	ldr	r3, [r7, #32]
 8001d46:	8a1b      	ldrh	r3, [r3, #16]
 8001d48:	ee07 3a90 	vmov	s15, r3
 8001d4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d50:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8001e24 <Get_C620_FeedbackData+0x15c>
 8001d54:	ee87 8a87 	vdiv.f32	s16, s15, s14
 8001d58:	6a3b      	ldr	r3, [r7, #32]
 8001d5a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001d5e:	4610      	mov	r0, r2
 8001d60:	4619      	mov	r1, r3
 8001d62:	f7fe fb8d 	bl	8000480 <__aeabi_l2f>
 8001d66:	ee07 0a90 	vmov	s15, r0
 8001d6a:	ee78 7a27 	vadd.f32	s15, s16, s15
 8001d6e:	edc7 7a04 	vstr	s15, [r7, #16]
    }
    fb_data.velocity = ((float) (data->vel)) / 60.0f;
 8001d72:	6a3b      	ldr	r3, [r7, #32]
 8001d74:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001d78:	ee07 3a90 	vmov	s15, r3
 8001d7c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d80:	eddf 6a29 	vldr	s13, [pc, #164]	; 8001e28 <Get_C620_FeedbackData+0x160>
 8001d84:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d88:	edc7 7a05 	vstr	s15, [r7, #20]
    fb_data.current = ((float) (data->cur * 20)) / 16384.0f;
 8001d8c:	6a3b      	ldr	r3, [r7, #32]
 8001d8e:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8001d92:	461a      	mov	r2, r3
 8001d94:	4613      	mov	r3, r2
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	4413      	add	r3, r2
 8001d9a:	009b      	lsls	r3, r3, #2
 8001d9c:	ee07 3a90 	vmov	s15, r3
 8001da0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001da4:	eddf 6a21 	vldr	s13, [pc, #132]	; 8001e2c <Get_C620_FeedbackData+0x164>
 8001da8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001dac:	edc7 7a06 	vstr	s15, [r7, #24]
    fb_data.get_flag = (data->_get_counter > 50);
 8001db0:	6a3b      	ldr	r3, [r7, #32]
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	2b32      	cmp	r3, #50	; 0x32
 8001db6:	bf8c      	ite	hi
 8001db8:	2301      	movhi	r3, #1
 8001dba:	2300      	movls	r3, #0
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	737b      	strb	r3, [r7, #13]

    fb_data.velocity *= device_info->ctrl_param.quant_per_rot;
 8001dc0:	ed97 7a05 	vldr	s14, [r7, #20]
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8001dca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dce:	edc7 7a05 	vstr	s15, [r7, #20]
    fb_data.position *= device_info->ctrl_param.quant_per_rot;
 8001dd2:	ed97 7a04 	vldr	s14, [r7, #16]
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8001ddc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001de0:	edc7 7a04 	vstr	s15, [r7, #16]
    if(device_info->ctrl_param.rotation == C620_ROT_CW){  // TODO: 反転処理(確認)
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8001dea:	2b01      	cmp	r3, #1
 8001dec:	d10b      	bne.n	8001e06 <Get_C620_FeedbackData+0x13e>
        fb_data.velocity *= -1.0f;
 8001dee:	edd7 7a05 	vldr	s15, [r7, #20]
 8001df2:	eef1 7a67 	vneg.f32	s15, s15
 8001df6:	edc7 7a05 	vstr	s15, [r7, #20]
        fb_data.position *= -1.0f;
 8001dfa:	edd7 7a04 	vldr	s15, [r7, #16]
 8001dfe:	eef1 7a67 	vneg.f32	s15, s15
 8001e02:	edc7 7a04 	vstr	s15, [r7, #16]
    }
    return fb_data;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	461c      	mov	r4, r3
 8001e0a:	f107 030c 	add.w	r3, r7, #12
 8001e0e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e10:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	372c      	adds	r7, #44	; 0x2c
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	ecbd 8b02 	vpop	{d8}
 8001e1e:	bd90      	pop	{r4, r7, pc}
 8001e20:	200044c8 	.word	0x200044c8
 8001e24:	46000000 	.word	0x46000000
 8001e28:	42700000 	.word	0x42700000
 8001e2c:	46800000 	.word	0x46800000

08001e30 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(uint8_t ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */

PUTCHAR_PROTOTYPE {
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b082      	sub	sp, #8
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	4603      	mov	r3, r0
 8001e38:	71fb      	strb	r3, [r7, #7]
    HAL_UART_Transmit(&huart3, &ch, 1, 500);
 8001e3a:	1df9      	adds	r1, r7, #7
 8001e3c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001e40:	2201      	movs	r2, #1
 8001e42:	4804      	ldr	r0, [pc, #16]	; (8001e54 <__io_putchar+0x24>)
 8001e44:	f004 fba8 	bl	8006598 <HAL_UART_Transmit>
    return ch;
 8001e48:	79fb      	ldrb	r3, [r7, #7]
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3708      	adds	r7, #8
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	20004720 	.word	0x20004720

08001e58 <HAL_CAN_TxMailbox0CompleteCallback>:



void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan){
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
    C620_WhenTxMailboxCompleteCallbackCalled(hcan);
 8001e60:	6878      	ldr	r0, [r7, #4]
 8001e62:	f7ff fdc5 	bl	80019f0 <C620_WhenTxMailboxCompleteCallbackCalled>
    CANLib_WhenTxMailbox0_1_2CompleteCallbackCalled(hcan);
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f7fe fd7e 	bl	8000968 <CANLib_WhenTxMailbox0_1_2CompleteCallbackCalled>
}
 8001e6c:	bf00      	nop
 8001e6e:	3708      	adds	r7, #8
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}

08001e74 <HAL_CAN_TxMailbox0AbortCallback>:

void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan){
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b082      	sub	sp, #8
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
    C620_WhenTxMailboxAbortCallbackCalled(hcan);
 8001e7c:	6878      	ldr	r0, [r7, #4]
 8001e7e:	f7ff fdcd 	bl	8001a1c <C620_WhenTxMailboxAbortCallbackCalled>
    CANLib_WhenTxMailbox0_1_2AbortCallbackCalled(hcan);
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	f7fe fd86 	bl	8000994 <CANLib_WhenTxMailbox0_1_2AbortCallbackCalled>
}
 8001e88:	bf00      	nop
 8001e8a:	3708      	adds	r7, #8
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}

08001e90 <HAL_CAN_TxMailbox1CompleteCallback>:

void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan){
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
    C620_WhenTxMailboxCompleteCallbackCalled(hcan);
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	f7ff fda9 	bl	80019f0 <C620_WhenTxMailboxCompleteCallbackCalled>
    CANLib_WhenTxMailbox0_1_2CompleteCallbackCalled(hcan);
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	f7fe fd62 	bl	8000968 <CANLib_WhenTxMailbox0_1_2CompleteCallbackCalled>
}
 8001ea4:	bf00      	nop
 8001ea6:	3708      	adds	r7, #8
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}

08001eac <HAL_CAN_TxMailbox1AbortCallback>:

void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan){
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b082      	sub	sp, #8
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
    C620_WhenTxMailboxAbortCallbackCalled(hcan);
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	f7ff fdb1 	bl	8001a1c <C620_WhenTxMailboxAbortCallbackCalled>
    CANLib_WhenTxMailbox0_1_2AbortCallbackCalled(hcan);
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	f7fe fd6a 	bl	8000994 <CANLib_WhenTxMailbox0_1_2AbortCallbackCalled>
}
 8001ec0:	bf00      	nop
 8001ec2:	3708      	adds	r7, #8
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}

08001ec8 <HAL_CAN_TxMailbox2CompleteCallback>:

void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan){
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b082      	sub	sp, #8
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
    C620_WhenTxMailboxCompleteCallbackCalled(hcan);
 8001ed0:	6878      	ldr	r0, [r7, #4]
 8001ed2:	f7ff fd8d 	bl	80019f0 <C620_WhenTxMailboxCompleteCallbackCalled>
    CANLib_WhenTxMailbox0_1_2CompleteCallbackCalled(hcan);
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f7fe fd46 	bl	8000968 <CANLib_WhenTxMailbox0_1_2CompleteCallbackCalled>
}
 8001edc:	bf00      	nop
 8001ede:	3708      	adds	r7, #8
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}

08001ee4 <HAL_CAN_TxMailbox2AbortCallback>:

void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan){
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b082      	sub	sp, #8
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
    C620_WhenTxMailboxAbortCallbackCalled(hcan);
 8001eec:	6878      	ldr	r0, [r7, #4]
 8001eee:	f7ff fd95 	bl	8001a1c <C620_WhenTxMailboxAbortCallbackCalled>
    CANLib_WhenTxMailbox0_1_2AbortCallbackCalled(hcan);
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f7fe fd4e 	bl	8000994 <CANLib_WhenTxMailbox0_1_2AbortCallbackCalled>
}
 8001ef8:	bf00      	nop
 8001efa:	3708      	adds	r7, #8
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}

08001f00 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b082      	sub	sp, #8
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
    WhenCANRxFifo0MsgPending(hcan, &num_of_devices);
 8001f08:	4903      	ldr	r1, [pc, #12]	; (8001f18 <HAL_CAN_RxFifo0MsgPendingCallback+0x18>)
 8001f0a:	6878      	ldr	r0, [r7, #4]
 8001f0c:	f7fe fd58 	bl	80009c0 <WhenCANRxFifo0MsgPending>
}
 8001f10:	bf00      	nop
 8001f12:	3708      	adds	r7, #8
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	20004d10 	.word	0x20004d10

08001f1c <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan){
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b082      	sub	sp, #8
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
    C620_WhenCANRxFifo1MsgPending(hcan);
 8001f24:	6878      	ldr	r0, [r7, #4]
 8001f26:	f7ff fe9b 	bl	8001c60 <C620_WhenCANRxFifo1MsgPending>
}
 8001f2a:	bf00      	nop
 8001f2c:	3708      	adds	r7, #8
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
	...

08001f34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f34:	b590      	push	{r4, r7, lr}
 8001f36:	b08b      	sub	sp, #44	; 0x2c
 8001f38:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f3a:	f000 ffee 	bl	8002f1a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f3e:	f000 f98d 	bl	800225c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f42:	f000 fb33 	bl	80025ac <MX_GPIO_Init>
  MX_DMA_Init();
 8001f46:	f000 fb13 	bl	8002570 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8001f4a:	f000 fab3 	bl	80024b4 <MX_USART3_UART_Init>
  MX_ETH_Init();
 8001f4e:	f000 fa63 	bl	8002418 <MX_ETH_Init>
  MX_CAN1_Init();
 8001f52:	f000 f9f5 	bl	8002340 <MX_CAN1_Init>
  MX_CAN2_Init();
 8001f56:	f000 fa29 	bl	80023ac <MX_CAN2_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001f5a:	f000 fadb 	bl	8002514 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */


  printf("Start Initializing CAN System:Begin\n\r");
 8001f5e:	48a7      	ldr	r0, [pc, #668]	; (80021fc <main+0x2c8>)
 8001f60:	f005 fe94 	bl	8007c8c <iprintf>
  HAL_Delay(100);
 8001f64:	2064      	movs	r0, #100	; 0x64
 8001f66:	f001 f835 	bl	8002fd4 <HAL_Delay>

  CAN_SystemInit(&hcan2); // F7のCAN通信のinit
 8001f6a:	48a5      	ldr	r0, [pc, #660]	; (8002200 <main+0x2cc>)
 8001f6c:	f7fe fe82 	bl	8000c74 <CAN_SystemInit>

   // デバイス数の設定 (今回はmcmd4が1枚)
  num_of_devices.mcmd3 = 1;
 8001f70:	4ba4      	ldr	r3, [pc, #656]	; (8002204 <main+0x2d0>)
 8001f72:	2201      	movs	r2, #1
 8001f74:	709a      	strb	r2, [r3, #2]
  num_of_devices.mcmd4 = 0;
 8001f76:	4ba3      	ldr	r3, [pc, #652]	; (8002204 <main+0x2d0>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	715a      	strb	r2, [r3, #5]
  num_of_devices.air = 0;
 8001f7c:	4ba1      	ldr	r3, [pc, #644]	; (8002204 <main+0x2d0>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	711a      	strb	r2, [r3, #4]
  num_of_devices.servo = 0;
 8001f82:	4ba0      	ldr	r3, [pc, #640]	; (8002204 <main+0x2d0>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	70da      	strb	r2, [r3, #3]

  printf("Start Initializing CAN System:End\n\r");
 8001f88:	489f      	ldr	r0, [pc, #636]	; (8002208 <main+0x2d4>)
 8001f8a:	f005 fe7f 	bl	8007c8c <iprintf>
  HAL_Delay(100);
 8001f8e:	2064      	movs	r0, #100	; 0x64
 8001f90:	f001 f820 	bl	8002fd4 <HAL_Delay>
  if(!DISABLE_CAN_WAIT_CONNECT)CAN_WaitConnect(&num_of_devices);  // 設定された全てのCANモジュール基板との接続が確認できるまで待機
 8001f94:	489b      	ldr	r0, [pc, #620]	; (8002204 <main+0x2d0>)
 8001f96:	f7ff f915 	bl	80011c4 <CAN_WaitConnect>

	   // ここからはCANモジュール基板の設定
	 // 接続先のMCMDの設定
	 mcmd4_struct.device.node_type = NODE_MCMD4;  // nodeのタイプ (NODE_MCMD3など)
 8001f9a:	4b9c      	ldr	r3, [pc, #624]	; (800220c <main+0x2d8>)
 8001f9c:	2206      	movs	r2, #6
 8001f9e:	701a      	strb	r2, [r3, #0]
	 mcmd4_struct.device.node_id = 2;  // 基板の番号 (基板上の半固定抵抗を回す事で設定できる)
 8001fa0:	4b9a      	ldr	r3, [pc, #616]	; (800220c <main+0x2d8>)
 8001fa2:	2202      	movs	r2, #2
 8001fa4:	705a      	strb	r2, [r3, #1]
	 mcmd4_struct.device.device_num = 0;  // モーターの番号(MCMDなら0と1の2つが選べる)
 8001fa6:	4b99      	ldr	r3, [pc, #612]	; (800220c <main+0x2d8>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	709a      	strb	r2, [r3, #2]

	 // 制御パラメータの設定
	 mcmd4_struct.ctrl_param.ctrl_type = MCMD_CTRL_POS;  // 位置制御を行う
 8001fac:	4b97      	ldr	r3, [pc, #604]	; (800220c <main+0x2d8>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	751a      	strb	r2, [r3, #20]
	 mcmd4_struct.ctrl_param.PID_param.kp = 0.10f;  // Pゲイン 0.10
 8001fb2:	4b96      	ldr	r3, [pc, #600]	; (800220c <main+0x2d8>)
 8001fb4:	4a96      	ldr	r2, [pc, #600]	; (8002210 <main+0x2dc>)
 8001fb6:	619a      	str	r2, [r3, #24]
	 mcmd4_struct.ctrl_param.PID_param.ki = 0.0f;  // Iゲイン 0.0
 8001fb8:	4b94      	ldr	r3, [pc, #592]	; (800220c <main+0x2d8>)
 8001fba:	f04f 0200 	mov.w	r2, #0
 8001fbe:	61da      	str	r2, [r3, #28]
	 mcmd4_struct.ctrl_param.PID_param.kd = 0.0f;  // Dゲイン 0.0 (Dゲインは使いにくい)
 8001fc0:	4b92      	ldr	r3, [pc, #584]	; (800220c <main+0x2d8>)
 8001fc2:	f04f 0200 	mov.w	r2, #0
 8001fc6:	621a      	str	r2, [r3, #32]
	 mcmd4_struct.ctrl_param.accel_limit = ACCEL_LIMIT_ENABLE;  // PIDの偏差をclipするか
 8001fc8:	4b90      	ldr	r3, [pc, #576]	; (800220c <main+0x2d8>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	 mcmd4_struct.ctrl_param.accel_limit_size = 2.0f;  // PIDの偏差をclipする場合の絶対値のmax値
 8001fd0:	4b8e      	ldr	r3, [pc, #568]	; (800220c <main+0x2d8>)
 8001fd2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001fd6:	635a      	str	r2, [r3, #52]	; 0x34
	 mcmd4_struct.ctrl_param.feedback = MCMD_FB_ENABLE;  // MCMDからF7にフィードバックを送信するか否か
 8001fd8:	4b8c      	ldr	r3, [pc, #560]	; (800220c <main+0x2d8>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	 mcmd4_struct.ctrl_param.timup_monitor = TIMUP_MONITOR_DISABLE;  // timeupは未実装なのでDISABLE。
 8001fe0:	4b8a      	ldr	r3, [pc, #552]	; (800220c <main+0x2d8>)
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	 mcmd4_struct.enc_dir = MCMD_DIR_FW;  // Encoderの回転方向設定
 8001fe8:	4b88      	ldr	r3, [pc, #544]	; (800220c <main+0x2d8>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	711a      	strb	r2, [r3, #4]
	 mcmd4_struct.rot_dir = MCMD_DIR_FW;  // モーターの回転方向設定
 8001fee:	4b87      	ldr	r3, [pc, #540]	; (800220c <main+0x2d8>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	715a      	strb	r2, [r3, #5]
	 mcmd4_struct.quant_per_unit = 0.00205f;  // エンコーダーの分解能に対する制御値の変化量の割合
 8001ff4:	4b85      	ldr	r3, [pc, #532]	; (800220c <main+0x2d8>)
 8001ff6:	4a87      	ldr	r2, [pc, #540]	; (8002214 <main+0x2e0>)
 8001ff8:	611a      	str	r2, [r3, #16]

	 // 原点サーチの設定
	 mcmd4_struct.limit_sw_type = LIMIT_SW_NC;  // 原点サーチにNomaly Closedのスイッチを用いる
 8001ffa:	4b84      	ldr	r3, [pc, #528]	; (800220c <main+0x2d8>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	719a      	strb	r2, [r3, #6]
	 mcmd4_struct.calib = CALIBRATION_DISABLE;  // 原点サーチを行う。
 8002000:	4b82      	ldr	r3, [pc, #520]	; (800220c <main+0x2d8>)
 8002002:	2201      	movs	r2, #1
 8002004:	71da      	strb	r2, [r3, #7]
	 mcmd4_struct.calib_duty = -0.1f;  // 原点サーチ時のduty
 8002006:	4b81      	ldr	r3, [pc, #516]	; (800220c <main+0x2d8>)
 8002008:	4a83      	ldr	r2, [pc, #524]	; (8002218 <main+0x2e4>)
 800200a:	609a      	str	r2, [r3, #8]
	 mcmd4_struct.offset = 0.0f;  // 原点のオフセット
 800200c:	4b7f      	ldr	r3, [pc, #508]	; (800220c <main+0x2d8>)
 800200e:	f04f 0200 	mov.w	r2, #0
 8002012:	60da      	str	r2, [r3, #12]
	 mcmd4_struct.fb_type = MCMD_FB_POS;  // 読み取った位置情報をF7にフィードバックする。
 8002014:	4b7d      	ldr	r3, [pc, #500]	; (800220c <main+0x2d8>)
 8002016:	2200      	movs	r2, #0
 8002018:	70da      	strb	r2, [r3, #3]

	 // パラメータなどの設定と動作命令をMCMDに送信する
	MCMD_init(&mcmd4_struct);
 800201a:	487c      	ldr	r0, [pc, #496]	; (800220c <main+0x2d8>)
 800201c:	f7ff fa0c 	bl	8001438 <MCMD_init>
	HAL_Delay(10);
 8002020:	200a      	movs	r0, #10
 8002022:	f000 ffd7 	bl	8002fd4 <HAL_Delay>
	MCMD_Calib(&mcmd4_struct);  // キャリブレーションを行う
 8002026:	4879      	ldr	r0, [pc, #484]	; (800220c <main+0x2d8>)
 8002028:	f7ff fa56 	bl	80014d8 <MCMD_Calib>
	HAL_Delay(2000);  // キャリブレーションが終わるまで待つ
 800202c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002030:	f000 ffd0 	bl	8002fd4 <HAL_Delay>
	MCMD_SetTarget(&mcmd4_struct, 0.0f);  // 目標値(0.0)を設定
 8002034:	ed9f 0a79 	vldr	s0, [pc, #484]	; 800221c <main+0x2e8>
 8002038:	4874      	ldr	r0, [pc, #464]	; (800220c <main+0x2d8>)
 800203a:	f7ff fa79 	bl	8001530 <MCMD_SetTarget>
	HAL_Delay(10);
 800203e:	200a      	movs	r0, #10
 8002040:	f000 ffc8 	bl	8002fd4 <HAL_Delay>
	MCMD_Control_Enable(&mcmd4_struct);  // 制御開始
 8002044:	4871      	ldr	r0, [pc, #452]	; (800220c <main+0x2d8>)
 8002046:	f7ff fa5d 	bl	8001504 <MCMD_Control_Enable>
	HAL_Delay(10);
 800204a:	200a      	movs	r0, #10
 800204c:	f000 ffc2 	bl	8002fd4 <HAL_Delay>

   printf("Start Initializing CAN System for C620:Begin\n\r");
 8002050:	4873      	ldr	r0, [pc, #460]	; (8002220 <main+0x2ec>)
 8002052:	f005 fe1b 	bl	8007c8c <iprintf>
   HAL_Delay(100);
 8002056:	2064      	movs	r0, #100	; 0x64
 8002058:	f000 ffbc 	bl	8002fd4 <HAL_Delay>

   CAN_SystemInit(&hcan1);
 800205c:	4871      	ldr	r0, [pc, #452]	; (8002224 <main+0x2f0>)
 800205e:	f7fe fe09 	bl	8000c74 <CAN_SystemInit>

   printf("Start Initializing CAN System for C620:End\n\r");
 8002062:	4871      	ldr	r0, [pc, #452]	; (8002228 <main+0x2f4>)
 8002064:	f005 fe12 	bl	8007c8c <iprintf>
   HAL_Delay(100);
 8002068:	2064      	movs	r0, #100	; 0x64
 800206a:	f000 ffb3 	bl	8002fd4 <HAL_Delay>
   C620_WaitForConnect(c620_dev_info_global, num_of_c620);  // C620の接続待ち
 800206e:	4b6f      	ldr	r3, [pc, #444]	; (800222c <main+0x2f8>)
 8002070:	781b      	ldrb	r3, [r3, #0]
 8002072:	4619      	mov	r1, r3
 8002074:	486e      	ldr	r0, [pc, #440]	; (8002230 <main+0x2fc>)
 8002076:	f7ff fbfd 	bl	8001874 <C620_WaitForConnect>

   c620_dev_info_global[0].device_id = 1;  // 1スタートな事に注意
 800207a:	4b6d      	ldr	r3, [pc, #436]	; (8002230 <main+0x2fc>)
 800207c:	2201      	movs	r2, #1
 800207e:	701a      	strb	r2, [r3, #0]
   c620_dev_info_global[0].ctrl_param.accel_limit = C620_ACCEL_LIMIT_ENABLE;
 8002080:	4b6b      	ldr	r3, [pc, #428]	; (8002230 <main+0x2fc>)
 8002082:	2200      	movs	r2, #0
 8002084:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
   c620_dev_info_global[0].ctrl_param.use_internal_offset = C620_USE_OFFSET_POS_CALIB;
 8002088:	4b69      	ldr	r3, [pc, #420]	; (8002230 <main+0x2fc>)
 800208a:	2202      	movs	r2, #2
 800208c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
   c620_dev_info_global[0].ctrl_param.use_internal_offset = C620_USE_OFFSET_POS_INTERNAL;
 8002090:	4b67      	ldr	r3, [pc, #412]	; (8002230 <main+0x2fc>)
 8002092:	2201      	movs	r2, #1
 8002094:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
   c620_dev_info_global[0].ctrl_param.ctrl_type = C620_CTRL_VEL;
 8002098:	4b65      	ldr	r3, [pc, #404]	; (8002230 <main+0x2fc>)
 800209a:	2201      	movs	r2, #1
 800209c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
   c620_dev_info_global[0].ctrl_param.accel_limit_size = 15.0f;
 80020a0:	4b63      	ldr	r3, [pc, #396]	; (8002230 <main+0x2fc>)
 80020a2:	4a64      	ldr	r2, [pc, #400]	; (8002234 <main+0x300>)
 80020a4:	639a      	str	r2, [r3, #56]	; 0x38
   c620_dev_info_global[0].ctrl_param.quant_per_rot = 1.0f/19.0f / 3.0f * 3.141592f * 2.0f;  //M3508は19:1
 80020a6:	4b62      	ldr	r3, [pc, #392]	; (8002230 <main+0x2fc>)
 80020a8:	4a63      	ldr	r2, [pc, #396]	; (8002238 <main+0x304>)
 80020aa:	63da      	str	r2, [r3, #60]	; 0x3c
   c620_dev_info_global[0].ctrl_param.rotation = C620_ROT_ACW;  // 半時計周り
 80020ac:	4b60      	ldr	r3, [pc, #384]	; (8002230 <main+0x2fc>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37

   c620_dev_info_global[0].ctrl_param.pid_vel.kp = 4.5f;  // 位置制御の場合はpid_velに速度制御用のgainを設定する
 80020b4:	4b5e      	ldr	r3, [pc, #376]	; (8002230 <main+0x2fc>)
 80020b6:	4a61      	ldr	r2, [pc, #388]	; (800223c <main+0x308>)
 80020b8:	61da      	str	r2, [r3, #28]
   c620_dev_info_global[0].ctrl_param.pid_vel.ki = 0.0f;
 80020ba:	4b5d      	ldr	r3, [pc, #372]	; (8002230 <main+0x2fc>)
 80020bc:	f04f 0200 	mov.w	r2, #0
 80020c0:	621a      	str	r2, [r3, #32]
   c620_dev_info_global[0].ctrl_param.pid_vel.kd = 0.0f;
 80020c2:	4b5b      	ldr	r3, [pc, #364]	; (8002230 <main+0x2fc>)
 80020c4:	f04f 0200 	mov.w	r2, #0
 80020c8:	625a      	str	r2, [r3, #36]	; 0x24
   c620_dev_info_global[0].ctrl_param.pid_vel.kff = 0.0f;
 80020ca:	4b59      	ldr	r3, [pc, #356]	; (8002230 <main+0x2fc>)
 80020cc:	f04f 0200 	mov.w	r2, #0
 80020d0:	629a      	str	r2, [r3, #40]	; 0x28

   c620_dev_info_global[0].ctrl_param.pid.kp = 10.0f;  // 位置制御用
 80020d2:	4b57      	ldr	r3, [pc, #348]	; (8002230 <main+0x2fc>)
 80020d4:	4a5a      	ldr	r2, [pc, #360]	; (8002240 <main+0x30c>)
 80020d6:	605a      	str	r2, [r3, #4]
   c620_dev_info_global[0].ctrl_param.pid.kp = 12.3f;  // 位置制御用
 80020d8:	4b55      	ldr	r3, [pc, #340]	; (8002230 <main+0x2fc>)
 80020da:	4a5a      	ldr	r2, [pc, #360]	; (8002244 <main+0x310>)
 80020dc:	605a      	str	r2, [r3, #4]
   c620_dev_info_global[0].ctrl_param.pid.ki = 0.16f;
 80020de:	4b54      	ldr	r3, [pc, #336]	; (8002230 <main+0x2fc>)
 80020e0:	4a59      	ldr	r2, [pc, #356]	; (8002248 <main+0x314>)
 80020e2:	609a      	str	r2, [r3, #8]
   c620_dev_info_global[0].ctrl_param.pid.kd = 0.0f;
 80020e4:	4b52      	ldr	r3, [pc, #328]	; (8002230 <main+0x2fc>)
 80020e6:	f04f 0200 	mov.w	r2, #0
 80020ea:	60da      	str	r2, [r3, #12]
   c620_dev_info_global[0].ctrl_param.pid.kff = 0.0f;
 80020ec:	4b50      	ldr	r3, [pc, #320]	; (8002230 <main+0x2fc>)
 80020ee:	f04f 0200 	mov.w	r2, #0
 80020f2:	611a      	str	r2, [r3, #16]
//   HAL_Delay(1000);
//   C620_SetTarget(&c620_dev_info_global[0], 1.0f);  // 目標値を設定
//   HAL_Delay(10);
//   C620_ControlEnable(&c620_dev_info_global[0]);

   for(int i=0; i<num_of_c620; i++)C620_SetTarget(&c620_dev_info_global[i], 0.0f);
 80020f4:	2300      	movs	r3, #0
 80020f6:	627b      	str	r3, [r7, #36]	; 0x24
 80020f8:	e00d      	b.n	8002116 <main+0x1e2>
 80020fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020fc:	224c      	movs	r2, #76	; 0x4c
 80020fe:	fb02 f303 	mul.w	r3, r2, r3
 8002102:	4a4b      	ldr	r2, [pc, #300]	; (8002230 <main+0x2fc>)
 8002104:	4413      	add	r3, r2
 8002106:	ed9f 0a45 	vldr	s0, [pc, #276]	; 800221c <main+0x2e8>
 800210a:	4618      	mov	r0, r3
 800210c:	f7ff fbea 	bl	80018e4 <C620_SetTarget>
 8002110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002112:	3301      	adds	r3, #1
 8002114:	627b      	str	r3, [r7, #36]	; 0x24
 8002116:	4b45      	ldr	r3, [pc, #276]	; (800222c <main+0x2f8>)
 8002118:	781b      	ldrb	r3, [r3, #0]
 800211a:	461a      	mov	r2, r3
 800211c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800211e:	4293      	cmp	r3, r2
 8002120:	dbeb      	blt.n	80020fa <main+0x1c6>
   if(!DISABLE_C620_WAIT_CONNECT)C620_WaitForConnect(c620_dev_info_global, num_of_c620);
 8002122:	4b42      	ldr	r3, [pc, #264]	; (800222c <main+0x2f8>)
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	4619      	mov	r1, r3
 8002128:	4841      	ldr	r0, [pc, #260]	; (8002230 <main+0x2fc>)
 800212a:	f7ff fba3 	bl	8001874 <C620_WaitForConnect>
//    for(int i=0; i<num_of_c620; i++){
//        C620_Calibration(&c620_dev_info_global[i], -2.0f, SWITCH_NO, GPIOG, GPIO_PIN_1, &hcan1);
//        C620_ControlEnable(&(c620_dev_info_global[i]));
//    }
   for(int i=0; i<num_of_c620; i++)C620_ControlEnable(&(c620_dev_info_global[i]));
 800212e:	2300      	movs	r3, #0
 8002130:	623b      	str	r3, [r7, #32]
 8002132:	e00b      	b.n	800214c <main+0x218>
 8002134:	6a3b      	ldr	r3, [r7, #32]
 8002136:	224c      	movs	r2, #76	; 0x4c
 8002138:	fb02 f303 	mul.w	r3, r2, r3
 800213c:	4a3c      	ldr	r2, [pc, #240]	; (8002230 <main+0x2fc>)
 800213e:	4413      	add	r3, r2
 8002140:	4618      	mov	r0, r3
 8002142:	f7ff fbde 	bl	8001902 <C620_ControlEnable>
 8002146:	6a3b      	ldr	r3, [r7, #32]
 8002148:	3301      	adds	r3, #1
 800214a:	623b      	str	r3, [r7, #32]
 800214c:	4b37      	ldr	r3, [pc, #220]	; (800222c <main+0x2f8>)
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	461a      	mov	r2, r3
 8002152:	6a3b      	ldr	r3, [r7, #32]
 8002154:	4293      	cmp	r3, r2
 8002156:	dbed      	blt.n	8002134 <main+0x200>

   C620_SetTarget(&c620_dev_info_global[0],1.0f);
 8002158:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800215c:	4834      	ldr	r0, [pc, #208]	; (8002230 <main+0x2fc>)
 800215e:	f7ff fbc1 	bl	80018e4 <C620_SetTarget>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  mcmd_fb = Get_MCMD_Feedback(&(mcmd4_struct.device));
 8002162:	4c3a      	ldr	r4, [pc, #232]	; (800224c <main+0x318>)
 8002164:	f107 0310 	add.w	r3, r7, #16
 8002168:	4928      	ldr	r1, [pc, #160]	; (800220c <main+0x2d8>)
 800216a:	4618      	mov	r0, r3
 800216c:	f7ff f9f8 	bl	8001560 <Get_MCMD_Feedback>
 8002170:	4622      	mov	r2, r4
 8002172:	f107 0310 	add.w	r3, r7, #16
 8002176:	e893 0003 	ldmia.w	r3, {r0, r1}
 800217a:	e882 0003 	stmia.w	r2, {r0, r1}
	  printf("value of mcmd3 %d\r\n",(int)(mcmd_fb.value));
 800217e:	4b33      	ldr	r3, [pc, #204]	; (800224c <main+0x318>)
 8002180:	edd3 7a00 	vldr	s15, [r3]
 8002184:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002188:	ee17 1a90 	vmov	r1, s15
 800218c:	4830      	ldr	r0, [pc, #192]	; (8002250 <main+0x31c>)
 800218e:	f005 fd7d 	bl	8007c8c <iprintf>
	  HAL_Delay(5);
 8002192:	2005      	movs	r0, #5
 8002194:	f000 ff1e 	bl	8002fd4 <HAL_Delay>

	  for(int i=0;i<num_of_c620;i++){
 8002198:	2300      	movs	r3, #0
 800219a:	61fb      	str	r3, [r7, #28]
 800219c:	e027      	b.n	80021ee <main+0x2ba>
		  c620_fb[i] = Get_C620_FeedbackData(&c620_dev_info_global[i]);
 800219e:	69fb      	ldr	r3, [r7, #28]
 80021a0:	224c      	movs	r2, #76	; 0x4c
 80021a2:	fb02 f303 	mul.w	r3, r2, r3
 80021a6:	4a22      	ldr	r2, [pc, #136]	; (8002230 <main+0x2fc>)
 80021a8:	441a      	add	r2, r3
 80021aa:	492a      	ldr	r1, [pc, #168]	; (8002254 <main+0x320>)
 80021ac:	69fb      	ldr	r3, [r7, #28]
 80021ae:	011b      	lsls	r3, r3, #4
 80021b0:	18cc      	adds	r4, r1, r3
 80021b2:	463b      	mov	r3, r7
 80021b4:	4611      	mov	r1, r2
 80021b6:	4618      	mov	r0, r3
 80021b8:	f7ff fd86 	bl	8001cc8 <Get_C620_FeedbackData>
 80021bc:	463b      	mov	r3, r7
 80021be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80021c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		  printf("value of c620[%d] %d\r\n",i,(int)(c620_fb[i].current));
 80021c4:	4a23      	ldr	r2, [pc, #140]	; (8002254 <main+0x320>)
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	011b      	lsls	r3, r3, #4
 80021ca:	4413      	add	r3, r2
 80021cc:	330c      	adds	r3, #12
 80021ce:	edd3 7a00 	vldr	s15, [r3]
 80021d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80021d6:	ee17 2a90 	vmov	r2, s15
 80021da:	69f9      	ldr	r1, [r7, #28]
 80021dc:	481e      	ldr	r0, [pc, #120]	; (8002258 <main+0x324>)
 80021de:	f005 fd55 	bl	8007c8c <iprintf>
		  HAL_Delay(5);
 80021e2:	2005      	movs	r0, #5
 80021e4:	f000 fef6 	bl	8002fd4 <HAL_Delay>
	  for(int i=0;i<num_of_c620;i++){
 80021e8:	69fb      	ldr	r3, [r7, #28]
 80021ea:	3301      	adds	r3, #1
 80021ec:	61fb      	str	r3, [r7, #28]
 80021ee:	4b0f      	ldr	r3, [pc, #60]	; (800222c <main+0x2f8>)
 80021f0:	781b      	ldrb	r3, [r3, #0]
 80021f2:	461a      	mov	r2, r3
 80021f4:	69fb      	ldr	r3, [r7, #28]
 80021f6:	4293      	cmp	r3, r2
 80021f8:	dbd1      	blt.n	800219e <main+0x26a>
	  mcmd_fb = Get_MCMD_Feedback(&(mcmd4_struct.device));
 80021fa:	e7b2      	b.n	8002162 <main+0x22e>
 80021fc:	08008e74 	.word	0x08008e74
 8002200:	20004648 	.word	0x20004648
 8002204:	20004d10 	.word	0x20004d10
 8002208:	08008e9c 	.word	0x08008e9c
 800220c:	20004d18 	.word	0x20004d18
 8002210:	3dcccccd 	.word	0x3dcccccd
 8002214:	3b06594b 	.word	0x3b06594b
 8002218:	bdcccccd 	.word	0xbdcccccd
 800221c:	00000000 	.word	0x00000000
 8002220:	08008ec0 	.word	0x08008ec0
 8002224:	20004620 	.word	0x20004620
 8002228:	08008ef0 	.word	0x08008ef0
 800222c:	20000000 	.word	0x20000000
 8002230:	20004d60 	.word	0x20004d60
 8002234:	41700000 	.word	0x41700000
 8002238:	3de1c0f3 	.word	0x3de1c0f3
 800223c:	40900000 	.word	0x40900000
 8002240:	41200000 	.word	0x41200000
 8002244:	4144cccd 	.word	0x4144cccd
 8002248:	3e23d70a 	.word	0x3e23d70a
 800224c:	20004d58 	.word	0x20004d58
 8002250:	08008f20 	.word	0x08008f20
 8002254:	20004fc0 	.word	0x20004fc0
 8002258:	08008f34 	.word	0x08008f34

0800225c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b094      	sub	sp, #80	; 0x50
 8002260:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002262:	f107 031c 	add.w	r3, r7, #28
 8002266:	2234      	movs	r2, #52	; 0x34
 8002268:	2100      	movs	r1, #0
 800226a:	4618      	mov	r0, r3
 800226c:	f005 fd06 	bl	8007c7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002270:	f107 0308 	add.w	r3, r7, #8
 8002274:	2200      	movs	r2, #0
 8002276:	601a      	str	r2, [r3, #0]
 8002278:	605a      	str	r2, [r3, #4]
 800227a:	609a      	str	r2, [r3, #8]
 800227c:	60da      	str	r2, [r3, #12]
 800227e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002280:	f002 ffe0 	bl	8005244 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002284:	4b2c      	ldr	r3, [pc, #176]	; (8002338 <SystemClock_Config+0xdc>)
 8002286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002288:	4a2b      	ldr	r2, [pc, #172]	; (8002338 <SystemClock_Config+0xdc>)
 800228a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800228e:	6413      	str	r3, [r2, #64]	; 0x40
 8002290:	4b29      	ldr	r3, [pc, #164]	; (8002338 <SystemClock_Config+0xdc>)
 8002292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002294:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002298:	607b      	str	r3, [r7, #4]
 800229a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800229c:	4b27      	ldr	r3, [pc, #156]	; (800233c <SystemClock_Config+0xe0>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80022a4:	4a25      	ldr	r2, [pc, #148]	; (800233c <SystemClock_Config+0xe0>)
 80022a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022aa:	6013      	str	r3, [r2, #0]
 80022ac:	4b23      	ldr	r3, [pc, #140]	; (800233c <SystemClock_Config+0xe0>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80022b4:	603b      	str	r3, [r7, #0]
 80022b6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80022b8:	2301      	movs	r3, #1
 80022ba:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80022bc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80022c0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80022c2:	2302      	movs	r3, #2
 80022c4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80022c6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80022ca:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80022cc:	2304      	movs	r3, #4
 80022ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 80022d0:	2360      	movs	r3, #96	; 0x60
 80022d2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80022d4:	2302      	movs	r3, #2
 80022d6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80022d8:	2304      	movs	r3, #4
 80022da:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80022dc:	2302      	movs	r3, #2
 80022de:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80022e0:	f107 031c 	add.w	r3, r7, #28
 80022e4:	4618      	mov	r0, r3
 80022e6:	f003 f80d 	bl	8005304 <HAL_RCC_OscConfig>
 80022ea:	4603      	mov	r3, r0
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d001      	beq.n	80022f4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80022f0:	f000 f9fe 	bl	80026f0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80022f4:	f002 ffb6 	bl	8005264 <HAL_PWREx_EnableOverDrive>
 80022f8:	4603      	mov	r3, r0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d001      	beq.n	8002302 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80022fe:	f000 f9f7 	bl	80026f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002302:	230f      	movs	r3, #15
 8002304:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002306:	2302      	movs	r3, #2
 8002308:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800230a:	2300      	movs	r3, #0
 800230c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800230e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002312:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002314:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002318:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800231a:	f107 0308 	add.w	r3, r7, #8
 800231e:	2103      	movs	r1, #3
 8002320:	4618      	mov	r0, r3
 8002322:	f003 fa9d 	bl	8005860 <HAL_RCC_ClockConfig>
 8002326:	4603      	mov	r3, r0
 8002328:	2b00      	cmp	r3, #0
 800232a:	d001      	beq.n	8002330 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800232c:	f000 f9e0 	bl	80026f0 <Error_Handler>
  }
}
 8002330:	bf00      	nop
 8002332:	3750      	adds	r7, #80	; 0x50
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}
 8002338:	40023800 	.word	0x40023800
 800233c:	40007000 	.word	0x40007000

08002340 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8002344:	4b17      	ldr	r3, [pc, #92]	; (80023a4 <MX_CAN1_Init+0x64>)
 8002346:	4a18      	ldr	r2, [pc, #96]	; (80023a8 <MX_CAN1_Init+0x68>)
 8002348:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 800234a:	4b16      	ldr	r3, [pc, #88]	; (80023a4 <MX_CAN1_Init+0x64>)
 800234c:	2206      	movs	r2, #6
 800234e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8002350:	4b14      	ldr	r3, [pc, #80]	; (80023a4 <MX_CAN1_Init+0x64>)
 8002352:	2200      	movs	r2, #0
 8002354:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002356:	4b13      	ldr	r3, [pc, #76]	; (80023a4 <MX_CAN1_Init+0x64>)
 8002358:	2200      	movs	r2, #0
 800235a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_6TQ;
 800235c:	4b11      	ldr	r3, [pc, #68]	; (80023a4 <MX_CAN1_Init+0x64>)
 800235e:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8002362:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8002364:	4b0f      	ldr	r3, [pc, #60]	; (80023a4 <MX_CAN1_Init+0x64>)
 8002366:	2200      	movs	r2, #0
 8002368:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800236a:	4b0e      	ldr	r3, [pc, #56]	; (80023a4 <MX_CAN1_Init+0x64>)
 800236c:	2200      	movs	r2, #0
 800236e:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8002370:	4b0c      	ldr	r3, [pc, #48]	; (80023a4 <MX_CAN1_Init+0x64>)
 8002372:	2200      	movs	r2, #0
 8002374:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8002376:	4b0b      	ldr	r3, [pc, #44]	; (80023a4 <MX_CAN1_Init+0x64>)
 8002378:	2200      	movs	r2, #0
 800237a:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800237c:	4b09      	ldr	r3, [pc, #36]	; (80023a4 <MX_CAN1_Init+0x64>)
 800237e:	2200      	movs	r2, #0
 8002380:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8002382:	4b08      	ldr	r3, [pc, #32]	; (80023a4 <MX_CAN1_Init+0x64>)
 8002384:	2200      	movs	r2, #0
 8002386:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = ENABLE;
 8002388:	4b06      	ldr	r3, [pc, #24]	; (80023a4 <MX_CAN1_Init+0x64>)
 800238a:	2201      	movs	r2, #1
 800238c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800238e:	4805      	ldr	r0, [pc, #20]	; (80023a4 <MX_CAN1_Init+0x64>)
 8002390:	f000 fe44 	bl	800301c <HAL_CAN_Init>
 8002394:	4603      	mov	r3, r0
 8002396:	2b00      	cmp	r3, #0
 8002398:	d001      	beq.n	800239e <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 800239a:	f000 f9a9 	bl	80026f0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800239e:	bf00      	nop
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	20004620 	.word	0x20004620
 80023a8:	40006400 	.word	0x40006400

080023ac <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 80023b0:	4b17      	ldr	r3, [pc, #92]	; (8002410 <MX_CAN2_Init+0x64>)
 80023b2:	4a18      	ldr	r2, [pc, #96]	; (8002414 <MX_CAN2_Init+0x68>)
 80023b4:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 6;
 80023b6:	4b16      	ldr	r3, [pc, #88]	; (8002410 <MX_CAN2_Init+0x64>)
 80023b8:	2206      	movs	r2, #6
 80023ba:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 80023bc:	4b14      	ldr	r3, [pc, #80]	; (8002410 <MX_CAN2_Init+0x64>)
 80023be:	2200      	movs	r2, #0
 80023c0:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80023c2:	4b13      	ldr	r3, [pc, #76]	; (8002410 <MX_CAN2_Init+0x64>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_6TQ;
 80023c8:	4b11      	ldr	r3, [pc, #68]	; (8002410 <MX_CAN2_Init+0x64>)
 80023ca:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 80023ce:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 80023d0:	4b0f      	ldr	r3, [pc, #60]	; (8002410 <MX_CAN2_Init+0x64>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 80023d6:	4b0e      	ldr	r3, [pc, #56]	; (8002410 <MX_CAN2_Init+0x64>)
 80023d8:	2200      	movs	r2, #0
 80023da:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 80023dc:	4b0c      	ldr	r3, [pc, #48]	; (8002410 <MX_CAN2_Init+0x64>)
 80023de:	2200      	movs	r2, #0
 80023e0:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 80023e2:	4b0b      	ldr	r3, [pc, #44]	; (8002410 <MX_CAN2_Init+0x64>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 80023e8:	4b09      	ldr	r3, [pc, #36]	; (8002410 <MX_CAN2_Init+0x64>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 80023ee:	4b08      	ldr	r3, [pc, #32]	; (8002410 <MX_CAN2_Init+0x64>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = ENABLE;
 80023f4:	4b06      	ldr	r3, [pc, #24]	; (8002410 <MX_CAN2_Init+0x64>)
 80023f6:	2201      	movs	r2, #1
 80023f8:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 80023fa:	4805      	ldr	r0, [pc, #20]	; (8002410 <MX_CAN2_Init+0x64>)
 80023fc:	f000 fe0e 	bl	800301c <HAL_CAN_Init>
 8002400:	4603      	mov	r3, r0
 8002402:	2b00      	cmp	r3, #0
 8002404:	d001      	beq.n	800240a <MX_CAN2_Init+0x5e>
  {
    Error_Handler();
 8002406:	f000 f973 	bl	80026f0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 800240a:	bf00      	nop
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	20004648 	.word	0x20004648
 8002414:	40006800 	.word	0x40006800

08002418 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 800241c:	4b1f      	ldr	r3, [pc, #124]	; (800249c <MX_ETH_Init+0x84>)
 800241e:	4a20      	ldr	r2, [pc, #128]	; (80024a0 <MX_ETH_Init+0x88>)
 8002420:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8002422:	4b20      	ldr	r3, [pc, #128]	; (80024a4 <MX_ETH_Init+0x8c>)
 8002424:	2200      	movs	r2, #0
 8002426:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8002428:	4b1e      	ldr	r3, [pc, #120]	; (80024a4 <MX_ETH_Init+0x8c>)
 800242a:	2280      	movs	r2, #128	; 0x80
 800242c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800242e:	4b1d      	ldr	r3, [pc, #116]	; (80024a4 <MX_ETH_Init+0x8c>)
 8002430:	22e1      	movs	r2, #225	; 0xe1
 8002432:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8002434:	4b1b      	ldr	r3, [pc, #108]	; (80024a4 <MX_ETH_Init+0x8c>)
 8002436:	2200      	movs	r2, #0
 8002438:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800243a:	4b1a      	ldr	r3, [pc, #104]	; (80024a4 <MX_ETH_Init+0x8c>)
 800243c:	2200      	movs	r2, #0
 800243e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8002440:	4b18      	ldr	r3, [pc, #96]	; (80024a4 <MX_ETH_Init+0x8c>)
 8002442:	2200      	movs	r2, #0
 8002444:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8002446:	4b15      	ldr	r3, [pc, #84]	; (800249c <MX_ETH_Init+0x84>)
 8002448:	4a16      	ldr	r2, [pc, #88]	; (80024a4 <MX_ETH_Init+0x8c>)
 800244a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800244c:	4b13      	ldr	r3, [pc, #76]	; (800249c <MX_ETH_Init+0x84>)
 800244e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002452:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8002454:	4b11      	ldr	r3, [pc, #68]	; (800249c <MX_ETH_Init+0x84>)
 8002456:	4a14      	ldr	r2, [pc, #80]	; (80024a8 <MX_ETH_Init+0x90>)
 8002458:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800245a:	4b10      	ldr	r3, [pc, #64]	; (800249c <MX_ETH_Init+0x84>)
 800245c:	4a13      	ldr	r2, [pc, #76]	; (80024ac <MX_ETH_Init+0x94>)
 800245e:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8002460:	4b0e      	ldr	r3, [pc, #56]	; (800249c <MX_ETH_Init+0x84>)
 8002462:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8002466:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8002468:	480c      	ldr	r0, [pc, #48]	; (800249c <MX_ETH_Init+0x84>)
 800246a:	f002 f8b7 	bl	80045dc <HAL_ETH_Init>
 800246e:	4603      	mov	r3, r0
 8002470:	2b00      	cmp	r3, #0
 8002472:	d001      	beq.n	8002478 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8002474:	f000 f93c 	bl	80026f0 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8002478:	2238      	movs	r2, #56	; 0x38
 800247a:	2100      	movs	r1, #0
 800247c:	480c      	ldr	r0, [pc, #48]	; (80024b0 <MX_ETH_Init+0x98>)
 800247e:	f005 fbfd 	bl	8007c7c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8002482:	4b0b      	ldr	r3, [pc, #44]	; (80024b0 <MX_ETH_Init+0x98>)
 8002484:	2221      	movs	r2, #33	; 0x21
 8002486:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8002488:	4b09      	ldr	r3, [pc, #36]	; (80024b0 <MX_ETH_Init+0x98>)
 800248a:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800248e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8002490:	4b07      	ldr	r3, [pc, #28]	; (80024b0 <MX_ETH_Init+0x98>)
 8002492:	2200      	movs	r2, #0
 8002494:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8002496:	bf00      	nop
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	20004670 	.word	0x20004670
 80024a0:	40028000 	.word	0x40028000
 80024a4:	20005040 	.word	0x20005040
 80024a8:	20000114 	.word	0x20000114
 80024ac:	20000074 	.word	0x20000074
 80024b0:	200045e8 	.word	0x200045e8

080024b4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80024b8:	4b14      	ldr	r3, [pc, #80]	; (800250c <MX_USART3_UART_Init+0x58>)
 80024ba:	4a15      	ldr	r2, [pc, #84]	; (8002510 <MX_USART3_UART_Init+0x5c>)
 80024bc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80024be:	4b13      	ldr	r3, [pc, #76]	; (800250c <MX_USART3_UART_Init+0x58>)
 80024c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80024c4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80024c6:	4b11      	ldr	r3, [pc, #68]	; (800250c <MX_USART3_UART_Init+0x58>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80024cc:	4b0f      	ldr	r3, [pc, #60]	; (800250c <MX_USART3_UART_Init+0x58>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80024d2:	4b0e      	ldr	r3, [pc, #56]	; (800250c <MX_USART3_UART_Init+0x58>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80024d8:	4b0c      	ldr	r3, [pc, #48]	; (800250c <MX_USART3_UART_Init+0x58>)
 80024da:	220c      	movs	r2, #12
 80024dc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024de:	4b0b      	ldr	r3, [pc, #44]	; (800250c <MX_USART3_UART_Init+0x58>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80024e4:	4b09      	ldr	r3, [pc, #36]	; (800250c <MX_USART3_UART_Init+0x58>)
 80024e6:	2200      	movs	r2, #0
 80024e8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80024ea:	4b08      	ldr	r3, [pc, #32]	; (800250c <MX_USART3_UART_Init+0x58>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80024f0:	4b06      	ldr	r3, [pc, #24]	; (800250c <MX_USART3_UART_Init+0x58>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80024f6:	4805      	ldr	r0, [pc, #20]	; (800250c <MX_USART3_UART_Init+0x58>)
 80024f8:	f004 f800 	bl	80064fc <HAL_UART_Init>
 80024fc:	4603      	mov	r3, r0
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d001      	beq.n	8002506 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8002502:	f000 f8f5 	bl	80026f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002506:	bf00      	nop
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	20004720 	.word	0x20004720
 8002510:	40004800 	.word	0x40004800

08002514 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002518:	4b14      	ldr	r3, [pc, #80]	; (800256c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800251a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800251e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8002520:	4b12      	ldr	r3, [pc, #72]	; (800256c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002522:	2206      	movs	r2, #6
 8002524:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8002526:	4b11      	ldr	r3, [pc, #68]	; (800256c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002528:	2202      	movs	r2, #2
 800252a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800252c:	4b0f      	ldr	r3, [pc, #60]	; (800256c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800252e:	2200      	movs	r2, #0
 8002530:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002532:	4b0e      	ldr	r3, [pc, #56]	; (800256c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002534:	2202      	movs	r2, #2
 8002536:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8002538:	4b0c      	ldr	r3, [pc, #48]	; (800256c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800253a:	2201      	movs	r2, #1
 800253c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800253e:	4b0b      	ldr	r3, [pc, #44]	; (800256c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002540:	2200      	movs	r2, #0
 8002542:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8002544:	4b09      	ldr	r3, [pc, #36]	; (800256c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002546:	2200      	movs	r2, #0
 8002548:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800254a:	4b08      	ldr	r3, [pc, #32]	; (800256c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800254c:	2201      	movs	r2, #1
 800254e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8002550:	4b06      	ldr	r3, [pc, #24]	; (800256c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002552:	2200      	movs	r2, #0
 8002554:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8002556:	4805      	ldr	r0, [pc, #20]	; (800256c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002558:	f002 fd2b 	bl	8004fb2 <HAL_PCD_Init>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d001      	beq.n	8002566 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8002562:	f000 f8c5 	bl	80026f0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8002566:	bf00      	nop
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	20004808 	.word	0x20004808

08002570 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b082      	sub	sp, #8
 8002574:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002576:	4b0c      	ldr	r3, [pc, #48]	; (80025a8 <MX_DMA_Init+0x38>)
 8002578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800257a:	4a0b      	ldr	r2, [pc, #44]	; (80025a8 <MX_DMA_Init+0x38>)
 800257c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002580:	6313      	str	r3, [r2, #48]	; 0x30
 8002582:	4b09      	ldr	r3, [pc, #36]	; (80025a8 <MX_DMA_Init+0x38>)
 8002584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002586:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800258a:	607b      	str	r3, [r7, #4]
 800258c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 800258e:	2200      	movs	r2, #0
 8002590:	2100      	movs	r1, #0
 8002592:	200e      	movs	r0, #14
 8002594:	f001 fc6f 	bl	8003e76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8002598:	200e      	movs	r0, #14
 800259a:	f001 fc88 	bl	8003eae <HAL_NVIC_EnableIRQ>

}
 800259e:	bf00      	nop
 80025a0:	3708      	adds	r7, #8
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	40023800 	.word	0x40023800

080025ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b08c      	sub	sp, #48	; 0x30
 80025b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025b2:	f107 031c 	add.w	r3, r7, #28
 80025b6:	2200      	movs	r2, #0
 80025b8:	601a      	str	r2, [r3, #0]
 80025ba:	605a      	str	r2, [r3, #4]
 80025bc:	609a      	str	r2, [r3, #8]
 80025be:	60da      	str	r2, [r3, #12]
 80025c0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80025c2:	4b47      	ldr	r3, [pc, #284]	; (80026e0 <MX_GPIO_Init+0x134>)
 80025c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c6:	4a46      	ldr	r2, [pc, #280]	; (80026e0 <MX_GPIO_Init+0x134>)
 80025c8:	f043 0304 	orr.w	r3, r3, #4
 80025cc:	6313      	str	r3, [r2, #48]	; 0x30
 80025ce:	4b44      	ldr	r3, [pc, #272]	; (80026e0 <MX_GPIO_Init+0x134>)
 80025d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d2:	f003 0304 	and.w	r3, r3, #4
 80025d6:	61bb      	str	r3, [r7, #24]
 80025d8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80025da:	4b41      	ldr	r3, [pc, #260]	; (80026e0 <MX_GPIO_Init+0x134>)
 80025dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025de:	4a40      	ldr	r2, [pc, #256]	; (80026e0 <MX_GPIO_Init+0x134>)
 80025e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025e4:	6313      	str	r3, [r2, #48]	; 0x30
 80025e6:	4b3e      	ldr	r3, [pc, #248]	; (80026e0 <MX_GPIO_Init+0x134>)
 80025e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025ee:	617b      	str	r3, [r7, #20]
 80025f0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80025f2:	4b3b      	ldr	r3, [pc, #236]	; (80026e0 <MX_GPIO_Init+0x134>)
 80025f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f6:	4a3a      	ldr	r2, [pc, #232]	; (80026e0 <MX_GPIO_Init+0x134>)
 80025f8:	f043 0301 	orr.w	r3, r3, #1
 80025fc:	6313      	str	r3, [r2, #48]	; 0x30
 80025fe:	4b38      	ldr	r3, [pc, #224]	; (80026e0 <MX_GPIO_Init+0x134>)
 8002600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002602:	f003 0301 	and.w	r3, r3, #1
 8002606:	613b      	str	r3, [r7, #16]
 8002608:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800260a:	4b35      	ldr	r3, [pc, #212]	; (80026e0 <MX_GPIO_Init+0x134>)
 800260c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800260e:	4a34      	ldr	r2, [pc, #208]	; (80026e0 <MX_GPIO_Init+0x134>)
 8002610:	f043 0302 	orr.w	r3, r3, #2
 8002614:	6313      	str	r3, [r2, #48]	; 0x30
 8002616:	4b32      	ldr	r3, [pc, #200]	; (80026e0 <MX_GPIO_Init+0x134>)
 8002618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800261a:	f003 0302 	and.w	r3, r3, #2
 800261e:	60fb      	str	r3, [r7, #12]
 8002620:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002622:	4b2f      	ldr	r3, [pc, #188]	; (80026e0 <MX_GPIO_Init+0x134>)
 8002624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002626:	4a2e      	ldr	r2, [pc, #184]	; (80026e0 <MX_GPIO_Init+0x134>)
 8002628:	f043 0308 	orr.w	r3, r3, #8
 800262c:	6313      	str	r3, [r2, #48]	; 0x30
 800262e:	4b2c      	ldr	r3, [pc, #176]	; (80026e0 <MX_GPIO_Init+0x134>)
 8002630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002632:	f003 0308 	and.w	r3, r3, #8
 8002636:	60bb      	str	r3, [r7, #8]
 8002638:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800263a:	4b29      	ldr	r3, [pc, #164]	; (80026e0 <MX_GPIO_Init+0x134>)
 800263c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800263e:	4a28      	ldr	r2, [pc, #160]	; (80026e0 <MX_GPIO_Init+0x134>)
 8002640:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002644:	6313      	str	r3, [r2, #48]	; 0x30
 8002646:	4b26      	ldr	r3, [pc, #152]	; (80026e0 <MX_GPIO_Init+0x134>)
 8002648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800264a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800264e:	607b      	str	r3, [r7, #4]
 8002650:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002652:	2200      	movs	r2, #0
 8002654:	f244 0181 	movw	r1, #16513	; 0x4081
 8002658:	4822      	ldr	r0, [pc, #136]	; (80026e4 <MX_GPIO_Init+0x138>)
 800265a:	f002 fc91 	bl	8004f80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800265e:	2200      	movs	r2, #0
 8002660:	2140      	movs	r1, #64	; 0x40
 8002662:	4821      	ldr	r0, [pc, #132]	; (80026e8 <MX_GPIO_Init+0x13c>)
 8002664:	f002 fc8c 	bl	8004f80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8002668:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800266c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800266e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002672:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002674:	2300      	movs	r3, #0
 8002676:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8002678:	f107 031c 	add.w	r3, r7, #28
 800267c:	4619      	mov	r1, r3
 800267e:	481b      	ldr	r0, [pc, #108]	; (80026ec <MX_GPIO_Init+0x140>)
 8002680:	f002 fad2 	bl	8004c28 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8002684:	f244 0381 	movw	r3, #16513	; 0x4081
 8002688:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800268a:	2301      	movs	r3, #1
 800268c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800268e:	2300      	movs	r3, #0
 8002690:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002692:	2300      	movs	r3, #0
 8002694:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002696:	f107 031c 	add.w	r3, r7, #28
 800269a:	4619      	mov	r1, r3
 800269c:	4811      	ldr	r0, [pc, #68]	; (80026e4 <MX_GPIO_Init+0x138>)
 800269e:	f002 fac3 	bl	8004c28 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80026a2:	2340      	movs	r3, #64	; 0x40
 80026a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026a6:	2301      	movs	r3, #1
 80026a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026aa:	2300      	movs	r3, #0
 80026ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026ae:	2300      	movs	r3, #0
 80026b0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80026b2:	f107 031c 	add.w	r3, r7, #28
 80026b6:	4619      	mov	r1, r3
 80026b8:	480b      	ldr	r0, [pc, #44]	; (80026e8 <MX_GPIO_Init+0x13c>)
 80026ba:	f002 fab5 	bl	8004c28 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80026be:	2380      	movs	r3, #128	; 0x80
 80026c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026c2:	2300      	movs	r3, #0
 80026c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c6:	2300      	movs	r3, #0
 80026c8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80026ca:	f107 031c 	add.w	r3, r7, #28
 80026ce:	4619      	mov	r1, r3
 80026d0:	4805      	ldr	r0, [pc, #20]	; (80026e8 <MX_GPIO_Init+0x13c>)
 80026d2:	f002 faa9 	bl	8004c28 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80026d6:	bf00      	nop
 80026d8:	3730      	adds	r7, #48	; 0x30
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	40023800 	.word	0x40023800
 80026e4:	40020400 	.word	0x40020400
 80026e8:	40021800 	.word	0x40021800
 80026ec:	40020800 	.word	0x40020800

080026f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80026f0:	b480      	push	{r7}
 80026f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80026f4:	b672      	cpsid	i
}
 80026f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80026f8:	e7fe      	b.n	80026f8 <Error_Handler+0x8>
	...

080026fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b083      	sub	sp, #12
 8002700:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002702:	4b0f      	ldr	r3, [pc, #60]	; (8002740 <HAL_MspInit+0x44>)
 8002704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002706:	4a0e      	ldr	r2, [pc, #56]	; (8002740 <HAL_MspInit+0x44>)
 8002708:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800270c:	6413      	str	r3, [r2, #64]	; 0x40
 800270e:	4b0c      	ldr	r3, [pc, #48]	; (8002740 <HAL_MspInit+0x44>)
 8002710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002712:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002716:	607b      	str	r3, [r7, #4]
 8002718:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800271a:	4b09      	ldr	r3, [pc, #36]	; (8002740 <HAL_MspInit+0x44>)
 800271c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800271e:	4a08      	ldr	r2, [pc, #32]	; (8002740 <HAL_MspInit+0x44>)
 8002720:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002724:	6453      	str	r3, [r2, #68]	; 0x44
 8002726:	4b06      	ldr	r3, [pc, #24]	; (8002740 <HAL_MspInit+0x44>)
 8002728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800272a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800272e:	603b      	str	r3, [r7, #0]
 8002730:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002732:	bf00      	nop
 8002734:	370c      	adds	r7, #12
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr
 800273e:	bf00      	nop
 8002740:	40023800 	.word	0x40023800

08002744 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b08c      	sub	sp, #48	; 0x30
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800274c:	f107 031c 	add.w	r3, r7, #28
 8002750:	2200      	movs	r2, #0
 8002752:	601a      	str	r2, [r3, #0]
 8002754:	605a      	str	r2, [r3, #4]
 8002756:	609a      	str	r2, [r3, #8]
 8002758:	60da      	str	r2, [r3, #12]
 800275a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a55      	ldr	r2, [pc, #340]	; (80028b8 <HAL_CAN_MspInit+0x174>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d149      	bne.n	80027fa <HAL_CAN_MspInit+0xb6>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8002766:	4b55      	ldr	r3, [pc, #340]	; (80028bc <HAL_CAN_MspInit+0x178>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	3301      	adds	r3, #1
 800276c:	4a53      	ldr	r2, [pc, #332]	; (80028bc <HAL_CAN_MspInit+0x178>)
 800276e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8002770:	4b52      	ldr	r3, [pc, #328]	; (80028bc <HAL_CAN_MspInit+0x178>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	2b01      	cmp	r3, #1
 8002776:	d10b      	bne.n	8002790 <HAL_CAN_MspInit+0x4c>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8002778:	4b51      	ldr	r3, [pc, #324]	; (80028c0 <HAL_CAN_MspInit+0x17c>)
 800277a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277c:	4a50      	ldr	r2, [pc, #320]	; (80028c0 <HAL_CAN_MspInit+0x17c>)
 800277e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002782:	6413      	str	r3, [r2, #64]	; 0x40
 8002784:	4b4e      	ldr	r3, [pc, #312]	; (80028c0 <HAL_CAN_MspInit+0x17c>)
 8002786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002788:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800278c:	61bb      	str	r3, [r7, #24]
 800278e:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002790:	4b4b      	ldr	r3, [pc, #300]	; (80028c0 <HAL_CAN_MspInit+0x17c>)
 8002792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002794:	4a4a      	ldr	r2, [pc, #296]	; (80028c0 <HAL_CAN_MspInit+0x17c>)
 8002796:	f043 0308 	orr.w	r3, r3, #8
 800279a:	6313      	str	r3, [r2, #48]	; 0x30
 800279c:	4b48      	ldr	r3, [pc, #288]	; (80028c0 <HAL_CAN_MspInit+0x17c>)
 800279e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a0:	f003 0308 	and.w	r3, r3, #8
 80027a4:	617b      	str	r3, [r7, #20]
 80027a6:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80027a8:	2303      	movs	r3, #3
 80027aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027ac:	2302      	movs	r3, #2
 80027ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b0:	2300      	movs	r3, #0
 80027b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027b4:	2303      	movs	r3, #3
 80027b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80027b8:	2309      	movs	r3, #9
 80027ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80027bc:	f107 031c 	add.w	r3, r7, #28
 80027c0:	4619      	mov	r1, r3
 80027c2:	4840      	ldr	r0, [pc, #256]	; (80028c4 <HAL_CAN_MspInit+0x180>)
 80027c4:	f002 fa30 	bl	8004c28 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 80027c8:	2200      	movs	r2, #0
 80027ca:	2100      	movs	r1, #0
 80027cc:	2013      	movs	r0, #19
 80027ce:	f001 fb52 	bl	8003e76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 80027d2:	2013      	movs	r0, #19
 80027d4:	f001 fb6b 	bl	8003eae <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80027d8:	2200      	movs	r2, #0
 80027da:	2100      	movs	r1, #0
 80027dc:	2014      	movs	r0, #20
 80027de:	f001 fb4a 	bl	8003e76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80027e2:	2014      	movs	r0, #20
 80027e4:	f001 fb63 	bl	8003eae <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 80027e8:	2200      	movs	r2, #0
 80027ea:	2100      	movs	r1, #0
 80027ec:	2015      	movs	r0, #21
 80027ee:	f001 fb42 	bl	8003e76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80027f2:	2015      	movs	r0, #21
 80027f4:	f001 fb5b 	bl	8003eae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 80027f8:	e05a      	b.n	80028b0 <HAL_CAN_MspInit+0x16c>
  else if(hcan->Instance==CAN2)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a32      	ldr	r2, [pc, #200]	; (80028c8 <HAL_CAN_MspInit+0x184>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d155      	bne.n	80028b0 <HAL_CAN_MspInit+0x16c>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8002804:	4b2e      	ldr	r3, [pc, #184]	; (80028c0 <HAL_CAN_MspInit+0x17c>)
 8002806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002808:	4a2d      	ldr	r2, [pc, #180]	; (80028c0 <HAL_CAN_MspInit+0x17c>)
 800280a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800280e:	6413      	str	r3, [r2, #64]	; 0x40
 8002810:	4b2b      	ldr	r3, [pc, #172]	; (80028c0 <HAL_CAN_MspInit+0x17c>)
 8002812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002814:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002818:	613b      	str	r3, [r7, #16]
 800281a:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 800281c:	4b27      	ldr	r3, [pc, #156]	; (80028bc <HAL_CAN_MspInit+0x178>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	3301      	adds	r3, #1
 8002822:	4a26      	ldr	r2, [pc, #152]	; (80028bc <HAL_CAN_MspInit+0x178>)
 8002824:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8002826:	4b25      	ldr	r3, [pc, #148]	; (80028bc <HAL_CAN_MspInit+0x178>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	2b01      	cmp	r3, #1
 800282c:	d10b      	bne.n	8002846 <HAL_CAN_MspInit+0x102>
      __HAL_RCC_CAN1_CLK_ENABLE();
 800282e:	4b24      	ldr	r3, [pc, #144]	; (80028c0 <HAL_CAN_MspInit+0x17c>)
 8002830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002832:	4a23      	ldr	r2, [pc, #140]	; (80028c0 <HAL_CAN_MspInit+0x17c>)
 8002834:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002838:	6413      	str	r3, [r2, #64]	; 0x40
 800283a:	4b21      	ldr	r3, [pc, #132]	; (80028c0 <HAL_CAN_MspInit+0x17c>)
 800283c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002842:	60fb      	str	r3, [r7, #12]
 8002844:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002846:	4b1e      	ldr	r3, [pc, #120]	; (80028c0 <HAL_CAN_MspInit+0x17c>)
 8002848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284a:	4a1d      	ldr	r2, [pc, #116]	; (80028c0 <HAL_CAN_MspInit+0x17c>)
 800284c:	f043 0302 	orr.w	r3, r3, #2
 8002850:	6313      	str	r3, [r2, #48]	; 0x30
 8002852:	4b1b      	ldr	r3, [pc, #108]	; (80028c0 <HAL_CAN_MspInit+0x17c>)
 8002854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002856:	f003 0302 	and.w	r3, r3, #2
 800285a:	60bb      	str	r3, [r7, #8]
 800285c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_6;
 800285e:	f44f 5382 	mov.w	r3, #4160	; 0x1040
 8002862:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002864:	2302      	movs	r3, #2
 8002866:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002868:	2300      	movs	r3, #0
 800286a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800286c:	2303      	movs	r3, #3
 800286e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8002870:	2309      	movs	r3, #9
 8002872:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002874:	f107 031c 	add.w	r3, r7, #28
 8002878:	4619      	mov	r1, r3
 800287a:	4814      	ldr	r0, [pc, #80]	; (80028cc <HAL_CAN_MspInit+0x188>)
 800287c:	f002 f9d4 	bl	8004c28 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_TX_IRQn, 0, 0);
 8002880:	2200      	movs	r2, #0
 8002882:	2100      	movs	r1, #0
 8002884:	203f      	movs	r0, #63	; 0x3f
 8002886:	f001 faf6 	bl	8003e76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_TX_IRQn);
 800288a:	203f      	movs	r0, #63	; 0x3f
 800288c:	f001 fb0f 	bl	8003eae <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 8002890:	2200      	movs	r2, #0
 8002892:	2100      	movs	r1, #0
 8002894:	2040      	movs	r0, #64	; 0x40
 8002896:	f001 faee 	bl	8003e76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 800289a:	2040      	movs	r0, #64	; 0x40
 800289c:	f001 fb07 	bl	8003eae <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 0, 0);
 80028a0:	2200      	movs	r2, #0
 80028a2:	2100      	movs	r1, #0
 80028a4:	2041      	movs	r0, #65	; 0x41
 80028a6:	f001 fae6 	bl	8003e76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 80028aa:	2041      	movs	r0, #65	; 0x41
 80028ac:	f001 faff 	bl	8003eae <HAL_NVIC_EnableIRQ>
}
 80028b0:	bf00      	nop
 80028b2:	3730      	adds	r7, #48	; 0x30
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	40006400 	.word	0x40006400
 80028bc:	20005048 	.word	0x20005048
 80028c0:	40023800 	.word	0x40023800
 80028c4:	40020c00 	.word	0x40020c00
 80028c8:	40006800 	.word	0x40006800
 80028cc:	40020400 	.word	0x40020400

080028d0 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b08e      	sub	sp, #56	; 0x38
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028dc:	2200      	movs	r2, #0
 80028de:	601a      	str	r2, [r3, #0]
 80028e0:	605a      	str	r2, [r3, #4]
 80028e2:	609a      	str	r2, [r3, #8]
 80028e4:	60da      	str	r2, [r3, #12]
 80028e6:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a4e      	ldr	r2, [pc, #312]	; (8002a28 <HAL_ETH_MspInit+0x158>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	f040 8096 	bne.w	8002a20 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80028f4:	4b4d      	ldr	r3, [pc, #308]	; (8002a2c <HAL_ETH_MspInit+0x15c>)
 80028f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f8:	4a4c      	ldr	r2, [pc, #304]	; (8002a2c <HAL_ETH_MspInit+0x15c>)
 80028fa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80028fe:	6313      	str	r3, [r2, #48]	; 0x30
 8002900:	4b4a      	ldr	r3, [pc, #296]	; (8002a2c <HAL_ETH_MspInit+0x15c>)
 8002902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002904:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002908:	623b      	str	r3, [r7, #32]
 800290a:	6a3b      	ldr	r3, [r7, #32]
 800290c:	4b47      	ldr	r3, [pc, #284]	; (8002a2c <HAL_ETH_MspInit+0x15c>)
 800290e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002910:	4a46      	ldr	r2, [pc, #280]	; (8002a2c <HAL_ETH_MspInit+0x15c>)
 8002912:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002916:	6313      	str	r3, [r2, #48]	; 0x30
 8002918:	4b44      	ldr	r3, [pc, #272]	; (8002a2c <HAL_ETH_MspInit+0x15c>)
 800291a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800291c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002920:	61fb      	str	r3, [r7, #28]
 8002922:	69fb      	ldr	r3, [r7, #28]
 8002924:	4b41      	ldr	r3, [pc, #260]	; (8002a2c <HAL_ETH_MspInit+0x15c>)
 8002926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002928:	4a40      	ldr	r2, [pc, #256]	; (8002a2c <HAL_ETH_MspInit+0x15c>)
 800292a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800292e:	6313      	str	r3, [r2, #48]	; 0x30
 8002930:	4b3e      	ldr	r3, [pc, #248]	; (8002a2c <HAL_ETH_MspInit+0x15c>)
 8002932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002934:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002938:	61bb      	str	r3, [r7, #24]
 800293a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800293c:	4b3b      	ldr	r3, [pc, #236]	; (8002a2c <HAL_ETH_MspInit+0x15c>)
 800293e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002940:	4a3a      	ldr	r2, [pc, #232]	; (8002a2c <HAL_ETH_MspInit+0x15c>)
 8002942:	f043 0304 	orr.w	r3, r3, #4
 8002946:	6313      	str	r3, [r2, #48]	; 0x30
 8002948:	4b38      	ldr	r3, [pc, #224]	; (8002a2c <HAL_ETH_MspInit+0x15c>)
 800294a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800294c:	f003 0304 	and.w	r3, r3, #4
 8002950:	617b      	str	r3, [r7, #20]
 8002952:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002954:	4b35      	ldr	r3, [pc, #212]	; (8002a2c <HAL_ETH_MspInit+0x15c>)
 8002956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002958:	4a34      	ldr	r2, [pc, #208]	; (8002a2c <HAL_ETH_MspInit+0x15c>)
 800295a:	f043 0301 	orr.w	r3, r3, #1
 800295e:	6313      	str	r3, [r2, #48]	; 0x30
 8002960:	4b32      	ldr	r3, [pc, #200]	; (8002a2c <HAL_ETH_MspInit+0x15c>)
 8002962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002964:	f003 0301 	and.w	r3, r3, #1
 8002968:	613b      	str	r3, [r7, #16]
 800296a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800296c:	4b2f      	ldr	r3, [pc, #188]	; (8002a2c <HAL_ETH_MspInit+0x15c>)
 800296e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002970:	4a2e      	ldr	r2, [pc, #184]	; (8002a2c <HAL_ETH_MspInit+0x15c>)
 8002972:	f043 0302 	orr.w	r3, r3, #2
 8002976:	6313      	str	r3, [r2, #48]	; 0x30
 8002978:	4b2c      	ldr	r3, [pc, #176]	; (8002a2c <HAL_ETH_MspInit+0x15c>)
 800297a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297c:	f003 0302 	and.w	r3, r3, #2
 8002980:	60fb      	str	r3, [r7, #12]
 8002982:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002984:	4b29      	ldr	r3, [pc, #164]	; (8002a2c <HAL_ETH_MspInit+0x15c>)
 8002986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002988:	4a28      	ldr	r2, [pc, #160]	; (8002a2c <HAL_ETH_MspInit+0x15c>)
 800298a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800298e:	6313      	str	r3, [r2, #48]	; 0x30
 8002990:	4b26      	ldr	r3, [pc, #152]	; (8002a2c <HAL_ETH_MspInit+0x15c>)
 8002992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002994:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002998:	60bb      	str	r3, [r7, #8]
 800299a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800299c:	2332      	movs	r3, #50	; 0x32
 800299e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029a0:	2302      	movs	r3, #2
 80029a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a4:	2300      	movs	r3, #0
 80029a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029a8:	2303      	movs	r3, #3
 80029aa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80029ac:	230b      	movs	r3, #11
 80029ae:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029b4:	4619      	mov	r1, r3
 80029b6:	481e      	ldr	r0, [pc, #120]	; (8002a30 <HAL_ETH_MspInit+0x160>)
 80029b8:	f002 f936 	bl	8004c28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80029bc:	2386      	movs	r3, #134	; 0x86
 80029be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029c0:	2302      	movs	r3, #2
 80029c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c4:	2300      	movs	r3, #0
 80029c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029c8:	2303      	movs	r3, #3
 80029ca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80029cc:	230b      	movs	r3, #11
 80029ce:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029d4:	4619      	mov	r1, r3
 80029d6:	4817      	ldr	r0, [pc, #92]	; (8002a34 <HAL_ETH_MspInit+0x164>)
 80029d8:	f002 f926 	bl	8004c28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80029dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80029e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029e2:	2302      	movs	r3, #2
 80029e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029e6:	2300      	movs	r3, #0
 80029e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029ea:	2303      	movs	r3, #3
 80029ec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80029ee:	230b      	movs	r3, #11
 80029f0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80029f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029f6:	4619      	mov	r1, r3
 80029f8:	480f      	ldr	r0, [pc, #60]	; (8002a38 <HAL_ETH_MspInit+0x168>)
 80029fa:	f002 f915 	bl	8004c28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80029fe:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8002a02:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a04:	2302      	movs	r3, #2
 8002a06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a0c:	2303      	movs	r3, #3
 8002a0e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002a10:	230b      	movs	r3, #11
 8002a12:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002a14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a18:	4619      	mov	r1, r3
 8002a1a:	4808      	ldr	r0, [pc, #32]	; (8002a3c <HAL_ETH_MspInit+0x16c>)
 8002a1c:	f002 f904 	bl	8004c28 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8002a20:	bf00      	nop
 8002a22:	3738      	adds	r7, #56	; 0x38
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}
 8002a28:	40028000 	.word	0x40028000
 8002a2c:	40023800 	.word	0x40023800
 8002a30:	40020800 	.word	0x40020800
 8002a34:	40020000 	.word	0x40020000
 8002a38:	40020400 	.word	0x40020400
 8002a3c:	40021800 	.word	0x40021800

08002a40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b0ae      	sub	sp, #184	; 0xb8
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a48:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	601a      	str	r2, [r3, #0]
 8002a50:	605a      	str	r2, [r3, #4]
 8002a52:	609a      	str	r2, [r3, #8]
 8002a54:	60da      	str	r2, [r3, #12]
 8002a56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002a58:	f107 0314 	add.w	r3, r7, #20
 8002a5c:	2290      	movs	r2, #144	; 0x90
 8002a5e:	2100      	movs	r1, #0
 8002a60:	4618      	mov	r0, r3
 8002a62:	f005 f90b 	bl	8007c7c <memset>
  if(huart->Instance==USART3)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a3d      	ldr	r2, [pc, #244]	; (8002b60 <HAL_UART_MspInit+0x120>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d172      	bne.n	8002b56 <HAL_UART_MspInit+0x116>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002a70:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a74:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002a76:	2300      	movs	r3, #0
 8002a78:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a7a:	f107 0314 	add.w	r3, r7, #20
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f003 f914 	bl	8005cac <HAL_RCCEx_PeriphCLKConfig>
 8002a84:	4603      	mov	r3, r0
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d001      	beq.n	8002a8e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002a8a:	f7ff fe31 	bl	80026f0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002a8e:	4b35      	ldr	r3, [pc, #212]	; (8002b64 <HAL_UART_MspInit+0x124>)
 8002a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a92:	4a34      	ldr	r2, [pc, #208]	; (8002b64 <HAL_UART_MspInit+0x124>)
 8002a94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a98:	6413      	str	r3, [r2, #64]	; 0x40
 8002a9a:	4b32      	ldr	r3, [pc, #200]	; (8002b64 <HAL_UART_MspInit+0x124>)
 8002a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002aa2:	613b      	str	r3, [r7, #16]
 8002aa4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002aa6:	4b2f      	ldr	r3, [pc, #188]	; (8002b64 <HAL_UART_MspInit+0x124>)
 8002aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aaa:	4a2e      	ldr	r2, [pc, #184]	; (8002b64 <HAL_UART_MspInit+0x124>)
 8002aac:	f043 0308 	orr.w	r3, r3, #8
 8002ab0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ab2:	4b2c      	ldr	r3, [pc, #176]	; (8002b64 <HAL_UART_MspInit+0x124>)
 8002ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab6:	f003 0308 	and.w	r3, r3, #8
 8002aba:	60fb      	str	r3, [r7, #12]
 8002abc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002abe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002ac2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ac6:	2302      	movs	r3, #2
 8002ac8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002acc:	2300      	movs	r3, #0
 8002ace:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002ad8:	2307      	movs	r3, #7
 8002ada:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ade:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002ae2:	4619      	mov	r1, r3
 8002ae4:	4820      	ldr	r0, [pc, #128]	; (8002b68 <HAL_UART_MspInit+0x128>)
 8002ae6:	f002 f89f 	bl	8004c28 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8002aea:	4b20      	ldr	r3, [pc, #128]	; (8002b6c <HAL_UART_MspInit+0x12c>)
 8002aec:	4a20      	ldr	r2, [pc, #128]	; (8002b70 <HAL_UART_MspInit+0x130>)
 8002aee:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8002af0:	4b1e      	ldr	r3, [pc, #120]	; (8002b6c <HAL_UART_MspInit+0x12c>)
 8002af2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002af6:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002af8:	4b1c      	ldr	r3, [pc, #112]	; (8002b6c <HAL_UART_MspInit+0x12c>)
 8002afa:	2240      	movs	r2, #64	; 0x40
 8002afc:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002afe:	4b1b      	ldr	r3, [pc, #108]	; (8002b6c <HAL_UART_MspInit+0x12c>)
 8002b00:	2200      	movs	r2, #0
 8002b02:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002b04:	4b19      	ldr	r3, [pc, #100]	; (8002b6c <HAL_UART_MspInit+0x12c>)
 8002b06:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b0a:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b0c:	4b17      	ldr	r3, [pc, #92]	; (8002b6c <HAL_UART_MspInit+0x12c>)
 8002b0e:	2200      	movs	r2, #0
 8002b10:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b12:	4b16      	ldr	r3, [pc, #88]	; (8002b6c <HAL_UART_MspInit+0x12c>)
 8002b14:	2200      	movs	r2, #0
 8002b16:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8002b18:	4b14      	ldr	r3, [pc, #80]	; (8002b6c <HAL_UART_MspInit+0x12c>)
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002b1e:	4b13      	ldr	r3, [pc, #76]	; (8002b6c <HAL_UART_MspInit+0x12c>)
 8002b20:	2200      	movs	r2, #0
 8002b22:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002b24:	4b11      	ldr	r3, [pc, #68]	; (8002b6c <HAL_UART_MspInit+0x12c>)
 8002b26:	2200      	movs	r2, #0
 8002b28:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8002b2a:	4810      	ldr	r0, [pc, #64]	; (8002b6c <HAL_UART_MspInit+0x12c>)
 8002b2c:	f001 f9da 	bl	8003ee4 <HAL_DMA_Init>
 8002b30:	4603      	mov	r3, r0
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d001      	beq.n	8002b3a <HAL_UART_MspInit+0xfa>
    {
      Error_Handler();
 8002b36:	f7ff fddb 	bl	80026f0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	4a0b      	ldr	r2, [pc, #44]	; (8002b6c <HAL_UART_MspInit+0x12c>)
 8002b3e:	671a      	str	r2, [r3, #112]	; 0x70
 8002b40:	4a0a      	ldr	r2, [pc, #40]	; (8002b6c <HAL_UART_MspInit+0x12c>)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002b46:	2200      	movs	r2, #0
 8002b48:	2100      	movs	r1, #0
 8002b4a:	2027      	movs	r0, #39	; 0x27
 8002b4c:	f001 f993 	bl	8003e76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002b50:	2027      	movs	r0, #39	; 0x27
 8002b52:	f001 f9ac 	bl	8003eae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002b56:	bf00      	nop
 8002b58:	37b8      	adds	r7, #184	; 0xb8
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	40004800 	.word	0x40004800
 8002b64:	40023800 	.word	0x40023800
 8002b68:	40020c00 	.word	0x40020c00
 8002b6c:	200047a8 	.word	0x200047a8
 8002b70:	40026058 	.word	0x40026058

08002b74 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b0ae      	sub	sp, #184	; 0xb8
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b7c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002b80:	2200      	movs	r2, #0
 8002b82:	601a      	str	r2, [r3, #0]
 8002b84:	605a      	str	r2, [r3, #4]
 8002b86:	609a      	str	r2, [r3, #8]
 8002b88:	60da      	str	r2, [r3, #12]
 8002b8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002b8c:	f107 0314 	add.w	r3, r7, #20
 8002b90:	2290      	movs	r2, #144	; 0x90
 8002b92:	2100      	movs	r1, #0
 8002b94:	4618      	mov	r0, r3
 8002b96:	f005 f871 	bl	8007c7c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ba2:	d159      	bne.n	8002c58 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8002ba4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002ba8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8002baa:	2300      	movs	r3, #0
 8002bac:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002bb0:	f107 0314 	add.w	r3, r7, #20
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f003 f879 	bl	8005cac <HAL_RCCEx_PeriphCLKConfig>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d001      	beq.n	8002bc4 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8002bc0:	f7ff fd96 	bl	80026f0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bc4:	4b26      	ldr	r3, [pc, #152]	; (8002c60 <HAL_PCD_MspInit+0xec>)
 8002bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc8:	4a25      	ldr	r2, [pc, #148]	; (8002c60 <HAL_PCD_MspInit+0xec>)
 8002bca:	f043 0301 	orr.w	r3, r3, #1
 8002bce:	6313      	str	r3, [r2, #48]	; 0x30
 8002bd0:	4b23      	ldr	r3, [pc, #140]	; (8002c60 <HAL_PCD_MspInit+0xec>)
 8002bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd4:	f003 0301 	and.w	r3, r3, #1
 8002bd8:	613b      	str	r3, [r7, #16]
 8002bda:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002bdc:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8002be0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002be4:	2302      	movs	r3, #2
 8002be6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bea:	2300      	movs	r3, #0
 8002bec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bf0:	2303      	movs	r3, #3
 8002bf2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002bf6:	230a      	movs	r3, #10
 8002bf8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bfc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002c00:	4619      	mov	r1, r3
 8002c02:	4818      	ldr	r0, [pc, #96]	; (8002c64 <HAL_PCD_MspInit+0xf0>)
 8002c04:	f002 f810 	bl	8004c28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002c08:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c0c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c10:	2300      	movs	r3, #0
 8002c12:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c16:	2300      	movs	r3, #0
 8002c18:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002c1c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002c20:	4619      	mov	r1, r3
 8002c22:	4810      	ldr	r0, [pc, #64]	; (8002c64 <HAL_PCD_MspInit+0xf0>)
 8002c24:	f002 f800 	bl	8004c28 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002c28:	4b0d      	ldr	r3, [pc, #52]	; (8002c60 <HAL_PCD_MspInit+0xec>)
 8002c2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c2c:	4a0c      	ldr	r2, [pc, #48]	; (8002c60 <HAL_PCD_MspInit+0xec>)
 8002c2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c32:	6353      	str	r3, [r2, #52]	; 0x34
 8002c34:	4b0a      	ldr	r3, [pc, #40]	; (8002c60 <HAL_PCD_MspInit+0xec>)
 8002c36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c3c:	60fb      	str	r3, [r7, #12]
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	4b07      	ldr	r3, [pc, #28]	; (8002c60 <HAL_PCD_MspInit+0xec>)
 8002c42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c44:	4a06      	ldr	r2, [pc, #24]	; (8002c60 <HAL_PCD_MspInit+0xec>)
 8002c46:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c4a:	6453      	str	r3, [r2, #68]	; 0x44
 8002c4c:	4b04      	ldr	r3, [pc, #16]	; (8002c60 <HAL_PCD_MspInit+0xec>)
 8002c4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c54:	60bb      	str	r3, [r7, #8]
 8002c56:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002c58:	bf00      	nop
 8002c5a:	37b8      	adds	r7, #184	; 0xb8
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}
 8002c60:	40023800 	.word	0x40023800
 8002c64:	40020000 	.word	0x40020000

08002c68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002c6c:	e7fe      	b.n	8002c6c <NMI_Handler+0x4>

08002c6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c6e:	b480      	push	{r7}
 8002c70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c72:	e7fe      	b.n	8002c72 <HardFault_Handler+0x4>

08002c74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c74:	b480      	push	{r7}
 8002c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c78:	e7fe      	b.n	8002c78 <MemManage_Handler+0x4>

08002c7a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c7a:	b480      	push	{r7}
 8002c7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c7e:	e7fe      	b.n	8002c7e <BusFault_Handler+0x4>

08002c80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c80:	b480      	push	{r7}
 8002c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c84:	e7fe      	b.n	8002c84 <UsageFault_Handler+0x4>

08002c86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c86:	b480      	push	{r7}
 8002c88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c8a:	bf00      	nop
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr

08002c94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c94:	b480      	push	{r7}
 8002c96:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c98:	bf00      	nop
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	4770      	bx	lr

08002ca2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ca2:	b480      	push	{r7}
 8002ca4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ca6:	bf00      	nop
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cae:	4770      	bx	lr

08002cb0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002cb4:	f000 f96e 	bl	8002f94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002cb8:	bf00      	nop
 8002cba:	bd80      	pop	{r7, pc}

08002cbc <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8002cc0:	4802      	ldr	r0, [pc, #8]	; (8002ccc <DMA1_Stream3_IRQHandler+0x10>)
 8002cc2:	f001 fa4f 	bl	8004164 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8002cc6:	bf00      	nop
 8002cc8:	bd80      	pop	{r7, pc}
 8002cca:	bf00      	nop
 8002ccc:	200047a8 	.word	0x200047a8

08002cd0 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002cd4:	4802      	ldr	r0, [pc, #8]	; (8002ce0 <CAN1_TX_IRQHandler+0x10>)
 8002cd6:	f000 fe0a 	bl	80038ee <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8002cda:	bf00      	nop
 8002cdc:	bd80      	pop	{r7, pc}
 8002cde:	bf00      	nop
 8002ce0:	20004620 	.word	0x20004620

08002ce4 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002ce8:	4802      	ldr	r0, [pc, #8]	; (8002cf4 <CAN1_RX0_IRQHandler+0x10>)
 8002cea:	f000 fe00 	bl	80038ee <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8002cee:	bf00      	nop
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	20004620 	.word	0x20004620

08002cf8 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002cfc:	4802      	ldr	r0, [pc, #8]	; (8002d08 <CAN1_RX1_IRQHandler+0x10>)
 8002cfe:	f000 fdf6 	bl	80038ee <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8002d02:	bf00      	nop
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	bf00      	nop
 8002d08:	20004620 	.word	0x20004620

08002d0c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002d10:	4802      	ldr	r0, [pc, #8]	; (8002d1c <USART3_IRQHandler+0x10>)
 8002d12:	f003 fcc5 	bl	80066a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002d16:	bf00      	nop
 8002d18:	bd80      	pop	{r7, pc}
 8002d1a:	bf00      	nop
 8002d1c:	20004720 	.word	0x20004720

08002d20 <CAN2_TX_IRQHandler>:

/**
  * @brief This function handles CAN2 TX interrupts.
  */
void CAN2_TX_IRQHandler(void)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_TX_IRQn 0 */

  /* USER CODE END CAN2_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8002d24:	4802      	ldr	r0, [pc, #8]	; (8002d30 <CAN2_TX_IRQHandler+0x10>)
 8002d26:	f000 fde2 	bl	80038ee <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_TX_IRQn 1 */

  /* USER CODE END CAN2_TX_IRQn 1 */
}
 8002d2a:	bf00      	nop
 8002d2c:	bd80      	pop	{r7, pc}
 8002d2e:	bf00      	nop
 8002d30:	20004648 	.word	0x20004648

08002d34 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8002d38:	4802      	ldr	r0, [pc, #8]	; (8002d44 <CAN2_RX0_IRQHandler+0x10>)
 8002d3a:	f000 fdd8 	bl	80038ee <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8002d3e:	bf00      	nop
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop
 8002d44:	20004648 	.word	0x20004648

08002d48 <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8002d4c:	4802      	ldr	r0, [pc, #8]	; (8002d58 <CAN2_RX1_IRQHandler+0x10>)
 8002d4e:	f000 fdce 	bl	80038ee <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 8002d52:	bf00      	nop
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	bf00      	nop
 8002d58:	20004648 	.word	0x20004648

08002d5c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b086      	sub	sp, #24
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	60f8      	str	r0, [r7, #12]
 8002d64:	60b9      	str	r1, [r7, #8]
 8002d66:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d68:	2300      	movs	r3, #0
 8002d6a:	617b      	str	r3, [r7, #20]
 8002d6c:	e00a      	b.n	8002d84 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002d6e:	f3af 8000 	nop.w
 8002d72:	4601      	mov	r1, r0
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	1c5a      	adds	r2, r3, #1
 8002d78:	60ba      	str	r2, [r7, #8]
 8002d7a:	b2ca      	uxtb	r2, r1
 8002d7c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	3301      	adds	r3, #1
 8002d82:	617b      	str	r3, [r7, #20]
 8002d84:	697a      	ldr	r2, [r7, #20]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	dbf0      	blt.n	8002d6e <_read+0x12>
  }

  return len;
 8002d8c:	687b      	ldr	r3, [r7, #4]
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3718      	adds	r7, #24
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}

08002d96 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002d96:	b580      	push	{r7, lr}
 8002d98:	b086      	sub	sp, #24
 8002d9a:	af00      	add	r7, sp, #0
 8002d9c:	60f8      	str	r0, [r7, #12]
 8002d9e:	60b9      	str	r1, [r7, #8]
 8002da0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002da2:	2300      	movs	r3, #0
 8002da4:	617b      	str	r3, [r7, #20]
 8002da6:	e009      	b.n	8002dbc <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	1c5a      	adds	r2, r3, #1
 8002dac:	60ba      	str	r2, [r7, #8]
 8002dae:	781b      	ldrb	r3, [r3, #0]
 8002db0:	4618      	mov	r0, r3
 8002db2:	f7ff f83d 	bl	8001e30 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	3301      	adds	r3, #1
 8002dba:	617b      	str	r3, [r7, #20]
 8002dbc:	697a      	ldr	r2, [r7, #20]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	dbf1      	blt.n	8002da8 <_write+0x12>
  }
  return len;
 8002dc4:	687b      	ldr	r3, [r7, #4]
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	3718      	adds	r7, #24
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}

08002dce <_close>:

int _close(int file)
{
 8002dce:	b480      	push	{r7}
 8002dd0:	b083      	sub	sp, #12
 8002dd2:	af00      	add	r7, sp, #0
 8002dd4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002dd6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	370c      	adds	r7, #12
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr

08002de6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002de6:	b480      	push	{r7}
 8002de8:	b083      	sub	sp, #12
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	6078      	str	r0, [r7, #4]
 8002dee:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002df6:	605a      	str	r2, [r3, #4]
  return 0;
 8002df8:	2300      	movs	r3, #0
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	370c      	adds	r7, #12
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr

08002e06 <_isatty>:

int _isatty(int file)
{
 8002e06:	b480      	push	{r7}
 8002e08:	b083      	sub	sp, #12
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002e0e:	2301      	movs	r3, #1
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	370c      	adds	r7, #12
 8002e14:	46bd      	mov	sp, r7
 8002e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1a:	4770      	bx	lr

08002e1c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b085      	sub	sp, #20
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	60f8      	str	r0, [r7, #12]
 8002e24:	60b9      	str	r1, [r7, #8]
 8002e26:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002e28:	2300      	movs	r3, #0
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	3714      	adds	r7, #20
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr
	...

08002e38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b086      	sub	sp, #24
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e40:	4a14      	ldr	r2, [pc, #80]	; (8002e94 <_sbrk+0x5c>)
 8002e42:	4b15      	ldr	r3, [pc, #84]	; (8002e98 <_sbrk+0x60>)
 8002e44:	1ad3      	subs	r3, r2, r3
 8002e46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e4c:	4b13      	ldr	r3, [pc, #76]	; (8002e9c <_sbrk+0x64>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d102      	bne.n	8002e5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e54:	4b11      	ldr	r3, [pc, #68]	; (8002e9c <_sbrk+0x64>)
 8002e56:	4a12      	ldr	r2, [pc, #72]	; (8002ea0 <_sbrk+0x68>)
 8002e58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e5a:	4b10      	ldr	r3, [pc, #64]	; (8002e9c <_sbrk+0x64>)
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	4413      	add	r3, r2
 8002e62:	693a      	ldr	r2, [r7, #16]
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d207      	bcs.n	8002e78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e68:	f004 fede 	bl	8007c28 <__errno>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	220c      	movs	r2, #12
 8002e70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e72:	f04f 33ff 	mov.w	r3, #4294967295
 8002e76:	e009      	b.n	8002e8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e78:	4b08      	ldr	r3, [pc, #32]	; (8002e9c <_sbrk+0x64>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e7e:	4b07      	ldr	r3, [pc, #28]	; (8002e9c <_sbrk+0x64>)
 8002e80:	681a      	ldr	r2, [r3, #0]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	4413      	add	r3, r2
 8002e86:	4a05      	ldr	r2, [pc, #20]	; (8002e9c <_sbrk+0x64>)
 8002e88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	3718      	adds	r7, #24
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}
 8002e94:	20080000 	.word	0x20080000
 8002e98:	00000400 	.word	0x00000400
 8002e9c:	2000504c 	.word	0x2000504c
 8002ea0:	20005068 	.word	0x20005068

08002ea4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002ea8:	4b06      	ldr	r3, [pc, #24]	; (8002ec4 <SystemInit+0x20>)
 8002eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eae:	4a05      	ldr	r2, [pc, #20]	; (8002ec4 <SystemInit+0x20>)
 8002eb0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002eb4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002eb8:	bf00      	nop
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr
 8002ec2:	bf00      	nop
 8002ec4:	e000ed00 	.word	0xe000ed00

08002ec8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002ec8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002f00 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002ecc:	480d      	ldr	r0, [pc, #52]	; (8002f04 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002ece:	490e      	ldr	r1, [pc, #56]	; (8002f08 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002ed0:	4a0e      	ldr	r2, [pc, #56]	; (8002f0c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002ed2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ed4:	e002      	b.n	8002edc <LoopCopyDataInit>

08002ed6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ed6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ed8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002eda:	3304      	adds	r3, #4

08002edc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002edc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ede:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ee0:	d3f9      	bcc.n	8002ed6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ee2:	4a0b      	ldr	r2, [pc, #44]	; (8002f10 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002ee4:	4c0b      	ldr	r4, [pc, #44]	; (8002f14 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002ee6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ee8:	e001      	b.n	8002eee <LoopFillZerobss>

08002eea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002eea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002eec:	3204      	adds	r2, #4

08002eee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002eee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ef0:	d3fb      	bcc.n	8002eea <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002ef2:	f7ff ffd7 	bl	8002ea4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002ef6:	f004 fe9d 	bl	8007c34 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002efa:	f7ff f81b 	bl	8001f34 <main>
  bx  lr    
 8002efe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002f00:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8002f04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f08:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8002f0c:	08009014 	.word	0x08009014
  ldr r2, =_sbss
 8002f10:	200001b8 	.word	0x200001b8
  ldr r4, =_ebss
 8002f14:	20005064 	.word	0x20005064

08002f18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f18:	e7fe      	b.n	8002f18 <ADC_IRQHandler>

08002f1a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f1a:	b580      	push	{r7, lr}
 8002f1c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f1e:	2003      	movs	r0, #3
 8002f20:	f000 ff9e 	bl	8003e60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f24:	2000      	movs	r0, #0
 8002f26:	f000 f805 	bl	8002f34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f2a:	f7ff fbe7 	bl	80026fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f2e:	2300      	movs	r3, #0
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	bd80      	pop	{r7, pc}

08002f34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b082      	sub	sp, #8
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f3c:	4b12      	ldr	r3, [pc, #72]	; (8002f88 <HAL_InitTick+0x54>)
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	4b12      	ldr	r3, [pc, #72]	; (8002f8c <HAL_InitTick+0x58>)
 8002f42:	781b      	ldrb	r3, [r3, #0]
 8002f44:	4619      	mov	r1, r3
 8002f46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f52:	4618      	mov	r0, r3
 8002f54:	f000 ffb9 	bl	8003eca <HAL_SYSTICK_Config>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d001      	beq.n	8002f62 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e00e      	b.n	8002f80 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2b0f      	cmp	r3, #15
 8002f66:	d80a      	bhi.n	8002f7e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f68:	2200      	movs	r2, #0
 8002f6a:	6879      	ldr	r1, [r7, #4]
 8002f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8002f70:	f000 ff81 	bl	8003e76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f74:	4a06      	ldr	r2, [pc, #24]	; (8002f90 <HAL_InitTick+0x5c>)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	e000      	b.n	8002f80 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	3708      	adds	r7, #8
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}
 8002f88:	20000004 	.word	0x20000004
 8002f8c:	2000000c 	.word	0x2000000c
 8002f90:	20000008 	.word	0x20000008

08002f94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f94:	b480      	push	{r7}
 8002f96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f98:	4b06      	ldr	r3, [pc, #24]	; (8002fb4 <HAL_IncTick+0x20>)
 8002f9a:	781b      	ldrb	r3, [r3, #0]
 8002f9c:	461a      	mov	r2, r3
 8002f9e:	4b06      	ldr	r3, [pc, #24]	; (8002fb8 <HAL_IncTick+0x24>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4413      	add	r3, r2
 8002fa4:	4a04      	ldr	r2, [pc, #16]	; (8002fb8 <HAL_IncTick+0x24>)
 8002fa6:	6013      	str	r3, [r2, #0]
}
 8002fa8:	bf00      	nop
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr
 8002fb2:	bf00      	nop
 8002fb4:	2000000c 	.word	0x2000000c
 8002fb8:	20005050 	.word	0x20005050

08002fbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	af00      	add	r7, sp, #0
  return uwTick;
 8002fc0:	4b03      	ldr	r3, [pc, #12]	; (8002fd0 <HAL_GetTick+0x14>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fcc:	4770      	bx	lr
 8002fce:	bf00      	nop
 8002fd0:	20005050 	.word	0x20005050

08002fd4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b084      	sub	sp, #16
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002fdc:	f7ff ffee 	bl	8002fbc <HAL_GetTick>
 8002fe0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fec:	d005      	beq.n	8002ffa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002fee:	4b0a      	ldr	r3, [pc, #40]	; (8003018 <HAL_Delay+0x44>)
 8002ff0:	781b      	ldrb	r3, [r3, #0]
 8002ff2:	461a      	mov	r2, r3
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	4413      	add	r3, r2
 8002ff8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002ffa:	bf00      	nop
 8002ffc:	f7ff ffde 	bl	8002fbc <HAL_GetTick>
 8003000:	4602      	mov	r2, r0
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	1ad3      	subs	r3, r2, r3
 8003006:	68fa      	ldr	r2, [r7, #12]
 8003008:	429a      	cmp	r2, r3
 800300a:	d8f7      	bhi.n	8002ffc <HAL_Delay+0x28>
  {
  }
}
 800300c:	bf00      	nop
 800300e:	bf00      	nop
 8003010:	3710      	adds	r7, #16
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}
 8003016:	bf00      	nop
 8003018:	2000000c 	.word	0x2000000c

0800301c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b084      	sub	sp, #16
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d101      	bne.n	800302e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	e0ed      	b.n	800320a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003034:	b2db      	uxtb	r3, r3
 8003036:	2b00      	cmp	r3, #0
 8003038:	d102      	bne.n	8003040 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f7ff fb82 	bl	8002744 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f042 0201 	orr.w	r2, r2, #1
 800304e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003050:	f7ff ffb4 	bl	8002fbc <HAL_GetTick>
 8003054:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003056:	e012      	b.n	800307e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003058:	f7ff ffb0 	bl	8002fbc <HAL_GetTick>
 800305c:	4602      	mov	r2, r0
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	1ad3      	subs	r3, r2, r3
 8003062:	2b0a      	cmp	r3, #10
 8003064:	d90b      	bls.n	800307e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800306a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2205      	movs	r2, #5
 8003076:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e0c5      	b.n	800320a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	f003 0301 	and.w	r3, r3, #1
 8003088:	2b00      	cmp	r3, #0
 800308a:	d0e5      	beq.n	8003058 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f022 0202 	bic.w	r2, r2, #2
 800309a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800309c:	f7ff ff8e 	bl	8002fbc <HAL_GetTick>
 80030a0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80030a2:	e012      	b.n	80030ca <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80030a4:	f7ff ff8a 	bl	8002fbc <HAL_GetTick>
 80030a8:	4602      	mov	r2, r0
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	1ad3      	subs	r3, r2, r3
 80030ae:	2b0a      	cmp	r3, #10
 80030b0:	d90b      	bls.n	80030ca <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2205      	movs	r2, #5
 80030c2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e09f      	b.n	800320a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	f003 0302 	and.w	r3, r3, #2
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d1e5      	bne.n	80030a4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	7e1b      	ldrb	r3, [r3, #24]
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d108      	bne.n	80030f2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	681a      	ldr	r2, [r3, #0]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80030ee:	601a      	str	r2, [r3, #0]
 80030f0:	e007      	b.n	8003102 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	681a      	ldr	r2, [r3, #0]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003100:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	7e5b      	ldrb	r3, [r3, #25]
 8003106:	2b01      	cmp	r3, #1
 8003108:	d108      	bne.n	800311c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	681a      	ldr	r2, [r3, #0]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003118:	601a      	str	r2, [r3, #0]
 800311a:	e007      	b.n	800312c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800312a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	7e9b      	ldrb	r3, [r3, #26]
 8003130:	2b01      	cmp	r3, #1
 8003132:	d108      	bne.n	8003146 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f042 0220 	orr.w	r2, r2, #32
 8003142:	601a      	str	r2, [r3, #0]
 8003144:	e007      	b.n	8003156 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f022 0220 	bic.w	r2, r2, #32
 8003154:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	7edb      	ldrb	r3, [r3, #27]
 800315a:	2b01      	cmp	r3, #1
 800315c:	d108      	bne.n	8003170 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	681a      	ldr	r2, [r3, #0]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f022 0210 	bic.w	r2, r2, #16
 800316c:	601a      	str	r2, [r3, #0]
 800316e:	e007      	b.n	8003180 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f042 0210 	orr.w	r2, r2, #16
 800317e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	7f1b      	ldrb	r3, [r3, #28]
 8003184:	2b01      	cmp	r3, #1
 8003186:	d108      	bne.n	800319a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f042 0208 	orr.w	r2, r2, #8
 8003196:	601a      	str	r2, [r3, #0]
 8003198:	e007      	b.n	80031aa <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f022 0208 	bic.w	r2, r2, #8
 80031a8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	7f5b      	ldrb	r3, [r3, #29]
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	d108      	bne.n	80031c4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f042 0204 	orr.w	r2, r2, #4
 80031c0:	601a      	str	r2, [r3, #0]
 80031c2:	e007      	b.n	80031d4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f022 0204 	bic.w	r2, r2, #4
 80031d2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	689a      	ldr	r2, [r3, #8]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	68db      	ldr	r3, [r3, #12]
 80031dc:	431a      	orrs	r2, r3
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	691b      	ldr	r3, [r3, #16]
 80031e2:	431a      	orrs	r2, r3
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	695b      	ldr	r3, [r3, #20]
 80031e8:	ea42 0103 	orr.w	r1, r2, r3
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	1e5a      	subs	r2, r3, #1
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	430a      	orrs	r2, r1
 80031f8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2200      	movs	r2, #0
 80031fe:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2201      	movs	r2, #1
 8003204:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003208:	2300      	movs	r3, #0
}
 800320a:	4618      	mov	r0, r3
 800320c:	3710      	adds	r7, #16
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}
	...

08003214 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8003214:	b480      	push	{r7}
 8003216:	b087      	sub	sp, #28
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
 800321c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	f893 3020 	ldrb.w	r3, [r3, #32]
 800322a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800322c:	7cfb      	ldrb	r3, [r7, #19]
 800322e:	2b01      	cmp	r3, #1
 8003230:	d003      	beq.n	800323a <HAL_CAN_ConfigFilter+0x26>
 8003232:	7cfb      	ldrb	r3, [r7, #19]
 8003234:	2b02      	cmp	r3, #2
 8003236:	f040 80c7 	bne.w	80033c8 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a69      	ldr	r2, [pc, #420]	; (80033e4 <HAL_CAN_ConfigFilter+0x1d0>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d001      	beq.n	8003248 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 8003244:	4b68      	ldr	r3, [pc, #416]	; (80033e8 <HAL_CAN_ConfigFilter+0x1d4>)
 8003246:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800324e:	f043 0201 	orr.w	r2, r3, #1
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	4a63      	ldr	r2, [pc, #396]	; (80033e8 <HAL_CAN_ConfigFilter+0x1d4>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d111      	bne.n	8003284 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003266:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800327a:	021b      	lsls	r3, r3, #8
 800327c:	431a      	orrs	r2, r3
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	695b      	ldr	r3, [r3, #20]
 8003288:	f003 031f 	and.w	r3, r3, #31
 800328c:	2201      	movs	r2, #1
 800328e:	fa02 f303 	lsl.w	r3, r2, r3
 8003292:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	43db      	mvns	r3, r3
 800329e:	401a      	ands	r2, r3
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	69db      	ldr	r3, [r3, #28]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d123      	bne.n	80032f6 <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	43db      	mvns	r3, r3
 80032b8:	401a      	ands	r2, r3
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	68db      	ldr	r3, [r3, #12]
 80032c4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80032cc:	683a      	ldr	r2, [r7, #0]
 80032ce:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80032d0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	3248      	adds	r2, #72	; 0x48
 80032d6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80032ea:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80032ec:	6979      	ldr	r1, [r7, #20]
 80032ee:	3348      	adds	r3, #72	; 0x48
 80032f0:	00db      	lsls	r3, r3, #3
 80032f2:	440b      	add	r3, r1
 80032f4:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	69db      	ldr	r3, [r3, #28]
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d122      	bne.n	8003344 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	431a      	orrs	r2, r3
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800331a:	683a      	ldr	r2, [r7, #0]
 800331c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800331e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	3248      	adds	r2, #72	; 0x48
 8003324:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	68db      	ldr	r3, [r3, #12]
 8003332:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003338:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800333a:	6979      	ldr	r1, [r7, #20]
 800333c:	3348      	adds	r3, #72	; 0x48
 800333e:	00db      	lsls	r3, r3, #3
 8003340:	440b      	add	r3, r1
 8003342:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	699b      	ldr	r3, [r3, #24]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d109      	bne.n	8003360 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	43db      	mvns	r3, r3
 8003356:	401a      	ands	r2, r3
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800335e:	e007      	b.n	8003370 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	431a      	orrs	r2, r3
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	691b      	ldr	r3, [r3, #16]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d109      	bne.n	800338c <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	43db      	mvns	r3, r3
 8003382:	401a      	ands	r2, r3
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800338a:	e007      	b.n	800339c <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	431a      	orrs	r2, r3
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	6a1b      	ldr	r3, [r3, #32]
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	d107      	bne.n	80033b4 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	431a      	orrs	r2, r3
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80033ba:	f023 0201 	bic.w	r2, r3, #1
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80033c4:	2300      	movs	r3, #0
 80033c6:	e006      	b.n	80033d6 <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033cc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
  }
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	371c      	adds	r7, #28
 80033da:	46bd      	mov	sp, r7
 80033dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e0:	4770      	bx	lr
 80033e2:	bf00      	nop
 80033e4:	40003400 	.word	0x40003400
 80033e8:	40006400 	.word	0x40006400

080033ec <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b084      	sub	sp, #16
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80033fa:	b2db      	uxtb	r3, r3
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	d12e      	bne.n	800345e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2202      	movs	r2, #2
 8003404:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f022 0201 	bic.w	r2, r2, #1
 8003416:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003418:	f7ff fdd0 	bl	8002fbc <HAL_GetTick>
 800341c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800341e:	e012      	b.n	8003446 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003420:	f7ff fdcc 	bl	8002fbc <HAL_GetTick>
 8003424:	4602      	mov	r2, r0
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	1ad3      	subs	r3, r2, r3
 800342a:	2b0a      	cmp	r3, #10
 800342c:	d90b      	bls.n	8003446 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003432:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2205      	movs	r2, #5
 800343e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	e012      	b.n	800346c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	f003 0301 	and.w	r3, r3, #1
 8003450:	2b00      	cmp	r3, #0
 8003452:	d1e5      	bne.n	8003420 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2200      	movs	r2, #0
 8003458:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800345a:	2300      	movs	r3, #0
 800345c:	e006      	b.n	800346c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003462:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
  }
}
 800346c:	4618      	mov	r0, r3
 800346e:	3710      	adds	r7, #16
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}

08003474 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8003474:	b480      	push	{r7}
 8003476:	b089      	sub	sp, #36	; 0x24
 8003478:	af00      	add	r7, sp, #0
 800347a:	60f8      	str	r0, [r7, #12]
 800347c:	60b9      	str	r1, [r7, #8]
 800347e:	607a      	str	r2, [r7, #4]
 8003480:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003488:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8003492:	7ffb      	ldrb	r3, [r7, #31]
 8003494:	2b01      	cmp	r3, #1
 8003496:	d003      	beq.n	80034a0 <HAL_CAN_AddTxMessage+0x2c>
 8003498:	7ffb      	ldrb	r3, [r7, #31]
 800349a:	2b02      	cmp	r3, #2
 800349c:	f040 80ad 	bne.w	80035fa <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80034a0:	69bb      	ldr	r3, [r7, #24]
 80034a2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d10a      	bne.n	80034c0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80034aa:	69bb      	ldr	r3, [r7, #24]
 80034ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d105      	bne.n	80034c0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80034b4:	69bb      	ldr	r3, [r7, #24]
 80034b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	f000 8095 	beq.w	80035ea <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80034c0:	69bb      	ldr	r3, [r7, #24]
 80034c2:	0e1b      	lsrs	r3, r3, #24
 80034c4:	f003 0303 	and.w	r3, r3, #3
 80034c8:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80034ca:	2201      	movs	r2, #1
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	409a      	lsls	r2, r3
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d10d      	bne.n	80034f8 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80034e6:	68f9      	ldr	r1, [r7, #12]
 80034e8:	6809      	ldr	r1, [r1, #0]
 80034ea:	431a      	orrs	r2, r3
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	3318      	adds	r3, #24
 80034f0:	011b      	lsls	r3, r3, #4
 80034f2:	440b      	add	r3, r1
 80034f4:	601a      	str	r2, [r3, #0]
 80034f6:	e00f      	b.n	8003518 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003502:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003508:	68f9      	ldr	r1, [r7, #12]
 800350a:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800350c:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	3318      	adds	r3, #24
 8003512:	011b      	lsls	r3, r3, #4
 8003514:	440b      	add	r3, r1
 8003516:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	6819      	ldr	r1, [r3, #0]
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	691a      	ldr	r2, [r3, #16]
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	3318      	adds	r3, #24
 8003524:	011b      	lsls	r3, r3, #4
 8003526:	440b      	add	r3, r1
 8003528:	3304      	adds	r3, #4
 800352a:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	7d1b      	ldrb	r3, [r3, #20]
 8003530:	2b01      	cmp	r3, #1
 8003532:	d111      	bne.n	8003558 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	3318      	adds	r3, #24
 800353c:	011b      	lsls	r3, r3, #4
 800353e:	4413      	add	r3, r2
 8003540:	3304      	adds	r3, #4
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	68fa      	ldr	r2, [r7, #12]
 8003546:	6811      	ldr	r1, [r2, #0]
 8003548:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	3318      	adds	r3, #24
 8003550:	011b      	lsls	r3, r3, #4
 8003552:	440b      	add	r3, r1
 8003554:	3304      	adds	r3, #4
 8003556:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	3307      	adds	r3, #7
 800355c:	781b      	ldrb	r3, [r3, #0]
 800355e:	061a      	lsls	r2, r3, #24
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	3306      	adds	r3, #6
 8003564:	781b      	ldrb	r3, [r3, #0]
 8003566:	041b      	lsls	r3, r3, #16
 8003568:	431a      	orrs	r2, r3
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	3305      	adds	r3, #5
 800356e:	781b      	ldrb	r3, [r3, #0]
 8003570:	021b      	lsls	r3, r3, #8
 8003572:	4313      	orrs	r3, r2
 8003574:	687a      	ldr	r2, [r7, #4]
 8003576:	3204      	adds	r2, #4
 8003578:	7812      	ldrb	r2, [r2, #0]
 800357a:	4610      	mov	r0, r2
 800357c:	68fa      	ldr	r2, [r7, #12]
 800357e:	6811      	ldr	r1, [r2, #0]
 8003580:	ea43 0200 	orr.w	r2, r3, r0
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	011b      	lsls	r3, r3, #4
 8003588:	440b      	add	r3, r1
 800358a:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800358e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	3303      	adds	r3, #3
 8003594:	781b      	ldrb	r3, [r3, #0]
 8003596:	061a      	lsls	r2, r3, #24
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	3302      	adds	r3, #2
 800359c:	781b      	ldrb	r3, [r3, #0]
 800359e:	041b      	lsls	r3, r3, #16
 80035a0:	431a      	orrs	r2, r3
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	3301      	adds	r3, #1
 80035a6:	781b      	ldrb	r3, [r3, #0]
 80035a8:	021b      	lsls	r3, r3, #8
 80035aa:	4313      	orrs	r3, r2
 80035ac:	687a      	ldr	r2, [r7, #4]
 80035ae:	7812      	ldrb	r2, [r2, #0]
 80035b0:	4610      	mov	r0, r2
 80035b2:	68fa      	ldr	r2, [r7, #12]
 80035b4:	6811      	ldr	r1, [r2, #0]
 80035b6:	ea43 0200 	orr.w	r2, r3, r0
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	011b      	lsls	r3, r3, #4
 80035be:	440b      	add	r3, r1
 80035c0:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80035c4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	3318      	adds	r3, #24
 80035ce:	011b      	lsls	r3, r3, #4
 80035d0:	4413      	add	r3, r2
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	68fa      	ldr	r2, [r7, #12]
 80035d6:	6811      	ldr	r1, [r2, #0]
 80035d8:	f043 0201 	orr.w	r2, r3, #1
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	3318      	adds	r3, #24
 80035e0:	011b      	lsls	r3, r3, #4
 80035e2:	440b      	add	r3, r1
 80035e4:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80035e6:	2300      	movs	r3, #0
 80035e8:	e00e      	b.n	8003608 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ee:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	e006      	b.n	8003608 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035fe:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003606:	2301      	movs	r3, #1
  }
}
 8003608:	4618      	mov	r0, r3
 800360a:	3724      	adds	r7, #36	; 0x24
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr

08003614 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 8003614:	b480      	push	{r7}
 8003616:	b085      	sub	sp, #20
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 800361c:	2300      	movs	r3, #0
 800361e:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003626:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8003628:	7afb      	ldrb	r3, [r7, #11]
 800362a:	2b01      	cmp	r3, #1
 800362c:	d002      	beq.n	8003634 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 800362e:	7afb      	ldrb	r3, [r7, #11]
 8003630:	2b02      	cmp	r3, #2
 8003632:	d11d      	bne.n	8003670 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800363e:	2b00      	cmp	r3, #0
 8003640:	d002      	beq.n	8003648 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	3301      	adds	r3, #1
 8003646:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003652:	2b00      	cmp	r3, #0
 8003654:	d002      	beq.n	800365c <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	3301      	adds	r3, #1
 800365a:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003666:	2b00      	cmp	r3, #0
 8003668:	d002      	beq.n	8003670 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	3301      	adds	r3, #1
 800366e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8003670:	68fb      	ldr	r3, [r7, #12]
}
 8003672:	4618      	mov	r0, r3
 8003674:	3714      	adds	r7, #20
 8003676:	46bd      	mov	sp, r7
 8003678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367c:	4770      	bx	lr

0800367e <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800367e:	b480      	push	{r7}
 8003680:	b087      	sub	sp, #28
 8003682:	af00      	add	r7, sp, #0
 8003684:	60f8      	str	r0, [r7, #12]
 8003686:	60b9      	str	r1, [r7, #8]
 8003688:	607a      	str	r2, [r7, #4]
 800368a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003692:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003694:	7dfb      	ldrb	r3, [r7, #23]
 8003696:	2b01      	cmp	r3, #1
 8003698:	d003      	beq.n	80036a2 <HAL_CAN_GetRxMessage+0x24>
 800369a:	7dfb      	ldrb	r3, [r7, #23]
 800369c:	2b02      	cmp	r3, #2
 800369e:	f040 80f3 	bne.w	8003888 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d10e      	bne.n	80036c6 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	68db      	ldr	r3, [r3, #12]
 80036ae:	f003 0303 	and.w	r3, r3, #3
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d116      	bne.n	80036e4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ba:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	e0e7      	b.n	8003896 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	691b      	ldr	r3, [r3, #16]
 80036cc:	f003 0303 	and.w	r3, r3, #3
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d107      	bne.n	80036e4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	e0d8      	b.n	8003896 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	331b      	adds	r3, #27
 80036ec:	011b      	lsls	r3, r3, #4
 80036ee:	4413      	add	r3, r2
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f003 0204 	and.w	r2, r3, #4
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d10c      	bne.n	800371c <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	331b      	adds	r3, #27
 800370a:	011b      	lsls	r3, r3, #4
 800370c:	4413      	add	r3, r2
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	0d5b      	lsrs	r3, r3, #21
 8003712:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	601a      	str	r2, [r3, #0]
 800371a:	e00b      	b.n	8003734 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681a      	ldr	r2, [r3, #0]
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	331b      	adds	r3, #27
 8003724:	011b      	lsls	r3, r3, #4
 8003726:	4413      	add	r3, r2
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	08db      	lsrs	r3, r3, #3
 800372c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681a      	ldr	r2, [r3, #0]
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	331b      	adds	r3, #27
 800373c:	011b      	lsls	r3, r3, #4
 800373e:	4413      	add	r3, r2
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 0202 	and.w	r2, r3, #2
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	331b      	adds	r3, #27
 8003752:	011b      	lsls	r3, r3, #4
 8003754:	4413      	add	r3, r2
 8003756:	3304      	adds	r3, #4
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f003 020f 	and.w	r2, r3, #15
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	331b      	adds	r3, #27
 800376a:	011b      	lsls	r3, r3, #4
 800376c:	4413      	add	r3, r2
 800376e:	3304      	adds	r3, #4
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	0a1b      	lsrs	r3, r3, #8
 8003774:	b2da      	uxtb	r2, r3
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	331b      	adds	r3, #27
 8003782:	011b      	lsls	r3, r3, #4
 8003784:	4413      	add	r3, r2
 8003786:	3304      	adds	r3, #4
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	0c1b      	lsrs	r3, r3, #16
 800378c:	b29a      	uxth	r2, r3
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681a      	ldr	r2, [r3, #0]
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	011b      	lsls	r3, r3, #4
 800379a:	4413      	add	r3, r2
 800379c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	b2da      	uxtb	r2, r3
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	011b      	lsls	r3, r3, #4
 80037b0:	4413      	add	r3, r2
 80037b2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	0a1a      	lsrs	r2, r3, #8
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	3301      	adds	r3, #1
 80037be:	b2d2      	uxtb	r2, r2
 80037c0:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	011b      	lsls	r3, r3, #4
 80037ca:	4413      	add	r3, r2
 80037cc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	0c1a      	lsrs	r2, r3, #16
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	3302      	adds	r3, #2
 80037d8:	b2d2      	uxtb	r2, r2
 80037da:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	011b      	lsls	r3, r3, #4
 80037e4:	4413      	add	r3, r2
 80037e6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	0e1a      	lsrs	r2, r3, #24
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	3303      	adds	r3, #3
 80037f2:	b2d2      	uxtb	r2, r2
 80037f4:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681a      	ldr	r2, [r3, #0]
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	011b      	lsls	r3, r3, #4
 80037fe:	4413      	add	r3, r2
 8003800:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	3304      	adds	r3, #4
 800380a:	b2d2      	uxtb	r2, r2
 800380c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	011b      	lsls	r3, r3, #4
 8003816:	4413      	add	r3, r2
 8003818:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	0a1a      	lsrs	r2, r3, #8
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	3305      	adds	r3, #5
 8003824:	b2d2      	uxtb	r2, r2
 8003826:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681a      	ldr	r2, [r3, #0]
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	011b      	lsls	r3, r3, #4
 8003830:	4413      	add	r3, r2
 8003832:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	0c1a      	lsrs	r2, r3, #16
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	3306      	adds	r3, #6
 800383e:	b2d2      	uxtb	r2, r2
 8003840:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681a      	ldr	r2, [r3, #0]
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	011b      	lsls	r3, r3, #4
 800384a:	4413      	add	r3, r2
 800384c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	0e1a      	lsrs	r2, r3, #24
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	3307      	adds	r3, #7
 8003858:	b2d2      	uxtb	r2, r2
 800385a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d108      	bne.n	8003874 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	68da      	ldr	r2, [r3, #12]
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f042 0220 	orr.w	r2, r2, #32
 8003870:	60da      	str	r2, [r3, #12]
 8003872:	e007      	b.n	8003884 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	691a      	ldr	r2, [r3, #16]
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f042 0220 	orr.w	r2, r2, #32
 8003882:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003884:	2300      	movs	r3, #0
 8003886:	e006      	b.n	8003896 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800388c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003894:	2301      	movs	r3, #1
  }
}
 8003896:	4618      	mov	r0, r3
 8003898:	371c      	adds	r7, #28
 800389a:	46bd      	mov	sp, r7
 800389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a0:	4770      	bx	lr

080038a2 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80038a2:	b480      	push	{r7}
 80038a4:	b085      	sub	sp, #20
 80038a6:	af00      	add	r7, sp, #0
 80038a8:	6078      	str	r0, [r7, #4]
 80038aa:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	f893 3020 	ldrb.w	r3, [r3, #32]
 80038b2:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80038b4:	7bfb      	ldrb	r3, [r7, #15]
 80038b6:	2b01      	cmp	r3, #1
 80038b8:	d002      	beq.n	80038c0 <HAL_CAN_ActivateNotification+0x1e>
 80038ba:	7bfb      	ldrb	r3, [r7, #15]
 80038bc:	2b02      	cmp	r3, #2
 80038be:	d109      	bne.n	80038d4 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	6959      	ldr	r1, [r3, #20]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	683a      	ldr	r2, [r7, #0]
 80038cc:	430a      	orrs	r2, r1
 80038ce:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80038d0:	2300      	movs	r3, #0
 80038d2:	e006      	b.n	80038e2 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80038e0:	2301      	movs	r3, #1
  }
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3714      	adds	r7, #20
 80038e6:	46bd      	mov	sp, r7
 80038e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ec:	4770      	bx	lr

080038ee <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80038ee:	b580      	push	{r7, lr}
 80038f0:	b08a      	sub	sp, #40	; 0x28
 80038f2:	af00      	add	r7, sp, #0
 80038f4:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80038f6:	2300      	movs	r3, #0
 80038f8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	695b      	ldr	r3, [r3, #20]
 8003900:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	68db      	ldr	r3, [r3, #12]
 8003918:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	691b      	ldr	r3, [r3, #16]
 8003920:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	699b      	ldr	r3, [r3, #24]
 8003928:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800392a:	6a3b      	ldr	r3, [r7, #32]
 800392c:	f003 0301 	and.w	r3, r3, #1
 8003930:	2b00      	cmp	r3, #0
 8003932:	d07c      	beq.n	8003a2e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003934:	69bb      	ldr	r3, [r7, #24]
 8003936:	f003 0301 	and.w	r3, r3, #1
 800393a:	2b00      	cmp	r3, #0
 800393c:	d023      	beq.n	8003986 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	2201      	movs	r2, #1
 8003944:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003946:	69bb      	ldr	r3, [r7, #24]
 8003948:	f003 0302 	and.w	r3, r3, #2
 800394c:	2b00      	cmp	r3, #0
 800394e:	d003      	beq.n	8003958 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003950:	6878      	ldr	r0, [r7, #4]
 8003952:	f7fe fa81 	bl	8001e58 <HAL_CAN_TxMailbox0CompleteCallback>
 8003956:	e016      	b.n	8003986 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003958:	69bb      	ldr	r3, [r7, #24]
 800395a:	f003 0304 	and.w	r3, r3, #4
 800395e:	2b00      	cmp	r3, #0
 8003960:	d004      	beq.n	800396c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003964:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003968:	627b      	str	r3, [r7, #36]	; 0x24
 800396a:	e00c      	b.n	8003986 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800396c:	69bb      	ldr	r3, [r7, #24]
 800396e:	f003 0308 	and.w	r3, r3, #8
 8003972:	2b00      	cmp	r3, #0
 8003974:	d004      	beq.n	8003980 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003978:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800397c:	627b      	str	r3, [r7, #36]	; 0x24
 800397e:	e002      	b.n	8003986 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003980:	6878      	ldr	r0, [r7, #4]
 8003982:	f7fe fa77 	bl	8001e74 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003986:	69bb      	ldr	r3, [r7, #24]
 8003988:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800398c:	2b00      	cmp	r3, #0
 800398e:	d024      	beq.n	80039da <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003998:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800399a:	69bb      	ldr	r3, [r7, #24]
 800399c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d003      	beq.n	80039ac <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80039a4:	6878      	ldr	r0, [r7, #4]
 80039a6:	f7fe fa73 	bl	8001e90 <HAL_CAN_TxMailbox1CompleteCallback>
 80039aa:	e016      	b.n	80039da <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80039ac:	69bb      	ldr	r3, [r7, #24]
 80039ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d004      	beq.n	80039c0 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80039b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80039bc:	627b      	str	r3, [r7, #36]	; 0x24
 80039be:	e00c      	b.n	80039da <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80039c0:	69bb      	ldr	r3, [r7, #24]
 80039c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d004      	beq.n	80039d4 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80039ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80039d0:	627b      	str	r3, [r7, #36]	; 0x24
 80039d2:	e002      	b.n	80039da <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80039d4:	6878      	ldr	r0, [r7, #4]
 80039d6:	f7fe fa69 	bl	8001eac <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80039da:	69bb      	ldr	r3, [r7, #24]
 80039dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d024      	beq.n	8003a2e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80039ec:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80039ee:	69bb      	ldr	r3, [r7, #24]
 80039f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d003      	beq.n	8003a00 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80039f8:	6878      	ldr	r0, [r7, #4]
 80039fa:	f7fe fa65 	bl	8001ec8 <HAL_CAN_TxMailbox2CompleteCallback>
 80039fe:	e016      	b.n	8003a2e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003a00:	69bb      	ldr	r3, [r7, #24]
 8003a02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d004      	beq.n	8003a14 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a10:	627b      	str	r3, [r7, #36]	; 0x24
 8003a12:	e00c      	b.n	8003a2e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003a14:	69bb      	ldr	r3, [r7, #24]
 8003a16:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d004      	beq.n	8003a28 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a24:	627b      	str	r3, [r7, #36]	; 0x24
 8003a26:	e002      	b.n	8003a2e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003a28:	6878      	ldr	r0, [r7, #4]
 8003a2a:	f7fe fa5b 	bl	8001ee4 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003a2e:	6a3b      	ldr	r3, [r7, #32]
 8003a30:	f003 0308 	and.w	r3, r3, #8
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d00c      	beq.n	8003a52 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	f003 0310 	and.w	r3, r3, #16
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d007      	beq.n	8003a52 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a44:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003a48:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	2210      	movs	r2, #16
 8003a50:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003a52:	6a3b      	ldr	r3, [r7, #32]
 8003a54:	f003 0304 	and.w	r3, r3, #4
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d00b      	beq.n	8003a74 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	f003 0308 	and.w	r3, r3, #8
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d006      	beq.n	8003a74 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	2208      	movs	r2, #8
 8003a6c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f000 f8f4 	bl	8003c5c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003a74:	6a3b      	ldr	r3, [r7, #32]
 8003a76:	f003 0302 	and.w	r3, r3, #2
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d009      	beq.n	8003a92 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	68db      	ldr	r3, [r3, #12]
 8003a84:	f003 0303 	and.w	r3, r3, #3
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d002      	beq.n	8003a92 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003a8c:	6878      	ldr	r0, [r7, #4]
 8003a8e:	f7fe fa37 	bl	8001f00 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003a92:	6a3b      	ldr	r3, [r7, #32]
 8003a94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d00c      	beq.n	8003ab6 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	f003 0310 	and.w	r3, r3, #16
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d007      	beq.n	8003ab6 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003aac:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	2210      	movs	r2, #16
 8003ab4:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003ab6:	6a3b      	ldr	r3, [r7, #32]
 8003ab8:	f003 0320 	and.w	r3, r3, #32
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d00b      	beq.n	8003ad8 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	f003 0308 	and.w	r3, r3, #8
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d006      	beq.n	8003ad8 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	2208      	movs	r2, #8
 8003ad0:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	f000 f8cc 	bl	8003c70 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003ad8:	6a3b      	ldr	r3, [r7, #32]
 8003ada:	f003 0310 	and.w	r3, r3, #16
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d009      	beq.n	8003af6 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	691b      	ldr	r3, [r3, #16]
 8003ae8:	f003 0303 	and.w	r3, r3, #3
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d002      	beq.n	8003af6 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003af0:	6878      	ldr	r0, [r7, #4]
 8003af2:	f7fe fa13 	bl	8001f1c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003af6:	6a3b      	ldr	r3, [r7, #32]
 8003af8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d00b      	beq.n	8003b18 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003b00:	69fb      	ldr	r3, [r7, #28]
 8003b02:	f003 0310 	and.w	r3, r3, #16
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d006      	beq.n	8003b18 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	2210      	movs	r2, #16
 8003b10:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	f000 f8b6 	bl	8003c84 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003b18:	6a3b      	ldr	r3, [r7, #32]
 8003b1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d00b      	beq.n	8003b3a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003b22:	69fb      	ldr	r3, [r7, #28]
 8003b24:	f003 0308 	and.w	r3, r3, #8
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d006      	beq.n	8003b3a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	2208      	movs	r2, #8
 8003b32:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003b34:	6878      	ldr	r0, [r7, #4]
 8003b36:	f000 f8af 	bl	8003c98 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003b3a:	6a3b      	ldr	r3, [r7, #32]
 8003b3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d07b      	beq.n	8003c3c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003b44:	69fb      	ldr	r3, [r7, #28]
 8003b46:	f003 0304 	and.w	r3, r3, #4
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d072      	beq.n	8003c34 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003b4e:	6a3b      	ldr	r3, [r7, #32]
 8003b50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d008      	beq.n	8003b6a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d003      	beq.n	8003b6a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b64:	f043 0301 	orr.w	r3, r3, #1
 8003b68:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003b6a:	6a3b      	ldr	r3, [r7, #32]
 8003b6c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d008      	beq.n	8003b86 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d003      	beq.n	8003b86 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b80:	f043 0302 	orr.w	r3, r3, #2
 8003b84:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003b86:	6a3b      	ldr	r3, [r7, #32]
 8003b88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d008      	beq.n	8003ba2 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d003      	beq.n	8003ba2 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b9c:	f043 0304 	orr.w	r3, r3, #4
 8003ba0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003ba2:	6a3b      	ldr	r3, [r7, #32]
 8003ba4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d043      	beq.n	8003c34 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d03e      	beq.n	8003c34 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003bbc:	2b60      	cmp	r3, #96	; 0x60
 8003bbe:	d02b      	beq.n	8003c18 <HAL_CAN_IRQHandler+0x32a>
 8003bc0:	2b60      	cmp	r3, #96	; 0x60
 8003bc2:	d82e      	bhi.n	8003c22 <HAL_CAN_IRQHandler+0x334>
 8003bc4:	2b50      	cmp	r3, #80	; 0x50
 8003bc6:	d022      	beq.n	8003c0e <HAL_CAN_IRQHandler+0x320>
 8003bc8:	2b50      	cmp	r3, #80	; 0x50
 8003bca:	d82a      	bhi.n	8003c22 <HAL_CAN_IRQHandler+0x334>
 8003bcc:	2b40      	cmp	r3, #64	; 0x40
 8003bce:	d019      	beq.n	8003c04 <HAL_CAN_IRQHandler+0x316>
 8003bd0:	2b40      	cmp	r3, #64	; 0x40
 8003bd2:	d826      	bhi.n	8003c22 <HAL_CAN_IRQHandler+0x334>
 8003bd4:	2b30      	cmp	r3, #48	; 0x30
 8003bd6:	d010      	beq.n	8003bfa <HAL_CAN_IRQHandler+0x30c>
 8003bd8:	2b30      	cmp	r3, #48	; 0x30
 8003bda:	d822      	bhi.n	8003c22 <HAL_CAN_IRQHandler+0x334>
 8003bdc:	2b10      	cmp	r3, #16
 8003bde:	d002      	beq.n	8003be6 <HAL_CAN_IRQHandler+0x2f8>
 8003be0:	2b20      	cmp	r3, #32
 8003be2:	d005      	beq.n	8003bf0 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003be4:	e01d      	b.n	8003c22 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be8:	f043 0308 	orr.w	r3, r3, #8
 8003bec:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003bee:	e019      	b.n	8003c24 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf2:	f043 0310 	orr.w	r3, r3, #16
 8003bf6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003bf8:	e014      	b.n	8003c24 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bfc:	f043 0320 	orr.w	r3, r3, #32
 8003c00:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003c02:	e00f      	b.n	8003c24 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c0a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003c0c:	e00a      	b.n	8003c24 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c14:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003c16:	e005      	b.n	8003c24 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c1e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003c20:	e000      	b.n	8003c24 <HAL_CAN_IRQHandler+0x336>
            break;
 8003c22:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	699a      	ldr	r2, [r3, #24]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003c32:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	2204      	movs	r2, #4
 8003c3a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d008      	beq.n	8003c54 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c48:	431a      	orrs	r2, r3
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f000 f82c 	bl	8003cac <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003c54:	bf00      	nop
 8003c56:	3728      	adds	r7, #40	; 0x28
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd80      	pop	{r7, pc}

08003c5c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b083      	sub	sp, #12
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003c64:	bf00      	nop
 8003c66:	370c      	adds	r7, #12
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6e:	4770      	bx	lr

08003c70 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b083      	sub	sp, #12
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003c78:	bf00      	nop
 8003c7a:	370c      	adds	r7, #12
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c82:	4770      	bx	lr

08003c84 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b083      	sub	sp, #12
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003c8c:	bf00      	nop
 8003c8e:	370c      	adds	r7, #12
 8003c90:	46bd      	mov	sp, r7
 8003c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c96:	4770      	bx	lr

08003c98 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b083      	sub	sp, #12
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003ca0:	bf00      	nop
 8003ca2:	370c      	adds	r7, #12
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003caa:	4770      	bx	lr

08003cac <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b083      	sub	sp, #12
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003cb4:	bf00      	nop
 8003cb6:	370c      	adds	r7, #12
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbe:	4770      	bx	lr

08003cc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b085      	sub	sp, #20
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	f003 0307 	and.w	r3, r3, #7
 8003cce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003cd0:	4b0b      	ldr	r3, [pc, #44]	; (8003d00 <__NVIC_SetPriorityGrouping+0x40>)
 8003cd2:	68db      	ldr	r3, [r3, #12]
 8003cd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003cd6:	68ba      	ldr	r2, [r7, #8]
 8003cd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003cdc:	4013      	ands	r3, r2
 8003cde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003ce8:	4b06      	ldr	r3, [pc, #24]	; (8003d04 <__NVIC_SetPriorityGrouping+0x44>)
 8003cea:	4313      	orrs	r3, r2
 8003cec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003cee:	4a04      	ldr	r2, [pc, #16]	; (8003d00 <__NVIC_SetPriorityGrouping+0x40>)
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	60d3      	str	r3, [r2, #12]
}
 8003cf4:	bf00      	nop
 8003cf6:	3714      	adds	r7, #20
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfe:	4770      	bx	lr
 8003d00:	e000ed00 	.word	0xe000ed00
 8003d04:	05fa0000 	.word	0x05fa0000

08003d08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d0c:	4b04      	ldr	r3, [pc, #16]	; (8003d20 <__NVIC_GetPriorityGrouping+0x18>)
 8003d0e:	68db      	ldr	r3, [r3, #12]
 8003d10:	0a1b      	lsrs	r3, r3, #8
 8003d12:	f003 0307 	and.w	r3, r3, #7
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1e:	4770      	bx	lr
 8003d20:	e000ed00 	.word	0xe000ed00

08003d24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b083      	sub	sp, #12
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	db0b      	blt.n	8003d4e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d36:	79fb      	ldrb	r3, [r7, #7]
 8003d38:	f003 021f 	and.w	r2, r3, #31
 8003d3c:	4907      	ldr	r1, [pc, #28]	; (8003d5c <__NVIC_EnableIRQ+0x38>)
 8003d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d42:	095b      	lsrs	r3, r3, #5
 8003d44:	2001      	movs	r0, #1
 8003d46:	fa00 f202 	lsl.w	r2, r0, r2
 8003d4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003d4e:	bf00      	nop
 8003d50:	370c      	adds	r7, #12
 8003d52:	46bd      	mov	sp, r7
 8003d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d58:	4770      	bx	lr
 8003d5a:	bf00      	nop
 8003d5c:	e000e100 	.word	0xe000e100

08003d60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b083      	sub	sp, #12
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	4603      	mov	r3, r0
 8003d68:	6039      	str	r1, [r7, #0]
 8003d6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	db0a      	blt.n	8003d8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	b2da      	uxtb	r2, r3
 8003d78:	490c      	ldr	r1, [pc, #48]	; (8003dac <__NVIC_SetPriority+0x4c>)
 8003d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d7e:	0112      	lsls	r2, r2, #4
 8003d80:	b2d2      	uxtb	r2, r2
 8003d82:	440b      	add	r3, r1
 8003d84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d88:	e00a      	b.n	8003da0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	b2da      	uxtb	r2, r3
 8003d8e:	4908      	ldr	r1, [pc, #32]	; (8003db0 <__NVIC_SetPriority+0x50>)
 8003d90:	79fb      	ldrb	r3, [r7, #7]
 8003d92:	f003 030f 	and.w	r3, r3, #15
 8003d96:	3b04      	subs	r3, #4
 8003d98:	0112      	lsls	r2, r2, #4
 8003d9a:	b2d2      	uxtb	r2, r2
 8003d9c:	440b      	add	r3, r1
 8003d9e:	761a      	strb	r2, [r3, #24]
}
 8003da0:	bf00      	nop
 8003da2:	370c      	adds	r7, #12
 8003da4:	46bd      	mov	sp, r7
 8003da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003daa:	4770      	bx	lr
 8003dac:	e000e100 	.word	0xe000e100
 8003db0:	e000ed00 	.word	0xe000ed00

08003db4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b089      	sub	sp, #36	; 0x24
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	60f8      	str	r0, [r7, #12]
 8003dbc:	60b9      	str	r1, [r7, #8]
 8003dbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	f003 0307 	and.w	r3, r3, #7
 8003dc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003dc8:	69fb      	ldr	r3, [r7, #28]
 8003dca:	f1c3 0307 	rsb	r3, r3, #7
 8003dce:	2b04      	cmp	r3, #4
 8003dd0:	bf28      	it	cs
 8003dd2:	2304      	movcs	r3, #4
 8003dd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003dd6:	69fb      	ldr	r3, [r7, #28]
 8003dd8:	3304      	adds	r3, #4
 8003dda:	2b06      	cmp	r3, #6
 8003ddc:	d902      	bls.n	8003de4 <NVIC_EncodePriority+0x30>
 8003dde:	69fb      	ldr	r3, [r7, #28]
 8003de0:	3b03      	subs	r3, #3
 8003de2:	e000      	b.n	8003de6 <NVIC_EncodePriority+0x32>
 8003de4:	2300      	movs	r3, #0
 8003de6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003de8:	f04f 32ff 	mov.w	r2, #4294967295
 8003dec:	69bb      	ldr	r3, [r7, #24]
 8003dee:	fa02 f303 	lsl.w	r3, r2, r3
 8003df2:	43da      	mvns	r2, r3
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	401a      	ands	r2, r3
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003dfc:	f04f 31ff 	mov.w	r1, #4294967295
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	fa01 f303 	lsl.w	r3, r1, r3
 8003e06:	43d9      	mvns	r1, r3
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e0c:	4313      	orrs	r3, r2
         );
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	3724      	adds	r7, #36	; 0x24
 8003e12:	46bd      	mov	sp, r7
 8003e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e18:	4770      	bx	lr
	...

08003e1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b082      	sub	sp, #8
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	3b01      	subs	r3, #1
 8003e28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003e2c:	d301      	bcc.n	8003e32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e00f      	b.n	8003e52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003e32:	4a0a      	ldr	r2, [pc, #40]	; (8003e5c <SysTick_Config+0x40>)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	3b01      	subs	r3, #1
 8003e38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003e3a:	210f      	movs	r1, #15
 8003e3c:	f04f 30ff 	mov.w	r0, #4294967295
 8003e40:	f7ff ff8e 	bl	8003d60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003e44:	4b05      	ldr	r3, [pc, #20]	; (8003e5c <SysTick_Config+0x40>)
 8003e46:	2200      	movs	r2, #0
 8003e48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003e4a:	4b04      	ldr	r3, [pc, #16]	; (8003e5c <SysTick_Config+0x40>)
 8003e4c:	2207      	movs	r2, #7
 8003e4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003e50:	2300      	movs	r3, #0
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	3708      	adds	r7, #8
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}
 8003e5a:	bf00      	nop
 8003e5c:	e000e010 	.word	0xe000e010

08003e60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b082      	sub	sp, #8
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e68:	6878      	ldr	r0, [r7, #4]
 8003e6a:	f7ff ff29 	bl	8003cc0 <__NVIC_SetPriorityGrouping>
}
 8003e6e:	bf00      	nop
 8003e70:	3708      	adds	r7, #8
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}

08003e76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003e76:	b580      	push	{r7, lr}
 8003e78:	b086      	sub	sp, #24
 8003e7a:	af00      	add	r7, sp, #0
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	60b9      	str	r1, [r7, #8]
 8003e80:	607a      	str	r2, [r7, #4]
 8003e82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003e84:	2300      	movs	r3, #0
 8003e86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003e88:	f7ff ff3e 	bl	8003d08 <__NVIC_GetPriorityGrouping>
 8003e8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e8e:	687a      	ldr	r2, [r7, #4]
 8003e90:	68b9      	ldr	r1, [r7, #8]
 8003e92:	6978      	ldr	r0, [r7, #20]
 8003e94:	f7ff ff8e 	bl	8003db4 <NVIC_EncodePriority>
 8003e98:	4602      	mov	r2, r0
 8003e9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e9e:	4611      	mov	r1, r2
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	f7ff ff5d 	bl	8003d60 <__NVIC_SetPriority>
}
 8003ea6:	bf00      	nop
 8003ea8:	3718      	adds	r7, #24
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}

08003eae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003eae:	b580      	push	{r7, lr}
 8003eb0:	b082      	sub	sp, #8
 8003eb2:	af00      	add	r7, sp, #0
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003eb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f7ff ff31 	bl	8003d24 <__NVIC_EnableIRQ>
}
 8003ec2:	bf00      	nop
 8003ec4:	3708      	adds	r7, #8
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}

08003eca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003eca:	b580      	push	{r7, lr}
 8003ecc:	b082      	sub	sp, #8
 8003ece:	af00      	add	r7, sp, #0
 8003ed0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f7ff ffa2 	bl	8003e1c <SysTick_Config>
 8003ed8:	4603      	mov	r3, r0
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	3708      	adds	r7, #8
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}
	...

08003ee4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b086      	sub	sp, #24
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003eec:	2300      	movs	r3, #0
 8003eee:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003ef0:	f7ff f864 	bl	8002fbc <HAL_GetTick>
 8003ef4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d101      	bne.n	8003f00 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	e099      	b.n	8004034 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2202      	movs	r2, #2
 8003f04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	681a      	ldr	r2, [r3, #0]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f022 0201 	bic.w	r2, r2, #1
 8003f1e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f20:	e00f      	b.n	8003f42 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003f22:	f7ff f84b 	bl	8002fbc <HAL_GetTick>
 8003f26:	4602      	mov	r2, r0
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	1ad3      	subs	r3, r2, r3
 8003f2c:	2b05      	cmp	r3, #5
 8003f2e:	d908      	bls.n	8003f42 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2220      	movs	r2, #32
 8003f34:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2203      	movs	r2, #3
 8003f3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003f3e:	2303      	movs	r3, #3
 8003f40:	e078      	b.n	8004034 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f003 0301 	and.w	r3, r3, #1
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d1e8      	bne.n	8003f22 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003f58:	697a      	ldr	r2, [r7, #20]
 8003f5a:	4b38      	ldr	r3, [pc, #224]	; (800403c <HAL_DMA_Init+0x158>)
 8003f5c:	4013      	ands	r3, r2
 8003f5e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	685a      	ldr	r2, [r3, #4]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003f6e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	691b      	ldr	r3, [r3, #16]
 8003f74:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f7a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	699b      	ldr	r3, [r3, #24]
 8003f80:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f86:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6a1b      	ldr	r3, [r3, #32]
 8003f8c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003f8e:	697a      	ldr	r2, [r7, #20]
 8003f90:	4313      	orrs	r3, r2
 8003f92:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f98:	2b04      	cmp	r3, #4
 8003f9a:	d107      	bne.n	8003fac <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	697a      	ldr	r2, [r7, #20]
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	697a      	ldr	r2, [r7, #20]
 8003fb2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	695b      	ldr	r3, [r3, #20]
 8003fba:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	f023 0307 	bic.w	r3, r3, #7
 8003fc2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc8:	697a      	ldr	r2, [r7, #20]
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd2:	2b04      	cmp	r3, #4
 8003fd4:	d117      	bne.n	8004006 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fda:	697a      	ldr	r2, [r7, #20]
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d00e      	beq.n	8004006 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003fe8:	6878      	ldr	r0, [r7, #4]
 8003fea:	f000 fa7b 	bl	80044e4 <DMA_CheckFifoParam>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d008      	beq.n	8004006 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2240      	movs	r2, #64	; 0x40
 8003ff8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004002:	2301      	movs	r3, #1
 8004004:	e016      	b.n	8004034 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	697a      	ldr	r2, [r7, #20]
 800400c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800400e:	6878      	ldr	r0, [r7, #4]
 8004010:	f000 fa32 	bl	8004478 <DMA_CalcBaseAndBitshift>
 8004014:	4603      	mov	r3, r0
 8004016:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800401c:	223f      	movs	r2, #63	; 0x3f
 800401e:	409a      	lsls	r2, r3
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2200      	movs	r2, #0
 8004028:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2201      	movs	r2, #1
 800402e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004032:	2300      	movs	r3, #0
}
 8004034:	4618      	mov	r0, r3
 8004036:	3718      	adds	r7, #24
 8004038:	46bd      	mov	sp, r7
 800403a:	bd80      	pop	{r7, pc}
 800403c:	e010803f 	.word	0xe010803f

08004040 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b084      	sub	sp, #16
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800404c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800404e:	f7fe ffb5 	bl	8002fbc <HAL_GetTick>
 8004052:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800405a:	b2db      	uxtb	r3, r3
 800405c:	2b02      	cmp	r3, #2
 800405e:	d008      	beq.n	8004072 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2280      	movs	r2, #128	; 0x80
 8004064:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2200      	movs	r2, #0
 800406a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	e052      	b.n	8004118 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f022 0216 	bic.w	r2, r2, #22
 8004080:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	695a      	ldr	r2, [r3, #20]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004090:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004096:	2b00      	cmp	r3, #0
 8004098:	d103      	bne.n	80040a2 <HAL_DMA_Abort+0x62>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d007      	beq.n	80040b2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	681a      	ldr	r2, [r3, #0]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f022 0208 	bic.w	r2, r2, #8
 80040b0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	681a      	ldr	r2, [r3, #0]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f022 0201 	bic.w	r2, r2, #1
 80040c0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80040c2:	e013      	b.n	80040ec <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80040c4:	f7fe ff7a 	bl	8002fbc <HAL_GetTick>
 80040c8:	4602      	mov	r2, r0
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	1ad3      	subs	r3, r2, r3
 80040ce:	2b05      	cmp	r3, #5
 80040d0:	d90c      	bls.n	80040ec <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2220      	movs	r2, #32
 80040d6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2203      	movs	r2, #3
 80040dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2200      	movs	r2, #0
 80040e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80040e8:	2303      	movs	r3, #3
 80040ea:	e015      	b.n	8004118 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f003 0301 	and.w	r3, r3, #1
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d1e4      	bne.n	80040c4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040fe:	223f      	movs	r2, #63	; 0x3f
 8004100:	409a      	lsls	r2, r3
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2201      	movs	r2, #1
 800410a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2200      	movs	r2, #0
 8004112:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8004116:	2300      	movs	r3, #0
}
 8004118:	4618      	mov	r0, r3
 800411a:	3710      	adds	r7, #16
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}

08004120 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004120:	b480      	push	{r7}
 8004122:	b083      	sub	sp, #12
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800412e:	b2db      	uxtb	r3, r3
 8004130:	2b02      	cmp	r3, #2
 8004132:	d004      	beq.n	800413e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2280      	movs	r2, #128	; 0x80
 8004138:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	e00c      	b.n	8004158 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2205      	movs	r2, #5
 8004142:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	681a      	ldr	r2, [r3, #0]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f022 0201 	bic.w	r2, r2, #1
 8004154:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004156:	2300      	movs	r3, #0
}
 8004158:	4618      	mov	r0, r3
 800415a:	370c      	adds	r7, #12
 800415c:	46bd      	mov	sp, r7
 800415e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004162:	4770      	bx	lr

08004164 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b086      	sub	sp, #24
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 800416c:	2300      	movs	r3, #0
 800416e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8004170:	4b8e      	ldr	r3, [pc, #568]	; (80043ac <HAL_DMA_IRQHandler+0x248>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a8e      	ldr	r2, [pc, #568]	; (80043b0 <HAL_DMA_IRQHandler+0x24c>)
 8004176:	fba2 2303 	umull	r2, r3, r2, r3
 800417a:	0a9b      	lsrs	r3, r3, #10
 800417c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004182:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800418e:	2208      	movs	r2, #8
 8004190:	409a      	lsls	r2, r3
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	4013      	ands	r3, r2
 8004196:	2b00      	cmp	r3, #0
 8004198:	d01a      	beq.n	80041d0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f003 0304 	and.w	r3, r3, #4
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d013      	beq.n	80041d0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f022 0204 	bic.w	r2, r2, #4
 80041b6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041bc:	2208      	movs	r2, #8
 80041be:	409a      	lsls	r2, r3
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041c8:	f043 0201 	orr.w	r2, r3, #1
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041d4:	2201      	movs	r2, #1
 80041d6:	409a      	lsls	r2, r3
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	4013      	ands	r3, r2
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d012      	beq.n	8004206 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	695b      	ldr	r3, [r3, #20]
 80041e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d00b      	beq.n	8004206 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041f2:	2201      	movs	r2, #1
 80041f4:	409a      	lsls	r2, r3
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041fe:	f043 0202 	orr.w	r2, r3, #2
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800420a:	2204      	movs	r2, #4
 800420c:	409a      	lsls	r2, r3
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	4013      	ands	r3, r2
 8004212:	2b00      	cmp	r3, #0
 8004214:	d012      	beq.n	800423c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f003 0302 	and.w	r3, r3, #2
 8004220:	2b00      	cmp	r3, #0
 8004222:	d00b      	beq.n	800423c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004228:	2204      	movs	r2, #4
 800422a:	409a      	lsls	r2, r3
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004234:	f043 0204 	orr.w	r2, r3, #4
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004240:	2210      	movs	r2, #16
 8004242:	409a      	lsls	r2, r3
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	4013      	ands	r3, r2
 8004248:	2b00      	cmp	r3, #0
 800424a:	d043      	beq.n	80042d4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f003 0308 	and.w	r3, r3, #8
 8004256:	2b00      	cmp	r3, #0
 8004258:	d03c      	beq.n	80042d4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800425e:	2210      	movs	r2, #16
 8004260:	409a      	lsls	r2, r3
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004270:	2b00      	cmp	r3, #0
 8004272:	d018      	beq.n	80042a6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800427e:	2b00      	cmp	r3, #0
 8004280:	d108      	bne.n	8004294 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004286:	2b00      	cmp	r3, #0
 8004288:	d024      	beq.n	80042d4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	4798      	blx	r3
 8004292:	e01f      	b.n	80042d4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004298:	2b00      	cmp	r3, #0
 800429a:	d01b      	beq.n	80042d4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042a0:	6878      	ldr	r0, [r7, #4]
 80042a2:	4798      	blx	r3
 80042a4:	e016      	b.n	80042d4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d107      	bne.n	80042c4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	681a      	ldr	r2, [r3, #0]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f022 0208 	bic.w	r2, r2, #8
 80042c2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d003      	beq.n	80042d4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d0:	6878      	ldr	r0, [r7, #4]
 80042d2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042d8:	2220      	movs	r2, #32
 80042da:	409a      	lsls	r2, r3
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	4013      	ands	r3, r2
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	f000 808f 	beq.w	8004404 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f003 0310 	and.w	r3, r3, #16
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	f000 8087 	beq.w	8004404 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042fa:	2220      	movs	r2, #32
 80042fc:	409a      	lsls	r2, r3
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004308:	b2db      	uxtb	r3, r3
 800430a:	2b05      	cmp	r3, #5
 800430c:	d136      	bne.n	800437c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f022 0216 	bic.w	r2, r2, #22
 800431c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	695a      	ldr	r2, [r3, #20]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800432c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004332:	2b00      	cmp	r3, #0
 8004334:	d103      	bne.n	800433e <HAL_DMA_IRQHandler+0x1da>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800433a:	2b00      	cmp	r3, #0
 800433c:	d007      	beq.n	800434e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f022 0208 	bic.w	r2, r2, #8
 800434c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004352:	223f      	movs	r2, #63	; 0x3f
 8004354:	409a      	lsls	r2, r3
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2201      	movs	r2, #1
 800435e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2200      	movs	r2, #0
 8004366:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800436e:	2b00      	cmp	r3, #0
 8004370:	d07e      	beq.n	8004470 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	4798      	blx	r3
        }
        return;
 800437a:	e079      	b.n	8004470 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004386:	2b00      	cmp	r3, #0
 8004388:	d01d      	beq.n	80043c6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004394:	2b00      	cmp	r3, #0
 8004396:	d10d      	bne.n	80043b4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800439c:	2b00      	cmp	r3, #0
 800439e:	d031      	beq.n	8004404 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	4798      	blx	r3
 80043a8:	e02c      	b.n	8004404 <HAL_DMA_IRQHandler+0x2a0>
 80043aa:	bf00      	nop
 80043ac:	20000004 	.word	0x20000004
 80043b0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d023      	beq.n	8004404 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043c0:	6878      	ldr	r0, [r7, #4]
 80043c2:	4798      	blx	r3
 80043c4:	e01e      	b.n	8004404 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d10f      	bne.n	80043f4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f022 0210 	bic.w	r2, r2, #16
 80043e2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2201      	movs	r2, #1
 80043e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2200      	movs	r2, #0
 80043f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d003      	beq.n	8004404 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004400:	6878      	ldr	r0, [r7, #4]
 8004402:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004408:	2b00      	cmp	r3, #0
 800440a:	d032      	beq.n	8004472 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004410:	f003 0301 	and.w	r3, r3, #1
 8004414:	2b00      	cmp	r3, #0
 8004416:	d022      	beq.n	800445e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2205      	movs	r2, #5
 800441c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	681a      	ldr	r2, [r3, #0]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f022 0201 	bic.w	r2, r2, #1
 800442e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	3301      	adds	r3, #1
 8004434:	60bb      	str	r3, [r7, #8]
 8004436:	697a      	ldr	r2, [r7, #20]
 8004438:	429a      	cmp	r2, r3
 800443a:	d307      	bcc.n	800444c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f003 0301 	and.w	r3, r3, #1
 8004446:	2b00      	cmp	r3, #0
 8004448:	d1f2      	bne.n	8004430 <HAL_DMA_IRQHandler+0x2cc>
 800444a:	e000      	b.n	800444e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800444c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2201      	movs	r2, #1
 8004452:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2200      	movs	r2, #0
 800445a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004462:	2b00      	cmp	r3, #0
 8004464:	d005      	beq.n	8004472 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800446a:	6878      	ldr	r0, [r7, #4]
 800446c:	4798      	blx	r3
 800446e:	e000      	b.n	8004472 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004470:	bf00      	nop
    }
  }
}
 8004472:	3718      	adds	r7, #24
 8004474:	46bd      	mov	sp, r7
 8004476:	bd80      	pop	{r7, pc}

08004478 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004478:	b480      	push	{r7}
 800447a:	b085      	sub	sp, #20
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	b2db      	uxtb	r3, r3
 8004486:	3b10      	subs	r3, #16
 8004488:	4a13      	ldr	r2, [pc, #76]	; (80044d8 <DMA_CalcBaseAndBitshift+0x60>)
 800448a:	fba2 2303 	umull	r2, r3, r2, r3
 800448e:	091b      	lsrs	r3, r3, #4
 8004490:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004492:	4a12      	ldr	r2, [pc, #72]	; (80044dc <DMA_CalcBaseAndBitshift+0x64>)
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	4413      	add	r3, r2
 8004498:	781b      	ldrb	r3, [r3, #0]
 800449a:	461a      	mov	r2, r3
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	2b03      	cmp	r3, #3
 80044a4:	d908      	bls.n	80044b8 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	461a      	mov	r2, r3
 80044ac:	4b0c      	ldr	r3, [pc, #48]	; (80044e0 <DMA_CalcBaseAndBitshift+0x68>)
 80044ae:	4013      	ands	r3, r2
 80044b0:	1d1a      	adds	r2, r3, #4
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	659a      	str	r2, [r3, #88]	; 0x58
 80044b6:	e006      	b.n	80044c6 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	461a      	mov	r2, r3
 80044be:	4b08      	ldr	r3, [pc, #32]	; (80044e0 <DMA_CalcBaseAndBitshift+0x68>)
 80044c0:	4013      	ands	r3, r2
 80044c2:	687a      	ldr	r2, [r7, #4]
 80044c4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	3714      	adds	r7, #20
 80044ce:	46bd      	mov	sp, r7
 80044d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d4:	4770      	bx	lr
 80044d6:	bf00      	nop
 80044d8:	aaaaaaab 	.word	0xaaaaaaab
 80044dc:	08008f64 	.word	0x08008f64
 80044e0:	fffffc00 	.word	0xfffffc00

080044e4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80044e4:	b480      	push	{r7}
 80044e6:	b085      	sub	sp, #20
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044ec:	2300      	movs	r3, #0
 80044ee:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044f4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	699b      	ldr	r3, [r3, #24]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d11f      	bne.n	800453e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	2b03      	cmp	r3, #3
 8004502:	d856      	bhi.n	80045b2 <DMA_CheckFifoParam+0xce>
 8004504:	a201      	add	r2, pc, #4	; (adr r2, 800450c <DMA_CheckFifoParam+0x28>)
 8004506:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800450a:	bf00      	nop
 800450c:	0800451d 	.word	0x0800451d
 8004510:	0800452f 	.word	0x0800452f
 8004514:	0800451d 	.word	0x0800451d
 8004518:	080045b3 	.word	0x080045b3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004520:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004524:	2b00      	cmp	r3, #0
 8004526:	d046      	beq.n	80045b6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004528:	2301      	movs	r3, #1
 800452a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800452c:	e043      	b.n	80045b6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004532:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004536:	d140      	bne.n	80045ba <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004538:	2301      	movs	r3, #1
 800453a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800453c:	e03d      	b.n	80045ba <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	699b      	ldr	r3, [r3, #24]
 8004542:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004546:	d121      	bne.n	800458c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	2b03      	cmp	r3, #3
 800454c:	d837      	bhi.n	80045be <DMA_CheckFifoParam+0xda>
 800454e:	a201      	add	r2, pc, #4	; (adr r2, 8004554 <DMA_CheckFifoParam+0x70>)
 8004550:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004554:	08004565 	.word	0x08004565
 8004558:	0800456b 	.word	0x0800456b
 800455c:	08004565 	.word	0x08004565
 8004560:	0800457d 	.word	0x0800457d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004564:	2301      	movs	r3, #1
 8004566:	73fb      	strb	r3, [r7, #15]
      break;
 8004568:	e030      	b.n	80045cc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800456e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004572:	2b00      	cmp	r3, #0
 8004574:	d025      	beq.n	80045c2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800457a:	e022      	b.n	80045c2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004580:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004584:	d11f      	bne.n	80045c6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800458a:	e01c      	b.n	80045c6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	2b02      	cmp	r3, #2
 8004590:	d903      	bls.n	800459a <DMA_CheckFifoParam+0xb6>
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	2b03      	cmp	r3, #3
 8004596:	d003      	beq.n	80045a0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004598:	e018      	b.n	80045cc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	73fb      	strb	r3, [r7, #15]
      break;
 800459e:	e015      	b.n	80045cc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d00e      	beq.n	80045ca <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80045ac:	2301      	movs	r3, #1
 80045ae:	73fb      	strb	r3, [r7, #15]
      break;
 80045b0:	e00b      	b.n	80045ca <DMA_CheckFifoParam+0xe6>
      break;
 80045b2:	bf00      	nop
 80045b4:	e00a      	b.n	80045cc <DMA_CheckFifoParam+0xe8>
      break;
 80045b6:	bf00      	nop
 80045b8:	e008      	b.n	80045cc <DMA_CheckFifoParam+0xe8>
      break;
 80045ba:	bf00      	nop
 80045bc:	e006      	b.n	80045cc <DMA_CheckFifoParam+0xe8>
      break;
 80045be:	bf00      	nop
 80045c0:	e004      	b.n	80045cc <DMA_CheckFifoParam+0xe8>
      break;
 80045c2:	bf00      	nop
 80045c4:	e002      	b.n	80045cc <DMA_CheckFifoParam+0xe8>
      break;   
 80045c6:	bf00      	nop
 80045c8:	e000      	b.n	80045cc <DMA_CheckFifoParam+0xe8>
      break;
 80045ca:	bf00      	nop
    }
  } 
  
  return status; 
 80045cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	3714      	adds	r7, #20
 80045d2:	46bd      	mov	sp, r7
 80045d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d8:	4770      	bx	lr
 80045da:	bf00      	nop

080045dc <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b084      	sub	sp, #16
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d101      	bne.n	80045ee <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	e06a      	b.n	80046c4 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d106      	bne.n	8004606 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2223      	movs	r2, #35	; 0x23
 80045fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8004600:	6878      	ldr	r0, [r7, #4]
 8004602:	f7fe f965 	bl	80028d0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004606:	4b31      	ldr	r3, [pc, #196]	; (80046cc <HAL_ETH_Init+0xf0>)
 8004608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800460a:	4a30      	ldr	r2, [pc, #192]	; (80046cc <HAL_ETH_Init+0xf0>)
 800460c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004610:	6453      	str	r3, [r2, #68]	; 0x44
 8004612:	4b2e      	ldr	r3, [pc, #184]	; (80046cc <HAL_ETH_Init+0xf0>)
 8004614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004616:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800461a:	60bb      	str	r3, [r7, #8]
 800461c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800461e:	4b2c      	ldr	r3, [pc, #176]	; (80046d0 <HAL_ETH_Init+0xf4>)
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	4a2b      	ldr	r2, [pc, #172]	; (80046d0 <HAL_ETH_Init+0xf4>)
 8004624:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004628:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800462a:	4b29      	ldr	r3, [pc, #164]	; (80046d0 <HAL_ETH_Init+0xf4>)
 800462c:	685a      	ldr	r2, [r3, #4]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	4927      	ldr	r1, [pc, #156]	; (80046d0 <HAL_ETH_Init+0xf4>)
 8004634:	4313      	orrs	r3, r2
 8004636:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8004638:	4b25      	ldr	r3, [pc, #148]	; (80046d0 <HAL_ETH_Init+0xf4>)
 800463a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	687a      	ldr	r2, [r7, #4]
 8004648:	6812      	ldr	r2, [r2, #0]
 800464a:	f043 0301 	orr.w	r3, r3, #1
 800464e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004652:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004654:	f7fe fcb2 	bl	8002fbc <HAL_GetTick>
 8004658:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800465a:	e011      	b.n	8004680 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800465c:	f7fe fcae 	bl	8002fbc <HAL_GetTick>
 8004660:	4602      	mov	r2, r0
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	1ad3      	subs	r3, r2, r3
 8004666:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800466a:	d909      	bls.n	8004680 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2204      	movs	r2, #4
 8004670:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	22e0      	movs	r2, #224	; 0xe0
 8004678:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 800467c:	2301      	movs	r3, #1
 800467e:	e021      	b.n	80046c4 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f003 0301 	and.w	r3, r3, #1
 800468e:	2b00      	cmp	r3, #0
 8004690:	d1e4      	bne.n	800465c <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	f000 f958 	bl	8004948 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8004698:	6878      	ldr	r0, [r7, #4]
 800469a:	f000 f9ff 	bl	8004a9c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	f000 fa55 	bl	8004b4e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	461a      	mov	r2, r3
 80046aa:	2100      	movs	r1, #0
 80046ac:	6878      	ldr	r0, [r7, #4]
 80046ae:	f000 f9bd 	bl	8004a2c <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2200      	movs	r2, #0
 80046b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2210      	movs	r2, #16
 80046be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80046c2:	2300      	movs	r3, #0
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	3710      	adds	r7, #16
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bd80      	pop	{r7, pc}
 80046cc:	40023800 	.word	0x40023800
 80046d0:	40013800 	.word	0x40013800

080046d4 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b084      	sub	sp, #16
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
 80046dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80046e6:	68fa      	ldr	r2, [r7, #12]
 80046e8:	4b51      	ldr	r3, [pc, #324]	; (8004830 <ETH_SetMACConfig+0x15c>)
 80046ea:	4013      	ands	r3, r2
 80046ec:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	7c1b      	ldrb	r3, [r3, #16]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d102      	bne.n	80046fc <ETH_SetMACConfig+0x28>
 80046f6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80046fa:	e000      	b.n	80046fe <ETH_SetMACConfig+0x2a>
 80046fc:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	7c5b      	ldrb	r3, [r3, #17]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d102      	bne.n	800470c <ETH_SetMACConfig+0x38>
 8004706:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800470a:	e000      	b.n	800470e <ETH_SetMACConfig+0x3a>
 800470c:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800470e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8004714:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	7fdb      	ldrb	r3, [r3, #31]
 800471a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 800471c:	431a      	orrs	r2, r3
                        macconf->Speed |
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8004722:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8004724:	683a      	ldr	r2, [r7, #0]
 8004726:	7f92      	ldrb	r2, [r2, #30]
 8004728:	2a00      	cmp	r2, #0
 800472a:	d102      	bne.n	8004732 <ETH_SetMACConfig+0x5e>
 800472c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004730:	e000      	b.n	8004734 <ETH_SetMACConfig+0x60>
 8004732:	2200      	movs	r2, #0
                        macconf->Speed |
 8004734:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	7f1b      	ldrb	r3, [r3, #28]
 800473a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800473c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8004742:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	791b      	ldrb	r3, [r3, #4]
 8004748:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800474a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800474c:	683a      	ldr	r2, [r7, #0]
 800474e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8004752:	2a00      	cmp	r2, #0
 8004754:	d102      	bne.n	800475c <ETH_SetMACConfig+0x88>
 8004756:	f44f 7200 	mov.w	r2, #512	; 0x200
 800475a:	e000      	b.n	800475e <ETH_SetMACConfig+0x8a>
 800475c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800475e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	7bdb      	ldrb	r3, [r3, #15]
 8004764:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8004766:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800476c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004774:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8004776:	4313      	orrs	r3, r2
 8004778:	68fa      	ldr	r2, [r7, #12]
 800477a:	4313      	orrs	r3, r2
 800477c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	68fa      	ldr	r2, [r7, #12]
 8004784:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800478e:	2001      	movs	r0, #1
 8004790:	f7fe fc20 	bl	8002fd4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	68fa      	ldr	r2, [r7, #12]
 800479a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	699b      	ldr	r3, [r3, #24]
 80047a2:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80047a4:	68fa      	ldr	r2, [r7, #12]
 80047a6:	f64f 7341 	movw	r3, #65345	; 0xff41
 80047aa:	4013      	ands	r3, r2
 80047ac:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047b2:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80047b4:	683a      	ldr	r2, [r7, #0]
 80047b6:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80047ba:	2a00      	cmp	r2, #0
 80047bc:	d101      	bne.n	80047c2 <ETH_SetMACConfig+0xee>
 80047be:	2280      	movs	r2, #128	; 0x80
 80047c0:	e000      	b.n	80047c4 <ETH_SetMACConfig+0xf0>
 80047c2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80047c4:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80047ca:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80047cc:	683a      	ldr	r2, [r7, #0]
 80047ce:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80047d2:	2a01      	cmp	r2, #1
 80047d4:	d101      	bne.n	80047da <ETH_SetMACConfig+0x106>
 80047d6:	2208      	movs	r2, #8
 80047d8:	e000      	b.n	80047dc <ETH_SetMACConfig+0x108>
 80047da:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80047dc:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80047de:	683a      	ldr	r2, [r7, #0]
 80047e0:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80047e4:	2a01      	cmp	r2, #1
 80047e6:	d101      	bne.n	80047ec <ETH_SetMACConfig+0x118>
 80047e8:	2204      	movs	r2, #4
 80047ea:	e000      	b.n	80047ee <ETH_SetMACConfig+0x11a>
 80047ec:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80047ee:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80047f0:	683a      	ldr	r2, [r7, #0]
 80047f2:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80047f6:	2a01      	cmp	r2, #1
 80047f8:	d101      	bne.n	80047fe <ETH_SetMACConfig+0x12a>
 80047fa:	2202      	movs	r2, #2
 80047fc:	e000      	b.n	8004800 <ETH_SetMACConfig+0x12c>
 80047fe:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004800:	4313      	orrs	r3, r2
 8004802:	68fa      	ldr	r2, [r7, #12]
 8004804:	4313      	orrs	r3, r2
 8004806:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	68fa      	ldr	r2, [r7, #12]
 800480e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	699b      	ldr	r3, [r3, #24]
 8004816:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004818:	2001      	movs	r0, #1
 800481a:	f7fe fbdb 	bl	8002fd4 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	68fa      	ldr	r2, [r7, #12]
 8004824:	619a      	str	r2, [r3, #24]
}
 8004826:	bf00      	nop
 8004828:	3710      	adds	r7, #16
 800482a:	46bd      	mov	sp, r7
 800482c:	bd80      	pop	{r7, pc}
 800482e:	bf00      	nop
 8004830:	ff20810f 	.word	0xff20810f

08004834 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b084      	sub	sp, #16
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
 800483c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004846:	699b      	ldr	r3, [r3, #24]
 8004848:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800484a:	68fa      	ldr	r2, [r7, #12]
 800484c:	4b3d      	ldr	r3, [pc, #244]	; (8004944 <ETH_SetDMAConfig+0x110>)
 800484e:	4013      	ands	r3, r2
 8004850:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	7b1b      	ldrb	r3, [r3, #12]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d102      	bne.n	8004860 <ETH_SetDMAConfig+0x2c>
 800485a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800485e:	e000      	b.n	8004862 <ETH_SetDMAConfig+0x2e>
 8004860:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	7b5b      	ldrb	r3, [r3, #13]
 8004866:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004868:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800486a:	683a      	ldr	r2, [r7, #0]
 800486c:	7f52      	ldrb	r2, [r2, #29]
 800486e:	2a00      	cmp	r2, #0
 8004870:	d102      	bne.n	8004878 <ETH_SetDMAConfig+0x44>
 8004872:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004876:	e000      	b.n	800487a <ETH_SetDMAConfig+0x46>
 8004878:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800487a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	7b9b      	ldrb	r3, [r3, #14]
 8004880:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8004882:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8004888:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	7f1b      	ldrb	r3, [r3, #28]
 800488e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8004890:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	7f9b      	ldrb	r3, [r3, #30]
 8004896:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8004898:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800489e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80048a6:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80048a8:	4313      	orrs	r3, r2
 80048aa:	68fa      	ldr	r2, [r7, #12]
 80048ac:	4313      	orrs	r3, r2
 80048ae:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048b8:	461a      	mov	r2, r3
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048c6:	699b      	ldr	r3, [r3, #24]
 80048c8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80048ca:	2001      	movs	r0, #1
 80048cc:	f7fe fb82 	bl	8002fd4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048d8:	461a      	mov	r2, r3
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	791b      	ldrb	r3, [r3, #4]
 80048e2:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80048e8:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80048ee:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80048f4:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80048fc:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80048fe:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004904:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8004906:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800490c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800490e:	687a      	ldr	r2, [r7, #4]
 8004910:	6812      	ldr	r2, [r2, #0]
 8004912:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004916:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800491a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004928:	2001      	movs	r0, #1
 800492a:	f7fe fb53 	bl	8002fd4 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004936:	461a      	mov	r2, r3
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	6013      	str	r3, [r2, #0]
}
 800493c:	bf00      	nop
 800493e:	3710      	adds	r7, #16
 8004940:	46bd      	mov	sp, r7
 8004942:	bd80      	pop	{r7, pc}
 8004944:	f8de3f23 	.word	0xf8de3f23

08004948 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b0a6      	sub	sp, #152	; 0x98
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8004950:	2301      	movs	r3, #1
 8004952:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8004956:	2301      	movs	r3, #1
 8004958:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 800495c:	2300      	movs	r3, #0
 800495e:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8004960:	2300      	movs	r3, #0
 8004962:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8004966:	2301      	movs	r3, #1
 8004968:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 800496c:	2300      	movs	r3, #0
 800496e:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8004972:	2301      	movs	r3, #1
 8004974:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8004978:	2300      	movs	r3, #0
 800497a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800497e:	2300      	movs	r3, #0
 8004980:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004984:	2300      	movs	r3, #0
 8004986:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8004988:	2300      	movs	r3, #0
 800498a:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800498e:	2300      	movs	r3, #0
 8004990:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8004992:	2300      	movs	r3, #0
 8004994:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8004998:	2300      	movs	r3, #0
 800499a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800499e:	2300      	movs	r3, #0
 80049a0:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80049a4:	2300      	movs	r3, #0
 80049a6:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80049aa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80049ae:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80049b0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80049b4:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80049b6:	2300      	movs	r3, #0
 80049b8:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80049bc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80049c0:	4619      	mov	r1, r3
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	f7ff fe86 	bl	80046d4 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80049c8:	2301      	movs	r3, #1
 80049ca:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80049cc:	2301      	movs	r3, #1
 80049ce:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80049d0:	2301      	movs	r3, #1
 80049d2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80049d6:	2301      	movs	r3, #1
 80049d8:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80049da:	2300      	movs	r3, #0
 80049dc:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80049de:	2300      	movs	r3, #0
 80049e0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80049e4:	2300      	movs	r3, #0
 80049e6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80049ea:	2300      	movs	r3, #0
 80049ec:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80049ee:	2301      	movs	r3, #1
 80049f0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80049f4:	2301      	movs	r3, #1
 80049f6:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80049f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80049fc:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80049fe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004a02:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004a04:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004a08:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8004a10:	2300      	movs	r3, #0
 8004a12:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8004a14:	2300      	movs	r3, #0
 8004a16:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8004a18:	f107 0308 	add.w	r3, r7, #8
 8004a1c:	4619      	mov	r1, r3
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	f7ff ff08 	bl	8004834 <ETH_SetDMAConfig>
}
 8004a24:	bf00      	nop
 8004a26:	3798      	adds	r7, #152	; 0x98
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	bd80      	pop	{r7, pc}

08004a2c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b087      	sub	sp, #28
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	60f8      	str	r0, [r7, #12]
 8004a34:	60b9      	str	r1, [r7, #8]
 8004a36:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	3305      	adds	r3, #5
 8004a3c:	781b      	ldrb	r3, [r3, #0]
 8004a3e:	021b      	lsls	r3, r3, #8
 8004a40:	687a      	ldr	r2, [r7, #4]
 8004a42:	3204      	adds	r2, #4
 8004a44:	7812      	ldrb	r2, [r2, #0]
 8004a46:	4313      	orrs	r3, r2
 8004a48:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8004a4a:	68ba      	ldr	r2, [r7, #8]
 8004a4c:	4b11      	ldr	r3, [pc, #68]	; (8004a94 <ETH_MACAddressConfig+0x68>)
 8004a4e:	4413      	add	r3, r2
 8004a50:	461a      	mov	r2, r3
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	3303      	adds	r3, #3
 8004a5a:	781b      	ldrb	r3, [r3, #0]
 8004a5c:	061a      	lsls	r2, r3, #24
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	3302      	adds	r3, #2
 8004a62:	781b      	ldrb	r3, [r3, #0]
 8004a64:	041b      	lsls	r3, r3, #16
 8004a66:	431a      	orrs	r2, r3
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	3301      	adds	r3, #1
 8004a6c:	781b      	ldrb	r3, [r3, #0]
 8004a6e:	021b      	lsls	r3, r3, #8
 8004a70:	4313      	orrs	r3, r2
 8004a72:	687a      	ldr	r2, [r7, #4]
 8004a74:	7812      	ldrb	r2, [r2, #0]
 8004a76:	4313      	orrs	r3, r2
 8004a78:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8004a7a:	68ba      	ldr	r2, [r7, #8]
 8004a7c:	4b06      	ldr	r3, [pc, #24]	; (8004a98 <ETH_MACAddressConfig+0x6c>)
 8004a7e:	4413      	add	r3, r2
 8004a80:	461a      	mov	r2, r3
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	6013      	str	r3, [r2, #0]
}
 8004a86:	bf00      	nop
 8004a88:	371c      	adds	r7, #28
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a90:	4770      	bx	lr
 8004a92:	bf00      	nop
 8004a94:	40028040 	.word	0x40028040
 8004a98:	40028044 	.word	0x40028044

08004a9c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b085      	sub	sp, #20
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	60fb      	str	r3, [r7, #12]
 8004aa8:	e03e      	b.n	8004b28 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	68d9      	ldr	r1, [r3, #12]
 8004aae:	68fa      	ldr	r2, [r7, #12]
 8004ab0:	4613      	mov	r3, r2
 8004ab2:	009b      	lsls	r3, r3, #2
 8004ab4:	4413      	add	r3, r2
 8004ab6:	00db      	lsls	r3, r3, #3
 8004ab8:	440b      	add	r3, r1
 8004aba:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	2200      	movs	r2, #0
 8004acc:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8004ad4:	68b9      	ldr	r1, [r7, #8]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	68fa      	ldr	r2, [r7, #12]
 8004ada:	3206      	adds	r2, #6
 8004adc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	2b02      	cmp	r3, #2
 8004af0:	d80c      	bhi.n	8004b0c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	68d9      	ldr	r1, [r3, #12]
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	1c5a      	adds	r2, r3, #1
 8004afa:	4613      	mov	r3, r2
 8004afc:	009b      	lsls	r3, r3, #2
 8004afe:	4413      	add	r3, r2
 8004b00:	00db      	lsls	r3, r3, #3
 8004b02:	440b      	add	r3, r1
 8004b04:	461a      	mov	r2, r3
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	60da      	str	r2, [r3, #12]
 8004b0a:	e004      	b.n	8004b16 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	68db      	ldr	r3, [r3, #12]
 8004b10:	461a      	mov	r2, r3
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	3301      	adds	r3, #1
 8004b26:	60fb      	str	r3, [r7, #12]
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	2b03      	cmp	r3, #3
 8004b2c:	d9bd      	bls.n	8004aaa <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2200      	movs	r2, #0
 8004b32:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	68da      	ldr	r2, [r3, #12]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b40:	611a      	str	r2, [r3, #16]
}
 8004b42:	bf00      	nop
 8004b44:	3714      	adds	r7, #20
 8004b46:	46bd      	mov	sp, r7
 8004b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4c:	4770      	bx	lr

08004b4e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8004b4e:	b480      	push	{r7}
 8004b50:	b085      	sub	sp, #20
 8004b52:	af00      	add	r7, sp, #0
 8004b54:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004b56:	2300      	movs	r3, #0
 8004b58:	60fb      	str	r3, [r7, #12]
 8004b5a:	e046      	b.n	8004bea <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6919      	ldr	r1, [r3, #16]
 8004b60:	68fa      	ldr	r2, [r7, #12]
 8004b62:	4613      	mov	r3, r2
 8004b64:	009b      	lsls	r3, r3, #2
 8004b66:	4413      	add	r3, r2
 8004b68:	00db      	lsls	r3, r3, #3
 8004b6a:	440b      	add	r3, r1
 8004b6c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	2200      	movs	r2, #0
 8004b72:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	2200      	movs	r2, #0
 8004b78:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	2200      	movs	r2, #0
 8004b84:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004b98:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8004ba0:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8004bae:	68b9      	ldr	r1, [r7, #8]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	68fa      	ldr	r2, [r7, #12]
 8004bb4:	3212      	adds	r2, #18
 8004bb6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	2b02      	cmp	r3, #2
 8004bbe:	d80c      	bhi.n	8004bda <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6919      	ldr	r1, [r3, #16]
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	1c5a      	adds	r2, r3, #1
 8004bc8:	4613      	mov	r3, r2
 8004bca:	009b      	lsls	r3, r3, #2
 8004bcc:	4413      	add	r3, r2
 8004bce:	00db      	lsls	r3, r3, #3
 8004bd0:	440b      	add	r3, r1
 8004bd2:	461a      	mov	r2, r3
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	60da      	str	r2, [r3, #12]
 8004bd8:	e004      	b.n	8004be4 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	691b      	ldr	r3, [r3, #16]
 8004bde:	461a      	mov	r2, r3
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	3301      	adds	r3, #1
 8004be8:	60fb      	str	r3, [r7, #12]
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	2b03      	cmp	r3, #3
 8004bee:	d9b5      	bls.n	8004b5c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2200      	movs	r2, #0
 8004c06:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	691a      	ldr	r2, [r3, #16]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c1a:	60da      	str	r2, [r3, #12]
}
 8004c1c:	bf00      	nop
 8004c1e:	3714      	adds	r7, #20
 8004c20:	46bd      	mov	sp, r7
 8004c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c26:	4770      	bx	lr

08004c28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b089      	sub	sp, #36	; 0x24
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
 8004c30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004c32:	2300      	movs	r3, #0
 8004c34:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004c36:	2300      	movs	r3, #0
 8004c38:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004c42:	2300      	movs	r3, #0
 8004c44:	61fb      	str	r3, [r7, #28]
 8004c46:	e175      	b.n	8004f34 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004c48:	2201      	movs	r2, #1
 8004c4a:	69fb      	ldr	r3, [r7, #28]
 8004c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c50:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	697a      	ldr	r2, [r7, #20]
 8004c58:	4013      	ands	r3, r2
 8004c5a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004c5c:	693a      	ldr	r2, [r7, #16]
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	429a      	cmp	r2, r3
 8004c62:	f040 8164 	bne.w	8004f2e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	f003 0303 	and.w	r3, r3, #3
 8004c6e:	2b01      	cmp	r3, #1
 8004c70:	d005      	beq.n	8004c7e <HAL_GPIO_Init+0x56>
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	f003 0303 	and.w	r3, r3, #3
 8004c7a:	2b02      	cmp	r3, #2
 8004c7c:	d130      	bne.n	8004ce0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	689b      	ldr	r3, [r3, #8]
 8004c82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004c84:	69fb      	ldr	r3, [r7, #28]
 8004c86:	005b      	lsls	r3, r3, #1
 8004c88:	2203      	movs	r2, #3
 8004c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c8e:	43db      	mvns	r3, r3
 8004c90:	69ba      	ldr	r2, [r7, #24]
 8004c92:	4013      	ands	r3, r2
 8004c94:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	68da      	ldr	r2, [r3, #12]
 8004c9a:	69fb      	ldr	r3, [r7, #28]
 8004c9c:	005b      	lsls	r3, r3, #1
 8004c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8004ca2:	69ba      	ldr	r2, [r7, #24]
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	69ba      	ldr	r2, [r7, #24]
 8004cac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004cb4:	2201      	movs	r2, #1
 8004cb6:	69fb      	ldr	r3, [r7, #28]
 8004cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8004cbc:	43db      	mvns	r3, r3
 8004cbe:	69ba      	ldr	r2, [r7, #24]
 8004cc0:	4013      	ands	r3, r2
 8004cc2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	091b      	lsrs	r3, r3, #4
 8004cca:	f003 0201 	and.w	r2, r3, #1
 8004cce:	69fb      	ldr	r3, [r7, #28]
 8004cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8004cd4:	69ba      	ldr	r2, [r7, #24]
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	69ba      	ldr	r2, [r7, #24]
 8004cde:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	f003 0303 	and.w	r3, r3, #3
 8004ce8:	2b03      	cmp	r3, #3
 8004cea:	d017      	beq.n	8004d1c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	68db      	ldr	r3, [r3, #12]
 8004cf0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004cf2:	69fb      	ldr	r3, [r7, #28]
 8004cf4:	005b      	lsls	r3, r3, #1
 8004cf6:	2203      	movs	r2, #3
 8004cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8004cfc:	43db      	mvns	r3, r3
 8004cfe:	69ba      	ldr	r2, [r7, #24]
 8004d00:	4013      	ands	r3, r2
 8004d02:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	689a      	ldr	r2, [r3, #8]
 8004d08:	69fb      	ldr	r3, [r7, #28]
 8004d0a:	005b      	lsls	r3, r3, #1
 8004d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d10:	69ba      	ldr	r2, [r7, #24]
 8004d12:	4313      	orrs	r3, r2
 8004d14:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	69ba      	ldr	r2, [r7, #24]
 8004d1a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	f003 0303 	and.w	r3, r3, #3
 8004d24:	2b02      	cmp	r3, #2
 8004d26:	d123      	bne.n	8004d70 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004d28:	69fb      	ldr	r3, [r7, #28]
 8004d2a:	08da      	lsrs	r2, r3, #3
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	3208      	adds	r2, #8
 8004d30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004d36:	69fb      	ldr	r3, [r7, #28]
 8004d38:	f003 0307 	and.w	r3, r3, #7
 8004d3c:	009b      	lsls	r3, r3, #2
 8004d3e:	220f      	movs	r2, #15
 8004d40:	fa02 f303 	lsl.w	r3, r2, r3
 8004d44:	43db      	mvns	r3, r3
 8004d46:	69ba      	ldr	r2, [r7, #24]
 8004d48:	4013      	ands	r3, r2
 8004d4a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	691a      	ldr	r2, [r3, #16]
 8004d50:	69fb      	ldr	r3, [r7, #28]
 8004d52:	f003 0307 	and.w	r3, r3, #7
 8004d56:	009b      	lsls	r3, r3, #2
 8004d58:	fa02 f303 	lsl.w	r3, r2, r3
 8004d5c:	69ba      	ldr	r2, [r7, #24]
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004d62:	69fb      	ldr	r3, [r7, #28]
 8004d64:	08da      	lsrs	r2, r3, #3
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	3208      	adds	r2, #8
 8004d6a:	69b9      	ldr	r1, [r7, #24]
 8004d6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004d76:	69fb      	ldr	r3, [r7, #28]
 8004d78:	005b      	lsls	r3, r3, #1
 8004d7a:	2203      	movs	r2, #3
 8004d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d80:	43db      	mvns	r3, r3
 8004d82:	69ba      	ldr	r2, [r7, #24]
 8004d84:	4013      	ands	r3, r2
 8004d86:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	f003 0203 	and.w	r2, r3, #3
 8004d90:	69fb      	ldr	r3, [r7, #28]
 8004d92:	005b      	lsls	r3, r3, #1
 8004d94:	fa02 f303 	lsl.w	r3, r2, r3
 8004d98:	69ba      	ldr	r2, [r7, #24]
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	69ba      	ldr	r2, [r7, #24]
 8004da2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	f000 80be 	beq.w	8004f2e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004db2:	4b66      	ldr	r3, [pc, #408]	; (8004f4c <HAL_GPIO_Init+0x324>)
 8004db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004db6:	4a65      	ldr	r2, [pc, #404]	; (8004f4c <HAL_GPIO_Init+0x324>)
 8004db8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004dbc:	6453      	str	r3, [r2, #68]	; 0x44
 8004dbe:	4b63      	ldr	r3, [pc, #396]	; (8004f4c <HAL_GPIO_Init+0x324>)
 8004dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004dc6:	60fb      	str	r3, [r7, #12]
 8004dc8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004dca:	4a61      	ldr	r2, [pc, #388]	; (8004f50 <HAL_GPIO_Init+0x328>)
 8004dcc:	69fb      	ldr	r3, [r7, #28]
 8004dce:	089b      	lsrs	r3, r3, #2
 8004dd0:	3302      	adds	r3, #2
 8004dd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004dd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004dd8:	69fb      	ldr	r3, [r7, #28]
 8004dda:	f003 0303 	and.w	r3, r3, #3
 8004dde:	009b      	lsls	r3, r3, #2
 8004de0:	220f      	movs	r2, #15
 8004de2:	fa02 f303 	lsl.w	r3, r2, r3
 8004de6:	43db      	mvns	r3, r3
 8004de8:	69ba      	ldr	r2, [r7, #24]
 8004dea:	4013      	ands	r3, r2
 8004dec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	4a58      	ldr	r2, [pc, #352]	; (8004f54 <HAL_GPIO_Init+0x32c>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d037      	beq.n	8004e66 <HAL_GPIO_Init+0x23e>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	4a57      	ldr	r2, [pc, #348]	; (8004f58 <HAL_GPIO_Init+0x330>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d031      	beq.n	8004e62 <HAL_GPIO_Init+0x23a>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	4a56      	ldr	r2, [pc, #344]	; (8004f5c <HAL_GPIO_Init+0x334>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d02b      	beq.n	8004e5e <HAL_GPIO_Init+0x236>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	4a55      	ldr	r2, [pc, #340]	; (8004f60 <HAL_GPIO_Init+0x338>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d025      	beq.n	8004e5a <HAL_GPIO_Init+0x232>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	4a54      	ldr	r2, [pc, #336]	; (8004f64 <HAL_GPIO_Init+0x33c>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d01f      	beq.n	8004e56 <HAL_GPIO_Init+0x22e>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	4a53      	ldr	r2, [pc, #332]	; (8004f68 <HAL_GPIO_Init+0x340>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d019      	beq.n	8004e52 <HAL_GPIO_Init+0x22a>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	4a52      	ldr	r2, [pc, #328]	; (8004f6c <HAL_GPIO_Init+0x344>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d013      	beq.n	8004e4e <HAL_GPIO_Init+0x226>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	4a51      	ldr	r2, [pc, #324]	; (8004f70 <HAL_GPIO_Init+0x348>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d00d      	beq.n	8004e4a <HAL_GPIO_Init+0x222>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	4a50      	ldr	r2, [pc, #320]	; (8004f74 <HAL_GPIO_Init+0x34c>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d007      	beq.n	8004e46 <HAL_GPIO_Init+0x21e>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	4a4f      	ldr	r2, [pc, #316]	; (8004f78 <HAL_GPIO_Init+0x350>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d101      	bne.n	8004e42 <HAL_GPIO_Init+0x21a>
 8004e3e:	2309      	movs	r3, #9
 8004e40:	e012      	b.n	8004e68 <HAL_GPIO_Init+0x240>
 8004e42:	230a      	movs	r3, #10
 8004e44:	e010      	b.n	8004e68 <HAL_GPIO_Init+0x240>
 8004e46:	2308      	movs	r3, #8
 8004e48:	e00e      	b.n	8004e68 <HAL_GPIO_Init+0x240>
 8004e4a:	2307      	movs	r3, #7
 8004e4c:	e00c      	b.n	8004e68 <HAL_GPIO_Init+0x240>
 8004e4e:	2306      	movs	r3, #6
 8004e50:	e00a      	b.n	8004e68 <HAL_GPIO_Init+0x240>
 8004e52:	2305      	movs	r3, #5
 8004e54:	e008      	b.n	8004e68 <HAL_GPIO_Init+0x240>
 8004e56:	2304      	movs	r3, #4
 8004e58:	e006      	b.n	8004e68 <HAL_GPIO_Init+0x240>
 8004e5a:	2303      	movs	r3, #3
 8004e5c:	e004      	b.n	8004e68 <HAL_GPIO_Init+0x240>
 8004e5e:	2302      	movs	r3, #2
 8004e60:	e002      	b.n	8004e68 <HAL_GPIO_Init+0x240>
 8004e62:	2301      	movs	r3, #1
 8004e64:	e000      	b.n	8004e68 <HAL_GPIO_Init+0x240>
 8004e66:	2300      	movs	r3, #0
 8004e68:	69fa      	ldr	r2, [r7, #28]
 8004e6a:	f002 0203 	and.w	r2, r2, #3
 8004e6e:	0092      	lsls	r2, r2, #2
 8004e70:	4093      	lsls	r3, r2
 8004e72:	69ba      	ldr	r2, [r7, #24]
 8004e74:	4313      	orrs	r3, r2
 8004e76:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004e78:	4935      	ldr	r1, [pc, #212]	; (8004f50 <HAL_GPIO_Init+0x328>)
 8004e7a:	69fb      	ldr	r3, [r7, #28]
 8004e7c:	089b      	lsrs	r3, r3, #2
 8004e7e:	3302      	adds	r3, #2
 8004e80:	69ba      	ldr	r2, [r7, #24]
 8004e82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004e86:	4b3d      	ldr	r3, [pc, #244]	; (8004f7c <HAL_GPIO_Init+0x354>)
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e8c:	693b      	ldr	r3, [r7, #16]
 8004e8e:	43db      	mvns	r3, r3
 8004e90:	69ba      	ldr	r2, [r7, #24]
 8004e92:	4013      	ands	r3, r2
 8004e94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d003      	beq.n	8004eaa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004ea2:	69ba      	ldr	r2, [r7, #24]
 8004ea4:	693b      	ldr	r3, [r7, #16]
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004eaa:	4a34      	ldr	r2, [pc, #208]	; (8004f7c <HAL_GPIO_Init+0x354>)
 8004eac:	69bb      	ldr	r3, [r7, #24]
 8004eae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004eb0:	4b32      	ldr	r3, [pc, #200]	; (8004f7c <HAL_GPIO_Init+0x354>)
 8004eb2:	68db      	ldr	r3, [r3, #12]
 8004eb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004eb6:	693b      	ldr	r3, [r7, #16]
 8004eb8:	43db      	mvns	r3, r3
 8004eba:	69ba      	ldr	r2, [r7, #24]
 8004ebc:	4013      	ands	r3, r2
 8004ebe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d003      	beq.n	8004ed4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004ecc:	69ba      	ldr	r2, [r7, #24]
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004ed4:	4a29      	ldr	r2, [pc, #164]	; (8004f7c <HAL_GPIO_Init+0x354>)
 8004ed6:	69bb      	ldr	r3, [r7, #24]
 8004ed8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004eda:	4b28      	ldr	r3, [pc, #160]	; (8004f7c <HAL_GPIO_Init+0x354>)
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	43db      	mvns	r3, r3
 8004ee4:	69ba      	ldr	r2, [r7, #24]
 8004ee6:	4013      	ands	r3, r2
 8004ee8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d003      	beq.n	8004efe <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004ef6:	69ba      	ldr	r2, [r7, #24]
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	4313      	orrs	r3, r2
 8004efc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004efe:	4a1f      	ldr	r2, [pc, #124]	; (8004f7c <HAL_GPIO_Init+0x354>)
 8004f00:	69bb      	ldr	r3, [r7, #24]
 8004f02:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004f04:	4b1d      	ldr	r3, [pc, #116]	; (8004f7c <HAL_GPIO_Init+0x354>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	43db      	mvns	r3, r3
 8004f0e:	69ba      	ldr	r2, [r7, #24]
 8004f10:	4013      	ands	r3, r2
 8004f12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d003      	beq.n	8004f28 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004f20:	69ba      	ldr	r2, [r7, #24]
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	4313      	orrs	r3, r2
 8004f26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004f28:	4a14      	ldr	r2, [pc, #80]	; (8004f7c <HAL_GPIO_Init+0x354>)
 8004f2a:	69bb      	ldr	r3, [r7, #24]
 8004f2c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004f2e:	69fb      	ldr	r3, [r7, #28]
 8004f30:	3301      	adds	r3, #1
 8004f32:	61fb      	str	r3, [r7, #28]
 8004f34:	69fb      	ldr	r3, [r7, #28]
 8004f36:	2b0f      	cmp	r3, #15
 8004f38:	f67f ae86 	bls.w	8004c48 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004f3c:	bf00      	nop
 8004f3e:	bf00      	nop
 8004f40:	3724      	adds	r7, #36	; 0x24
 8004f42:	46bd      	mov	sp, r7
 8004f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f48:	4770      	bx	lr
 8004f4a:	bf00      	nop
 8004f4c:	40023800 	.word	0x40023800
 8004f50:	40013800 	.word	0x40013800
 8004f54:	40020000 	.word	0x40020000
 8004f58:	40020400 	.word	0x40020400
 8004f5c:	40020800 	.word	0x40020800
 8004f60:	40020c00 	.word	0x40020c00
 8004f64:	40021000 	.word	0x40021000
 8004f68:	40021400 	.word	0x40021400
 8004f6c:	40021800 	.word	0x40021800
 8004f70:	40021c00 	.word	0x40021c00
 8004f74:	40022000 	.word	0x40022000
 8004f78:	40022400 	.word	0x40022400
 8004f7c:	40013c00 	.word	0x40013c00

08004f80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b083      	sub	sp, #12
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
 8004f88:	460b      	mov	r3, r1
 8004f8a:	807b      	strh	r3, [r7, #2]
 8004f8c:	4613      	mov	r3, r2
 8004f8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004f90:	787b      	ldrb	r3, [r7, #1]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d003      	beq.n	8004f9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004f96:	887a      	ldrh	r2, [r7, #2]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004f9c:	e003      	b.n	8004fa6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004f9e:	887b      	ldrh	r3, [r7, #2]
 8004fa0:	041a      	lsls	r2, r3, #16
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	619a      	str	r2, [r3, #24]
}
 8004fa6:	bf00      	nop
 8004fa8:	370c      	adds	r7, #12
 8004faa:	46bd      	mov	sp, r7
 8004fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb0:	4770      	bx	lr

08004fb2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004fb2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004fb4:	b08f      	sub	sp, #60	; 0x3c
 8004fb6:	af0a      	add	r7, sp, #40	; 0x28
 8004fb8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d101      	bne.n	8004fc4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	e116      	b.n	80051f2 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8004fd0:	b2db      	uxtb	r3, r3
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d106      	bne.n	8004fe4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	f7fd fdc8 	bl	8002b74 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2203      	movs	r2, #3
 8004fe8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ff0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d102      	bne.n	8004ffe <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4618      	mov	r0, r3
 8005004:	f002 fb74 	bl	80076f0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	603b      	str	r3, [r7, #0]
 800500e:	687e      	ldr	r6, [r7, #4]
 8005010:	466d      	mov	r5, sp
 8005012:	f106 0410 	add.w	r4, r6, #16
 8005016:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005018:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800501a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800501c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800501e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005022:	e885 0003 	stmia.w	r5, {r0, r1}
 8005026:	1d33      	adds	r3, r6, #4
 8005028:	cb0e      	ldmia	r3, {r1, r2, r3}
 800502a:	6838      	ldr	r0, [r7, #0]
 800502c:	f002 fb08 	bl	8007640 <USB_CoreInit>
 8005030:	4603      	mov	r3, r0
 8005032:	2b00      	cmp	r3, #0
 8005034:	d005      	beq.n	8005042 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2202      	movs	r2, #2
 800503a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800503e:	2301      	movs	r3, #1
 8005040:	e0d7      	b.n	80051f2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	2100      	movs	r1, #0
 8005048:	4618      	mov	r0, r3
 800504a:	f002 fb62 	bl	8007712 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800504e:	2300      	movs	r3, #0
 8005050:	73fb      	strb	r3, [r7, #15]
 8005052:	e04a      	b.n	80050ea <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005054:	7bfa      	ldrb	r2, [r7, #15]
 8005056:	6879      	ldr	r1, [r7, #4]
 8005058:	4613      	mov	r3, r2
 800505a:	00db      	lsls	r3, r3, #3
 800505c:	4413      	add	r3, r2
 800505e:	009b      	lsls	r3, r3, #2
 8005060:	440b      	add	r3, r1
 8005062:	333d      	adds	r3, #61	; 0x3d
 8005064:	2201      	movs	r2, #1
 8005066:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005068:	7bfa      	ldrb	r2, [r7, #15]
 800506a:	6879      	ldr	r1, [r7, #4]
 800506c:	4613      	mov	r3, r2
 800506e:	00db      	lsls	r3, r3, #3
 8005070:	4413      	add	r3, r2
 8005072:	009b      	lsls	r3, r3, #2
 8005074:	440b      	add	r3, r1
 8005076:	333c      	adds	r3, #60	; 0x3c
 8005078:	7bfa      	ldrb	r2, [r7, #15]
 800507a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800507c:	7bfa      	ldrb	r2, [r7, #15]
 800507e:	7bfb      	ldrb	r3, [r7, #15]
 8005080:	b298      	uxth	r0, r3
 8005082:	6879      	ldr	r1, [r7, #4]
 8005084:	4613      	mov	r3, r2
 8005086:	00db      	lsls	r3, r3, #3
 8005088:	4413      	add	r3, r2
 800508a:	009b      	lsls	r3, r3, #2
 800508c:	440b      	add	r3, r1
 800508e:	3344      	adds	r3, #68	; 0x44
 8005090:	4602      	mov	r2, r0
 8005092:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005094:	7bfa      	ldrb	r2, [r7, #15]
 8005096:	6879      	ldr	r1, [r7, #4]
 8005098:	4613      	mov	r3, r2
 800509a:	00db      	lsls	r3, r3, #3
 800509c:	4413      	add	r3, r2
 800509e:	009b      	lsls	r3, r3, #2
 80050a0:	440b      	add	r3, r1
 80050a2:	3340      	adds	r3, #64	; 0x40
 80050a4:	2200      	movs	r2, #0
 80050a6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80050a8:	7bfa      	ldrb	r2, [r7, #15]
 80050aa:	6879      	ldr	r1, [r7, #4]
 80050ac:	4613      	mov	r3, r2
 80050ae:	00db      	lsls	r3, r3, #3
 80050b0:	4413      	add	r3, r2
 80050b2:	009b      	lsls	r3, r3, #2
 80050b4:	440b      	add	r3, r1
 80050b6:	3348      	adds	r3, #72	; 0x48
 80050b8:	2200      	movs	r2, #0
 80050ba:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80050bc:	7bfa      	ldrb	r2, [r7, #15]
 80050be:	6879      	ldr	r1, [r7, #4]
 80050c0:	4613      	mov	r3, r2
 80050c2:	00db      	lsls	r3, r3, #3
 80050c4:	4413      	add	r3, r2
 80050c6:	009b      	lsls	r3, r3, #2
 80050c8:	440b      	add	r3, r1
 80050ca:	334c      	adds	r3, #76	; 0x4c
 80050cc:	2200      	movs	r2, #0
 80050ce:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80050d0:	7bfa      	ldrb	r2, [r7, #15]
 80050d2:	6879      	ldr	r1, [r7, #4]
 80050d4:	4613      	mov	r3, r2
 80050d6:	00db      	lsls	r3, r3, #3
 80050d8:	4413      	add	r3, r2
 80050da:	009b      	lsls	r3, r3, #2
 80050dc:	440b      	add	r3, r1
 80050de:	3354      	adds	r3, #84	; 0x54
 80050e0:	2200      	movs	r2, #0
 80050e2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80050e4:	7bfb      	ldrb	r3, [r7, #15]
 80050e6:	3301      	adds	r3, #1
 80050e8:	73fb      	strb	r3, [r7, #15]
 80050ea:	7bfa      	ldrb	r2, [r7, #15]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	429a      	cmp	r2, r3
 80050f2:	d3af      	bcc.n	8005054 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80050f4:	2300      	movs	r3, #0
 80050f6:	73fb      	strb	r3, [r7, #15]
 80050f8:	e044      	b.n	8005184 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80050fa:	7bfa      	ldrb	r2, [r7, #15]
 80050fc:	6879      	ldr	r1, [r7, #4]
 80050fe:	4613      	mov	r3, r2
 8005100:	00db      	lsls	r3, r3, #3
 8005102:	4413      	add	r3, r2
 8005104:	009b      	lsls	r3, r3, #2
 8005106:	440b      	add	r3, r1
 8005108:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800510c:	2200      	movs	r2, #0
 800510e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005110:	7bfa      	ldrb	r2, [r7, #15]
 8005112:	6879      	ldr	r1, [r7, #4]
 8005114:	4613      	mov	r3, r2
 8005116:	00db      	lsls	r3, r3, #3
 8005118:	4413      	add	r3, r2
 800511a:	009b      	lsls	r3, r3, #2
 800511c:	440b      	add	r3, r1
 800511e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8005122:	7bfa      	ldrb	r2, [r7, #15]
 8005124:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005126:	7bfa      	ldrb	r2, [r7, #15]
 8005128:	6879      	ldr	r1, [r7, #4]
 800512a:	4613      	mov	r3, r2
 800512c:	00db      	lsls	r3, r3, #3
 800512e:	4413      	add	r3, r2
 8005130:	009b      	lsls	r3, r3, #2
 8005132:	440b      	add	r3, r1
 8005134:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005138:	2200      	movs	r2, #0
 800513a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800513c:	7bfa      	ldrb	r2, [r7, #15]
 800513e:	6879      	ldr	r1, [r7, #4]
 8005140:	4613      	mov	r3, r2
 8005142:	00db      	lsls	r3, r3, #3
 8005144:	4413      	add	r3, r2
 8005146:	009b      	lsls	r3, r3, #2
 8005148:	440b      	add	r3, r1
 800514a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800514e:	2200      	movs	r2, #0
 8005150:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005152:	7bfa      	ldrb	r2, [r7, #15]
 8005154:	6879      	ldr	r1, [r7, #4]
 8005156:	4613      	mov	r3, r2
 8005158:	00db      	lsls	r3, r3, #3
 800515a:	4413      	add	r3, r2
 800515c:	009b      	lsls	r3, r3, #2
 800515e:	440b      	add	r3, r1
 8005160:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8005164:	2200      	movs	r2, #0
 8005166:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005168:	7bfa      	ldrb	r2, [r7, #15]
 800516a:	6879      	ldr	r1, [r7, #4]
 800516c:	4613      	mov	r3, r2
 800516e:	00db      	lsls	r3, r3, #3
 8005170:	4413      	add	r3, r2
 8005172:	009b      	lsls	r3, r3, #2
 8005174:	440b      	add	r3, r1
 8005176:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800517a:	2200      	movs	r2, #0
 800517c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800517e:	7bfb      	ldrb	r3, [r7, #15]
 8005180:	3301      	adds	r3, #1
 8005182:	73fb      	strb	r3, [r7, #15]
 8005184:	7bfa      	ldrb	r2, [r7, #15]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	685b      	ldr	r3, [r3, #4]
 800518a:	429a      	cmp	r2, r3
 800518c:	d3b5      	bcc.n	80050fa <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	603b      	str	r3, [r7, #0]
 8005194:	687e      	ldr	r6, [r7, #4]
 8005196:	466d      	mov	r5, sp
 8005198:	f106 0410 	add.w	r4, r6, #16
 800519c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800519e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80051a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80051a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80051a4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80051a8:	e885 0003 	stmia.w	r5, {r0, r1}
 80051ac:	1d33      	adds	r3, r6, #4
 80051ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 80051b0:	6838      	ldr	r0, [r7, #0]
 80051b2:	f002 fafb 	bl	80077ac <USB_DevInit>
 80051b6:	4603      	mov	r3, r0
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d005      	beq.n	80051c8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2202      	movs	r2, #2
 80051c0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80051c4:	2301      	movs	r3, #1
 80051c6:	e014      	b.n	80051f2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2200      	movs	r2, #0
 80051cc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2201      	movs	r2, #1
 80051d4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051dc:	2b01      	cmp	r3, #1
 80051de:	d102      	bne.n	80051e6 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80051e0:	6878      	ldr	r0, [r7, #4]
 80051e2:	f000 f80b 	bl	80051fc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4618      	mov	r0, r3
 80051ec:	f002 fcb9 	bl	8007b62 <USB_DevDisconnect>

  return HAL_OK;
 80051f0:	2300      	movs	r3, #0
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	3714      	adds	r7, #20
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080051fc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80051fc:	b480      	push	{r7}
 80051fe:	b085      	sub	sp, #20
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2201      	movs	r2, #1
 800520e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2200      	movs	r2, #0
 8005216:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	699b      	ldr	r3, [r3, #24]
 800521e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800522a:	4b05      	ldr	r3, [pc, #20]	; (8005240 <HAL_PCDEx_ActivateLPM+0x44>)
 800522c:	4313      	orrs	r3, r2
 800522e:	68fa      	ldr	r2, [r7, #12]
 8005230:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8005232:	2300      	movs	r3, #0
}
 8005234:	4618      	mov	r0, r3
 8005236:	3714      	adds	r7, #20
 8005238:	46bd      	mov	sp, r7
 800523a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523e:	4770      	bx	lr
 8005240:	10000003 	.word	0x10000003

08005244 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005244:	b480      	push	{r7}
 8005246:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005248:	4b05      	ldr	r3, [pc, #20]	; (8005260 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a04      	ldr	r2, [pc, #16]	; (8005260 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800524e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005252:	6013      	str	r3, [r2, #0]
}
 8005254:	bf00      	nop
 8005256:	46bd      	mov	sp, r7
 8005258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525c:	4770      	bx	lr
 800525e:	bf00      	nop
 8005260:	40007000 	.word	0x40007000

08005264 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b082      	sub	sp, #8
 8005268:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800526a:	2300      	movs	r3, #0
 800526c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800526e:	4b23      	ldr	r3, [pc, #140]	; (80052fc <HAL_PWREx_EnableOverDrive+0x98>)
 8005270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005272:	4a22      	ldr	r2, [pc, #136]	; (80052fc <HAL_PWREx_EnableOverDrive+0x98>)
 8005274:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005278:	6413      	str	r3, [r2, #64]	; 0x40
 800527a:	4b20      	ldr	r3, [pc, #128]	; (80052fc <HAL_PWREx_EnableOverDrive+0x98>)
 800527c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800527e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005282:	603b      	str	r3, [r7, #0]
 8005284:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005286:	4b1e      	ldr	r3, [pc, #120]	; (8005300 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4a1d      	ldr	r2, [pc, #116]	; (8005300 <HAL_PWREx_EnableOverDrive+0x9c>)
 800528c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005290:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005292:	f7fd fe93 	bl	8002fbc <HAL_GetTick>
 8005296:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005298:	e009      	b.n	80052ae <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800529a:	f7fd fe8f 	bl	8002fbc <HAL_GetTick>
 800529e:	4602      	mov	r2, r0
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	1ad3      	subs	r3, r2, r3
 80052a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80052a8:	d901      	bls.n	80052ae <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80052aa:	2303      	movs	r3, #3
 80052ac:	e022      	b.n	80052f4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80052ae:	4b14      	ldr	r3, [pc, #80]	; (8005300 <HAL_PWREx_EnableOverDrive+0x9c>)
 80052b0:	685b      	ldr	r3, [r3, #4]
 80052b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052ba:	d1ee      	bne.n	800529a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80052bc:	4b10      	ldr	r3, [pc, #64]	; (8005300 <HAL_PWREx_EnableOverDrive+0x9c>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a0f      	ldr	r2, [pc, #60]	; (8005300 <HAL_PWREx_EnableOverDrive+0x9c>)
 80052c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80052c6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80052c8:	f7fd fe78 	bl	8002fbc <HAL_GetTick>
 80052cc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80052ce:	e009      	b.n	80052e4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80052d0:	f7fd fe74 	bl	8002fbc <HAL_GetTick>
 80052d4:	4602      	mov	r2, r0
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	1ad3      	subs	r3, r2, r3
 80052da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80052de:	d901      	bls.n	80052e4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80052e0:	2303      	movs	r3, #3
 80052e2:	e007      	b.n	80052f4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80052e4:	4b06      	ldr	r3, [pc, #24]	; (8005300 <HAL_PWREx_EnableOverDrive+0x9c>)
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80052f0:	d1ee      	bne.n	80052d0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80052f2:	2300      	movs	r3, #0
}
 80052f4:	4618      	mov	r0, r3
 80052f6:	3708      	adds	r7, #8
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bd80      	pop	{r7, pc}
 80052fc:	40023800 	.word	0x40023800
 8005300:	40007000 	.word	0x40007000

08005304 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b086      	sub	sp, #24
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800530c:	2300      	movs	r3, #0
 800530e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d101      	bne.n	800531a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8005316:	2301      	movs	r3, #1
 8005318:	e29b      	b.n	8005852 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f003 0301 	and.w	r3, r3, #1
 8005322:	2b00      	cmp	r3, #0
 8005324:	f000 8087 	beq.w	8005436 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005328:	4b96      	ldr	r3, [pc, #600]	; (8005584 <HAL_RCC_OscConfig+0x280>)
 800532a:	689b      	ldr	r3, [r3, #8]
 800532c:	f003 030c 	and.w	r3, r3, #12
 8005330:	2b04      	cmp	r3, #4
 8005332:	d00c      	beq.n	800534e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005334:	4b93      	ldr	r3, [pc, #588]	; (8005584 <HAL_RCC_OscConfig+0x280>)
 8005336:	689b      	ldr	r3, [r3, #8]
 8005338:	f003 030c 	and.w	r3, r3, #12
 800533c:	2b08      	cmp	r3, #8
 800533e:	d112      	bne.n	8005366 <HAL_RCC_OscConfig+0x62>
 8005340:	4b90      	ldr	r3, [pc, #576]	; (8005584 <HAL_RCC_OscConfig+0x280>)
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005348:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800534c:	d10b      	bne.n	8005366 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800534e:	4b8d      	ldr	r3, [pc, #564]	; (8005584 <HAL_RCC_OscConfig+0x280>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005356:	2b00      	cmp	r3, #0
 8005358:	d06c      	beq.n	8005434 <HAL_RCC_OscConfig+0x130>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d168      	bne.n	8005434 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005362:	2301      	movs	r3, #1
 8005364:	e275      	b.n	8005852 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800536e:	d106      	bne.n	800537e <HAL_RCC_OscConfig+0x7a>
 8005370:	4b84      	ldr	r3, [pc, #528]	; (8005584 <HAL_RCC_OscConfig+0x280>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4a83      	ldr	r2, [pc, #524]	; (8005584 <HAL_RCC_OscConfig+0x280>)
 8005376:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800537a:	6013      	str	r3, [r2, #0]
 800537c:	e02e      	b.n	80053dc <HAL_RCC_OscConfig+0xd8>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d10c      	bne.n	80053a0 <HAL_RCC_OscConfig+0x9c>
 8005386:	4b7f      	ldr	r3, [pc, #508]	; (8005584 <HAL_RCC_OscConfig+0x280>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4a7e      	ldr	r2, [pc, #504]	; (8005584 <HAL_RCC_OscConfig+0x280>)
 800538c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005390:	6013      	str	r3, [r2, #0]
 8005392:	4b7c      	ldr	r3, [pc, #496]	; (8005584 <HAL_RCC_OscConfig+0x280>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a7b      	ldr	r2, [pc, #492]	; (8005584 <HAL_RCC_OscConfig+0x280>)
 8005398:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800539c:	6013      	str	r3, [r2, #0]
 800539e:	e01d      	b.n	80053dc <HAL_RCC_OscConfig+0xd8>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80053a8:	d10c      	bne.n	80053c4 <HAL_RCC_OscConfig+0xc0>
 80053aa:	4b76      	ldr	r3, [pc, #472]	; (8005584 <HAL_RCC_OscConfig+0x280>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a75      	ldr	r2, [pc, #468]	; (8005584 <HAL_RCC_OscConfig+0x280>)
 80053b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80053b4:	6013      	str	r3, [r2, #0]
 80053b6:	4b73      	ldr	r3, [pc, #460]	; (8005584 <HAL_RCC_OscConfig+0x280>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a72      	ldr	r2, [pc, #456]	; (8005584 <HAL_RCC_OscConfig+0x280>)
 80053bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053c0:	6013      	str	r3, [r2, #0]
 80053c2:	e00b      	b.n	80053dc <HAL_RCC_OscConfig+0xd8>
 80053c4:	4b6f      	ldr	r3, [pc, #444]	; (8005584 <HAL_RCC_OscConfig+0x280>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a6e      	ldr	r2, [pc, #440]	; (8005584 <HAL_RCC_OscConfig+0x280>)
 80053ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053ce:	6013      	str	r3, [r2, #0]
 80053d0:	4b6c      	ldr	r3, [pc, #432]	; (8005584 <HAL_RCC_OscConfig+0x280>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a6b      	ldr	r2, [pc, #428]	; (8005584 <HAL_RCC_OscConfig+0x280>)
 80053d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80053da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d013      	beq.n	800540c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053e4:	f7fd fdea 	bl	8002fbc <HAL_GetTick>
 80053e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053ea:	e008      	b.n	80053fe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80053ec:	f7fd fde6 	bl	8002fbc <HAL_GetTick>
 80053f0:	4602      	mov	r2, r0
 80053f2:	693b      	ldr	r3, [r7, #16]
 80053f4:	1ad3      	subs	r3, r2, r3
 80053f6:	2b64      	cmp	r3, #100	; 0x64
 80053f8:	d901      	bls.n	80053fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80053fa:	2303      	movs	r3, #3
 80053fc:	e229      	b.n	8005852 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053fe:	4b61      	ldr	r3, [pc, #388]	; (8005584 <HAL_RCC_OscConfig+0x280>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005406:	2b00      	cmp	r3, #0
 8005408:	d0f0      	beq.n	80053ec <HAL_RCC_OscConfig+0xe8>
 800540a:	e014      	b.n	8005436 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800540c:	f7fd fdd6 	bl	8002fbc <HAL_GetTick>
 8005410:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005412:	e008      	b.n	8005426 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005414:	f7fd fdd2 	bl	8002fbc <HAL_GetTick>
 8005418:	4602      	mov	r2, r0
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	1ad3      	subs	r3, r2, r3
 800541e:	2b64      	cmp	r3, #100	; 0x64
 8005420:	d901      	bls.n	8005426 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005422:	2303      	movs	r3, #3
 8005424:	e215      	b.n	8005852 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005426:	4b57      	ldr	r3, [pc, #348]	; (8005584 <HAL_RCC_OscConfig+0x280>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800542e:	2b00      	cmp	r3, #0
 8005430:	d1f0      	bne.n	8005414 <HAL_RCC_OscConfig+0x110>
 8005432:	e000      	b.n	8005436 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005434:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f003 0302 	and.w	r3, r3, #2
 800543e:	2b00      	cmp	r3, #0
 8005440:	d069      	beq.n	8005516 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005442:	4b50      	ldr	r3, [pc, #320]	; (8005584 <HAL_RCC_OscConfig+0x280>)
 8005444:	689b      	ldr	r3, [r3, #8]
 8005446:	f003 030c 	and.w	r3, r3, #12
 800544a:	2b00      	cmp	r3, #0
 800544c:	d00b      	beq.n	8005466 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800544e:	4b4d      	ldr	r3, [pc, #308]	; (8005584 <HAL_RCC_OscConfig+0x280>)
 8005450:	689b      	ldr	r3, [r3, #8]
 8005452:	f003 030c 	and.w	r3, r3, #12
 8005456:	2b08      	cmp	r3, #8
 8005458:	d11c      	bne.n	8005494 <HAL_RCC_OscConfig+0x190>
 800545a:	4b4a      	ldr	r3, [pc, #296]	; (8005584 <HAL_RCC_OscConfig+0x280>)
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005462:	2b00      	cmp	r3, #0
 8005464:	d116      	bne.n	8005494 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005466:	4b47      	ldr	r3, [pc, #284]	; (8005584 <HAL_RCC_OscConfig+0x280>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f003 0302 	and.w	r3, r3, #2
 800546e:	2b00      	cmp	r3, #0
 8005470:	d005      	beq.n	800547e <HAL_RCC_OscConfig+0x17a>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	68db      	ldr	r3, [r3, #12]
 8005476:	2b01      	cmp	r3, #1
 8005478:	d001      	beq.n	800547e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800547a:	2301      	movs	r3, #1
 800547c:	e1e9      	b.n	8005852 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800547e:	4b41      	ldr	r3, [pc, #260]	; (8005584 <HAL_RCC_OscConfig+0x280>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	691b      	ldr	r3, [r3, #16]
 800548a:	00db      	lsls	r3, r3, #3
 800548c:	493d      	ldr	r1, [pc, #244]	; (8005584 <HAL_RCC_OscConfig+0x280>)
 800548e:	4313      	orrs	r3, r2
 8005490:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005492:	e040      	b.n	8005516 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	68db      	ldr	r3, [r3, #12]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d023      	beq.n	80054e4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800549c:	4b39      	ldr	r3, [pc, #228]	; (8005584 <HAL_RCC_OscConfig+0x280>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a38      	ldr	r2, [pc, #224]	; (8005584 <HAL_RCC_OscConfig+0x280>)
 80054a2:	f043 0301 	orr.w	r3, r3, #1
 80054a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054a8:	f7fd fd88 	bl	8002fbc <HAL_GetTick>
 80054ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054ae:	e008      	b.n	80054c2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80054b0:	f7fd fd84 	bl	8002fbc <HAL_GetTick>
 80054b4:	4602      	mov	r2, r0
 80054b6:	693b      	ldr	r3, [r7, #16]
 80054b8:	1ad3      	subs	r3, r2, r3
 80054ba:	2b02      	cmp	r3, #2
 80054bc:	d901      	bls.n	80054c2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80054be:	2303      	movs	r3, #3
 80054c0:	e1c7      	b.n	8005852 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054c2:	4b30      	ldr	r3, [pc, #192]	; (8005584 <HAL_RCC_OscConfig+0x280>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f003 0302 	and.w	r3, r3, #2
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d0f0      	beq.n	80054b0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054ce:	4b2d      	ldr	r3, [pc, #180]	; (8005584 <HAL_RCC_OscConfig+0x280>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	691b      	ldr	r3, [r3, #16]
 80054da:	00db      	lsls	r3, r3, #3
 80054dc:	4929      	ldr	r1, [pc, #164]	; (8005584 <HAL_RCC_OscConfig+0x280>)
 80054de:	4313      	orrs	r3, r2
 80054e0:	600b      	str	r3, [r1, #0]
 80054e2:	e018      	b.n	8005516 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80054e4:	4b27      	ldr	r3, [pc, #156]	; (8005584 <HAL_RCC_OscConfig+0x280>)
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a26      	ldr	r2, [pc, #152]	; (8005584 <HAL_RCC_OscConfig+0x280>)
 80054ea:	f023 0301 	bic.w	r3, r3, #1
 80054ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054f0:	f7fd fd64 	bl	8002fbc <HAL_GetTick>
 80054f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80054f6:	e008      	b.n	800550a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80054f8:	f7fd fd60 	bl	8002fbc <HAL_GetTick>
 80054fc:	4602      	mov	r2, r0
 80054fe:	693b      	ldr	r3, [r7, #16]
 8005500:	1ad3      	subs	r3, r2, r3
 8005502:	2b02      	cmp	r3, #2
 8005504:	d901      	bls.n	800550a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005506:	2303      	movs	r3, #3
 8005508:	e1a3      	b.n	8005852 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800550a:	4b1e      	ldr	r3, [pc, #120]	; (8005584 <HAL_RCC_OscConfig+0x280>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f003 0302 	and.w	r3, r3, #2
 8005512:	2b00      	cmp	r3, #0
 8005514:	d1f0      	bne.n	80054f8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f003 0308 	and.w	r3, r3, #8
 800551e:	2b00      	cmp	r3, #0
 8005520:	d038      	beq.n	8005594 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	695b      	ldr	r3, [r3, #20]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d019      	beq.n	800555e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800552a:	4b16      	ldr	r3, [pc, #88]	; (8005584 <HAL_RCC_OscConfig+0x280>)
 800552c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800552e:	4a15      	ldr	r2, [pc, #84]	; (8005584 <HAL_RCC_OscConfig+0x280>)
 8005530:	f043 0301 	orr.w	r3, r3, #1
 8005534:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005536:	f7fd fd41 	bl	8002fbc <HAL_GetTick>
 800553a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800553c:	e008      	b.n	8005550 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800553e:	f7fd fd3d 	bl	8002fbc <HAL_GetTick>
 8005542:	4602      	mov	r2, r0
 8005544:	693b      	ldr	r3, [r7, #16]
 8005546:	1ad3      	subs	r3, r2, r3
 8005548:	2b02      	cmp	r3, #2
 800554a:	d901      	bls.n	8005550 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800554c:	2303      	movs	r3, #3
 800554e:	e180      	b.n	8005852 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005550:	4b0c      	ldr	r3, [pc, #48]	; (8005584 <HAL_RCC_OscConfig+0x280>)
 8005552:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005554:	f003 0302 	and.w	r3, r3, #2
 8005558:	2b00      	cmp	r3, #0
 800555a:	d0f0      	beq.n	800553e <HAL_RCC_OscConfig+0x23a>
 800555c:	e01a      	b.n	8005594 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800555e:	4b09      	ldr	r3, [pc, #36]	; (8005584 <HAL_RCC_OscConfig+0x280>)
 8005560:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005562:	4a08      	ldr	r2, [pc, #32]	; (8005584 <HAL_RCC_OscConfig+0x280>)
 8005564:	f023 0301 	bic.w	r3, r3, #1
 8005568:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800556a:	f7fd fd27 	bl	8002fbc <HAL_GetTick>
 800556e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005570:	e00a      	b.n	8005588 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005572:	f7fd fd23 	bl	8002fbc <HAL_GetTick>
 8005576:	4602      	mov	r2, r0
 8005578:	693b      	ldr	r3, [r7, #16]
 800557a:	1ad3      	subs	r3, r2, r3
 800557c:	2b02      	cmp	r3, #2
 800557e:	d903      	bls.n	8005588 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005580:	2303      	movs	r3, #3
 8005582:	e166      	b.n	8005852 <HAL_RCC_OscConfig+0x54e>
 8005584:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005588:	4b92      	ldr	r3, [pc, #584]	; (80057d4 <HAL_RCC_OscConfig+0x4d0>)
 800558a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800558c:	f003 0302 	and.w	r3, r3, #2
 8005590:	2b00      	cmp	r3, #0
 8005592:	d1ee      	bne.n	8005572 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f003 0304 	and.w	r3, r3, #4
 800559c:	2b00      	cmp	r3, #0
 800559e:	f000 80a4 	beq.w	80056ea <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80055a2:	4b8c      	ldr	r3, [pc, #560]	; (80057d4 <HAL_RCC_OscConfig+0x4d0>)
 80055a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d10d      	bne.n	80055ca <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80055ae:	4b89      	ldr	r3, [pc, #548]	; (80057d4 <HAL_RCC_OscConfig+0x4d0>)
 80055b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055b2:	4a88      	ldr	r2, [pc, #544]	; (80057d4 <HAL_RCC_OscConfig+0x4d0>)
 80055b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055b8:	6413      	str	r3, [r2, #64]	; 0x40
 80055ba:	4b86      	ldr	r3, [pc, #536]	; (80057d4 <HAL_RCC_OscConfig+0x4d0>)
 80055bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055c2:	60bb      	str	r3, [r7, #8]
 80055c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80055c6:	2301      	movs	r3, #1
 80055c8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80055ca:	4b83      	ldr	r3, [pc, #524]	; (80057d8 <HAL_RCC_OscConfig+0x4d4>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d118      	bne.n	8005608 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80055d6:	4b80      	ldr	r3, [pc, #512]	; (80057d8 <HAL_RCC_OscConfig+0x4d4>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4a7f      	ldr	r2, [pc, #508]	; (80057d8 <HAL_RCC_OscConfig+0x4d4>)
 80055dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80055e2:	f7fd fceb 	bl	8002fbc <HAL_GetTick>
 80055e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80055e8:	e008      	b.n	80055fc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055ea:	f7fd fce7 	bl	8002fbc <HAL_GetTick>
 80055ee:	4602      	mov	r2, r0
 80055f0:	693b      	ldr	r3, [r7, #16]
 80055f2:	1ad3      	subs	r3, r2, r3
 80055f4:	2b64      	cmp	r3, #100	; 0x64
 80055f6:	d901      	bls.n	80055fc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80055f8:	2303      	movs	r3, #3
 80055fa:	e12a      	b.n	8005852 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80055fc:	4b76      	ldr	r3, [pc, #472]	; (80057d8 <HAL_RCC_OscConfig+0x4d4>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005604:	2b00      	cmp	r3, #0
 8005606:	d0f0      	beq.n	80055ea <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	689b      	ldr	r3, [r3, #8]
 800560c:	2b01      	cmp	r3, #1
 800560e:	d106      	bne.n	800561e <HAL_RCC_OscConfig+0x31a>
 8005610:	4b70      	ldr	r3, [pc, #448]	; (80057d4 <HAL_RCC_OscConfig+0x4d0>)
 8005612:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005614:	4a6f      	ldr	r2, [pc, #444]	; (80057d4 <HAL_RCC_OscConfig+0x4d0>)
 8005616:	f043 0301 	orr.w	r3, r3, #1
 800561a:	6713      	str	r3, [r2, #112]	; 0x70
 800561c:	e02d      	b.n	800567a <HAL_RCC_OscConfig+0x376>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	689b      	ldr	r3, [r3, #8]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d10c      	bne.n	8005640 <HAL_RCC_OscConfig+0x33c>
 8005626:	4b6b      	ldr	r3, [pc, #428]	; (80057d4 <HAL_RCC_OscConfig+0x4d0>)
 8005628:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800562a:	4a6a      	ldr	r2, [pc, #424]	; (80057d4 <HAL_RCC_OscConfig+0x4d0>)
 800562c:	f023 0301 	bic.w	r3, r3, #1
 8005630:	6713      	str	r3, [r2, #112]	; 0x70
 8005632:	4b68      	ldr	r3, [pc, #416]	; (80057d4 <HAL_RCC_OscConfig+0x4d0>)
 8005634:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005636:	4a67      	ldr	r2, [pc, #412]	; (80057d4 <HAL_RCC_OscConfig+0x4d0>)
 8005638:	f023 0304 	bic.w	r3, r3, #4
 800563c:	6713      	str	r3, [r2, #112]	; 0x70
 800563e:	e01c      	b.n	800567a <HAL_RCC_OscConfig+0x376>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	689b      	ldr	r3, [r3, #8]
 8005644:	2b05      	cmp	r3, #5
 8005646:	d10c      	bne.n	8005662 <HAL_RCC_OscConfig+0x35e>
 8005648:	4b62      	ldr	r3, [pc, #392]	; (80057d4 <HAL_RCC_OscConfig+0x4d0>)
 800564a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800564c:	4a61      	ldr	r2, [pc, #388]	; (80057d4 <HAL_RCC_OscConfig+0x4d0>)
 800564e:	f043 0304 	orr.w	r3, r3, #4
 8005652:	6713      	str	r3, [r2, #112]	; 0x70
 8005654:	4b5f      	ldr	r3, [pc, #380]	; (80057d4 <HAL_RCC_OscConfig+0x4d0>)
 8005656:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005658:	4a5e      	ldr	r2, [pc, #376]	; (80057d4 <HAL_RCC_OscConfig+0x4d0>)
 800565a:	f043 0301 	orr.w	r3, r3, #1
 800565e:	6713      	str	r3, [r2, #112]	; 0x70
 8005660:	e00b      	b.n	800567a <HAL_RCC_OscConfig+0x376>
 8005662:	4b5c      	ldr	r3, [pc, #368]	; (80057d4 <HAL_RCC_OscConfig+0x4d0>)
 8005664:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005666:	4a5b      	ldr	r2, [pc, #364]	; (80057d4 <HAL_RCC_OscConfig+0x4d0>)
 8005668:	f023 0301 	bic.w	r3, r3, #1
 800566c:	6713      	str	r3, [r2, #112]	; 0x70
 800566e:	4b59      	ldr	r3, [pc, #356]	; (80057d4 <HAL_RCC_OscConfig+0x4d0>)
 8005670:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005672:	4a58      	ldr	r2, [pc, #352]	; (80057d4 <HAL_RCC_OscConfig+0x4d0>)
 8005674:	f023 0304 	bic.w	r3, r3, #4
 8005678:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	689b      	ldr	r3, [r3, #8]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d015      	beq.n	80056ae <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005682:	f7fd fc9b 	bl	8002fbc <HAL_GetTick>
 8005686:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005688:	e00a      	b.n	80056a0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800568a:	f7fd fc97 	bl	8002fbc <HAL_GetTick>
 800568e:	4602      	mov	r2, r0
 8005690:	693b      	ldr	r3, [r7, #16]
 8005692:	1ad3      	subs	r3, r2, r3
 8005694:	f241 3288 	movw	r2, #5000	; 0x1388
 8005698:	4293      	cmp	r3, r2
 800569a:	d901      	bls.n	80056a0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800569c:	2303      	movs	r3, #3
 800569e:	e0d8      	b.n	8005852 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056a0:	4b4c      	ldr	r3, [pc, #304]	; (80057d4 <HAL_RCC_OscConfig+0x4d0>)
 80056a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056a4:	f003 0302 	and.w	r3, r3, #2
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d0ee      	beq.n	800568a <HAL_RCC_OscConfig+0x386>
 80056ac:	e014      	b.n	80056d8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056ae:	f7fd fc85 	bl	8002fbc <HAL_GetTick>
 80056b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80056b4:	e00a      	b.n	80056cc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056b6:	f7fd fc81 	bl	8002fbc <HAL_GetTick>
 80056ba:	4602      	mov	r2, r0
 80056bc:	693b      	ldr	r3, [r7, #16]
 80056be:	1ad3      	subs	r3, r2, r3
 80056c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d901      	bls.n	80056cc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80056c8:	2303      	movs	r3, #3
 80056ca:	e0c2      	b.n	8005852 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80056cc:	4b41      	ldr	r3, [pc, #260]	; (80057d4 <HAL_RCC_OscConfig+0x4d0>)
 80056ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056d0:	f003 0302 	and.w	r3, r3, #2
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d1ee      	bne.n	80056b6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80056d8:	7dfb      	ldrb	r3, [r7, #23]
 80056da:	2b01      	cmp	r3, #1
 80056dc:	d105      	bne.n	80056ea <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80056de:	4b3d      	ldr	r3, [pc, #244]	; (80057d4 <HAL_RCC_OscConfig+0x4d0>)
 80056e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056e2:	4a3c      	ldr	r2, [pc, #240]	; (80057d4 <HAL_RCC_OscConfig+0x4d0>)
 80056e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80056e8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	699b      	ldr	r3, [r3, #24]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	f000 80ae 	beq.w	8005850 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80056f4:	4b37      	ldr	r3, [pc, #220]	; (80057d4 <HAL_RCC_OscConfig+0x4d0>)
 80056f6:	689b      	ldr	r3, [r3, #8]
 80056f8:	f003 030c 	and.w	r3, r3, #12
 80056fc:	2b08      	cmp	r3, #8
 80056fe:	d06d      	beq.n	80057dc <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	699b      	ldr	r3, [r3, #24]
 8005704:	2b02      	cmp	r3, #2
 8005706:	d14b      	bne.n	80057a0 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005708:	4b32      	ldr	r3, [pc, #200]	; (80057d4 <HAL_RCC_OscConfig+0x4d0>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a31      	ldr	r2, [pc, #196]	; (80057d4 <HAL_RCC_OscConfig+0x4d0>)
 800570e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005712:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005714:	f7fd fc52 	bl	8002fbc <HAL_GetTick>
 8005718:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800571a:	e008      	b.n	800572e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800571c:	f7fd fc4e 	bl	8002fbc <HAL_GetTick>
 8005720:	4602      	mov	r2, r0
 8005722:	693b      	ldr	r3, [r7, #16]
 8005724:	1ad3      	subs	r3, r2, r3
 8005726:	2b02      	cmp	r3, #2
 8005728:	d901      	bls.n	800572e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800572a:	2303      	movs	r3, #3
 800572c:	e091      	b.n	8005852 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800572e:	4b29      	ldr	r3, [pc, #164]	; (80057d4 <HAL_RCC_OscConfig+0x4d0>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005736:	2b00      	cmp	r3, #0
 8005738:	d1f0      	bne.n	800571c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	69da      	ldr	r2, [r3, #28]
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6a1b      	ldr	r3, [r3, #32]
 8005742:	431a      	orrs	r2, r3
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005748:	019b      	lsls	r3, r3, #6
 800574a:	431a      	orrs	r2, r3
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005750:	085b      	lsrs	r3, r3, #1
 8005752:	3b01      	subs	r3, #1
 8005754:	041b      	lsls	r3, r3, #16
 8005756:	431a      	orrs	r2, r3
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800575c:	061b      	lsls	r3, r3, #24
 800575e:	431a      	orrs	r2, r3
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005764:	071b      	lsls	r3, r3, #28
 8005766:	491b      	ldr	r1, [pc, #108]	; (80057d4 <HAL_RCC_OscConfig+0x4d0>)
 8005768:	4313      	orrs	r3, r2
 800576a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800576c:	4b19      	ldr	r3, [pc, #100]	; (80057d4 <HAL_RCC_OscConfig+0x4d0>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a18      	ldr	r2, [pc, #96]	; (80057d4 <HAL_RCC_OscConfig+0x4d0>)
 8005772:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005776:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005778:	f7fd fc20 	bl	8002fbc <HAL_GetTick>
 800577c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800577e:	e008      	b.n	8005792 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005780:	f7fd fc1c 	bl	8002fbc <HAL_GetTick>
 8005784:	4602      	mov	r2, r0
 8005786:	693b      	ldr	r3, [r7, #16]
 8005788:	1ad3      	subs	r3, r2, r3
 800578a:	2b02      	cmp	r3, #2
 800578c:	d901      	bls.n	8005792 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800578e:	2303      	movs	r3, #3
 8005790:	e05f      	b.n	8005852 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005792:	4b10      	ldr	r3, [pc, #64]	; (80057d4 <HAL_RCC_OscConfig+0x4d0>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800579a:	2b00      	cmp	r3, #0
 800579c:	d0f0      	beq.n	8005780 <HAL_RCC_OscConfig+0x47c>
 800579e:	e057      	b.n	8005850 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057a0:	4b0c      	ldr	r3, [pc, #48]	; (80057d4 <HAL_RCC_OscConfig+0x4d0>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a0b      	ldr	r2, [pc, #44]	; (80057d4 <HAL_RCC_OscConfig+0x4d0>)
 80057a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80057aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057ac:	f7fd fc06 	bl	8002fbc <HAL_GetTick>
 80057b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057b2:	e008      	b.n	80057c6 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057b4:	f7fd fc02 	bl	8002fbc <HAL_GetTick>
 80057b8:	4602      	mov	r2, r0
 80057ba:	693b      	ldr	r3, [r7, #16]
 80057bc:	1ad3      	subs	r3, r2, r3
 80057be:	2b02      	cmp	r3, #2
 80057c0:	d901      	bls.n	80057c6 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80057c2:	2303      	movs	r3, #3
 80057c4:	e045      	b.n	8005852 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057c6:	4b03      	ldr	r3, [pc, #12]	; (80057d4 <HAL_RCC_OscConfig+0x4d0>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d1f0      	bne.n	80057b4 <HAL_RCC_OscConfig+0x4b0>
 80057d2:	e03d      	b.n	8005850 <HAL_RCC_OscConfig+0x54c>
 80057d4:	40023800 	.word	0x40023800
 80057d8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80057dc:	4b1f      	ldr	r3, [pc, #124]	; (800585c <HAL_RCC_OscConfig+0x558>)
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	699b      	ldr	r3, [r3, #24]
 80057e6:	2b01      	cmp	r3, #1
 80057e8:	d030      	beq.n	800584c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80057f4:	429a      	cmp	r2, r3
 80057f6:	d129      	bne.n	800584c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005802:	429a      	cmp	r2, r3
 8005804:	d122      	bne.n	800584c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005806:	68fa      	ldr	r2, [r7, #12]
 8005808:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800580c:	4013      	ands	r3, r2
 800580e:	687a      	ldr	r2, [r7, #4]
 8005810:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005812:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005814:	4293      	cmp	r3, r2
 8005816:	d119      	bne.n	800584c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005822:	085b      	lsrs	r3, r3, #1
 8005824:	3b01      	subs	r3, #1
 8005826:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005828:	429a      	cmp	r2, r3
 800582a:	d10f      	bne.n	800584c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005836:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005838:	429a      	cmp	r2, r3
 800583a:	d107      	bne.n	800584c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005846:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005848:	429a      	cmp	r2, r3
 800584a:	d001      	beq.n	8005850 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800584c:	2301      	movs	r3, #1
 800584e:	e000      	b.n	8005852 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8005850:	2300      	movs	r3, #0
}
 8005852:	4618      	mov	r0, r3
 8005854:	3718      	adds	r7, #24
 8005856:	46bd      	mov	sp, r7
 8005858:	bd80      	pop	{r7, pc}
 800585a:	bf00      	nop
 800585c:	40023800 	.word	0x40023800

08005860 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b084      	sub	sp, #16
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
 8005868:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800586a:	2300      	movs	r3, #0
 800586c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d101      	bne.n	8005878 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005874:	2301      	movs	r3, #1
 8005876:	e0d0      	b.n	8005a1a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005878:	4b6a      	ldr	r3, [pc, #424]	; (8005a24 <HAL_RCC_ClockConfig+0x1c4>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f003 030f 	and.w	r3, r3, #15
 8005880:	683a      	ldr	r2, [r7, #0]
 8005882:	429a      	cmp	r2, r3
 8005884:	d910      	bls.n	80058a8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005886:	4b67      	ldr	r3, [pc, #412]	; (8005a24 <HAL_RCC_ClockConfig+0x1c4>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f023 020f 	bic.w	r2, r3, #15
 800588e:	4965      	ldr	r1, [pc, #404]	; (8005a24 <HAL_RCC_ClockConfig+0x1c4>)
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	4313      	orrs	r3, r2
 8005894:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005896:	4b63      	ldr	r3, [pc, #396]	; (8005a24 <HAL_RCC_ClockConfig+0x1c4>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f003 030f 	and.w	r3, r3, #15
 800589e:	683a      	ldr	r2, [r7, #0]
 80058a0:	429a      	cmp	r2, r3
 80058a2:	d001      	beq.n	80058a8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80058a4:	2301      	movs	r3, #1
 80058a6:	e0b8      	b.n	8005a1a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f003 0302 	and.w	r3, r3, #2
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d020      	beq.n	80058f6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f003 0304 	and.w	r3, r3, #4
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d005      	beq.n	80058cc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80058c0:	4b59      	ldr	r3, [pc, #356]	; (8005a28 <HAL_RCC_ClockConfig+0x1c8>)
 80058c2:	689b      	ldr	r3, [r3, #8]
 80058c4:	4a58      	ldr	r2, [pc, #352]	; (8005a28 <HAL_RCC_ClockConfig+0x1c8>)
 80058c6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80058ca:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f003 0308 	and.w	r3, r3, #8
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d005      	beq.n	80058e4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80058d8:	4b53      	ldr	r3, [pc, #332]	; (8005a28 <HAL_RCC_ClockConfig+0x1c8>)
 80058da:	689b      	ldr	r3, [r3, #8]
 80058dc:	4a52      	ldr	r2, [pc, #328]	; (8005a28 <HAL_RCC_ClockConfig+0x1c8>)
 80058de:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80058e2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80058e4:	4b50      	ldr	r3, [pc, #320]	; (8005a28 <HAL_RCC_ClockConfig+0x1c8>)
 80058e6:	689b      	ldr	r3, [r3, #8]
 80058e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	689b      	ldr	r3, [r3, #8]
 80058f0:	494d      	ldr	r1, [pc, #308]	; (8005a28 <HAL_RCC_ClockConfig+0x1c8>)
 80058f2:	4313      	orrs	r3, r2
 80058f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f003 0301 	and.w	r3, r3, #1
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d040      	beq.n	8005984 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	685b      	ldr	r3, [r3, #4]
 8005906:	2b01      	cmp	r3, #1
 8005908:	d107      	bne.n	800591a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800590a:	4b47      	ldr	r3, [pc, #284]	; (8005a28 <HAL_RCC_ClockConfig+0x1c8>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005912:	2b00      	cmp	r3, #0
 8005914:	d115      	bne.n	8005942 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005916:	2301      	movs	r3, #1
 8005918:	e07f      	b.n	8005a1a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	685b      	ldr	r3, [r3, #4]
 800591e:	2b02      	cmp	r3, #2
 8005920:	d107      	bne.n	8005932 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005922:	4b41      	ldr	r3, [pc, #260]	; (8005a28 <HAL_RCC_ClockConfig+0x1c8>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800592a:	2b00      	cmp	r3, #0
 800592c:	d109      	bne.n	8005942 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800592e:	2301      	movs	r3, #1
 8005930:	e073      	b.n	8005a1a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005932:	4b3d      	ldr	r3, [pc, #244]	; (8005a28 <HAL_RCC_ClockConfig+0x1c8>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f003 0302 	and.w	r3, r3, #2
 800593a:	2b00      	cmp	r3, #0
 800593c:	d101      	bne.n	8005942 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800593e:	2301      	movs	r3, #1
 8005940:	e06b      	b.n	8005a1a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005942:	4b39      	ldr	r3, [pc, #228]	; (8005a28 <HAL_RCC_ClockConfig+0x1c8>)
 8005944:	689b      	ldr	r3, [r3, #8]
 8005946:	f023 0203 	bic.w	r2, r3, #3
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	4936      	ldr	r1, [pc, #216]	; (8005a28 <HAL_RCC_ClockConfig+0x1c8>)
 8005950:	4313      	orrs	r3, r2
 8005952:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005954:	f7fd fb32 	bl	8002fbc <HAL_GetTick>
 8005958:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800595a:	e00a      	b.n	8005972 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800595c:	f7fd fb2e 	bl	8002fbc <HAL_GetTick>
 8005960:	4602      	mov	r2, r0
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	1ad3      	subs	r3, r2, r3
 8005966:	f241 3288 	movw	r2, #5000	; 0x1388
 800596a:	4293      	cmp	r3, r2
 800596c:	d901      	bls.n	8005972 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800596e:	2303      	movs	r3, #3
 8005970:	e053      	b.n	8005a1a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005972:	4b2d      	ldr	r3, [pc, #180]	; (8005a28 <HAL_RCC_ClockConfig+0x1c8>)
 8005974:	689b      	ldr	r3, [r3, #8]
 8005976:	f003 020c 	and.w	r2, r3, #12
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	009b      	lsls	r3, r3, #2
 8005980:	429a      	cmp	r2, r3
 8005982:	d1eb      	bne.n	800595c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005984:	4b27      	ldr	r3, [pc, #156]	; (8005a24 <HAL_RCC_ClockConfig+0x1c4>)
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f003 030f 	and.w	r3, r3, #15
 800598c:	683a      	ldr	r2, [r7, #0]
 800598e:	429a      	cmp	r2, r3
 8005990:	d210      	bcs.n	80059b4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005992:	4b24      	ldr	r3, [pc, #144]	; (8005a24 <HAL_RCC_ClockConfig+0x1c4>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f023 020f 	bic.w	r2, r3, #15
 800599a:	4922      	ldr	r1, [pc, #136]	; (8005a24 <HAL_RCC_ClockConfig+0x1c4>)
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	4313      	orrs	r3, r2
 80059a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80059a2:	4b20      	ldr	r3, [pc, #128]	; (8005a24 <HAL_RCC_ClockConfig+0x1c4>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f003 030f 	and.w	r3, r3, #15
 80059aa:	683a      	ldr	r2, [r7, #0]
 80059ac:	429a      	cmp	r2, r3
 80059ae:	d001      	beq.n	80059b4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80059b0:	2301      	movs	r3, #1
 80059b2:	e032      	b.n	8005a1a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f003 0304 	and.w	r3, r3, #4
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d008      	beq.n	80059d2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80059c0:	4b19      	ldr	r3, [pc, #100]	; (8005a28 <HAL_RCC_ClockConfig+0x1c8>)
 80059c2:	689b      	ldr	r3, [r3, #8]
 80059c4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	68db      	ldr	r3, [r3, #12]
 80059cc:	4916      	ldr	r1, [pc, #88]	; (8005a28 <HAL_RCC_ClockConfig+0x1c8>)
 80059ce:	4313      	orrs	r3, r2
 80059d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f003 0308 	and.w	r3, r3, #8
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d009      	beq.n	80059f2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80059de:	4b12      	ldr	r3, [pc, #72]	; (8005a28 <HAL_RCC_ClockConfig+0x1c8>)
 80059e0:	689b      	ldr	r3, [r3, #8]
 80059e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	691b      	ldr	r3, [r3, #16]
 80059ea:	00db      	lsls	r3, r3, #3
 80059ec:	490e      	ldr	r1, [pc, #56]	; (8005a28 <HAL_RCC_ClockConfig+0x1c8>)
 80059ee:	4313      	orrs	r3, r2
 80059f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80059f2:	f000 f821 	bl	8005a38 <HAL_RCC_GetSysClockFreq>
 80059f6:	4602      	mov	r2, r0
 80059f8:	4b0b      	ldr	r3, [pc, #44]	; (8005a28 <HAL_RCC_ClockConfig+0x1c8>)
 80059fa:	689b      	ldr	r3, [r3, #8]
 80059fc:	091b      	lsrs	r3, r3, #4
 80059fe:	f003 030f 	and.w	r3, r3, #15
 8005a02:	490a      	ldr	r1, [pc, #40]	; (8005a2c <HAL_RCC_ClockConfig+0x1cc>)
 8005a04:	5ccb      	ldrb	r3, [r1, r3]
 8005a06:	fa22 f303 	lsr.w	r3, r2, r3
 8005a0a:	4a09      	ldr	r2, [pc, #36]	; (8005a30 <HAL_RCC_ClockConfig+0x1d0>)
 8005a0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005a0e:	4b09      	ldr	r3, [pc, #36]	; (8005a34 <HAL_RCC_ClockConfig+0x1d4>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4618      	mov	r0, r3
 8005a14:	f7fd fa8e 	bl	8002f34 <HAL_InitTick>

  return HAL_OK;
 8005a18:	2300      	movs	r3, #0
}
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	3710      	adds	r7, #16
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bd80      	pop	{r7, pc}
 8005a22:	bf00      	nop
 8005a24:	40023c00 	.word	0x40023c00
 8005a28:	40023800 	.word	0x40023800
 8005a2c:	08008f4c 	.word	0x08008f4c
 8005a30:	20000004 	.word	0x20000004
 8005a34:	20000008 	.word	0x20000008

08005a38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a3c:	b094      	sub	sp, #80	; 0x50
 8005a3e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005a40:	2300      	movs	r3, #0
 8005a42:	647b      	str	r3, [r7, #68]	; 0x44
 8005a44:	2300      	movs	r3, #0
 8005a46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a48:	2300      	movs	r3, #0
 8005a4a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005a50:	4b79      	ldr	r3, [pc, #484]	; (8005c38 <HAL_RCC_GetSysClockFreq+0x200>)
 8005a52:	689b      	ldr	r3, [r3, #8]
 8005a54:	f003 030c 	and.w	r3, r3, #12
 8005a58:	2b08      	cmp	r3, #8
 8005a5a:	d00d      	beq.n	8005a78 <HAL_RCC_GetSysClockFreq+0x40>
 8005a5c:	2b08      	cmp	r3, #8
 8005a5e:	f200 80e1 	bhi.w	8005c24 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d002      	beq.n	8005a6c <HAL_RCC_GetSysClockFreq+0x34>
 8005a66:	2b04      	cmp	r3, #4
 8005a68:	d003      	beq.n	8005a72 <HAL_RCC_GetSysClockFreq+0x3a>
 8005a6a:	e0db      	b.n	8005c24 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005a6c:	4b73      	ldr	r3, [pc, #460]	; (8005c3c <HAL_RCC_GetSysClockFreq+0x204>)
 8005a6e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005a70:	e0db      	b.n	8005c2a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005a72:	4b73      	ldr	r3, [pc, #460]	; (8005c40 <HAL_RCC_GetSysClockFreq+0x208>)
 8005a74:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005a76:	e0d8      	b.n	8005c2a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005a78:	4b6f      	ldr	r3, [pc, #444]	; (8005c38 <HAL_RCC_GetSysClockFreq+0x200>)
 8005a7a:	685b      	ldr	r3, [r3, #4]
 8005a7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a80:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005a82:	4b6d      	ldr	r3, [pc, #436]	; (8005c38 <HAL_RCC_GetSysClockFreq+0x200>)
 8005a84:	685b      	ldr	r3, [r3, #4]
 8005a86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d063      	beq.n	8005b56 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a8e:	4b6a      	ldr	r3, [pc, #424]	; (8005c38 <HAL_RCC_GetSysClockFreq+0x200>)
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	099b      	lsrs	r3, r3, #6
 8005a94:	2200      	movs	r2, #0
 8005a96:	63bb      	str	r3, [r7, #56]	; 0x38
 8005a98:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005a9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005aa0:	633b      	str	r3, [r7, #48]	; 0x30
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	637b      	str	r3, [r7, #52]	; 0x34
 8005aa6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005aaa:	4622      	mov	r2, r4
 8005aac:	462b      	mov	r3, r5
 8005aae:	f04f 0000 	mov.w	r0, #0
 8005ab2:	f04f 0100 	mov.w	r1, #0
 8005ab6:	0159      	lsls	r1, r3, #5
 8005ab8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005abc:	0150      	lsls	r0, r2, #5
 8005abe:	4602      	mov	r2, r0
 8005ac0:	460b      	mov	r3, r1
 8005ac2:	4621      	mov	r1, r4
 8005ac4:	1a51      	subs	r1, r2, r1
 8005ac6:	6139      	str	r1, [r7, #16]
 8005ac8:	4629      	mov	r1, r5
 8005aca:	eb63 0301 	sbc.w	r3, r3, r1
 8005ace:	617b      	str	r3, [r7, #20]
 8005ad0:	f04f 0200 	mov.w	r2, #0
 8005ad4:	f04f 0300 	mov.w	r3, #0
 8005ad8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005adc:	4659      	mov	r1, fp
 8005ade:	018b      	lsls	r3, r1, #6
 8005ae0:	4651      	mov	r1, sl
 8005ae2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005ae6:	4651      	mov	r1, sl
 8005ae8:	018a      	lsls	r2, r1, #6
 8005aea:	4651      	mov	r1, sl
 8005aec:	ebb2 0801 	subs.w	r8, r2, r1
 8005af0:	4659      	mov	r1, fp
 8005af2:	eb63 0901 	sbc.w	r9, r3, r1
 8005af6:	f04f 0200 	mov.w	r2, #0
 8005afa:	f04f 0300 	mov.w	r3, #0
 8005afe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005b02:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005b06:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005b0a:	4690      	mov	r8, r2
 8005b0c:	4699      	mov	r9, r3
 8005b0e:	4623      	mov	r3, r4
 8005b10:	eb18 0303 	adds.w	r3, r8, r3
 8005b14:	60bb      	str	r3, [r7, #8]
 8005b16:	462b      	mov	r3, r5
 8005b18:	eb49 0303 	adc.w	r3, r9, r3
 8005b1c:	60fb      	str	r3, [r7, #12]
 8005b1e:	f04f 0200 	mov.w	r2, #0
 8005b22:	f04f 0300 	mov.w	r3, #0
 8005b26:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005b2a:	4629      	mov	r1, r5
 8005b2c:	024b      	lsls	r3, r1, #9
 8005b2e:	4621      	mov	r1, r4
 8005b30:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005b34:	4621      	mov	r1, r4
 8005b36:	024a      	lsls	r2, r1, #9
 8005b38:	4610      	mov	r0, r2
 8005b3a:	4619      	mov	r1, r3
 8005b3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b3e:	2200      	movs	r2, #0
 8005b40:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b42:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005b44:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005b48:	f7fa fcd8 	bl	80004fc <__aeabi_uldivmod>
 8005b4c:	4602      	mov	r2, r0
 8005b4e:	460b      	mov	r3, r1
 8005b50:	4613      	mov	r3, r2
 8005b52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b54:	e058      	b.n	8005c08 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b56:	4b38      	ldr	r3, [pc, #224]	; (8005c38 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	099b      	lsrs	r3, r3, #6
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	4618      	mov	r0, r3
 8005b60:	4611      	mov	r1, r2
 8005b62:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005b66:	623b      	str	r3, [r7, #32]
 8005b68:	2300      	movs	r3, #0
 8005b6a:	627b      	str	r3, [r7, #36]	; 0x24
 8005b6c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005b70:	4642      	mov	r2, r8
 8005b72:	464b      	mov	r3, r9
 8005b74:	f04f 0000 	mov.w	r0, #0
 8005b78:	f04f 0100 	mov.w	r1, #0
 8005b7c:	0159      	lsls	r1, r3, #5
 8005b7e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005b82:	0150      	lsls	r0, r2, #5
 8005b84:	4602      	mov	r2, r0
 8005b86:	460b      	mov	r3, r1
 8005b88:	4641      	mov	r1, r8
 8005b8a:	ebb2 0a01 	subs.w	sl, r2, r1
 8005b8e:	4649      	mov	r1, r9
 8005b90:	eb63 0b01 	sbc.w	fp, r3, r1
 8005b94:	f04f 0200 	mov.w	r2, #0
 8005b98:	f04f 0300 	mov.w	r3, #0
 8005b9c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005ba0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005ba4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005ba8:	ebb2 040a 	subs.w	r4, r2, sl
 8005bac:	eb63 050b 	sbc.w	r5, r3, fp
 8005bb0:	f04f 0200 	mov.w	r2, #0
 8005bb4:	f04f 0300 	mov.w	r3, #0
 8005bb8:	00eb      	lsls	r3, r5, #3
 8005bba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005bbe:	00e2      	lsls	r2, r4, #3
 8005bc0:	4614      	mov	r4, r2
 8005bc2:	461d      	mov	r5, r3
 8005bc4:	4643      	mov	r3, r8
 8005bc6:	18e3      	adds	r3, r4, r3
 8005bc8:	603b      	str	r3, [r7, #0]
 8005bca:	464b      	mov	r3, r9
 8005bcc:	eb45 0303 	adc.w	r3, r5, r3
 8005bd0:	607b      	str	r3, [r7, #4]
 8005bd2:	f04f 0200 	mov.w	r2, #0
 8005bd6:	f04f 0300 	mov.w	r3, #0
 8005bda:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005bde:	4629      	mov	r1, r5
 8005be0:	028b      	lsls	r3, r1, #10
 8005be2:	4621      	mov	r1, r4
 8005be4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005be8:	4621      	mov	r1, r4
 8005bea:	028a      	lsls	r2, r1, #10
 8005bec:	4610      	mov	r0, r2
 8005bee:	4619      	mov	r1, r3
 8005bf0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	61bb      	str	r3, [r7, #24]
 8005bf6:	61fa      	str	r2, [r7, #28]
 8005bf8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005bfc:	f7fa fc7e 	bl	80004fc <__aeabi_uldivmod>
 8005c00:	4602      	mov	r2, r0
 8005c02:	460b      	mov	r3, r1
 8005c04:	4613      	mov	r3, r2
 8005c06:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005c08:	4b0b      	ldr	r3, [pc, #44]	; (8005c38 <HAL_RCC_GetSysClockFreq+0x200>)
 8005c0a:	685b      	ldr	r3, [r3, #4]
 8005c0c:	0c1b      	lsrs	r3, r3, #16
 8005c0e:	f003 0303 	and.w	r3, r3, #3
 8005c12:	3301      	adds	r3, #1
 8005c14:	005b      	lsls	r3, r3, #1
 8005c16:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8005c18:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005c1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c20:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005c22:	e002      	b.n	8005c2a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005c24:	4b05      	ldr	r3, [pc, #20]	; (8005c3c <HAL_RCC_GetSysClockFreq+0x204>)
 8005c26:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005c28:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005c2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	3750      	adds	r7, #80	; 0x50
 8005c30:	46bd      	mov	sp, r7
 8005c32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c36:	bf00      	nop
 8005c38:	40023800 	.word	0x40023800
 8005c3c:	00f42400 	.word	0x00f42400
 8005c40:	007a1200 	.word	0x007a1200

08005c44 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c44:	b480      	push	{r7}
 8005c46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005c48:	4b03      	ldr	r3, [pc, #12]	; (8005c58 <HAL_RCC_GetHCLKFreq+0x14>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c54:	4770      	bx	lr
 8005c56:	bf00      	nop
 8005c58:	20000004 	.word	0x20000004

08005c5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005c60:	f7ff fff0 	bl	8005c44 <HAL_RCC_GetHCLKFreq>
 8005c64:	4602      	mov	r2, r0
 8005c66:	4b05      	ldr	r3, [pc, #20]	; (8005c7c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005c68:	689b      	ldr	r3, [r3, #8]
 8005c6a:	0a9b      	lsrs	r3, r3, #10
 8005c6c:	f003 0307 	and.w	r3, r3, #7
 8005c70:	4903      	ldr	r1, [pc, #12]	; (8005c80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005c72:	5ccb      	ldrb	r3, [r1, r3]
 8005c74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c78:	4618      	mov	r0, r3
 8005c7a:	bd80      	pop	{r7, pc}
 8005c7c:	40023800 	.word	0x40023800
 8005c80:	08008f5c 	.word	0x08008f5c

08005c84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005c88:	f7ff ffdc 	bl	8005c44 <HAL_RCC_GetHCLKFreq>
 8005c8c:	4602      	mov	r2, r0
 8005c8e:	4b05      	ldr	r3, [pc, #20]	; (8005ca4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005c90:	689b      	ldr	r3, [r3, #8]
 8005c92:	0b5b      	lsrs	r3, r3, #13
 8005c94:	f003 0307 	and.w	r3, r3, #7
 8005c98:	4903      	ldr	r1, [pc, #12]	; (8005ca8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005c9a:	5ccb      	ldrb	r3, [r1, r3]
 8005c9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	bd80      	pop	{r7, pc}
 8005ca4:	40023800 	.word	0x40023800
 8005ca8:	08008f5c 	.word	0x08008f5c

08005cac <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b088      	sub	sp, #32
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005cb8:	2300      	movs	r3, #0
 8005cba:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f003 0301 	and.w	r3, r3, #1
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d012      	beq.n	8005cfa <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005cd4:	4b69      	ldr	r3, [pc, #420]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005cd6:	689b      	ldr	r3, [r3, #8]
 8005cd8:	4a68      	ldr	r2, [pc, #416]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005cda:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005cde:	6093      	str	r3, [r2, #8]
 8005ce0:	4b66      	ldr	r3, [pc, #408]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ce2:	689a      	ldr	r2, [r3, #8]
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ce8:	4964      	ldr	r1, [pc, #400]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005cea:	4313      	orrs	r3, r2
 8005cec:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d101      	bne.n	8005cfa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d017      	beq.n	8005d36 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005d06:	4b5d      	ldr	r3, [pc, #372]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d0c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d14:	4959      	ldr	r1, [pc, #356]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d16:	4313      	orrs	r3, r2
 8005d18:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d20:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d24:	d101      	bne.n	8005d2a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8005d26:	2301      	movs	r3, #1
 8005d28:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d101      	bne.n	8005d36 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8005d32:	2301      	movs	r3, #1
 8005d34:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d017      	beq.n	8005d72 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005d42:	4b4e      	ldr	r3, [pc, #312]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d48:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d50:	494a      	ldr	r1, [pc, #296]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d52:	4313      	orrs	r3, r2
 8005d54:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d5c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d60:	d101      	bne.n	8005d66 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8005d62:	2301      	movs	r3, #1
 8005d64:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d101      	bne.n	8005d72 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8005d6e:	2301      	movs	r3, #1
 8005d70:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d001      	beq.n	8005d82 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8005d7e:	2301      	movs	r3, #1
 8005d80:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f003 0320 	and.w	r3, r3, #32
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	f000 808b 	beq.w	8005ea6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005d90:	4b3a      	ldr	r3, [pc, #232]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d94:	4a39      	ldr	r2, [pc, #228]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d9a:	6413      	str	r3, [r2, #64]	; 0x40
 8005d9c:	4b37      	ldr	r3, [pc, #220]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005da0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005da4:	60bb      	str	r3, [r7, #8]
 8005da6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005da8:	4b35      	ldr	r3, [pc, #212]	; (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4a34      	ldr	r2, [pc, #208]	; (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005dae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005db2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005db4:	f7fd f902 	bl	8002fbc <HAL_GetTick>
 8005db8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005dba:	e008      	b.n	8005dce <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005dbc:	f7fd f8fe 	bl	8002fbc <HAL_GetTick>
 8005dc0:	4602      	mov	r2, r0
 8005dc2:	697b      	ldr	r3, [r7, #20]
 8005dc4:	1ad3      	subs	r3, r2, r3
 8005dc6:	2b64      	cmp	r3, #100	; 0x64
 8005dc8:	d901      	bls.n	8005dce <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8005dca:	2303      	movs	r3, #3
 8005dcc:	e38f      	b.n	80064ee <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005dce:	4b2c      	ldr	r3, [pc, #176]	; (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d0f0      	beq.n	8005dbc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005dda:	4b28      	ldr	r3, [pc, #160]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ddc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005de2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005de4:	693b      	ldr	r3, [r7, #16]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d035      	beq.n	8005e56 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005df2:	693a      	ldr	r2, [r7, #16]
 8005df4:	429a      	cmp	r2, r3
 8005df6:	d02e      	beq.n	8005e56 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005df8:	4b20      	ldr	r3, [pc, #128]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005dfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dfc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e00:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005e02:	4b1e      	ldr	r3, [pc, #120]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e06:	4a1d      	ldr	r2, [pc, #116]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e0c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005e0e:	4b1b      	ldr	r3, [pc, #108]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e12:	4a1a      	ldr	r2, [pc, #104]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e18:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8005e1a:	4a18      	ldr	r2, [pc, #96]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e1c:	693b      	ldr	r3, [r7, #16]
 8005e1e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005e20:	4b16      	ldr	r3, [pc, #88]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e24:	f003 0301 	and.w	r3, r3, #1
 8005e28:	2b01      	cmp	r3, #1
 8005e2a:	d114      	bne.n	8005e56 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e2c:	f7fd f8c6 	bl	8002fbc <HAL_GetTick>
 8005e30:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e32:	e00a      	b.n	8005e4a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e34:	f7fd f8c2 	bl	8002fbc <HAL_GetTick>
 8005e38:	4602      	mov	r2, r0
 8005e3a:	697b      	ldr	r3, [r7, #20]
 8005e3c:	1ad3      	subs	r3, r2, r3
 8005e3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d901      	bls.n	8005e4a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8005e46:	2303      	movs	r3, #3
 8005e48:	e351      	b.n	80064ee <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e4a:	4b0c      	ldr	r3, [pc, #48]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e4e:	f003 0302 	and.w	r3, r3, #2
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d0ee      	beq.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e5e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e62:	d111      	bne.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005e64:	4b05      	ldr	r3, [pc, #20]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e66:	689b      	ldr	r3, [r3, #8]
 8005e68:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005e70:	4b04      	ldr	r3, [pc, #16]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005e72:	400b      	ands	r3, r1
 8005e74:	4901      	ldr	r1, [pc, #4]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e76:	4313      	orrs	r3, r2
 8005e78:	608b      	str	r3, [r1, #8]
 8005e7a:	e00b      	b.n	8005e94 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005e7c:	40023800 	.word	0x40023800
 8005e80:	40007000 	.word	0x40007000
 8005e84:	0ffffcff 	.word	0x0ffffcff
 8005e88:	4bac      	ldr	r3, [pc, #688]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005e8a:	689b      	ldr	r3, [r3, #8]
 8005e8c:	4aab      	ldr	r2, [pc, #684]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005e8e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005e92:	6093      	str	r3, [r2, #8]
 8005e94:	4ba9      	ldr	r3, [pc, #676]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005e96:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ea0:	49a6      	ldr	r1, [pc, #664]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005ea2:	4313      	orrs	r3, r2
 8005ea4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f003 0310 	and.w	r3, r3, #16
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d010      	beq.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005eb2:	4ba2      	ldr	r3, [pc, #648]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005eb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005eb8:	4aa0      	ldr	r2, [pc, #640]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005eba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005ebe:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005ec2:	4b9e      	ldr	r3, [pc, #632]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005ec4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ecc:	499b      	ldr	r1, [pc, #620]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d00a      	beq.n	8005ef6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005ee0:	4b96      	ldr	r3, [pc, #600]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005ee2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ee6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005eee:	4993      	ldr	r1, [pc, #588]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005ef0:	4313      	orrs	r3, r2
 8005ef2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d00a      	beq.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005f02:	4b8e      	ldr	r3, [pc, #568]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005f04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f08:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005f10:	498a      	ldr	r1, [pc, #552]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005f12:	4313      	orrs	r3, r2
 8005f14:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d00a      	beq.n	8005f3a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005f24:	4b85      	ldr	r3, [pc, #532]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005f26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f2a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f32:	4982      	ldr	r1, [pc, #520]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005f34:	4313      	orrs	r3, r2
 8005f36:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d00a      	beq.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005f46:	4b7d      	ldr	r3, [pc, #500]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005f48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f4c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f54:	4979      	ldr	r1, [pc, #484]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005f56:	4313      	orrs	r3, r2
 8005f58:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d00a      	beq.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005f68:	4b74      	ldr	r3, [pc, #464]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005f6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f6e:	f023 0203 	bic.w	r2, r3, #3
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f76:	4971      	ldr	r1, [pc, #452]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d00a      	beq.n	8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005f8a:	4b6c      	ldr	r3, [pc, #432]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005f8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f90:	f023 020c 	bic.w	r2, r3, #12
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f98:	4968      	ldr	r1, [pc, #416]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d00a      	beq.n	8005fc2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005fac:	4b63      	ldr	r3, [pc, #396]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005fae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fb2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fba:	4960      	ldr	r1, [pc, #384]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005fbc:	4313      	orrs	r3, r2
 8005fbe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d00a      	beq.n	8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005fce:	4b5b      	ldr	r3, [pc, #364]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005fd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fd4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fdc:	4957      	ldr	r1, [pc, #348]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005fde:	4313      	orrs	r3, r2
 8005fe0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d00a      	beq.n	8006006 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005ff0:	4b52      	ldr	r3, [pc, #328]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005ff2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ff6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ffe:	494f      	ldr	r1, [pc, #316]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006000:	4313      	orrs	r3, r2
 8006002:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800600e:	2b00      	cmp	r3, #0
 8006010:	d00a      	beq.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8006012:	4b4a      	ldr	r3, [pc, #296]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006014:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006018:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006020:	4946      	ldr	r1, [pc, #280]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006022:	4313      	orrs	r3, r2
 8006024:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006030:	2b00      	cmp	r3, #0
 8006032:	d00a      	beq.n	800604a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8006034:	4b41      	ldr	r3, [pc, #260]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006036:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800603a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006042:	493e      	ldr	r1, [pc, #248]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006044:	4313      	orrs	r3, r2
 8006046:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006052:	2b00      	cmp	r3, #0
 8006054:	d00a      	beq.n	800606c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8006056:	4b39      	ldr	r3, [pc, #228]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006058:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800605c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006064:	4935      	ldr	r1, [pc, #212]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006066:	4313      	orrs	r3, r2
 8006068:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006074:	2b00      	cmp	r3, #0
 8006076:	d00a      	beq.n	800608e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006078:	4b30      	ldr	r3, [pc, #192]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800607a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800607e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006086:	492d      	ldr	r1, [pc, #180]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006088:	4313      	orrs	r3, r2
 800608a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006096:	2b00      	cmp	r3, #0
 8006098:	d011      	beq.n	80060be <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800609a:	4b28      	ldr	r3, [pc, #160]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800609c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060a0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80060a8:	4924      	ldr	r1, [pc, #144]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80060aa:	4313      	orrs	r3, r2
 80060ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80060b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80060b8:	d101      	bne.n	80060be <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80060ba:	2301      	movs	r3, #1
 80060bc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f003 0308 	and.w	r3, r3, #8
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d001      	beq.n	80060ce <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80060ca:	2301      	movs	r3, #1
 80060cc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d00a      	beq.n	80060f0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80060da:	4b18      	ldr	r3, [pc, #96]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80060dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060e0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060e8:	4914      	ldr	r1, [pc, #80]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80060ea:	4313      	orrs	r3, r2
 80060ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d00b      	beq.n	8006114 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80060fc:	4b0f      	ldr	r3, [pc, #60]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80060fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006102:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800610c:	490b      	ldr	r1, [pc, #44]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800610e:	4313      	orrs	r3, r2
 8006110:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800611c:	2b00      	cmp	r3, #0
 800611e:	d00f      	beq.n	8006140 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8006120:	4b06      	ldr	r3, [pc, #24]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006122:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006126:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006130:	4902      	ldr	r1, [pc, #8]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006132:	4313      	orrs	r3, r2
 8006134:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006138:	e002      	b.n	8006140 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800613a:	bf00      	nop
 800613c:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006148:	2b00      	cmp	r3, #0
 800614a:	d00b      	beq.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800614c:	4b8a      	ldr	r3, [pc, #552]	; (8006378 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800614e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006152:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800615c:	4986      	ldr	r1, [pc, #536]	; (8006378 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800615e:	4313      	orrs	r3, r2
 8006160:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800616c:	2b00      	cmp	r3, #0
 800616e:	d00b      	beq.n	8006188 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8006170:	4b81      	ldr	r3, [pc, #516]	; (8006378 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006172:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006176:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006180:	497d      	ldr	r1, [pc, #500]	; (8006378 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006182:	4313      	orrs	r3, r2
 8006184:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006188:	69fb      	ldr	r3, [r7, #28]
 800618a:	2b01      	cmp	r3, #1
 800618c:	d006      	beq.n	800619c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006196:	2b00      	cmp	r3, #0
 8006198:	f000 80d6 	beq.w	8006348 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800619c:	4b76      	ldr	r3, [pc, #472]	; (8006378 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4a75      	ldr	r2, [pc, #468]	; (8006378 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80061a2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80061a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80061a8:	f7fc ff08 	bl	8002fbc <HAL_GetTick>
 80061ac:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80061ae:	e008      	b.n	80061c2 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80061b0:	f7fc ff04 	bl	8002fbc <HAL_GetTick>
 80061b4:	4602      	mov	r2, r0
 80061b6:	697b      	ldr	r3, [r7, #20]
 80061b8:	1ad3      	subs	r3, r2, r3
 80061ba:	2b64      	cmp	r3, #100	; 0x64
 80061bc:	d901      	bls.n	80061c2 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80061be:	2303      	movs	r3, #3
 80061c0:	e195      	b.n	80064ee <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80061c2:	4b6d      	ldr	r3, [pc, #436]	; (8006378 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d1f0      	bne.n	80061b0 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f003 0301 	and.w	r3, r3, #1
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d021      	beq.n	800621e <HAL_RCCEx_PeriphCLKConfig+0x572>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d11d      	bne.n	800621e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80061e2:	4b65      	ldr	r3, [pc, #404]	; (8006378 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80061e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80061e8:	0c1b      	lsrs	r3, r3, #16
 80061ea:	f003 0303 	and.w	r3, r3, #3
 80061ee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80061f0:	4b61      	ldr	r3, [pc, #388]	; (8006378 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80061f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80061f6:	0e1b      	lsrs	r3, r3, #24
 80061f8:	f003 030f 	and.w	r3, r3, #15
 80061fc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	685b      	ldr	r3, [r3, #4]
 8006202:	019a      	lsls	r2, r3, #6
 8006204:	693b      	ldr	r3, [r7, #16]
 8006206:	041b      	lsls	r3, r3, #16
 8006208:	431a      	orrs	r2, r3
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	061b      	lsls	r3, r3, #24
 800620e:	431a      	orrs	r2, r3
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	689b      	ldr	r3, [r3, #8]
 8006214:	071b      	lsls	r3, r3, #28
 8006216:	4958      	ldr	r1, [pc, #352]	; (8006378 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006218:	4313      	orrs	r3, r2
 800621a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006226:	2b00      	cmp	r3, #0
 8006228:	d004      	beq.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800622e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006232:	d00a      	beq.n	800624a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800623c:	2b00      	cmp	r3, #0
 800623e:	d02e      	beq.n	800629e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006244:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006248:	d129      	bne.n	800629e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800624a:	4b4b      	ldr	r3, [pc, #300]	; (8006378 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800624c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006250:	0c1b      	lsrs	r3, r3, #16
 8006252:	f003 0303 	and.w	r3, r3, #3
 8006256:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006258:	4b47      	ldr	r3, [pc, #284]	; (8006378 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800625a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800625e:	0f1b      	lsrs	r3, r3, #28
 8006260:	f003 0307 	and.w	r3, r3, #7
 8006264:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	685b      	ldr	r3, [r3, #4]
 800626a:	019a      	lsls	r2, r3, #6
 800626c:	693b      	ldr	r3, [r7, #16]
 800626e:	041b      	lsls	r3, r3, #16
 8006270:	431a      	orrs	r2, r3
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	68db      	ldr	r3, [r3, #12]
 8006276:	061b      	lsls	r3, r3, #24
 8006278:	431a      	orrs	r2, r3
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	071b      	lsls	r3, r3, #28
 800627e:	493e      	ldr	r1, [pc, #248]	; (8006378 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006280:	4313      	orrs	r3, r2
 8006282:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006286:	4b3c      	ldr	r3, [pc, #240]	; (8006378 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006288:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800628c:	f023 021f 	bic.w	r2, r3, #31
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006294:	3b01      	subs	r3, #1
 8006296:	4938      	ldr	r1, [pc, #224]	; (8006378 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006298:	4313      	orrs	r3, r2
 800629a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d01d      	beq.n	80062e6 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80062aa:	4b33      	ldr	r3, [pc, #204]	; (8006378 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80062ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80062b0:	0e1b      	lsrs	r3, r3, #24
 80062b2:	f003 030f 	and.w	r3, r3, #15
 80062b6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80062b8:	4b2f      	ldr	r3, [pc, #188]	; (8006378 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80062ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80062be:	0f1b      	lsrs	r3, r3, #28
 80062c0:	f003 0307 	and.w	r3, r3, #7
 80062c4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	685b      	ldr	r3, [r3, #4]
 80062ca:	019a      	lsls	r2, r3, #6
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	691b      	ldr	r3, [r3, #16]
 80062d0:	041b      	lsls	r3, r3, #16
 80062d2:	431a      	orrs	r2, r3
 80062d4:	693b      	ldr	r3, [r7, #16]
 80062d6:	061b      	lsls	r3, r3, #24
 80062d8:	431a      	orrs	r2, r3
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	071b      	lsls	r3, r3, #28
 80062de:	4926      	ldr	r1, [pc, #152]	; (8006378 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80062e0:	4313      	orrs	r3, r2
 80062e2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d011      	beq.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	685b      	ldr	r3, [r3, #4]
 80062f6:	019a      	lsls	r2, r3, #6
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	691b      	ldr	r3, [r3, #16]
 80062fc:	041b      	lsls	r3, r3, #16
 80062fe:	431a      	orrs	r2, r3
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	68db      	ldr	r3, [r3, #12]
 8006304:	061b      	lsls	r3, r3, #24
 8006306:	431a      	orrs	r2, r3
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	689b      	ldr	r3, [r3, #8]
 800630c:	071b      	lsls	r3, r3, #28
 800630e:	491a      	ldr	r1, [pc, #104]	; (8006378 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006310:	4313      	orrs	r3, r2
 8006312:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006316:	4b18      	ldr	r3, [pc, #96]	; (8006378 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4a17      	ldr	r2, [pc, #92]	; (8006378 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800631c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006320:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006322:	f7fc fe4b 	bl	8002fbc <HAL_GetTick>
 8006326:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006328:	e008      	b.n	800633c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800632a:	f7fc fe47 	bl	8002fbc <HAL_GetTick>
 800632e:	4602      	mov	r2, r0
 8006330:	697b      	ldr	r3, [r7, #20]
 8006332:	1ad3      	subs	r3, r2, r3
 8006334:	2b64      	cmp	r3, #100	; 0x64
 8006336:	d901      	bls.n	800633c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006338:	2303      	movs	r3, #3
 800633a:	e0d8      	b.n	80064ee <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800633c:	4b0e      	ldr	r3, [pc, #56]	; (8006378 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006344:	2b00      	cmp	r3, #0
 8006346:	d0f0      	beq.n	800632a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8006348:	69bb      	ldr	r3, [r7, #24]
 800634a:	2b01      	cmp	r3, #1
 800634c:	f040 80ce 	bne.w	80064ec <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006350:	4b09      	ldr	r3, [pc, #36]	; (8006378 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4a08      	ldr	r2, [pc, #32]	; (8006378 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006356:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800635a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800635c:	f7fc fe2e 	bl	8002fbc <HAL_GetTick>
 8006360:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006362:	e00b      	b.n	800637c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006364:	f7fc fe2a 	bl	8002fbc <HAL_GetTick>
 8006368:	4602      	mov	r2, r0
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	1ad3      	subs	r3, r2, r3
 800636e:	2b64      	cmp	r3, #100	; 0x64
 8006370:	d904      	bls.n	800637c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006372:	2303      	movs	r3, #3
 8006374:	e0bb      	b.n	80064ee <HAL_RCCEx_PeriphCLKConfig+0x842>
 8006376:	bf00      	nop
 8006378:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800637c:	4b5e      	ldr	r3, [pc, #376]	; (80064f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006384:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006388:	d0ec      	beq.n	8006364 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006392:	2b00      	cmp	r3, #0
 8006394:	d003      	beq.n	800639e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800639a:	2b00      	cmp	r3, #0
 800639c:	d009      	beq.n	80063b2 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d02e      	beq.n	8006408 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d12a      	bne.n	8006408 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80063b2:	4b51      	ldr	r3, [pc, #324]	; (80064f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80063b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063b8:	0c1b      	lsrs	r3, r3, #16
 80063ba:	f003 0303 	and.w	r3, r3, #3
 80063be:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80063c0:	4b4d      	ldr	r3, [pc, #308]	; (80064f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80063c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063c6:	0f1b      	lsrs	r3, r3, #28
 80063c8:	f003 0307 	and.w	r3, r3, #7
 80063cc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	695b      	ldr	r3, [r3, #20]
 80063d2:	019a      	lsls	r2, r3, #6
 80063d4:	693b      	ldr	r3, [r7, #16]
 80063d6:	041b      	lsls	r3, r3, #16
 80063d8:	431a      	orrs	r2, r3
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	699b      	ldr	r3, [r3, #24]
 80063de:	061b      	lsls	r3, r3, #24
 80063e0:	431a      	orrs	r2, r3
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	071b      	lsls	r3, r3, #28
 80063e6:	4944      	ldr	r1, [pc, #272]	; (80064f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80063e8:	4313      	orrs	r3, r2
 80063ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80063ee:	4b42      	ldr	r3, [pc, #264]	; (80064f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80063f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80063f4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063fc:	3b01      	subs	r3, #1
 80063fe:	021b      	lsls	r3, r3, #8
 8006400:	493d      	ldr	r1, [pc, #244]	; (80064f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006402:	4313      	orrs	r3, r2
 8006404:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006410:	2b00      	cmp	r3, #0
 8006412:	d022      	beq.n	800645a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006418:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800641c:	d11d      	bne.n	800645a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800641e:	4b36      	ldr	r3, [pc, #216]	; (80064f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006420:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006424:	0e1b      	lsrs	r3, r3, #24
 8006426:	f003 030f 	and.w	r3, r3, #15
 800642a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800642c:	4b32      	ldr	r3, [pc, #200]	; (80064f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800642e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006432:	0f1b      	lsrs	r3, r3, #28
 8006434:	f003 0307 	and.w	r3, r3, #7
 8006438:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	695b      	ldr	r3, [r3, #20]
 800643e:	019a      	lsls	r2, r3, #6
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6a1b      	ldr	r3, [r3, #32]
 8006444:	041b      	lsls	r3, r3, #16
 8006446:	431a      	orrs	r2, r3
 8006448:	693b      	ldr	r3, [r7, #16]
 800644a:	061b      	lsls	r3, r3, #24
 800644c:	431a      	orrs	r2, r3
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	071b      	lsls	r3, r3, #28
 8006452:	4929      	ldr	r1, [pc, #164]	; (80064f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006454:	4313      	orrs	r3, r2
 8006456:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f003 0308 	and.w	r3, r3, #8
 8006462:	2b00      	cmp	r3, #0
 8006464:	d028      	beq.n	80064b8 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006466:	4b24      	ldr	r3, [pc, #144]	; (80064f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006468:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800646c:	0e1b      	lsrs	r3, r3, #24
 800646e:	f003 030f 	and.w	r3, r3, #15
 8006472:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006474:	4b20      	ldr	r3, [pc, #128]	; (80064f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006476:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800647a:	0c1b      	lsrs	r3, r3, #16
 800647c:	f003 0303 	and.w	r3, r3, #3
 8006480:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	695b      	ldr	r3, [r3, #20]
 8006486:	019a      	lsls	r2, r3, #6
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	041b      	lsls	r3, r3, #16
 800648c:	431a      	orrs	r2, r3
 800648e:	693b      	ldr	r3, [r7, #16]
 8006490:	061b      	lsls	r3, r3, #24
 8006492:	431a      	orrs	r2, r3
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	69db      	ldr	r3, [r3, #28]
 8006498:	071b      	lsls	r3, r3, #28
 800649a:	4917      	ldr	r1, [pc, #92]	; (80064f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800649c:	4313      	orrs	r3, r2
 800649e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80064a2:	4b15      	ldr	r3, [pc, #84]	; (80064f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80064a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80064a8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064b0:	4911      	ldr	r1, [pc, #68]	; (80064f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80064b2:	4313      	orrs	r3, r2
 80064b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80064b8:	4b0f      	ldr	r3, [pc, #60]	; (80064f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4a0e      	ldr	r2, [pc, #56]	; (80064f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80064be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80064c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80064c4:	f7fc fd7a 	bl	8002fbc <HAL_GetTick>
 80064c8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80064ca:	e008      	b.n	80064de <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80064cc:	f7fc fd76 	bl	8002fbc <HAL_GetTick>
 80064d0:	4602      	mov	r2, r0
 80064d2:	697b      	ldr	r3, [r7, #20]
 80064d4:	1ad3      	subs	r3, r2, r3
 80064d6:	2b64      	cmp	r3, #100	; 0x64
 80064d8:	d901      	bls.n	80064de <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80064da:	2303      	movs	r3, #3
 80064dc:	e007      	b.n	80064ee <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80064de:	4b06      	ldr	r3, [pc, #24]	; (80064f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80064e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80064ea:	d1ef      	bne.n	80064cc <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80064ec:	2300      	movs	r3, #0
}
 80064ee:	4618      	mov	r0, r3
 80064f0:	3720      	adds	r7, #32
 80064f2:	46bd      	mov	sp, r7
 80064f4:	bd80      	pop	{r7, pc}
 80064f6:	bf00      	nop
 80064f8:	40023800 	.word	0x40023800

080064fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b082      	sub	sp, #8
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d101      	bne.n	800650e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800650a:	2301      	movs	r3, #1
 800650c:	e040      	b.n	8006590 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006512:	2b00      	cmp	r3, #0
 8006514:	d106      	bne.n	8006524 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2200      	movs	r2, #0
 800651a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	f7fc fa8e 	bl	8002a40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2224      	movs	r2, #36	; 0x24
 8006528:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	681a      	ldr	r2, [r3, #0]
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f022 0201 	bic.w	r2, r2, #1
 8006538:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	f000 fbc2 	bl	8006cc4 <UART_SetConfig>
 8006540:	4603      	mov	r3, r0
 8006542:	2b01      	cmp	r3, #1
 8006544:	d101      	bne.n	800654a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006546:	2301      	movs	r3, #1
 8006548:	e022      	b.n	8006590 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800654e:	2b00      	cmp	r3, #0
 8006550:	d002      	beq.n	8006558 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006552:	6878      	ldr	r0, [r7, #4]
 8006554:	f000 fe1a 	bl	800718c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	685a      	ldr	r2, [r3, #4]
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006566:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	689a      	ldr	r2, [r3, #8]
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006576:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	681a      	ldr	r2, [r3, #0]
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f042 0201 	orr.w	r2, r2, #1
 8006586:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006588:	6878      	ldr	r0, [r7, #4]
 800658a:	f000 fea1 	bl	80072d0 <UART_CheckIdleState>
 800658e:	4603      	mov	r3, r0
}
 8006590:	4618      	mov	r0, r3
 8006592:	3708      	adds	r7, #8
 8006594:	46bd      	mov	sp, r7
 8006596:	bd80      	pop	{r7, pc}

08006598 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b08a      	sub	sp, #40	; 0x28
 800659c:	af02      	add	r7, sp, #8
 800659e:	60f8      	str	r0, [r7, #12]
 80065a0:	60b9      	str	r1, [r7, #8]
 80065a2:	603b      	str	r3, [r7, #0]
 80065a4:	4613      	mov	r3, r2
 80065a6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80065ac:	2b20      	cmp	r3, #32
 80065ae:	d171      	bne.n	8006694 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d002      	beq.n	80065bc <HAL_UART_Transmit+0x24>
 80065b6:	88fb      	ldrh	r3, [r7, #6]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d101      	bne.n	80065c0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80065bc:	2301      	movs	r3, #1
 80065be:	e06a      	b.n	8006696 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	2200      	movs	r2, #0
 80065c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	2221      	movs	r2, #33	; 0x21
 80065cc:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80065ce:	f7fc fcf5 	bl	8002fbc <HAL_GetTick>
 80065d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	88fa      	ldrh	r2, [r7, #6]
 80065d8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	88fa      	ldrh	r2, [r7, #6]
 80065e0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	689b      	ldr	r3, [r3, #8]
 80065e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065ec:	d108      	bne.n	8006600 <HAL_UART_Transmit+0x68>
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	691b      	ldr	r3, [r3, #16]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d104      	bne.n	8006600 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80065f6:	2300      	movs	r3, #0
 80065f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80065fa:	68bb      	ldr	r3, [r7, #8]
 80065fc:	61bb      	str	r3, [r7, #24]
 80065fe:	e003      	b.n	8006608 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006604:	2300      	movs	r3, #0
 8006606:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006608:	e02c      	b.n	8006664 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	9300      	str	r3, [sp, #0]
 800660e:	697b      	ldr	r3, [r7, #20]
 8006610:	2200      	movs	r2, #0
 8006612:	2180      	movs	r1, #128	; 0x80
 8006614:	68f8      	ldr	r0, [r7, #12]
 8006616:	f000 fea8 	bl	800736a <UART_WaitOnFlagUntilTimeout>
 800661a:	4603      	mov	r3, r0
 800661c:	2b00      	cmp	r3, #0
 800661e:	d001      	beq.n	8006624 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8006620:	2303      	movs	r3, #3
 8006622:	e038      	b.n	8006696 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8006624:	69fb      	ldr	r3, [r7, #28]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d10b      	bne.n	8006642 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800662a:	69bb      	ldr	r3, [r7, #24]
 800662c:	881b      	ldrh	r3, [r3, #0]
 800662e:	461a      	mov	r2, r3
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006638:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800663a:	69bb      	ldr	r3, [r7, #24]
 800663c:	3302      	adds	r3, #2
 800663e:	61bb      	str	r3, [r7, #24]
 8006640:	e007      	b.n	8006652 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006642:	69fb      	ldr	r3, [r7, #28]
 8006644:	781a      	ldrb	r2, [r3, #0]
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800664c:	69fb      	ldr	r3, [r7, #28]
 800664e:	3301      	adds	r3, #1
 8006650:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006658:	b29b      	uxth	r3, r3
 800665a:	3b01      	subs	r3, #1
 800665c:	b29a      	uxth	r2, r3
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800666a:	b29b      	uxth	r3, r3
 800666c:	2b00      	cmp	r3, #0
 800666e:	d1cc      	bne.n	800660a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	9300      	str	r3, [sp, #0]
 8006674:	697b      	ldr	r3, [r7, #20]
 8006676:	2200      	movs	r2, #0
 8006678:	2140      	movs	r1, #64	; 0x40
 800667a:	68f8      	ldr	r0, [r7, #12]
 800667c:	f000 fe75 	bl	800736a <UART_WaitOnFlagUntilTimeout>
 8006680:	4603      	mov	r3, r0
 8006682:	2b00      	cmp	r3, #0
 8006684:	d001      	beq.n	800668a <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8006686:	2303      	movs	r3, #3
 8006688:	e005      	b.n	8006696 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	2220      	movs	r2, #32
 800668e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8006690:	2300      	movs	r3, #0
 8006692:	e000      	b.n	8006696 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8006694:	2302      	movs	r3, #2
  }
}
 8006696:	4618      	mov	r0, r3
 8006698:	3720      	adds	r7, #32
 800669a:	46bd      	mov	sp, r7
 800669c:	bd80      	pop	{r7, pc}
	...

080066a0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b0ba      	sub	sp, #232	; 0xe8
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	69db      	ldr	r3, [r3, #28]
 80066ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	689b      	ldr	r3, [r3, #8]
 80066c2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80066c6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80066ca:	f640 030f 	movw	r3, #2063	; 0x80f
 80066ce:	4013      	ands	r3, r2
 80066d0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80066d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d115      	bne.n	8006708 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80066dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066e0:	f003 0320 	and.w	r3, r3, #32
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d00f      	beq.n	8006708 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80066e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066ec:	f003 0320 	and.w	r3, r3, #32
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d009      	beq.n	8006708 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	f000 82ac 	beq.w	8006c56 <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006702:	6878      	ldr	r0, [r7, #4]
 8006704:	4798      	blx	r3
      }
      return;
 8006706:	e2a6      	b.n	8006c56 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006708:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800670c:	2b00      	cmp	r3, #0
 800670e:	f000 8117 	beq.w	8006940 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006712:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006716:	f003 0301 	and.w	r3, r3, #1
 800671a:	2b00      	cmp	r3, #0
 800671c:	d106      	bne.n	800672c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800671e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006722:	4b85      	ldr	r3, [pc, #532]	; (8006938 <HAL_UART_IRQHandler+0x298>)
 8006724:	4013      	ands	r3, r2
 8006726:	2b00      	cmp	r3, #0
 8006728:	f000 810a 	beq.w	8006940 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800672c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006730:	f003 0301 	and.w	r3, r3, #1
 8006734:	2b00      	cmp	r3, #0
 8006736:	d011      	beq.n	800675c <HAL_UART_IRQHandler+0xbc>
 8006738:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800673c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006740:	2b00      	cmp	r3, #0
 8006742:	d00b      	beq.n	800675c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	2201      	movs	r2, #1
 800674a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006752:	f043 0201 	orr.w	r2, r3, #1
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800675c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006760:	f003 0302 	and.w	r3, r3, #2
 8006764:	2b00      	cmp	r3, #0
 8006766:	d011      	beq.n	800678c <HAL_UART_IRQHandler+0xec>
 8006768:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800676c:	f003 0301 	and.w	r3, r3, #1
 8006770:	2b00      	cmp	r3, #0
 8006772:	d00b      	beq.n	800678c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	2202      	movs	r2, #2
 800677a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006782:	f043 0204 	orr.w	r2, r3, #4
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800678c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006790:	f003 0304 	and.w	r3, r3, #4
 8006794:	2b00      	cmp	r3, #0
 8006796:	d011      	beq.n	80067bc <HAL_UART_IRQHandler+0x11c>
 8006798:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800679c:	f003 0301 	and.w	r3, r3, #1
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d00b      	beq.n	80067bc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	2204      	movs	r2, #4
 80067aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80067b2:	f043 0202 	orr.w	r2, r3, #2
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80067bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067c0:	f003 0308 	and.w	r3, r3, #8
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d017      	beq.n	80067f8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80067c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067cc:	f003 0320 	and.w	r3, r3, #32
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d105      	bne.n	80067e0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80067d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80067d8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d00b      	beq.n	80067f8 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	2208      	movs	r2, #8
 80067e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80067ee:	f043 0208 	orr.w	r2, r3, #8
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80067f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006800:	2b00      	cmp	r3, #0
 8006802:	d012      	beq.n	800682a <HAL_UART_IRQHandler+0x18a>
 8006804:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006808:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800680c:	2b00      	cmp	r3, #0
 800680e:	d00c      	beq.n	800682a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006818:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006820:	f043 0220 	orr.w	r2, r3, #32
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006830:	2b00      	cmp	r3, #0
 8006832:	f000 8212 	beq.w	8006c5a <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006836:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800683a:	f003 0320 	and.w	r3, r3, #32
 800683e:	2b00      	cmp	r3, #0
 8006840:	d00d      	beq.n	800685e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006842:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006846:	f003 0320 	and.w	r3, r3, #32
 800684a:	2b00      	cmp	r3, #0
 800684c:	d007      	beq.n	800685e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006852:	2b00      	cmp	r3, #0
 8006854:	d003      	beq.n	800685e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800685a:	6878      	ldr	r0, [r7, #4]
 800685c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006864:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	689b      	ldr	r3, [r3, #8]
 800686e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006872:	2b40      	cmp	r3, #64	; 0x40
 8006874:	d005      	beq.n	8006882 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006876:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800687a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800687e:	2b00      	cmp	r3, #0
 8006880:	d04f      	beq.n	8006922 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006882:	6878      	ldr	r0, [r7, #4]
 8006884:	f000 fe37 	bl	80074f6 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	689b      	ldr	r3, [r3, #8]
 800688e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006892:	2b40      	cmp	r3, #64	; 0x40
 8006894:	d141      	bne.n	800691a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	3308      	adds	r3, #8
 800689c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80068a4:	e853 3f00 	ldrex	r3, [r3]
 80068a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80068ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80068b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	3308      	adds	r3, #8
 80068be:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80068c2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80068c6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80068ce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80068d2:	e841 2300 	strex	r3, r2, [r1]
 80068d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80068da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d1d9      	bne.n	8006896 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d013      	beq.n	8006912 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068ee:	4a13      	ldr	r2, [pc, #76]	; (800693c <HAL_UART_IRQHandler+0x29c>)
 80068f0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068f6:	4618      	mov	r0, r3
 80068f8:	f7fd fc12 	bl	8004120 <HAL_DMA_Abort_IT>
 80068fc:	4603      	mov	r3, r0
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d017      	beq.n	8006932 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006906:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006908:	687a      	ldr	r2, [r7, #4]
 800690a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800690c:	4610      	mov	r0, r2
 800690e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006910:	e00f      	b.n	8006932 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	f000 f9b6 	bl	8006c84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006918:	e00b      	b.n	8006932 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800691a:	6878      	ldr	r0, [r7, #4]
 800691c:	f000 f9b2 	bl	8006c84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006920:	e007      	b.n	8006932 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006922:	6878      	ldr	r0, [r7, #4]
 8006924:	f000 f9ae 	bl	8006c84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2200      	movs	r2, #0
 800692c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8006930:	e193      	b.n	8006c5a <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006932:	bf00      	nop
    return;
 8006934:	e191      	b.n	8006c5a <HAL_UART_IRQHandler+0x5ba>
 8006936:	bf00      	nop
 8006938:	04000120 	.word	0x04000120
 800693c:	080075bf 	.word	0x080075bf

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006944:	2b01      	cmp	r3, #1
 8006946:	f040 814c 	bne.w	8006be2 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800694a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800694e:	f003 0310 	and.w	r3, r3, #16
 8006952:	2b00      	cmp	r3, #0
 8006954:	f000 8145 	beq.w	8006be2 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006958:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800695c:	f003 0310 	and.w	r3, r3, #16
 8006960:	2b00      	cmp	r3, #0
 8006962:	f000 813e 	beq.w	8006be2 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	2210      	movs	r2, #16
 800696c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	689b      	ldr	r3, [r3, #8]
 8006974:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006978:	2b40      	cmp	r3, #64	; 0x40
 800697a:	f040 80b6 	bne.w	8006aea <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	685b      	ldr	r3, [r3, #4]
 8006986:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800698a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800698e:	2b00      	cmp	r3, #0
 8006990:	f000 8165 	beq.w	8006c5e <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800699a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800699e:	429a      	cmp	r2, r3
 80069a0:	f080 815d 	bcs.w	8006c5e <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80069aa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80069b2:	69db      	ldr	r3, [r3, #28]
 80069b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069b8:	f000 8086 	beq.w	8006ac8 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80069c8:	e853 3f00 	ldrex	r3, [r3]
 80069cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80069d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80069d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80069d8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	461a      	mov	r2, r3
 80069e2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80069e6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80069ea:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ee:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80069f2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80069f6:	e841 2300 	strex	r3, r2, [r1]
 80069fa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80069fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d1da      	bne.n	80069bc <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	3308      	adds	r3, #8
 8006a0c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006a10:	e853 3f00 	ldrex	r3, [r3]
 8006a14:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006a16:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006a18:	f023 0301 	bic.w	r3, r3, #1
 8006a1c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	3308      	adds	r3, #8
 8006a26:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006a2a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006a2e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a30:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006a32:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006a36:	e841 2300 	strex	r3, r2, [r1]
 8006a3a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006a3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d1e1      	bne.n	8006a06 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	3308      	adds	r3, #8
 8006a48:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a4a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006a4c:	e853 3f00 	ldrex	r3, [r3]
 8006a50:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006a52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a58:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	3308      	adds	r3, #8
 8006a62:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006a66:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006a68:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a6a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006a6c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006a6e:	e841 2300 	strex	r3, r2, [r1]
 8006a72:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006a74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d1e3      	bne.n	8006a42 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2220      	movs	r2, #32
 8006a7e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2200      	movs	r2, #0
 8006a86:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a90:	e853 3f00 	ldrex	r3, [r3]
 8006a94:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006a96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a98:	f023 0310 	bic.w	r3, r3, #16
 8006a9c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	461a      	mov	r2, r3
 8006aa6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006aaa:	65bb      	str	r3, [r7, #88]	; 0x58
 8006aac:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aae:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006ab0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006ab2:	e841 2300 	strex	r3, r2, [r1]
 8006ab6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006ab8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d1e4      	bne.n	8006a88 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	f7fd fabc 	bl	8004040 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2202      	movs	r2, #2
 8006acc:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006ada:	b29b      	uxth	r3, r3
 8006adc:	1ad3      	subs	r3, r2, r3
 8006ade:	b29b      	uxth	r3, r3
 8006ae0:	4619      	mov	r1, r3
 8006ae2:	6878      	ldr	r0, [r7, #4]
 8006ae4:	f000 f8d8 	bl	8006c98 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006ae8:	e0b9      	b.n	8006c5e <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006af6:	b29b      	uxth	r3, r3
 8006af8:	1ad3      	subs	r3, r2, r3
 8006afa:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006b04:	b29b      	uxth	r3, r3
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	f000 80ab 	beq.w	8006c62 <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8006b0c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	f000 80a6 	beq.w	8006c62 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b1e:	e853 3f00 	ldrex	r3, [r3]
 8006b22:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006b24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b26:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006b2a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	461a      	mov	r2, r3
 8006b34:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006b38:	647b      	str	r3, [r7, #68]	; 0x44
 8006b3a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b3c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006b3e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006b40:	e841 2300 	strex	r3, r2, [r1]
 8006b44:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006b46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d1e4      	bne.n	8006b16 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	3308      	adds	r3, #8
 8006b52:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b56:	e853 3f00 	ldrex	r3, [r3]
 8006b5a:	623b      	str	r3, [r7, #32]
   return(result);
 8006b5c:	6a3b      	ldr	r3, [r7, #32]
 8006b5e:	f023 0301 	bic.w	r3, r3, #1
 8006b62:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	3308      	adds	r3, #8
 8006b6c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006b70:	633a      	str	r2, [r7, #48]	; 0x30
 8006b72:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b74:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006b76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b78:	e841 2300 	strex	r3, r2, [r1]
 8006b7c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d1e3      	bne.n	8006b4c <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2220      	movs	r2, #32
 8006b88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2200      	movs	r2, #0
 8006b90:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2200      	movs	r2, #0
 8006b96:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b9e:	693b      	ldr	r3, [r7, #16]
 8006ba0:	e853 3f00 	ldrex	r3, [r3]
 8006ba4:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	f023 0310 	bic.w	r3, r3, #16
 8006bac:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	461a      	mov	r2, r3
 8006bb6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006bba:	61fb      	str	r3, [r7, #28]
 8006bbc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bbe:	69b9      	ldr	r1, [r7, #24]
 8006bc0:	69fa      	ldr	r2, [r7, #28]
 8006bc2:	e841 2300 	strex	r3, r2, [r1]
 8006bc6:	617b      	str	r3, [r7, #20]
   return(result);
 8006bc8:	697b      	ldr	r3, [r7, #20]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d1e4      	bne.n	8006b98 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2202      	movs	r2, #2
 8006bd2:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006bd4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006bd8:	4619      	mov	r1, r3
 8006bda:	6878      	ldr	r0, [r7, #4]
 8006bdc:	f000 f85c 	bl	8006c98 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006be0:	e03f      	b.n	8006c62 <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006be2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006be6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d00e      	beq.n	8006c0c <HAL_UART_IRQHandler+0x56c>
 8006bee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006bf2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d008      	beq.n	8006c0c <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006c02:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006c04:	6878      	ldr	r0, [r7, #4]
 8006c06:	f000 f853 	bl	8006cb0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006c0a:	e02d      	b.n	8006c68 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006c0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d00e      	beq.n	8006c36 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006c18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d008      	beq.n	8006c36 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d01c      	beq.n	8006c66 <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c30:	6878      	ldr	r0, [r7, #4]
 8006c32:	4798      	blx	r3
    }
    return;
 8006c34:	e017      	b.n	8006c66 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006c36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d012      	beq.n	8006c68 <HAL_UART_IRQHandler+0x5c8>
 8006c42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d00c      	beq.n	8006c68 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8006c4e:	6878      	ldr	r0, [r7, #4]
 8006c50:	f000 fccb 	bl	80075ea <UART_EndTransmit_IT>
    return;
 8006c54:	e008      	b.n	8006c68 <HAL_UART_IRQHandler+0x5c8>
      return;
 8006c56:	bf00      	nop
 8006c58:	e006      	b.n	8006c68 <HAL_UART_IRQHandler+0x5c8>
    return;
 8006c5a:	bf00      	nop
 8006c5c:	e004      	b.n	8006c68 <HAL_UART_IRQHandler+0x5c8>
      return;
 8006c5e:	bf00      	nop
 8006c60:	e002      	b.n	8006c68 <HAL_UART_IRQHandler+0x5c8>
      return;
 8006c62:	bf00      	nop
 8006c64:	e000      	b.n	8006c68 <HAL_UART_IRQHandler+0x5c8>
    return;
 8006c66:	bf00      	nop
  }

}
 8006c68:	37e8      	adds	r7, #232	; 0xe8
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	bd80      	pop	{r7, pc}
 8006c6e:	bf00      	nop

08006c70 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006c70:	b480      	push	{r7}
 8006c72:	b083      	sub	sp, #12
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006c78:	bf00      	nop
 8006c7a:	370c      	adds	r7, #12
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c82:	4770      	bx	lr

08006c84 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006c84:	b480      	push	{r7}
 8006c86:	b083      	sub	sp, #12
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006c8c:	bf00      	nop
 8006c8e:	370c      	adds	r7, #12
 8006c90:	46bd      	mov	sp, r7
 8006c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c96:	4770      	bx	lr

08006c98 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006c98:	b480      	push	{r7}
 8006c9a:	b083      	sub	sp, #12
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
 8006ca0:	460b      	mov	r3, r1
 8006ca2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006ca4:	bf00      	nop
 8006ca6:	370c      	adds	r7, #12
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cae:	4770      	bx	lr

08006cb0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006cb0:	b480      	push	{r7}
 8006cb2:	b083      	sub	sp, #12
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006cb8:	bf00      	nop
 8006cba:	370c      	adds	r7, #12
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc2:	4770      	bx	lr

08006cc4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b088      	sub	sp, #32
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006ccc:	2300      	movs	r3, #0
 8006cce:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	689a      	ldr	r2, [r3, #8]
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	691b      	ldr	r3, [r3, #16]
 8006cd8:	431a      	orrs	r2, r3
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	695b      	ldr	r3, [r3, #20]
 8006cde:	431a      	orrs	r2, r3
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	69db      	ldr	r3, [r3, #28]
 8006ce4:	4313      	orrs	r3, r2
 8006ce6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	681a      	ldr	r2, [r3, #0]
 8006cee:	4ba6      	ldr	r3, [pc, #664]	; (8006f88 <UART_SetConfig+0x2c4>)
 8006cf0:	4013      	ands	r3, r2
 8006cf2:	687a      	ldr	r2, [r7, #4]
 8006cf4:	6812      	ldr	r2, [r2, #0]
 8006cf6:	6979      	ldr	r1, [r7, #20]
 8006cf8:	430b      	orrs	r3, r1
 8006cfa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	685b      	ldr	r3, [r3, #4]
 8006d02:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	68da      	ldr	r2, [r3, #12]
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	430a      	orrs	r2, r1
 8006d10:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	699b      	ldr	r3, [r3, #24]
 8006d16:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6a1b      	ldr	r3, [r3, #32]
 8006d1c:	697a      	ldr	r2, [r7, #20]
 8006d1e:	4313      	orrs	r3, r2
 8006d20:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	689b      	ldr	r3, [r3, #8]
 8006d28:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	697a      	ldr	r2, [r7, #20]
 8006d32:	430a      	orrs	r2, r1
 8006d34:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	4a94      	ldr	r2, [pc, #592]	; (8006f8c <UART_SetConfig+0x2c8>)
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d120      	bne.n	8006d82 <UART_SetConfig+0xbe>
 8006d40:	4b93      	ldr	r3, [pc, #588]	; (8006f90 <UART_SetConfig+0x2cc>)
 8006d42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d46:	f003 0303 	and.w	r3, r3, #3
 8006d4a:	2b03      	cmp	r3, #3
 8006d4c:	d816      	bhi.n	8006d7c <UART_SetConfig+0xb8>
 8006d4e:	a201      	add	r2, pc, #4	; (adr r2, 8006d54 <UART_SetConfig+0x90>)
 8006d50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d54:	08006d65 	.word	0x08006d65
 8006d58:	08006d71 	.word	0x08006d71
 8006d5c:	08006d6b 	.word	0x08006d6b
 8006d60:	08006d77 	.word	0x08006d77
 8006d64:	2301      	movs	r3, #1
 8006d66:	77fb      	strb	r3, [r7, #31]
 8006d68:	e150      	b.n	800700c <UART_SetConfig+0x348>
 8006d6a:	2302      	movs	r3, #2
 8006d6c:	77fb      	strb	r3, [r7, #31]
 8006d6e:	e14d      	b.n	800700c <UART_SetConfig+0x348>
 8006d70:	2304      	movs	r3, #4
 8006d72:	77fb      	strb	r3, [r7, #31]
 8006d74:	e14a      	b.n	800700c <UART_SetConfig+0x348>
 8006d76:	2308      	movs	r3, #8
 8006d78:	77fb      	strb	r3, [r7, #31]
 8006d7a:	e147      	b.n	800700c <UART_SetConfig+0x348>
 8006d7c:	2310      	movs	r3, #16
 8006d7e:	77fb      	strb	r3, [r7, #31]
 8006d80:	e144      	b.n	800700c <UART_SetConfig+0x348>
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	4a83      	ldr	r2, [pc, #524]	; (8006f94 <UART_SetConfig+0x2d0>)
 8006d88:	4293      	cmp	r3, r2
 8006d8a:	d132      	bne.n	8006df2 <UART_SetConfig+0x12e>
 8006d8c:	4b80      	ldr	r3, [pc, #512]	; (8006f90 <UART_SetConfig+0x2cc>)
 8006d8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d92:	f003 030c 	and.w	r3, r3, #12
 8006d96:	2b0c      	cmp	r3, #12
 8006d98:	d828      	bhi.n	8006dec <UART_SetConfig+0x128>
 8006d9a:	a201      	add	r2, pc, #4	; (adr r2, 8006da0 <UART_SetConfig+0xdc>)
 8006d9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006da0:	08006dd5 	.word	0x08006dd5
 8006da4:	08006ded 	.word	0x08006ded
 8006da8:	08006ded 	.word	0x08006ded
 8006dac:	08006ded 	.word	0x08006ded
 8006db0:	08006de1 	.word	0x08006de1
 8006db4:	08006ded 	.word	0x08006ded
 8006db8:	08006ded 	.word	0x08006ded
 8006dbc:	08006ded 	.word	0x08006ded
 8006dc0:	08006ddb 	.word	0x08006ddb
 8006dc4:	08006ded 	.word	0x08006ded
 8006dc8:	08006ded 	.word	0x08006ded
 8006dcc:	08006ded 	.word	0x08006ded
 8006dd0:	08006de7 	.word	0x08006de7
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	77fb      	strb	r3, [r7, #31]
 8006dd8:	e118      	b.n	800700c <UART_SetConfig+0x348>
 8006dda:	2302      	movs	r3, #2
 8006ddc:	77fb      	strb	r3, [r7, #31]
 8006dde:	e115      	b.n	800700c <UART_SetConfig+0x348>
 8006de0:	2304      	movs	r3, #4
 8006de2:	77fb      	strb	r3, [r7, #31]
 8006de4:	e112      	b.n	800700c <UART_SetConfig+0x348>
 8006de6:	2308      	movs	r3, #8
 8006de8:	77fb      	strb	r3, [r7, #31]
 8006dea:	e10f      	b.n	800700c <UART_SetConfig+0x348>
 8006dec:	2310      	movs	r3, #16
 8006dee:	77fb      	strb	r3, [r7, #31]
 8006df0:	e10c      	b.n	800700c <UART_SetConfig+0x348>
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	4a68      	ldr	r2, [pc, #416]	; (8006f98 <UART_SetConfig+0x2d4>)
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d120      	bne.n	8006e3e <UART_SetConfig+0x17a>
 8006dfc:	4b64      	ldr	r3, [pc, #400]	; (8006f90 <UART_SetConfig+0x2cc>)
 8006dfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e02:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006e06:	2b30      	cmp	r3, #48	; 0x30
 8006e08:	d013      	beq.n	8006e32 <UART_SetConfig+0x16e>
 8006e0a:	2b30      	cmp	r3, #48	; 0x30
 8006e0c:	d814      	bhi.n	8006e38 <UART_SetConfig+0x174>
 8006e0e:	2b20      	cmp	r3, #32
 8006e10:	d009      	beq.n	8006e26 <UART_SetConfig+0x162>
 8006e12:	2b20      	cmp	r3, #32
 8006e14:	d810      	bhi.n	8006e38 <UART_SetConfig+0x174>
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d002      	beq.n	8006e20 <UART_SetConfig+0x15c>
 8006e1a:	2b10      	cmp	r3, #16
 8006e1c:	d006      	beq.n	8006e2c <UART_SetConfig+0x168>
 8006e1e:	e00b      	b.n	8006e38 <UART_SetConfig+0x174>
 8006e20:	2300      	movs	r3, #0
 8006e22:	77fb      	strb	r3, [r7, #31]
 8006e24:	e0f2      	b.n	800700c <UART_SetConfig+0x348>
 8006e26:	2302      	movs	r3, #2
 8006e28:	77fb      	strb	r3, [r7, #31]
 8006e2a:	e0ef      	b.n	800700c <UART_SetConfig+0x348>
 8006e2c:	2304      	movs	r3, #4
 8006e2e:	77fb      	strb	r3, [r7, #31]
 8006e30:	e0ec      	b.n	800700c <UART_SetConfig+0x348>
 8006e32:	2308      	movs	r3, #8
 8006e34:	77fb      	strb	r3, [r7, #31]
 8006e36:	e0e9      	b.n	800700c <UART_SetConfig+0x348>
 8006e38:	2310      	movs	r3, #16
 8006e3a:	77fb      	strb	r3, [r7, #31]
 8006e3c:	e0e6      	b.n	800700c <UART_SetConfig+0x348>
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	4a56      	ldr	r2, [pc, #344]	; (8006f9c <UART_SetConfig+0x2d8>)
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d120      	bne.n	8006e8a <UART_SetConfig+0x1c6>
 8006e48:	4b51      	ldr	r3, [pc, #324]	; (8006f90 <UART_SetConfig+0x2cc>)
 8006e4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e4e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006e52:	2bc0      	cmp	r3, #192	; 0xc0
 8006e54:	d013      	beq.n	8006e7e <UART_SetConfig+0x1ba>
 8006e56:	2bc0      	cmp	r3, #192	; 0xc0
 8006e58:	d814      	bhi.n	8006e84 <UART_SetConfig+0x1c0>
 8006e5a:	2b80      	cmp	r3, #128	; 0x80
 8006e5c:	d009      	beq.n	8006e72 <UART_SetConfig+0x1ae>
 8006e5e:	2b80      	cmp	r3, #128	; 0x80
 8006e60:	d810      	bhi.n	8006e84 <UART_SetConfig+0x1c0>
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d002      	beq.n	8006e6c <UART_SetConfig+0x1a8>
 8006e66:	2b40      	cmp	r3, #64	; 0x40
 8006e68:	d006      	beq.n	8006e78 <UART_SetConfig+0x1b4>
 8006e6a:	e00b      	b.n	8006e84 <UART_SetConfig+0x1c0>
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	77fb      	strb	r3, [r7, #31]
 8006e70:	e0cc      	b.n	800700c <UART_SetConfig+0x348>
 8006e72:	2302      	movs	r3, #2
 8006e74:	77fb      	strb	r3, [r7, #31]
 8006e76:	e0c9      	b.n	800700c <UART_SetConfig+0x348>
 8006e78:	2304      	movs	r3, #4
 8006e7a:	77fb      	strb	r3, [r7, #31]
 8006e7c:	e0c6      	b.n	800700c <UART_SetConfig+0x348>
 8006e7e:	2308      	movs	r3, #8
 8006e80:	77fb      	strb	r3, [r7, #31]
 8006e82:	e0c3      	b.n	800700c <UART_SetConfig+0x348>
 8006e84:	2310      	movs	r3, #16
 8006e86:	77fb      	strb	r3, [r7, #31]
 8006e88:	e0c0      	b.n	800700c <UART_SetConfig+0x348>
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	4a44      	ldr	r2, [pc, #272]	; (8006fa0 <UART_SetConfig+0x2dc>)
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d125      	bne.n	8006ee0 <UART_SetConfig+0x21c>
 8006e94:	4b3e      	ldr	r3, [pc, #248]	; (8006f90 <UART_SetConfig+0x2cc>)
 8006e96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e9e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ea2:	d017      	beq.n	8006ed4 <UART_SetConfig+0x210>
 8006ea4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ea8:	d817      	bhi.n	8006eda <UART_SetConfig+0x216>
 8006eaa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006eae:	d00b      	beq.n	8006ec8 <UART_SetConfig+0x204>
 8006eb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006eb4:	d811      	bhi.n	8006eda <UART_SetConfig+0x216>
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d003      	beq.n	8006ec2 <UART_SetConfig+0x1fe>
 8006eba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ebe:	d006      	beq.n	8006ece <UART_SetConfig+0x20a>
 8006ec0:	e00b      	b.n	8006eda <UART_SetConfig+0x216>
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	77fb      	strb	r3, [r7, #31]
 8006ec6:	e0a1      	b.n	800700c <UART_SetConfig+0x348>
 8006ec8:	2302      	movs	r3, #2
 8006eca:	77fb      	strb	r3, [r7, #31]
 8006ecc:	e09e      	b.n	800700c <UART_SetConfig+0x348>
 8006ece:	2304      	movs	r3, #4
 8006ed0:	77fb      	strb	r3, [r7, #31]
 8006ed2:	e09b      	b.n	800700c <UART_SetConfig+0x348>
 8006ed4:	2308      	movs	r3, #8
 8006ed6:	77fb      	strb	r3, [r7, #31]
 8006ed8:	e098      	b.n	800700c <UART_SetConfig+0x348>
 8006eda:	2310      	movs	r3, #16
 8006edc:	77fb      	strb	r3, [r7, #31]
 8006ede:	e095      	b.n	800700c <UART_SetConfig+0x348>
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	4a2f      	ldr	r2, [pc, #188]	; (8006fa4 <UART_SetConfig+0x2e0>)
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d125      	bne.n	8006f36 <UART_SetConfig+0x272>
 8006eea:	4b29      	ldr	r3, [pc, #164]	; (8006f90 <UART_SetConfig+0x2cc>)
 8006eec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ef0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006ef4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006ef8:	d017      	beq.n	8006f2a <UART_SetConfig+0x266>
 8006efa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006efe:	d817      	bhi.n	8006f30 <UART_SetConfig+0x26c>
 8006f00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f04:	d00b      	beq.n	8006f1e <UART_SetConfig+0x25a>
 8006f06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f0a:	d811      	bhi.n	8006f30 <UART_SetConfig+0x26c>
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d003      	beq.n	8006f18 <UART_SetConfig+0x254>
 8006f10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f14:	d006      	beq.n	8006f24 <UART_SetConfig+0x260>
 8006f16:	e00b      	b.n	8006f30 <UART_SetConfig+0x26c>
 8006f18:	2301      	movs	r3, #1
 8006f1a:	77fb      	strb	r3, [r7, #31]
 8006f1c:	e076      	b.n	800700c <UART_SetConfig+0x348>
 8006f1e:	2302      	movs	r3, #2
 8006f20:	77fb      	strb	r3, [r7, #31]
 8006f22:	e073      	b.n	800700c <UART_SetConfig+0x348>
 8006f24:	2304      	movs	r3, #4
 8006f26:	77fb      	strb	r3, [r7, #31]
 8006f28:	e070      	b.n	800700c <UART_SetConfig+0x348>
 8006f2a:	2308      	movs	r3, #8
 8006f2c:	77fb      	strb	r3, [r7, #31]
 8006f2e:	e06d      	b.n	800700c <UART_SetConfig+0x348>
 8006f30:	2310      	movs	r3, #16
 8006f32:	77fb      	strb	r3, [r7, #31]
 8006f34:	e06a      	b.n	800700c <UART_SetConfig+0x348>
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	4a1b      	ldr	r2, [pc, #108]	; (8006fa8 <UART_SetConfig+0x2e4>)
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	d138      	bne.n	8006fb2 <UART_SetConfig+0x2ee>
 8006f40:	4b13      	ldr	r3, [pc, #76]	; (8006f90 <UART_SetConfig+0x2cc>)
 8006f42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f46:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006f4a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006f4e:	d017      	beq.n	8006f80 <UART_SetConfig+0x2bc>
 8006f50:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006f54:	d82a      	bhi.n	8006fac <UART_SetConfig+0x2e8>
 8006f56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f5a:	d00b      	beq.n	8006f74 <UART_SetConfig+0x2b0>
 8006f5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f60:	d824      	bhi.n	8006fac <UART_SetConfig+0x2e8>
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d003      	beq.n	8006f6e <UART_SetConfig+0x2aa>
 8006f66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f6a:	d006      	beq.n	8006f7a <UART_SetConfig+0x2b6>
 8006f6c:	e01e      	b.n	8006fac <UART_SetConfig+0x2e8>
 8006f6e:	2300      	movs	r3, #0
 8006f70:	77fb      	strb	r3, [r7, #31]
 8006f72:	e04b      	b.n	800700c <UART_SetConfig+0x348>
 8006f74:	2302      	movs	r3, #2
 8006f76:	77fb      	strb	r3, [r7, #31]
 8006f78:	e048      	b.n	800700c <UART_SetConfig+0x348>
 8006f7a:	2304      	movs	r3, #4
 8006f7c:	77fb      	strb	r3, [r7, #31]
 8006f7e:	e045      	b.n	800700c <UART_SetConfig+0x348>
 8006f80:	2308      	movs	r3, #8
 8006f82:	77fb      	strb	r3, [r7, #31]
 8006f84:	e042      	b.n	800700c <UART_SetConfig+0x348>
 8006f86:	bf00      	nop
 8006f88:	efff69f3 	.word	0xefff69f3
 8006f8c:	40011000 	.word	0x40011000
 8006f90:	40023800 	.word	0x40023800
 8006f94:	40004400 	.word	0x40004400
 8006f98:	40004800 	.word	0x40004800
 8006f9c:	40004c00 	.word	0x40004c00
 8006fa0:	40005000 	.word	0x40005000
 8006fa4:	40011400 	.word	0x40011400
 8006fa8:	40007800 	.word	0x40007800
 8006fac:	2310      	movs	r3, #16
 8006fae:	77fb      	strb	r3, [r7, #31]
 8006fb0:	e02c      	b.n	800700c <UART_SetConfig+0x348>
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	4a72      	ldr	r2, [pc, #456]	; (8007180 <UART_SetConfig+0x4bc>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d125      	bne.n	8007008 <UART_SetConfig+0x344>
 8006fbc:	4b71      	ldr	r3, [pc, #452]	; (8007184 <UART_SetConfig+0x4c0>)
 8006fbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fc2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006fc6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006fca:	d017      	beq.n	8006ffc <UART_SetConfig+0x338>
 8006fcc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006fd0:	d817      	bhi.n	8007002 <UART_SetConfig+0x33e>
 8006fd2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006fd6:	d00b      	beq.n	8006ff0 <UART_SetConfig+0x32c>
 8006fd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006fdc:	d811      	bhi.n	8007002 <UART_SetConfig+0x33e>
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d003      	beq.n	8006fea <UART_SetConfig+0x326>
 8006fe2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006fe6:	d006      	beq.n	8006ff6 <UART_SetConfig+0x332>
 8006fe8:	e00b      	b.n	8007002 <UART_SetConfig+0x33e>
 8006fea:	2300      	movs	r3, #0
 8006fec:	77fb      	strb	r3, [r7, #31]
 8006fee:	e00d      	b.n	800700c <UART_SetConfig+0x348>
 8006ff0:	2302      	movs	r3, #2
 8006ff2:	77fb      	strb	r3, [r7, #31]
 8006ff4:	e00a      	b.n	800700c <UART_SetConfig+0x348>
 8006ff6:	2304      	movs	r3, #4
 8006ff8:	77fb      	strb	r3, [r7, #31]
 8006ffa:	e007      	b.n	800700c <UART_SetConfig+0x348>
 8006ffc:	2308      	movs	r3, #8
 8006ffe:	77fb      	strb	r3, [r7, #31]
 8007000:	e004      	b.n	800700c <UART_SetConfig+0x348>
 8007002:	2310      	movs	r3, #16
 8007004:	77fb      	strb	r3, [r7, #31]
 8007006:	e001      	b.n	800700c <UART_SetConfig+0x348>
 8007008:	2310      	movs	r3, #16
 800700a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	69db      	ldr	r3, [r3, #28]
 8007010:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007014:	d15b      	bne.n	80070ce <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8007016:	7ffb      	ldrb	r3, [r7, #31]
 8007018:	2b08      	cmp	r3, #8
 800701a:	d828      	bhi.n	800706e <UART_SetConfig+0x3aa>
 800701c:	a201      	add	r2, pc, #4	; (adr r2, 8007024 <UART_SetConfig+0x360>)
 800701e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007022:	bf00      	nop
 8007024:	08007049 	.word	0x08007049
 8007028:	08007051 	.word	0x08007051
 800702c:	08007059 	.word	0x08007059
 8007030:	0800706f 	.word	0x0800706f
 8007034:	0800705f 	.word	0x0800705f
 8007038:	0800706f 	.word	0x0800706f
 800703c:	0800706f 	.word	0x0800706f
 8007040:	0800706f 	.word	0x0800706f
 8007044:	08007067 	.word	0x08007067
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007048:	f7fe fe08 	bl	8005c5c <HAL_RCC_GetPCLK1Freq>
 800704c:	61b8      	str	r0, [r7, #24]
        break;
 800704e:	e013      	b.n	8007078 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007050:	f7fe fe18 	bl	8005c84 <HAL_RCC_GetPCLK2Freq>
 8007054:	61b8      	str	r0, [r7, #24]
        break;
 8007056:	e00f      	b.n	8007078 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007058:	4b4b      	ldr	r3, [pc, #300]	; (8007188 <UART_SetConfig+0x4c4>)
 800705a:	61bb      	str	r3, [r7, #24]
        break;
 800705c:	e00c      	b.n	8007078 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800705e:	f7fe fceb 	bl	8005a38 <HAL_RCC_GetSysClockFreq>
 8007062:	61b8      	str	r0, [r7, #24]
        break;
 8007064:	e008      	b.n	8007078 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007066:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800706a:	61bb      	str	r3, [r7, #24]
        break;
 800706c:	e004      	b.n	8007078 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800706e:	2300      	movs	r3, #0
 8007070:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007072:	2301      	movs	r3, #1
 8007074:	77bb      	strb	r3, [r7, #30]
        break;
 8007076:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007078:	69bb      	ldr	r3, [r7, #24]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d074      	beq.n	8007168 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800707e:	69bb      	ldr	r3, [r7, #24]
 8007080:	005a      	lsls	r2, r3, #1
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	685b      	ldr	r3, [r3, #4]
 8007086:	085b      	lsrs	r3, r3, #1
 8007088:	441a      	add	r2, r3
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	685b      	ldr	r3, [r3, #4]
 800708e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007092:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007094:	693b      	ldr	r3, [r7, #16]
 8007096:	2b0f      	cmp	r3, #15
 8007098:	d916      	bls.n	80070c8 <UART_SetConfig+0x404>
 800709a:	693b      	ldr	r3, [r7, #16]
 800709c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070a0:	d212      	bcs.n	80070c8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80070a2:	693b      	ldr	r3, [r7, #16]
 80070a4:	b29b      	uxth	r3, r3
 80070a6:	f023 030f 	bic.w	r3, r3, #15
 80070aa:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80070ac:	693b      	ldr	r3, [r7, #16]
 80070ae:	085b      	lsrs	r3, r3, #1
 80070b0:	b29b      	uxth	r3, r3
 80070b2:	f003 0307 	and.w	r3, r3, #7
 80070b6:	b29a      	uxth	r2, r3
 80070b8:	89fb      	ldrh	r3, [r7, #14]
 80070ba:	4313      	orrs	r3, r2
 80070bc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	89fa      	ldrh	r2, [r7, #14]
 80070c4:	60da      	str	r2, [r3, #12]
 80070c6:	e04f      	b.n	8007168 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80070c8:	2301      	movs	r3, #1
 80070ca:	77bb      	strb	r3, [r7, #30]
 80070cc:	e04c      	b.n	8007168 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80070ce:	7ffb      	ldrb	r3, [r7, #31]
 80070d0:	2b08      	cmp	r3, #8
 80070d2:	d828      	bhi.n	8007126 <UART_SetConfig+0x462>
 80070d4:	a201      	add	r2, pc, #4	; (adr r2, 80070dc <UART_SetConfig+0x418>)
 80070d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070da:	bf00      	nop
 80070dc:	08007101 	.word	0x08007101
 80070e0:	08007109 	.word	0x08007109
 80070e4:	08007111 	.word	0x08007111
 80070e8:	08007127 	.word	0x08007127
 80070ec:	08007117 	.word	0x08007117
 80070f0:	08007127 	.word	0x08007127
 80070f4:	08007127 	.word	0x08007127
 80070f8:	08007127 	.word	0x08007127
 80070fc:	0800711f 	.word	0x0800711f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007100:	f7fe fdac 	bl	8005c5c <HAL_RCC_GetPCLK1Freq>
 8007104:	61b8      	str	r0, [r7, #24]
        break;
 8007106:	e013      	b.n	8007130 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007108:	f7fe fdbc 	bl	8005c84 <HAL_RCC_GetPCLK2Freq>
 800710c:	61b8      	str	r0, [r7, #24]
        break;
 800710e:	e00f      	b.n	8007130 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007110:	4b1d      	ldr	r3, [pc, #116]	; (8007188 <UART_SetConfig+0x4c4>)
 8007112:	61bb      	str	r3, [r7, #24]
        break;
 8007114:	e00c      	b.n	8007130 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007116:	f7fe fc8f 	bl	8005a38 <HAL_RCC_GetSysClockFreq>
 800711a:	61b8      	str	r0, [r7, #24]
        break;
 800711c:	e008      	b.n	8007130 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800711e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007122:	61bb      	str	r3, [r7, #24]
        break;
 8007124:	e004      	b.n	8007130 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8007126:	2300      	movs	r3, #0
 8007128:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800712a:	2301      	movs	r3, #1
 800712c:	77bb      	strb	r3, [r7, #30]
        break;
 800712e:	bf00      	nop
    }

    if (pclk != 0U)
 8007130:	69bb      	ldr	r3, [r7, #24]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d018      	beq.n	8007168 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	685b      	ldr	r3, [r3, #4]
 800713a:	085a      	lsrs	r2, r3, #1
 800713c:	69bb      	ldr	r3, [r7, #24]
 800713e:	441a      	add	r2, r3
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	685b      	ldr	r3, [r3, #4]
 8007144:	fbb2 f3f3 	udiv	r3, r2, r3
 8007148:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800714a:	693b      	ldr	r3, [r7, #16]
 800714c:	2b0f      	cmp	r3, #15
 800714e:	d909      	bls.n	8007164 <UART_SetConfig+0x4a0>
 8007150:	693b      	ldr	r3, [r7, #16]
 8007152:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007156:	d205      	bcs.n	8007164 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007158:	693b      	ldr	r3, [r7, #16]
 800715a:	b29a      	uxth	r2, r3
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	60da      	str	r2, [r3, #12]
 8007162:	e001      	b.n	8007168 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007164:	2301      	movs	r3, #1
 8007166:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2200      	movs	r2, #0
 800716c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2200      	movs	r2, #0
 8007172:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8007174:	7fbb      	ldrb	r3, [r7, #30]
}
 8007176:	4618      	mov	r0, r3
 8007178:	3720      	adds	r7, #32
 800717a:	46bd      	mov	sp, r7
 800717c:	bd80      	pop	{r7, pc}
 800717e:	bf00      	nop
 8007180:	40007c00 	.word	0x40007c00
 8007184:	40023800 	.word	0x40023800
 8007188:	00f42400 	.word	0x00f42400

0800718c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800718c:	b480      	push	{r7}
 800718e:	b083      	sub	sp, #12
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007198:	f003 0301 	and.w	r3, r3, #1
 800719c:	2b00      	cmp	r3, #0
 800719e:	d00a      	beq.n	80071b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	685b      	ldr	r3, [r3, #4]
 80071a6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	430a      	orrs	r2, r1
 80071b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ba:	f003 0302 	and.w	r3, r3, #2
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d00a      	beq.n	80071d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	685b      	ldr	r3, [r3, #4]
 80071c8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	430a      	orrs	r2, r1
 80071d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071dc:	f003 0304 	and.w	r3, r3, #4
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d00a      	beq.n	80071fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	685b      	ldr	r3, [r3, #4]
 80071ea:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	430a      	orrs	r2, r1
 80071f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071fe:	f003 0308 	and.w	r3, r3, #8
 8007202:	2b00      	cmp	r3, #0
 8007204:	d00a      	beq.n	800721c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	685b      	ldr	r3, [r3, #4]
 800720c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	430a      	orrs	r2, r1
 800721a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007220:	f003 0310 	and.w	r3, r3, #16
 8007224:	2b00      	cmp	r3, #0
 8007226:	d00a      	beq.n	800723e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	689b      	ldr	r3, [r3, #8]
 800722e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	430a      	orrs	r2, r1
 800723c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007242:	f003 0320 	and.w	r3, r3, #32
 8007246:	2b00      	cmp	r3, #0
 8007248:	d00a      	beq.n	8007260 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	689b      	ldr	r3, [r3, #8]
 8007250:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	430a      	orrs	r2, r1
 800725e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007264:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007268:	2b00      	cmp	r3, #0
 800726a:	d01a      	beq.n	80072a2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	685b      	ldr	r3, [r3, #4]
 8007272:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	430a      	orrs	r2, r1
 8007280:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007286:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800728a:	d10a      	bne.n	80072a2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	685b      	ldr	r3, [r3, #4]
 8007292:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	430a      	orrs	r2, r1
 80072a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d00a      	beq.n	80072c4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	685b      	ldr	r3, [r3, #4]
 80072b4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	430a      	orrs	r2, r1
 80072c2:	605a      	str	r2, [r3, #4]
  }
}
 80072c4:	bf00      	nop
 80072c6:	370c      	adds	r7, #12
 80072c8:	46bd      	mov	sp, r7
 80072ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ce:	4770      	bx	lr

080072d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b086      	sub	sp, #24
 80072d4:	af02      	add	r7, sp, #8
 80072d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2200      	movs	r2, #0
 80072dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80072e0:	f7fb fe6c 	bl	8002fbc <HAL_GetTick>
 80072e4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f003 0308 	and.w	r3, r3, #8
 80072f0:	2b08      	cmp	r3, #8
 80072f2:	d10e      	bne.n	8007312 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80072f4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80072f8:	9300      	str	r3, [sp, #0]
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	2200      	movs	r2, #0
 80072fe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007302:	6878      	ldr	r0, [r7, #4]
 8007304:	f000 f831 	bl	800736a <UART_WaitOnFlagUntilTimeout>
 8007308:	4603      	mov	r3, r0
 800730a:	2b00      	cmp	r3, #0
 800730c:	d001      	beq.n	8007312 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800730e:	2303      	movs	r3, #3
 8007310:	e027      	b.n	8007362 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f003 0304 	and.w	r3, r3, #4
 800731c:	2b04      	cmp	r3, #4
 800731e:	d10e      	bne.n	800733e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007320:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007324:	9300      	str	r3, [sp, #0]
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	2200      	movs	r2, #0
 800732a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800732e:	6878      	ldr	r0, [r7, #4]
 8007330:	f000 f81b 	bl	800736a <UART_WaitOnFlagUntilTimeout>
 8007334:	4603      	mov	r3, r0
 8007336:	2b00      	cmp	r3, #0
 8007338:	d001      	beq.n	800733e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800733a:	2303      	movs	r3, #3
 800733c:	e011      	b.n	8007362 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2220      	movs	r2, #32
 8007342:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2220      	movs	r2, #32
 8007348:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2200      	movs	r2, #0
 8007350:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2200      	movs	r2, #0
 8007356:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2200      	movs	r2, #0
 800735c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8007360:	2300      	movs	r3, #0
}
 8007362:	4618      	mov	r0, r3
 8007364:	3710      	adds	r7, #16
 8007366:	46bd      	mov	sp, r7
 8007368:	bd80      	pop	{r7, pc}

0800736a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800736a:	b580      	push	{r7, lr}
 800736c:	b09c      	sub	sp, #112	; 0x70
 800736e:	af00      	add	r7, sp, #0
 8007370:	60f8      	str	r0, [r7, #12]
 8007372:	60b9      	str	r1, [r7, #8]
 8007374:	603b      	str	r3, [r7, #0]
 8007376:	4613      	mov	r3, r2
 8007378:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800737a:	e0a7      	b.n	80074cc <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800737c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800737e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007382:	f000 80a3 	beq.w	80074cc <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007386:	f7fb fe19 	bl	8002fbc <HAL_GetTick>
 800738a:	4602      	mov	r2, r0
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	1ad3      	subs	r3, r2, r3
 8007390:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007392:	429a      	cmp	r2, r3
 8007394:	d302      	bcc.n	800739c <UART_WaitOnFlagUntilTimeout+0x32>
 8007396:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007398:	2b00      	cmp	r3, #0
 800739a:	d13f      	bne.n	800741c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80073a4:	e853 3f00 	ldrex	r3, [r3]
 80073a8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80073aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073ac:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80073b0:	667b      	str	r3, [r7, #100]	; 0x64
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	461a      	mov	r2, r3
 80073b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80073ba:	65fb      	str	r3, [r7, #92]	; 0x5c
 80073bc:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073be:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80073c0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80073c2:	e841 2300 	strex	r3, r2, [r1]
 80073c6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80073c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d1e6      	bne.n	800739c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	3308      	adds	r3, #8
 80073d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073d8:	e853 3f00 	ldrex	r3, [r3]
 80073dc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80073de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073e0:	f023 0301 	bic.w	r3, r3, #1
 80073e4:	663b      	str	r3, [r7, #96]	; 0x60
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	3308      	adds	r3, #8
 80073ec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80073ee:	64ba      	str	r2, [r7, #72]	; 0x48
 80073f0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073f2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80073f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80073f6:	e841 2300 	strex	r3, r2, [r1]
 80073fa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80073fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d1e5      	bne.n	80073ce <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	2220      	movs	r2, #32
 8007406:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	2220      	movs	r2, #32
 800740c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	2200      	movs	r2, #0
 8007414:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8007418:	2303      	movs	r3, #3
 800741a:	e068      	b.n	80074ee <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f003 0304 	and.w	r3, r3, #4
 8007426:	2b00      	cmp	r3, #0
 8007428:	d050      	beq.n	80074cc <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	69db      	ldr	r3, [r3, #28]
 8007430:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007434:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007438:	d148      	bne.n	80074cc <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007442:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800744a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800744c:	e853 3f00 	ldrex	r3, [r3]
 8007450:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007454:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007458:	66fb      	str	r3, [r7, #108]	; 0x6c
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	461a      	mov	r2, r3
 8007460:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007462:	637b      	str	r3, [r7, #52]	; 0x34
 8007464:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007466:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007468:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800746a:	e841 2300 	strex	r3, r2, [r1]
 800746e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007472:	2b00      	cmp	r3, #0
 8007474:	d1e6      	bne.n	8007444 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	3308      	adds	r3, #8
 800747c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800747e:	697b      	ldr	r3, [r7, #20]
 8007480:	e853 3f00 	ldrex	r3, [r3]
 8007484:	613b      	str	r3, [r7, #16]
   return(result);
 8007486:	693b      	ldr	r3, [r7, #16]
 8007488:	f023 0301 	bic.w	r3, r3, #1
 800748c:	66bb      	str	r3, [r7, #104]	; 0x68
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	3308      	adds	r3, #8
 8007494:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007496:	623a      	str	r2, [r7, #32]
 8007498:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800749a:	69f9      	ldr	r1, [r7, #28]
 800749c:	6a3a      	ldr	r2, [r7, #32]
 800749e:	e841 2300 	strex	r3, r2, [r1]
 80074a2:	61bb      	str	r3, [r7, #24]
   return(result);
 80074a4:	69bb      	ldr	r3, [r7, #24]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d1e5      	bne.n	8007476 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	2220      	movs	r2, #32
 80074ae:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	2220      	movs	r2, #32
 80074b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	2220      	movs	r2, #32
 80074bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	2200      	movs	r2, #0
 80074c4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80074c8:	2303      	movs	r3, #3
 80074ca:	e010      	b.n	80074ee <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	69da      	ldr	r2, [r3, #28]
 80074d2:	68bb      	ldr	r3, [r7, #8]
 80074d4:	4013      	ands	r3, r2
 80074d6:	68ba      	ldr	r2, [r7, #8]
 80074d8:	429a      	cmp	r2, r3
 80074da:	bf0c      	ite	eq
 80074dc:	2301      	moveq	r3, #1
 80074de:	2300      	movne	r3, #0
 80074e0:	b2db      	uxtb	r3, r3
 80074e2:	461a      	mov	r2, r3
 80074e4:	79fb      	ldrb	r3, [r7, #7]
 80074e6:	429a      	cmp	r2, r3
 80074e8:	f43f af48 	beq.w	800737c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80074ec:	2300      	movs	r3, #0
}
 80074ee:	4618      	mov	r0, r3
 80074f0:	3770      	adds	r7, #112	; 0x70
 80074f2:	46bd      	mov	sp, r7
 80074f4:	bd80      	pop	{r7, pc}

080074f6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80074f6:	b480      	push	{r7}
 80074f8:	b095      	sub	sp, #84	; 0x54
 80074fa:	af00      	add	r7, sp, #0
 80074fc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007504:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007506:	e853 3f00 	ldrex	r3, [r3]
 800750a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800750c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800750e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007512:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	461a      	mov	r2, r3
 800751a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800751c:	643b      	str	r3, [r7, #64]	; 0x40
 800751e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007520:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007522:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007524:	e841 2300 	strex	r3, r2, [r1]
 8007528:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800752a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800752c:	2b00      	cmp	r3, #0
 800752e:	d1e6      	bne.n	80074fe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	3308      	adds	r3, #8
 8007536:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007538:	6a3b      	ldr	r3, [r7, #32]
 800753a:	e853 3f00 	ldrex	r3, [r3]
 800753e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007540:	69fb      	ldr	r3, [r7, #28]
 8007542:	f023 0301 	bic.w	r3, r3, #1
 8007546:	64bb      	str	r3, [r7, #72]	; 0x48
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	3308      	adds	r3, #8
 800754e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007550:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007552:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007554:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007556:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007558:	e841 2300 	strex	r3, r2, [r1]
 800755c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800755e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007560:	2b00      	cmp	r3, #0
 8007562:	d1e5      	bne.n	8007530 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007568:	2b01      	cmp	r3, #1
 800756a:	d118      	bne.n	800759e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	e853 3f00 	ldrex	r3, [r3]
 8007578:	60bb      	str	r3, [r7, #8]
   return(result);
 800757a:	68bb      	ldr	r3, [r7, #8]
 800757c:	f023 0310 	bic.w	r3, r3, #16
 8007580:	647b      	str	r3, [r7, #68]	; 0x44
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	461a      	mov	r2, r3
 8007588:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800758a:	61bb      	str	r3, [r7, #24]
 800758c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800758e:	6979      	ldr	r1, [r7, #20]
 8007590:	69ba      	ldr	r2, [r7, #24]
 8007592:	e841 2300 	strex	r3, r2, [r1]
 8007596:	613b      	str	r3, [r7, #16]
   return(result);
 8007598:	693b      	ldr	r3, [r7, #16]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d1e6      	bne.n	800756c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2220      	movs	r2, #32
 80075a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	2200      	movs	r2, #0
 80075aa:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2200      	movs	r2, #0
 80075b0:	669a      	str	r2, [r3, #104]	; 0x68
}
 80075b2:	bf00      	nop
 80075b4:	3754      	adds	r7, #84	; 0x54
 80075b6:	46bd      	mov	sp, r7
 80075b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075bc:	4770      	bx	lr

080075be <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80075be:	b580      	push	{r7, lr}
 80075c0:	b084      	sub	sp, #16
 80075c2:	af00      	add	r7, sp, #0
 80075c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075ca:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	2200      	movs	r2, #0
 80075d0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	2200      	movs	r2, #0
 80075d8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80075dc:	68f8      	ldr	r0, [r7, #12]
 80075de:	f7ff fb51 	bl	8006c84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80075e2:	bf00      	nop
 80075e4:	3710      	adds	r7, #16
 80075e6:	46bd      	mov	sp, r7
 80075e8:	bd80      	pop	{r7, pc}

080075ea <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80075ea:	b580      	push	{r7, lr}
 80075ec:	b088      	sub	sp, #32
 80075ee:	af00      	add	r7, sp, #0
 80075f0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	e853 3f00 	ldrex	r3, [r3]
 80075fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8007600:	68bb      	ldr	r3, [r7, #8]
 8007602:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007606:	61fb      	str	r3, [r7, #28]
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	461a      	mov	r2, r3
 800760e:	69fb      	ldr	r3, [r7, #28]
 8007610:	61bb      	str	r3, [r7, #24]
 8007612:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007614:	6979      	ldr	r1, [r7, #20]
 8007616:	69ba      	ldr	r2, [r7, #24]
 8007618:	e841 2300 	strex	r3, r2, [r1]
 800761c:	613b      	str	r3, [r7, #16]
   return(result);
 800761e:	693b      	ldr	r3, [r7, #16]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d1e6      	bne.n	80075f2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2220      	movs	r2, #32
 8007628:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	2200      	movs	r2, #0
 800762e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007630:	6878      	ldr	r0, [r7, #4]
 8007632:	f7ff fb1d 	bl	8006c70 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007636:	bf00      	nop
 8007638:	3720      	adds	r7, #32
 800763a:	46bd      	mov	sp, r7
 800763c:	bd80      	pop	{r7, pc}
	...

08007640 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007640:	b084      	sub	sp, #16
 8007642:	b580      	push	{r7, lr}
 8007644:	b084      	sub	sp, #16
 8007646:	af00      	add	r7, sp, #0
 8007648:	6078      	str	r0, [r7, #4]
 800764a:	f107 001c 	add.w	r0, r7, #28
 800764e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007654:	2b01      	cmp	r3, #1
 8007656:	d120      	bne.n	800769a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800765c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	68da      	ldr	r2, [r3, #12]
 8007668:	4b20      	ldr	r3, [pc, #128]	; (80076ec <USB_CoreInit+0xac>)
 800766a:	4013      	ands	r3, r2
 800766c:	687a      	ldr	r2, [r7, #4]
 800766e:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	68db      	ldr	r3, [r3, #12]
 8007674:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800767c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800767e:	2b01      	cmp	r3, #1
 8007680:	d105      	bne.n	800768e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	68db      	ldr	r3, [r3, #12]
 8007686:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800768e:	6878      	ldr	r0, [r7, #4]
 8007690:	f000 fa96 	bl	8007bc0 <USB_CoreReset>
 8007694:	4603      	mov	r3, r0
 8007696:	73fb      	strb	r3, [r7, #15]
 8007698:	e010      	b.n	80076bc <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	68db      	ldr	r3, [r3, #12]
 800769e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80076a6:	6878      	ldr	r0, [r7, #4]
 80076a8:	f000 fa8a 	bl	8007bc0 <USB_CoreReset>
 80076ac:	4603      	mov	r3, r0
 80076ae:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076b4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80076bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076be:	2b01      	cmp	r3, #1
 80076c0:	d10b      	bne.n	80076da <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	689b      	ldr	r3, [r3, #8]
 80076c6:	f043 0206 	orr.w	r2, r3, #6
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	689b      	ldr	r3, [r3, #8]
 80076d2:	f043 0220 	orr.w	r2, r3, #32
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80076da:	7bfb      	ldrb	r3, [r7, #15]
}
 80076dc:	4618      	mov	r0, r3
 80076de:	3710      	adds	r7, #16
 80076e0:	46bd      	mov	sp, r7
 80076e2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80076e6:	b004      	add	sp, #16
 80076e8:	4770      	bx	lr
 80076ea:	bf00      	nop
 80076ec:	ffbdffbf 	.word	0xffbdffbf

080076f0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80076f0:	b480      	push	{r7}
 80076f2:	b083      	sub	sp, #12
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	689b      	ldr	r3, [r3, #8]
 80076fc:	f023 0201 	bic.w	r2, r3, #1
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007704:	2300      	movs	r3, #0
}
 8007706:	4618      	mov	r0, r3
 8007708:	370c      	adds	r7, #12
 800770a:	46bd      	mov	sp, r7
 800770c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007710:	4770      	bx	lr

08007712 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007712:	b580      	push	{r7, lr}
 8007714:	b084      	sub	sp, #16
 8007716:	af00      	add	r7, sp, #0
 8007718:	6078      	str	r0, [r7, #4]
 800771a:	460b      	mov	r3, r1
 800771c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800771e:	2300      	movs	r3, #0
 8007720:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	68db      	ldr	r3, [r3, #12]
 8007726:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800772e:	78fb      	ldrb	r3, [r7, #3]
 8007730:	2b01      	cmp	r3, #1
 8007732:	d115      	bne.n	8007760 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	68db      	ldr	r3, [r3, #12]
 8007738:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007740:	2001      	movs	r0, #1
 8007742:	f7fb fc47 	bl	8002fd4 <HAL_Delay>
      ms++;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	3301      	adds	r3, #1
 800774a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800774c:	6878      	ldr	r0, [r7, #4]
 800774e:	f000 fa29 	bl	8007ba4 <USB_GetMode>
 8007752:	4603      	mov	r3, r0
 8007754:	2b01      	cmp	r3, #1
 8007756:	d01e      	beq.n	8007796 <USB_SetCurrentMode+0x84>
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	2b31      	cmp	r3, #49	; 0x31
 800775c:	d9f0      	bls.n	8007740 <USB_SetCurrentMode+0x2e>
 800775e:	e01a      	b.n	8007796 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007760:	78fb      	ldrb	r3, [r7, #3]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d115      	bne.n	8007792 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	68db      	ldr	r3, [r3, #12]
 800776a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007772:	2001      	movs	r0, #1
 8007774:	f7fb fc2e 	bl	8002fd4 <HAL_Delay>
      ms++;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	3301      	adds	r3, #1
 800777c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800777e:	6878      	ldr	r0, [r7, #4]
 8007780:	f000 fa10 	bl	8007ba4 <USB_GetMode>
 8007784:	4603      	mov	r3, r0
 8007786:	2b00      	cmp	r3, #0
 8007788:	d005      	beq.n	8007796 <USB_SetCurrentMode+0x84>
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	2b31      	cmp	r3, #49	; 0x31
 800778e:	d9f0      	bls.n	8007772 <USB_SetCurrentMode+0x60>
 8007790:	e001      	b.n	8007796 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007792:	2301      	movs	r3, #1
 8007794:	e005      	b.n	80077a2 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	2b32      	cmp	r3, #50	; 0x32
 800779a:	d101      	bne.n	80077a0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800779c:	2301      	movs	r3, #1
 800779e:	e000      	b.n	80077a2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80077a0:	2300      	movs	r3, #0
}
 80077a2:	4618      	mov	r0, r3
 80077a4:	3710      	adds	r7, #16
 80077a6:	46bd      	mov	sp, r7
 80077a8:	bd80      	pop	{r7, pc}
	...

080077ac <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80077ac:	b084      	sub	sp, #16
 80077ae:	b580      	push	{r7, lr}
 80077b0:	b086      	sub	sp, #24
 80077b2:	af00      	add	r7, sp, #0
 80077b4:	6078      	str	r0, [r7, #4]
 80077b6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80077ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80077be:	2300      	movs	r3, #0
 80077c0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80077c6:	2300      	movs	r3, #0
 80077c8:	613b      	str	r3, [r7, #16]
 80077ca:	e009      	b.n	80077e0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80077cc:	687a      	ldr	r2, [r7, #4]
 80077ce:	693b      	ldr	r3, [r7, #16]
 80077d0:	3340      	adds	r3, #64	; 0x40
 80077d2:	009b      	lsls	r3, r3, #2
 80077d4:	4413      	add	r3, r2
 80077d6:	2200      	movs	r2, #0
 80077d8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80077da:	693b      	ldr	r3, [r7, #16]
 80077dc:	3301      	adds	r3, #1
 80077de:	613b      	str	r3, [r7, #16]
 80077e0:	693b      	ldr	r3, [r7, #16]
 80077e2:	2b0e      	cmp	r3, #14
 80077e4:	d9f2      	bls.n	80077cc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80077e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d11c      	bne.n	8007826 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077f2:	685b      	ldr	r3, [r3, #4]
 80077f4:	68fa      	ldr	r2, [r7, #12]
 80077f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80077fa:	f043 0302 	orr.w	r3, r3, #2
 80077fe:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007804:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	601a      	str	r2, [r3, #0]
 8007824:	e005      	b.n	8007832 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800782a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007838:	461a      	mov	r2, r3
 800783a:	2300      	movs	r3, #0
 800783c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007844:	4619      	mov	r1, r3
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800784c:	461a      	mov	r2, r3
 800784e:	680b      	ldr	r3, [r1, #0]
 8007850:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007854:	2b01      	cmp	r3, #1
 8007856:	d10c      	bne.n	8007872 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800785a:	2b00      	cmp	r3, #0
 800785c:	d104      	bne.n	8007868 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800785e:	2100      	movs	r1, #0
 8007860:	6878      	ldr	r0, [r7, #4]
 8007862:	f000 f965 	bl	8007b30 <USB_SetDevSpeed>
 8007866:	e008      	b.n	800787a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007868:	2101      	movs	r1, #1
 800786a:	6878      	ldr	r0, [r7, #4]
 800786c:	f000 f960 	bl	8007b30 <USB_SetDevSpeed>
 8007870:	e003      	b.n	800787a <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007872:	2103      	movs	r1, #3
 8007874:	6878      	ldr	r0, [r7, #4]
 8007876:	f000 f95b 	bl	8007b30 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800787a:	2110      	movs	r1, #16
 800787c:	6878      	ldr	r0, [r7, #4]
 800787e:	f000 f8f3 	bl	8007a68 <USB_FlushTxFifo>
 8007882:	4603      	mov	r3, r0
 8007884:	2b00      	cmp	r3, #0
 8007886:	d001      	beq.n	800788c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8007888:	2301      	movs	r3, #1
 800788a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800788c:	6878      	ldr	r0, [r7, #4]
 800788e:	f000 f91f 	bl	8007ad0 <USB_FlushRxFifo>
 8007892:	4603      	mov	r3, r0
 8007894:	2b00      	cmp	r3, #0
 8007896:	d001      	beq.n	800789c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8007898:	2301      	movs	r3, #1
 800789a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078a2:	461a      	mov	r2, r3
 80078a4:	2300      	movs	r3, #0
 80078a6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078ae:	461a      	mov	r2, r3
 80078b0:	2300      	movs	r3, #0
 80078b2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078ba:	461a      	mov	r2, r3
 80078bc:	2300      	movs	r3, #0
 80078be:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80078c0:	2300      	movs	r3, #0
 80078c2:	613b      	str	r3, [r7, #16]
 80078c4:	e043      	b.n	800794e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80078c6:	693b      	ldr	r3, [r7, #16]
 80078c8:	015a      	lsls	r2, r3, #5
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	4413      	add	r3, r2
 80078ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80078d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80078dc:	d118      	bne.n	8007910 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80078de:	693b      	ldr	r3, [r7, #16]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d10a      	bne.n	80078fa <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80078e4:	693b      	ldr	r3, [r7, #16]
 80078e6:	015a      	lsls	r2, r3, #5
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	4413      	add	r3, r2
 80078ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078f0:	461a      	mov	r2, r3
 80078f2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80078f6:	6013      	str	r3, [r2, #0]
 80078f8:	e013      	b.n	8007922 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80078fa:	693b      	ldr	r3, [r7, #16]
 80078fc:	015a      	lsls	r2, r3, #5
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	4413      	add	r3, r2
 8007902:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007906:	461a      	mov	r2, r3
 8007908:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800790c:	6013      	str	r3, [r2, #0]
 800790e:	e008      	b.n	8007922 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007910:	693b      	ldr	r3, [r7, #16]
 8007912:	015a      	lsls	r2, r3, #5
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	4413      	add	r3, r2
 8007918:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800791c:	461a      	mov	r2, r3
 800791e:	2300      	movs	r3, #0
 8007920:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007922:	693b      	ldr	r3, [r7, #16]
 8007924:	015a      	lsls	r2, r3, #5
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	4413      	add	r3, r2
 800792a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800792e:	461a      	mov	r2, r3
 8007930:	2300      	movs	r3, #0
 8007932:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007934:	693b      	ldr	r3, [r7, #16]
 8007936:	015a      	lsls	r2, r3, #5
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	4413      	add	r3, r2
 800793c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007940:	461a      	mov	r2, r3
 8007942:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007946:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007948:	693b      	ldr	r3, [r7, #16]
 800794a:	3301      	adds	r3, #1
 800794c:	613b      	str	r3, [r7, #16]
 800794e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007950:	693a      	ldr	r2, [r7, #16]
 8007952:	429a      	cmp	r2, r3
 8007954:	d3b7      	bcc.n	80078c6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007956:	2300      	movs	r3, #0
 8007958:	613b      	str	r3, [r7, #16]
 800795a:	e043      	b.n	80079e4 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800795c:	693b      	ldr	r3, [r7, #16]
 800795e:	015a      	lsls	r2, r3, #5
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	4413      	add	r3, r2
 8007964:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800796e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007972:	d118      	bne.n	80079a6 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8007974:	693b      	ldr	r3, [r7, #16]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d10a      	bne.n	8007990 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800797a:	693b      	ldr	r3, [r7, #16]
 800797c:	015a      	lsls	r2, r3, #5
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	4413      	add	r3, r2
 8007982:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007986:	461a      	mov	r2, r3
 8007988:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800798c:	6013      	str	r3, [r2, #0]
 800798e:	e013      	b.n	80079b8 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007990:	693b      	ldr	r3, [r7, #16]
 8007992:	015a      	lsls	r2, r3, #5
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	4413      	add	r3, r2
 8007998:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800799c:	461a      	mov	r2, r3
 800799e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80079a2:	6013      	str	r3, [r2, #0]
 80079a4:	e008      	b.n	80079b8 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80079a6:	693b      	ldr	r3, [r7, #16]
 80079a8:	015a      	lsls	r2, r3, #5
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	4413      	add	r3, r2
 80079ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079b2:	461a      	mov	r2, r3
 80079b4:	2300      	movs	r3, #0
 80079b6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80079b8:	693b      	ldr	r3, [r7, #16]
 80079ba:	015a      	lsls	r2, r3, #5
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	4413      	add	r3, r2
 80079c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079c4:	461a      	mov	r2, r3
 80079c6:	2300      	movs	r3, #0
 80079c8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80079ca:	693b      	ldr	r3, [r7, #16]
 80079cc:	015a      	lsls	r2, r3, #5
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	4413      	add	r3, r2
 80079d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079d6:	461a      	mov	r2, r3
 80079d8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80079dc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80079de:	693b      	ldr	r3, [r7, #16]
 80079e0:	3301      	adds	r3, #1
 80079e2:	613b      	str	r3, [r7, #16]
 80079e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079e6:	693a      	ldr	r2, [r7, #16]
 80079e8:	429a      	cmp	r2, r3
 80079ea:	d3b7      	bcc.n	800795c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079f2:	691b      	ldr	r3, [r3, #16]
 80079f4:	68fa      	ldr	r2, [r7, #12]
 80079f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80079fa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80079fe:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2200      	movs	r2, #0
 8007a04:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007a0c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d105      	bne.n	8007a20 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	699b      	ldr	r3, [r3, #24]
 8007a18:	f043 0210 	orr.w	r2, r3, #16
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	699a      	ldr	r2, [r3, #24]
 8007a24:	4b0e      	ldr	r3, [pc, #56]	; (8007a60 <USB_DevInit+0x2b4>)
 8007a26:	4313      	orrs	r3, r2
 8007a28:	687a      	ldr	r2, [r7, #4]
 8007a2a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007a2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d005      	beq.n	8007a3e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	699b      	ldr	r3, [r3, #24]
 8007a36:	f043 0208 	orr.w	r2, r3, #8
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007a3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a40:	2b01      	cmp	r3, #1
 8007a42:	d105      	bne.n	8007a50 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	699a      	ldr	r2, [r3, #24]
 8007a48:	4b06      	ldr	r3, [pc, #24]	; (8007a64 <USB_DevInit+0x2b8>)
 8007a4a:	4313      	orrs	r3, r2
 8007a4c:	687a      	ldr	r2, [r7, #4]
 8007a4e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007a50:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a52:	4618      	mov	r0, r3
 8007a54:	3718      	adds	r7, #24
 8007a56:	46bd      	mov	sp, r7
 8007a58:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007a5c:	b004      	add	sp, #16
 8007a5e:	4770      	bx	lr
 8007a60:	803c3800 	.word	0x803c3800
 8007a64:	40000004 	.word	0x40000004

08007a68 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007a68:	b480      	push	{r7}
 8007a6a:	b085      	sub	sp, #20
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
 8007a70:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007a72:	2300      	movs	r3, #0
 8007a74:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	3301      	adds	r3, #1
 8007a7a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	4a13      	ldr	r2, [pc, #76]	; (8007acc <USB_FlushTxFifo+0x64>)
 8007a80:	4293      	cmp	r3, r2
 8007a82:	d901      	bls.n	8007a88 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007a84:	2303      	movs	r3, #3
 8007a86:	e01b      	b.n	8007ac0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	691b      	ldr	r3, [r3, #16]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	daf2      	bge.n	8007a76 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007a90:	2300      	movs	r3, #0
 8007a92:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	019b      	lsls	r3, r3, #6
 8007a98:	f043 0220 	orr.w	r2, r3, #32
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	3301      	adds	r3, #1
 8007aa4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	4a08      	ldr	r2, [pc, #32]	; (8007acc <USB_FlushTxFifo+0x64>)
 8007aaa:	4293      	cmp	r3, r2
 8007aac:	d901      	bls.n	8007ab2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007aae:	2303      	movs	r3, #3
 8007ab0:	e006      	b.n	8007ac0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	691b      	ldr	r3, [r3, #16]
 8007ab6:	f003 0320 	and.w	r3, r3, #32
 8007aba:	2b20      	cmp	r3, #32
 8007abc:	d0f0      	beq.n	8007aa0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007abe:	2300      	movs	r3, #0
}
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	3714      	adds	r7, #20
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aca:	4770      	bx	lr
 8007acc:	00030d40 	.word	0x00030d40

08007ad0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007ad0:	b480      	push	{r7}
 8007ad2:	b085      	sub	sp, #20
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007ad8:	2300      	movs	r3, #0
 8007ada:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	3301      	adds	r3, #1
 8007ae0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	4a11      	ldr	r2, [pc, #68]	; (8007b2c <USB_FlushRxFifo+0x5c>)
 8007ae6:	4293      	cmp	r3, r2
 8007ae8:	d901      	bls.n	8007aee <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007aea:	2303      	movs	r3, #3
 8007aec:	e018      	b.n	8007b20 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	691b      	ldr	r3, [r3, #16]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	daf2      	bge.n	8007adc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007af6:	2300      	movs	r3, #0
 8007af8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	2210      	movs	r2, #16
 8007afe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	3301      	adds	r3, #1
 8007b04:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	4a08      	ldr	r2, [pc, #32]	; (8007b2c <USB_FlushRxFifo+0x5c>)
 8007b0a:	4293      	cmp	r3, r2
 8007b0c:	d901      	bls.n	8007b12 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007b0e:	2303      	movs	r3, #3
 8007b10:	e006      	b.n	8007b20 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	691b      	ldr	r3, [r3, #16]
 8007b16:	f003 0310 	and.w	r3, r3, #16
 8007b1a:	2b10      	cmp	r3, #16
 8007b1c:	d0f0      	beq.n	8007b00 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007b1e:	2300      	movs	r3, #0
}
 8007b20:	4618      	mov	r0, r3
 8007b22:	3714      	adds	r7, #20
 8007b24:	46bd      	mov	sp, r7
 8007b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2a:	4770      	bx	lr
 8007b2c:	00030d40 	.word	0x00030d40

08007b30 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007b30:	b480      	push	{r7}
 8007b32:	b085      	sub	sp, #20
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
 8007b38:	460b      	mov	r3, r1
 8007b3a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b46:	681a      	ldr	r2, [r3, #0]
 8007b48:	78fb      	ldrb	r3, [r7, #3]
 8007b4a:	68f9      	ldr	r1, [r7, #12]
 8007b4c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007b50:	4313      	orrs	r3, r2
 8007b52:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007b54:	2300      	movs	r3, #0
}
 8007b56:	4618      	mov	r0, r3
 8007b58:	3714      	adds	r7, #20
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b60:	4770      	bx	lr

08007b62 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007b62:	b480      	push	{r7}
 8007b64:	b085      	sub	sp, #20
 8007b66:	af00      	add	r7, sp, #0
 8007b68:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	68fa      	ldr	r2, [r7, #12]
 8007b78:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007b7c:	f023 0303 	bic.w	r3, r3, #3
 8007b80:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b88:	685b      	ldr	r3, [r3, #4]
 8007b8a:	68fa      	ldr	r2, [r7, #12]
 8007b8c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007b90:	f043 0302 	orr.w	r3, r3, #2
 8007b94:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007b96:	2300      	movs	r3, #0
}
 8007b98:	4618      	mov	r0, r3
 8007b9a:	3714      	adds	r7, #20
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba2:	4770      	bx	lr

08007ba4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007ba4:	b480      	push	{r7}
 8007ba6:	b083      	sub	sp, #12
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	695b      	ldr	r3, [r3, #20]
 8007bb0:	f003 0301 	and.w	r3, r3, #1
}
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	370c      	adds	r7, #12
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bbe:	4770      	bx	lr

08007bc0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007bc0:	b480      	push	{r7}
 8007bc2:	b085      	sub	sp, #20
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007bc8:	2300      	movs	r3, #0
 8007bca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	3301      	adds	r3, #1
 8007bd0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	4a13      	ldr	r2, [pc, #76]	; (8007c24 <USB_CoreReset+0x64>)
 8007bd6:	4293      	cmp	r3, r2
 8007bd8:	d901      	bls.n	8007bde <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007bda:	2303      	movs	r3, #3
 8007bdc:	e01b      	b.n	8007c16 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	691b      	ldr	r3, [r3, #16]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	daf2      	bge.n	8007bcc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007be6:	2300      	movs	r3, #0
 8007be8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	691b      	ldr	r3, [r3, #16]
 8007bee:	f043 0201 	orr.w	r2, r3, #1
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	3301      	adds	r3, #1
 8007bfa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	4a09      	ldr	r2, [pc, #36]	; (8007c24 <USB_CoreReset+0x64>)
 8007c00:	4293      	cmp	r3, r2
 8007c02:	d901      	bls.n	8007c08 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007c04:	2303      	movs	r3, #3
 8007c06:	e006      	b.n	8007c16 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	691b      	ldr	r3, [r3, #16]
 8007c0c:	f003 0301 	and.w	r3, r3, #1
 8007c10:	2b01      	cmp	r3, #1
 8007c12:	d0f0      	beq.n	8007bf6 <USB_CoreReset+0x36>

  return HAL_OK;
 8007c14:	2300      	movs	r3, #0
}
 8007c16:	4618      	mov	r0, r3
 8007c18:	3714      	adds	r7, #20
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c20:	4770      	bx	lr
 8007c22:	bf00      	nop
 8007c24:	00030d40 	.word	0x00030d40

08007c28 <__errno>:
 8007c28:	4b01      	ldr	r3, [pc, #4]	; (8007c30 <__errno+0x8>)
 8007c2a:	6818      	ldr	r0, [r3, #0]
 8007c2c:	4770      	bx	lr
 8007c2e:	bf00      	nop
 8007c30:	20000010 	.word	0x20000010

08007c34 <__libc_init_array>:
 8007c34:	b570      	push	{r4, r5, r6, lr}
 8007c36:	4d0d      	ldr	r5, [pc, #52]	; (8007c6c <__libc_init_array+0x38>)
 8007c38:	4c0d      	ldr	r4, [pc, #52]	; (8007c70 <__libc_init_array+0x3c>)
 8007c3a:	1b64      	subs	r4, r4, r5
 8007c3c:	10a4      	asrs	r4, r4, #2
 8007c3e:	2600      	movs	r6, #0
 8007c40:	42a6      	cmp	r6, r4
 8007c42:	d109      	bne.n	8007c58 <__libc_init_array+0x24>
 8007c44:	4d0b      	ldr	r5, [pc, #44]	; (8007c74 <__libc_init_array+0x40>)
 8007c46:	4c0c      	ldr	r4, [pc, #48]	; (8007c78 <__libc_init_array+0x44>)
 8007c48:	f001 f824 	bl	8008c94 <_init>
 8007c4c:	1b64      	subs	r4, r4, r5
 8007c4e:	10a4      	asrs	r4, r4, #2
 8007c50:	2600      	movs	r6, #0
 8007c52:	42a6      	cmp	r6, r4
 8007c54:	d105      	bne.n	8007c62 <__libc_init_array+0x2e>
 8007c56:	bd70      	pop	{r4, r5, r6, pc}
 8007c58:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c5c:	4798      	blx	r3
 8007c5e:	3601      	adds	r6, #1
 8007c60:	e7ee      	b.n	8007c40 <__libc_init_array+0xc>
 8007c62:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c66:	4798      	blx	r3
 8007c68:	3601      	adds	r6, #1
 8007c6a:	e7f2      	b.n	8007c52 <__libc_init_array+0x1e>
 8007c6c:	0800900c 	.word	0x0800900c
 8007c70:	0800900c 	.word	0x0800900c
 8007c74:	0800900c 	.word	0x0800900c
 8007c78:	08009010 	.word	0x08009010

08007c7c <memset>:
 8007c7c:	4402      	add	r2, r0
 8007c7e:	4603      	mov	r3, r0
 8007c80:	4293      	cmp	r3, r2
 8007c82:	d100      	bne.n	8007c86 <memset+0xa>
 8007c84:	4770      	bx	lr
 8007c86:	f803 1b01 	strb.w	r1, [r3], #1
 8007c8a:	e7f9      	b.n	8007c80 <memset+0x4>

08007c8c <iprintf>:
 8007c8c:	b40f      	push	{r0, r1, r2, r3}
 8007c8e:	4b0a      	ldr	r3, [pc, #40]	; (8007cb8 <iprintf+0x2c>)
 8007c90:	b513      	push	{r0, r1, r4, lr}
 8007c92:	681c      	ldr	r4, [r3, #0]
 8007c94:	b124      	cbz	r4, 8007ca0 <iprintf+0x14>
 8007c96:	69a3      	ldr	r3, [r4, #24]
 8007c98:	b913      	cbnz	r3, 8007ca0 <iprintf+0x14>
 8007c9a:	4620      	mov	r0, r4
 8007c9c:	f000 fa5e 	bl	800815c <__sinit>
 8007ca0:	ab05      	add	r3, sp, #20
 8007ca2:	9a04      	ldr	r2, [sp, #16]
 8007ca4:	68a1      	ldr	r1, [r4, #8]
 8007ca6:	9301      	str	r3, [sp, #4]
 8007ca8:	4620      	mov	r0, r4
 8007caa:	f000 fc67 	bl	800857c <_vfiprintf_r>
 8007cae:	b002      	add	sp, #8
 8007cb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007cb4:	b004      	add	sp, #16
 8007cb6:	4770      	bx	lr
 8007cb8:	20000010 	.word	0x20000010

08007cbc <_puts_r>:
 8007cbc:	b570      	push	{r4, r5, r6, lr}
 8007cbe:	460e      	mov	r6, r1
 8007cc0:	4605      	mov	r5, r0
 8007cc2:	b118      	cbz	r0, 8007ccc <_puts_r+0x10>
 8007cc4:	6983      	ldr	r3, [r0, #24]
 8007cc6:	b90b      	cbnz	r3, 8007ccc <_puts_r+0x10>
 8007cc8:	f000 fa48 	bl	800815c <__sinit>
 8007ccc:	69ab      	ldr	r3, [r5, #24]
 8007cce:	68ac      	ldr	r4, [r5, #8]
 8007cd0:	b913      	cbnz	r3, 8007cd8 <_puts_r+0x1c>
 8007cd2:	4628      	mov	r0, r5
 8007cd4:	f000 fa42 	bl	800815c <__sinit>
 8007cd8:	4b2c      	ldr	r3, [pc, #176]	; (8007d8c <_puts_r+0xd0>)
 8007cda:	429c      	cmp	r4, r3
 8007cdc:	d120      	bne.n	8007d20 <_puts_r+0x64>
 8007cde:	686c      	ldr	r4, [r5, #4]
 8007ce0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007ce2:	07db      	lsls	r3, r3, #31
 8007ce4:	d405      	bmi.n	8007cf2 <_puts_r+0x36>
 8007ce6:	89a3      	ldrh	r3, [r4, #12]
 8007ce8:	0598      	lsls	r0, r3, #22
 8007cea:	d402      	bmi.n	8007cf2 <_puts_r+0x36>
 8007cec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007cee:	f000 fad3 	bl	8008298 <__retarget_lock_acquire_recursive>
 8007cf2:	89a3      	ldrh	r3, [r4, #12]
 8007cf4:	0719      	lsls	r1, r3, #28
 8007cf6:	d51d      	bpl.n	8007d34 <_puts_r+0x78>
 8007cf8:	6923      	ldr	r3, [r4, #16]
 8007cfa:	b1db      	cbz	r3, 8007d34 <_puts_r+0x78>
 8007cfc:	3e01      	subs	r6, #1
 8007cfe:	68a3      	ldr	r3, [r4, #8]
 8007d00:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007d04:	3b01      	subs	r3, #1
 8007d06:	60a3      	str	r3, [r4, #8]
 8007d08:	bb39      	cbnz	r1, 8007d5a <_puts_r+0x9e>
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	da38      	bge.n	8007d80 <_puts_r+0xc4>
 8007d0e:	4622      	mov	r2, r4
 8007d10:	210a      	movs	r1, #10
 8007d12:	4628      	mov	r0, r5
 8007d14:	f000 f848 	bl	8007da8 <__swbuf_r>
 8007d18:	3001      	adds	r0, #1
 8007d1a:	d011      	beq.n	8007d40 <_puts_r+0x84>
 8007d1c:	250a      	movs	r5, #10
 8007d1e:	e011      	b.n	8007d44 <_puts_r+0x88>
 8007d20:	4b1b      	ldr	r3, [pc, #108]	; (8007d90 <_puts_r+0xd4>)
 8007d22:	429c      	cmp	r4, r3
 8007d24:	d101      	bne.n	8007d2a <_puts_r+0x6e>
 8007d26:	68ac      	ldr	r4, [r5, #8]
 8007d28:	e7da      	b.n	8007ce0 <_puts_r+0x24>
 8007d2a:	4b1a      	ldr	r3, [pc, #104]	; (8007d94 <_puts_r+0xd8>)
 8007d2c:	429c      	cmp	r4, r3
 8007d2e:	bf08      	it	eq
 8007d30:	68ec      	ldreq	r4, [r5, #12]
 8007d32:	e7d5      	b.n	8007ce0 <_puts_r+0x24>
 8007d34:	4621      	mov	r1, r4
 8007d36:	4628      	mov	r0, r5
 8007d38:	f000 f888 	bl	8007e4c <__swsetup_r>
 8007d3c:	2800      	cmp	r0, #0
 8007d3e:	d0dd      	beq.n	8007cfc <_puts_r+0x40>
 8007d40:	f04f 35ff 	mov.w	r5, #4294967295
 8007d44:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007d46:	07da      	lsls	r2, r3, #31
 8007d48:	d405      	bmi.n	8007d56 <_puts_r+0x9a>
 8007d4a:	89a3      	ldrh	r3, [r4, #12]
 8007d4c:	059b      	lsls	r3, r3, #22
 8007d4e:	d402      	bmi.n	8007d56 <_puts_r+0x9a>
 8007d50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d52:	f000 faa2 	bl	800829a <__retarget_lock_release_recursive>
 8007d56:	4628      	mov	r0, r5
 8007d58:	bd70      	pop	{r4, r5, r6, pc}
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	da04      	bge.n	8007d68 <_puts_r+0xac>
 8007d5e:	69a2      	ldr	r2, [r4, #24]
 8007d60:	429a      	cmp	r2, r3
 8007d62:	dc06      	bgt.n	8007d72 <_puts_r+0xb6>
 8007d64:	290a      	cmp	r1, #10
 8007d66:	d004      	beq.n	8007d72 <_puts_r+0xb6>
 8007d68:	6823      	ldr	r3, [r4, #0]
 8007d6a:	1c5a      	adds	r2, r3, #1
 8007d6c:	6022      	str	r2, [r4, #0]
 8007d6e:	7019      	strb	r1, [r3, #0]
 8007d70:	e7c5      	b.n	8007cfe <_puts_r+0x42>
 8007d72:	4622      	mov	r2, r4
 8007d74:	4628      	mov	r0, r5
 8007d76:	f000 f817 	bl	8007da8 <__swbuf_r>
 8007d7a:	3001      	adds	r0, #1
 8007d7c:	d1bf      	bne.n	8007cfe <_puts_r+0x42>
 8007d7e:	e7df      	b.n	8007d40 <_puts_r+0x84>
 8007d80:	6823      	ldr	r3, [r4, #0]
 8007d82:	250a      	movs	r5, #10
 8007d84:	1c5a      	adds	r2, r3, #1
 8007d86:	6022      	str	r2, [r4, #0]
 8007d88:	701d      	strb	r5, [r3, #0]
 8007d8a:	e7db      	b.n	8007d44 <_puts_r+0x88>
 8007d8c:	08008f90 	.word	0x08008f90
 8007d90:	08008fb0 	.word	0x08008fb0
 8007d94:	08008f70 	.word	0x08008f70

08007d98 <puts>:
 8007d98:	4b02      	ldr	r3, [pc, #8]	; (8007da4 <puts+0xc>)
 8007d9a:	4601      	mov	r1, r0
 8007d9c:	6818      	ldr	r0, [r3, #0]
 8007d9e:	f7ff bf8d 	b.w	8007cbc <_puts_r>
 8007da2:	bf00      	nop
 8007da4:	20000010 	.word	0x20000010

08007da8 <__swbuf_r>:
 8007da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007daa:	460e      	mov	r6, r1
 8007dac:	4614      	mov	r4, r2
 8007dae:	4605      	mov	r5, r0
 8007db0:	b118      	cbz	r0, 8007dba <__swbuf_r+0x12>
 8007db2:	6983      	ldr	r3, [r0, #24]
 8007db4:	b90b      	cbnz	r3, 8007dba <__swbuf_r+0x12>
 8007db6:	f000 f9d1 	bl	800815c <__sinit>
 8007dba:	4b21      	ldr	r3, [pc, #132]	; (8007e40 <__swbuf_r+0x98>)
 8007dbc:	429c      	cmp	r4, r3
 8007dbe:	d12b      	bne.n	8007e18 <__swbuf_r+0x70>
 8007dc0:	686c      	ldr	r4, [r5, #4]
 8007dc2:	69a3      	ldr	r3, [r4, #24]
 8007dc4:	60a3      	str	r3, [r4, #8]
 8007dc6:	89a3      	ldrh	r3, [r4, #12]
 8007dc8:	071a      	lsls	r2, r3, #28
 8007dca:	d52f      	bpl.n	8007e2c <__swbuf_r+0x84>
 8007dcc:	6923      	ldr	r3, [r4, #16]
 8007dce:	b36b      	cbz	r3, 8007e2c <__swbuf_r+0x84>
 8007dd0:	6923      	ldr	r3, [r4, #16]
 8007dd2:	6820      	ldr	r0, [r4, #0]
 8007dd4:	1ac0      	subs	r0, r0, r3
 8007dd6:	6963      	ldr	r3, [r4, #20]
 8007dd8:	b2f6      	uxtb	r6, r6
 8007dda:	4283      	cmp	r3, r0
 8007ddc:	4637      	mov	r7, r6
 8007dde:	dc04      	bgt.n	8007dea <__swbuf_r+0x42>
 8007de0:	4621      	mov	r1, r4
 8007de2:	4628      	mov	r0, r5
 8007de4:	f000 f926 	bl	8008034 <_fflush_r>
 8007de8:	bb30      	cbnz	r0, 8007e38 <__swbuf_r+0x90>
 8007dea:	68a3      	ldr	r3, [r4, #8]
 8007dec:	3b01      	subs	r3, #1
 8007dee:	60a3      	str	r3, [r4, #8]
 8007df0:	6823      	ldr	r3, [r4, #0]
 8007df2:	1c5a      	adds	r2, r3, #1
 8007df4:	6022      	str	r2, [r4, #0]
 8007df6:	701e      	strb	r6, [r3, #0]
 8007df8:	6963      	ldr	r3, [r4, #20]
 8007dfa:	3001      	adds	r0, #1
 8007dfc:	4283      	cmp	r3, r0
 8007dfe:	d004      	beq.n	8007e0a <__swbuf_r+0x62>
 8007e00:	89a3      	ldrh	r3, [r4, #12]
 8007e02:	07db      	lsls	r3, r3, #31
 8007e04:	d506      	bpl.n	8007e14 <__swbuf_r+0x6c>
 8007e06:	2e0a      	cmp	r6, #10
 8007e08:	d104      	bne.n	8007e14 <__swbuf_r+0x6c>
 8007e0a:	4621      	mov	r1, r4
 8007e0c:	4628      	mov	r0, r5
 8007e0e:	f000 f911 	bl	8008034 <_fflush_r>
 8007e12:	b988      	cbnz	r0, 8007e38 <__swbuf_r+0x90>
 8007e14:	4638      	mov	r0, r7
 8007e16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e18:	4b0a      	ldr	r3, [pc, #40]	; (8007e44 <__swbuf_r+0x9c>)
 8007e1a:	429c      	cmp	r4, r3
 8007e1c:	d101      	bne.n	8007e22 <__swbuf_r+0x7a>
 8007e1e:	68ac      	ldr	r4, [r5, #8]
 8007e20:	e7cf      	b.n	8007dc2 <__swbuf_r+0x1a>
 8007e22:	4b09      	ldr	r3, [pc, #36]	; (8007e48 <__swbuf_r+0xa0>)
 8007e24:	429c      	cmp	r4, r3
 8007e26:	bf08      	it	eq
 8007e28:	68ec      	ldreq	r4, [r5, #12]
 8007e2a:	e7ca      	b.n	8007dc2 <__swbuf_r+0x1a>
 8007e2c:	4621      	mov	r1, r4
 8007e2e:	4628      	mov	r0, r5
 8007e30:	f000 f80c 	bl	8007e4c <__swsetup_r>
 8007e34:	2800      	cmp	r0, #0
 8007e36:	d0cb      	beq.n	8007dd0 <__swbuf_r+0x28>
 8007e38:	f04f 37ff 	mov.w	r7, #4294967295
 8007e3c:	e7ea      	b.n	8007e14 <__swbuf_r+0x6c>
 8007e3e:	bf00      	nop
 8007e40:	08008f90 	.word	0x08008f90
 8007e44:	08008fb0 	.word	0x08008fb0
 8007e48:	08008f70 	.word	0x08008f70

08007e4c <__swsetup_r>:
 8007e4c:	4b32      	ldr	r3, [pc, #200]	; (8007f18 <__swsetup_r+0xcc>)
 8007e4e:	b570      	push	{r4, r5, r6, lr}
 8007e50:	681d      	ldr	r5, [r3, #0]
 8007e52:	4606      	mov	r6, r0
 8007e54:	460c      	mov	r4, r1
 8007e56:	b125      	cbz	r5, 8007e62 <__swsetup_r+0x16>
 8007e58:	69ab      	ldr	r3, [r5, #24]
 8007e5a:	b913      	cbnz	r3, 8007e62 <__swsetup_r+0x16>
 8007e5c:	4628      	mov	r0, r5
 8007e5e:	f000 f97d 	bl	800815c <__sinit>
 8007e62:	4b2e      	ldr	r3, [pc, #184]	; (8007f1c <__swsetup_r+0xd0>)
 8007e64:	429c      	cmp	r4, r3
 8007e66:	d10f      	bne.n	8007e88 <__swsetup_r+0x3c>
 8007e68:	686c      	ldr	r4, [r5, #4]
 8007e6a:	89a3      	ldrh	r3, [r4, #12]
 8007e6c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007e70:	0719      	lsls	r1, r3, #28
 8007e72:	d42c      	bmi.n	8007ece <__swsetup_r+0x82>
 8007e74:	06dd      	lsls	r5, r3, #27
 8007e76:	d411      	bmi.n	8007e9c <__swsetup_r+0x50>
 8007e78:	2309      	movs	r3, #9
 8007e7a:	6033      	str	r3, [r6, #0]
 8007e7c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007e80:	81a3      	strh	r3, [r4, #12]
 8007e82:	f04f 30ff 	mov.w	r0, #4294967295
 8007e86:	e03e      	b.n	8007f06 <__swsetup_r+0xba>
 8007e88:	4b25      	ldr	r3, [pc, #148]	; (8007f20 <__swsetup_r+0xd4>)
 8007e8a:	429c      	cmp	r4, r3
 8007e8c:	d101      	bne.n	8007e92 <__swsetup_r+0x46>
 8007e8e:	68ac      	ldr	r4, [r5, #8]
 8007e90:	e7eb      	b.n	8007e6a <__swsetup_r+0x1e>
 8007e92:	4b24      	ldr	r3, [pc, #144]	; (8007f24 <__swsetup_r+0xd8>)
 8007e94:	429c      	cmp	r4, r3
 8007e96:	bf08      	it	eq
 8007e98:	68ec      	ldreq	r4, [r5, #12]
 8007e9a:	e7e6      	b.n	8007e6a <__swsetup_r+0x1e>
 8007e9c:	0758      	lsls	r0, r3, #29
 8007e9e:	d512      	bpl.n	8007ec6 <__swsetup_r+0x7a>
 8007ea0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007ea2:	b141      	cbz	r1, 8007eb6 <__swsetup_r+0x6a>
 8007ea4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007ea8:	4299      	cmp	r1, r3
 8007eaa:	d002      	beq.n	8007eb2 <__swsetup_r+0x66>
 8007eac:	4630      	mov	r0, r6
 8007eae:	f000 fa5b 	bl	8008368 <_free_r>
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	6363      	str	r3, [r4, #52]	; 0x34
 8007eb6:	89a3      	ldrh	r3, [r4, #12]
 8007eb8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007ebc:	81a3      	strh	r3, [r4, #12]
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	6063      	str	r3, [r4, #4]
 8007ec2:	6923      	ldr	r3, [r4, #16]
 8007ec4:	6023      	str	r3, [r4, #0]
 8007ec6:	89a3      	ldrh	r3, [r4, #12]
 8007ec8:	f043 0308 	orr.w	r3, r3, #8
 8007ecc:	81a3      	strh	r3, [r4, #12]
 8007ece:	6923      	ldr	r3, [r4, #16]
 8007ed0:	b94b      	cbnz	r3, 8007ee6 <__swsetup_r+0x9a>
 8007ed2:	89a3      	ldrh	r3, [r4, #12]
 8007ed4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007ed8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007edc:	d003      	beq.n	8007ee6 <__swsetup_r+0x9a>
 8007ede:	4621      	mov	r1, r4
 8007ee0:	4630      	mov	r0, r6
 8007ee2:	f000 fa01 	bl	80082e8 <__smakebuf_r>
 8007ee6:	89a0      	ldrh	r0, [r4, #12]
 8007ee8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007eec:	f010 0301 	ands.w	r3, r0, #1
 8007ef0:	d00a      	beq.n	8007f08 <__swsetup_r+0xbc>
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	60a3      	str	r3, [r4, #8]
 8007ef6:	6963      	ldr	r3, [r4, #20]
 8007ef8:	425b      	negs	r3, r3
 8007efa:	61a3      	str	r3, [r4, #24]
 8007efc:	6923      	ldr	r3, [r4, #16]
 8007efe:	b943      	cbnz	r3, 8007f12 <__swsetup_r+0xc6>
 8007f00:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007f04:	d1ba      	bne.n	8007e7c <__swsetup_r+0x30>
 8007f06:	bd70      	pop	{r4, r5, r6, pc}
 8007f08:	0781      	lsls	r1, r0, #30
 8007f0a:	bf58      	it	pl
 8007f0c:	6963      	ldrpl	r3, [r4, #20]
 8007f0e:	60a3      	str	r3, [r4, #8]
 8007f10:	e7f4      	b.n	8007efc <__swsetup_r+0xb0>
 8007f12:	2000      	movs	r0, #0
 8007f14:	e7f7      	b.n	8007f06 <__swsetup_r+0xba>
 8007f16:	bf00      	nop
 8007f18:	20000010 	.word	0x20000010
 8007f1c:	08008f90 	.word	0x08008f90
 8007f20:	08008fb0 	.word	0x08008fb0
 8007f24:	08008f70 	.word	0x08008f70

08007f28 <__sflush_r>:
 8007f28:	898a      	ldrh	r2, [r1, #12]
 8007f2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f2e:	4605      	mov	r5, r0
 8007f30:	0710      	lsls	r0, r2, #28
 8007f32:	460c      	mov	r4, r1
 8007f34:	d458      	bmi.n	8007fe8 <__sflush_r+0xc0>
 8007f36:	684b      	ldr	r3, [r1, #4]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	dc05      	bgt.n	8007f48 <__sflush_r+0x20>
 8007f3c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	dc02      	bgt.n	8007f48 <__sflush_r+0x20>
 8007f42:	2000      	movs	r0, #0
 8007f44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f48:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007f4a:	2e00      	cmp	r6, #0
 8007f4c:	d0f9      	beq.n	8007f42 <__sflush_r+0x1a>
 8007f4e:	2300      	movs	r3, #0
 8007f50:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007f54:	682f      	ldr	r7, [r5, #0]
 8007f56:	602b      	str	r3, [r5, #0]
 8007f58:	d032      	beq.n	8007fc0 <__sflush_r+0x98>
 8007f5a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007f5c:	89a3      	ldrh	r3, [r4, #12]
 8007f5e:	075a      	lsls	r2, r3, #29
 8007f60:	d505      	bpl.n	8007f6e <__sflush_r+0x46>
 8007f62:	6863      	ldr	r3, [r4, #4]
 8007f64:	1ac0      	subs	r0, r0, r3
 8007f66:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007f68:	b10b      	cbz	r3, 8007f6e <__sflush_r+0x46>
 8007f6a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007f6c:	1ac0      	subs	r0, r0, r3
 8007f6e:	2300      	movs	r3, #0
 8007f70:	4602      	mov	r2, r0
 8007f72:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007f74:	6a21      	ldr	r1, [r4, #32]
 8007f76:	4628      	mov	r0, r5
 8007f78:	47b0      	blx	r6
 8007f7a:	1c43      	adds	r3, r0, #1
 8007f7c:	89a3      	ldrh	r3, [r4, #12]
 8007f7e:	d106      	bne.n	8007f8e <__sflush_r+0x66>
 8007f80:	6829      	ldr	r1, [r5, #0]
 8007f82:	291d      	cmp	r1, #29
 8007f84:	d82c      	bhi.n	8007fe0 <__sflush_r+0xb8>
 8007f86:	4a2a      	ldr	r2, [pc, #168]	; (8008030 <__sflush_r+0x108>)
 8007f88:	40ca      	lsrs	r2, r1
 8007f8a:	07d6      	lsls	r6, r2, #31
 8007f8c:	d528      	bpl.n	8007fe0 <__sflush_r+0xb8>
 8007f8e:	2200      	movs	r2, #0
 8007f90:	6062      	str	r2, [r4, #4]
 8007f92:	04d9      	lsls	r1, r3, #19
 8007f94:	6922      	ldr	r2, [r4, #16]
 8007f96:	6022      	str	r2, [r4, #0]
 8007f98:	d504      	bpl.n	8007fa4 <__sflush_r+0x7c>
 8007f9a:	1c42      	adds	r2, r0, #1
 8007f9c:	d101      	bne.n	8007fa2 <__sflush_r+0x7a>
 8007f9e:	682b      	ldr	r3, [r5, #0]
 8007fa0:	b903      	cbnz	r3, 8007fa4 <__sflush_r+0x7c>
 8007fa2:	6560      	str	r0, [r4, #84]	; 0x54
 8007fa4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007fa6:	602f      	str	r7, [r5, #0]
 8007fa8:	2900      	cmp	r1, #0
 8007faa:	d0ca      	beq.n	8007f42 <__sflush_r+0x1a>
 8007fac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007fb0:	4299      	cmp	r1, r3
 8007fb2:	d002      	beq.n	8007fba <__sflush_r+0x92>
 8007fb4:	4628      	mov	r0, r5
 8007fb6:	f000 f9d7 	bl	8008368 <_free_r>
 8007fba:	2000      	movs	r0, #0
 8007fbc:	6360      	str	r0, [r4, #52]	; 0x34
 8007fbe:	e7c1      	b.n	8007f44 <__sflush_r+0x1c>
 8007fc0:	6a21      	ldr	r1, [r4, #32]
 8007fc2:	2301      	movs	r3, #1
 8007fc4:	4628      	mov	r0, r5
 8007fc6:	47b0      	blx	r6
 8007fc8:	1c41      	adds	r1, r0, #1
 8007fca:	d1c7      	bne.n	8007f5c <__sflush_r+0x34>
 8007fcc:	682b      	ldr	r3, [r5, #0]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d0c4      	beq.n	8007f5c <__sflush_r+0x34>
 8007fd2:	2b1d      	cmp	r3, #29
 8007fd4:	d001      	beq.n	8007fda <__sflush_r+0xb2>
 8007fd6:	2b16      	cmp	r3, #22
 8007fd8:	d101      	bne.n	8007fde <__sflush_r+0xb6>
 8007fda:	602f      	str	r7, [r5, #0]
 8007fdc:	e7b1      	b.n	8007f42 <__sflush_r+0x1a>
 8007fde:	89a3      	ldrh	r3, [r4, #12]
 8007fe0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007fe4:	81a3      	strh	r3, [r4, #12]
 8007fe6:	e7ad      	b.n	8007f44 <__sflush_r+0x1c>
 8007fe8:	690f      	ldr	r7, [r1, #16]
 8007fea:	2f00      	cmp	r7, #0
 8007fec:	d0a9      	beq.n	8007f42 <__sflush_r+0x1a>
 8007fee:	0793      	lsls	r3, r2, #30
 8007ff0:	680e      	ldr	r6, [r1, #0]
 8007ff2:	bf08      	it	eq
 8007ff4:	694b      	ldreq	r3, [r1, #20]
 8007ff6:	600f      	str	r7, [r1, #0]
 8007ff8:	bf18      	it	ne
 8007ffa:	2300      	movne	r3, #0
 8007ffc:	eba6 0807 	sub.w	r8, r6, r7
 8008000:	608b      	str	r3, [r1, #8]
 8008002:	f1b8 0f00 	cmp.w	r8, #0
 8008006:	dd9c      	ble.n	8007f42 <__sflush_r+0x1a>
 8008008:	6a21      	ldr	r1, [r4, #32]
 800800a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800800c:	4643      	mov	r3, r8
 800800e:	463a      	mov	r2, r7
 8008010:	4628      	mov	r0, r5
 8008012:	47b0      	blx	r6
 8008014:	2800      	cmp	r0, #0
 8008016:	dc06      	bgt.n	8008026 <__sflush_r+0xfe>
 8008018:	89a3      	ldrh	r3, [r4, #12]
 800801a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800801e:	81a3      	strh	r3, [r4, #12]
 8008020:	f04f 30ff 	mov.w	r0, #4294967295
 8008024:	e78e      	b.n	8007f44 <__sflush_r+0x1c>
 8008026:	4407      	add	r7, r0
 8008028:	eba8 0800 	sub.w	r8, r8, r0
 800802c:	e7e9      	b.n	8008002 <__sflush_r+0xda>
 800802e:	bf00      	nop
 8008030:	20400001 	.word	0x20400001

08008034 <_fflush_r>:
 8008034:	b538      	push	{r3, r4, r5, lr}
 8008036:	690b      	ldr	r3, [r1, #16]
 8008038:	4605      	mov	r5, r0
 800803a:	460c      	mov	r4, r1
 800803c:	b913      	cbnz	r3, 8008044 <_fflush_r+0x10>
 800803e:	2500      	movs	r5, #0
 8008040:	4628      	mov	r0, r5
 8008042:	bd38      	pop	{r3, r4, r5, pc}
 8008044:	b118      	cbz	r0, 800804e <_fflush_r+0x1a>
 8008046:	6983      	ldr	r3, [r0, #24]
 8008048:	b90b      	cbnz	r3, 800804e <_fflush_r+0x1a>
 800804a:	f000 f887 	bl	800815c <__sinit>
 800804e:	4b14      	ldr	r3, [pc, #80]	; (80080a0 <_fflush_r+0x6c>)
 8008050:	429c      	cmp	r4, r3
 8008052:	d11b      	bne.n	800808c <_fflush_r+0x58>
 8008054:	686c      	ldr	r4, [r5, #4]
 8008056:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d0ef      	beq.n	800803e <_fflush_r+0xa>
 800805e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008060:	07d0      	lsls	r0, r2, #31
 8008062:	d404      	bmi.n	800806e <_fflush_r+0x3a>
 8008064:	0599      	lsls	r1, r3, #22
 8008066:	d402      	bmi.n	800806e <_fflush_r+0x3a>
 8008068:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800806a:	f000 f915 	bl	8008298 <__retarget_lock_acquire_recursive>
 800806e:	4628      	mov	r0, r5
 8008070:	4621      	mov	r1, r4
 8008072:	f7ff ff59 	bl	8007f28 <__sflush_r>
 8008076:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008078:	07da      	lsls	r2, r3, #31
 800807a:	4605      	mov	r5, r0
 800807c:	d4e0      	bmi.n	8008040 <_fflush_r+0xc>
 800807e:	89a3      	ldrh	r3, [r4, #12]
 8008080:	059b      	lsls	r3, r3, #22
 8008082:	d4dd      	bmi.n	8008040 <_fflush_r+0xc>
 8008084:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008086:	f000 f908 	bl	800829a <__retarget_lock_release_recursive>
 800808a:	e7d9      	b.n	8008040 <_fflush_r+0xc>
 800808c:	4b05      	ldr	r3, [pc, #20]	; (80080a4 <_fflush_r+0x70>)
 800808e:	429c      	cmp	r4, r3
 8008090:	d101      	bne.n	8008096 <_fflush_r+0x62>
 8008092:	68ac      	ldr	r4, [r5, #8]
 8008094:	e7df      	b.n	8008056 <_fflush_r+0x22>
 8008096:	4b04      	ldr	r3, [pc, #16]	; (80080a8 <_fflush_r+0x74>)
 8008098:	429c      	cmp	r4, r3
 800809a:	bf08      	it	eq
 800809c:	68ec      	ldreq	r4, [r5, #12]
 800809e:	e7da      	b.n	8008056 <_fflush_r+0x22>
 80080a0:	08008f90 	.word	0x08008f90
 80080a4:	08008fb0 	.word	0x08008fb0
 80080a8:	08008f70 	.word	0x08008f70

080080ac <std>:
 80080ac:	2300      	movs	r3, #0
 80080ae:	b510      	push	{r4, lr}
 80080b0:	4604      	mov	r4, r0
 80080b2:	e9c0 3300 	strd	r3, r3, [r0]
 80080b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80080ba:	6083      	str	r3, [r0, #8]
 80080bc:	8181      	strh	r1, [r0, #12]
 80080be:	6643      	str	r3, [r0, #100]	; 0x64
 80080c0:	81c2      	strh	r2, [r0, #14]
 80080c2:	6183      	str	r3, [r0, #24]
 80080c4:	4619      	mov	r1, r3
 80080c6:	2208      	movs	r2, #8
 80080c8:	305c      	adds	r0, #92	; 0x5c
 80080ca:	f7ff fdd7 	bl	8007c7c <memset>
 80080ce:	4b05      	ldr	r3, [pc, #20]	; (80080e4 <std+0x38>)
 80080d0:	6263      	str	r3, [r4, #36]	; 0x24
 80080d2:	4b05      	ldr	r3, [pc, #20]	; (80080e8 <std+0x3c>)
 80080d4:	62a3      	str	r3, [r4, #40]	; 0x28
 80080d6:	4b05      	ldr	r3, [pc, #20]	; (80080ec <std+0x40>)
 80080d8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80080da:	4b05      	ldr	r3, [pc, #20]	; (80080f0 <std+0x44>)
 80080dc:	6224      	str	r4, [r4, #32]
 80080de:	6323      	str	r3, [r4, #48]	; 0x30
 80080e0:	bd10      	pop	{r4, pc}
 80080e2:	bf00      	nop
 80080e4:	08008b25 	.word	0x08008b25
 80080e8:	08008b47 	.word	0x08008b47
 80080ec:	08008b7f 	.word	0x08008b7f
 80080f0:	08008ba3 	.word	0x08008ba3

080080f4 <_cleanup_r>:
 80080f4:	4901      	ldr	r1, [pc, #4]	; (80080fc <_cleanup_r+0x8>)
 80080f6:	f000 b8af 	b.w	8008258 <_fwalk_reent>
 80080fa:	bf00      	nop
 80080fc:	08008035 	.word	0x08008035

08008100 <__sfmoreglue>:
 8008100:	b570      	push	{r4, r5, r6, lr}
 8008102:	2268      	movs	r2, #104	; 0x68
 8008104:	1e4d      	subs	r5, r1, #1
 8008106:	4355      	muls	r5, r2
 8008108:	460e      	mov	r6, r1
 800810a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800810e:	f000 f997 	bl	8008440 <_malloc_r>
 8008112:	4604      	mov	r4, r0
 8008114:	b140      	cbz	r0, 8008128 <__sfmoreglue+0x28>
 8008116:	2100      	movs	r1, #0
 8008118:	e9c0 1600 	strd	r1, r6, [r0]
 800811c:	300c      	adds	r0, #12
 800811e:	60a0      	str	r0, [r4, #8]
 8008120:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008124:	f7ff fdaa 	bl	8007c7c <memset>
 8008128:	4620      	mov	r0, r4
 800812a:	bd70      	pop	{r4, r5, r6, pc}

0800812c <__sfp_lock_acquire>:
 800812c:	4801      	ldr	r0, [pc, #4]	; (8008134 <__sfp_lock_acquire+0x8>)
 800812e:	f000 b8b3 	b.w	8008298 <__retarget_lock_acquire_recursive>
 8008132:	bf00      	nop
 8008134:	20005055 	.word	0x20005055

08008138 <__sfp_lock_release>:
 8008138:	4801      	ldr	r0, [pc, #4]	; (8008140 <__sfp_lock_release+0x8>)
 800813a:	f000 b8ae 	b.w	800829a <__retarget_lock_release_recursive>
 800813e:	bf00      	nop
 8008140:	20005055 	.word	0x20005055

08008144 <__sinit_lock_acquire>:
 8008144:	4801      	ldr	r0, [pc, #4]	; (800814c <__sinit_lock_acquire+0x8>)
 8008146:	f000 b8a7 	b.w	8008298 <__retarget_lock_acquire_recursive>
 800814a:	bf00      	nop
 800814c:	20005056 	.word	0x20005056

08008150 <__sinit_lock_release>:
 8008150:	4801      	ldr	r0, [pc, #4]	; (8008158 <__sinit_lock_release+0x8>)
 8008152:	f000 b8a2 	b.w	800829a <__retarget_lock_release_recursive>
 8008156:	bf00      	nop
 8008158:	20005056 	.word	0x20005056

0800815c <__sinit>:
 800815c:	b510      	push	{r4, lr}
 800815e:	4604      	mov	r4, r0
 8008160:	f7ff fff0 	bl	8008144 <__sinit_lock_acquire>
 8008164:	69a3      	ldr	r3, [r4, #24]
 8008166:	b11b      	cbz	r3, 8008170 <__sinit+0x14>
 8008168:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800816c:	f7ff bff0 	b.w	8008150 <__sinit_lock_release>
 8008170:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008174:	6523      	str	r3, [r4, #80]	; 0x50
 8008176:	4b13      	ldr	r3, [pc, #76]	; (80081c4 <__sinit+0x68>)
 8008178:	4a13      	ldr	r2, [pc, #76]	; (80081c8 <__sinit+0x6c>)
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	62a2      	str	r2, [r4, #40]	; 0x28
 800817e:	42a3      	cmp	r3, r4
 8008180:	bf04      	itt	eq
 8008182:	2301      	moveq	r3, #1
 8008184:	61a3      	streq	r3, [r4, #24]
 8008186:	4620      	mov	r0, r4
 8008188:	f000 f820 	bl	80081cc <__sfp>
 800818c:	6060      	str	r0, [r4, #4]
 800818e:	4620      	mov	r0, r4
 8008190:	f000 f81c 	bl	80081cc <__sfp>
 8008194:	60a0      	str	r0, [r4, #8]
 8008196:	4620      	mov	r0, r4
 8008198:	f000 f818 	bl	80081cc <__sfp>
 800819c:	2200      	movs	r2, #0
 800819e:	60e0      	str	r0, [r4, #12]
 80081a0:	2104      	movs	r1, #4
 80081a2:	6860      	ldr	r0, [r4, #4]
 80081a4:	f7ff ff82 	bl	80080ac <std>
 80081a8:	68a0      	ldr	r0, [r4, #8]
 80081aa:	2201      	movs	r2, #1
 80081ac:	2109      	movs	r1, #9
 80081ae:	f7ff ff7d 	bl	80080ac <std>
 80081b2:	68e0      	ldr	r0, [r4, #12]
 80081b4:	2202      	movs	r2, #2
 80081b6:	2112      	movs	r1, #18
 80081b8:	f7ff ff78 	bl	80080ac <std>
 80081bc:	2301      	movs	r3, #1
 80081be:	61a3      	str	r3, [r4, #24]
 80081c0:	e7d2      	b.n	8008168 <__sinit+0xc>
 80081c2:	bf00      	nop
 80081c4:	08008f6c 	.word	0x08008f6c
 80081c8:	080080f5 	.word	0x080080f5

080081cc <__sfp>:
 80081cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081ce:	4607      	mov	r7, r0
 80081d0:	f7ff ffac 	bl	800812c <__sfp_lock_acquire>
 80081d4:	4b1e      	ldr	r3, [pc, #120]	; (8008250 <__sfp+0x84>)
 80081d6:	681e      	ldr	r6, [r3, #0]
 80081d8:	69b3      	ldr	r3, [r6, #24]
 80081da:	b913      	cbnz	r3, 80081e2 <__sfp+0x16>
 80081dc:	4630      	mov	r0, r6
 80081de:	f7ff ffbd 	bl	800815c <__sinit>
 80081e2:	3648      	adds	r6, #72	; 0x48
 80081e4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80081e8:	3b01      	subs	r3, #1
 80081ea:	d503      	bpl.n	80081f4 <__sfp+0x28>
 80081ec:	6833      	ldr	r3, [r6, #0]
 80081ee:	b30b      	cbz	r3, 8008234 <__sfp+0x68>
 80081f0:	6836      	ldr	r6, [r6, #0]
 80081f2:	e7f7      	b.n	80081e4 <__sfp+0x18>
 80081f4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80081f8:	b9d5      	cbnz	r5, 8008230 <__sfp+0x64>
 80081fa:	4b16      	ldr	r3, [pc, #88]	; (8008254 <__sfp+0x88>)
 80081fc:	60e3      	str	r3, [r4, #12]
 80081fe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008202:	6665      	str	r5, [r4, #100]	; 0x64
 8008204:	f000 f847 	bl	8008296 <__retarget_lock_init_recursive>
 8008208:	f7ff ff96 	bl	8008138 <__sfp_lock_release>
 800820c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008210:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008214:	6025      	str	r5, [r4, #0]
 8008216:	61a5      	str	r5, [r4, #24]
 8008218:	2208      	movs	r2, #8
 800821a:	4629      	mov	r1, r5
 800821c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008220:	f7ff fd2c 	bl	8007c7c <memset>
 8008224:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008228:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800822c:	4620      	mov	r0, r4
 800822e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008230:	3468      	adds	r4, #104	; 0x68
 8008232:	e7d9      	b.n	80081e8 <__sfp+0x1c>
 8008234:	2104      	movs	r1, #4
 8008236:	4638      	mov	r0, r7
 8008238:	f7ff ff62 	bl	8008100 <__sfmoreglue>
 800823c:	4604      	mov	r4, r0
 800823e:	6030      	str	r0, [r6, #0]
 8008240:	2800      	cmp	r0, #0
 8008242:	d1d5      	bne.n	80081f0 <__sfp+0x24>
 8008244:	f7ff ff78 	bl	8008138 <__sfp_lock_release>
 8008248:	230c      	movs	r3, #12
 800824a:	603b      	str	r3, [r7, #0]
 800824c:	e7ee      	b.n	800822c <__sfp+0x60>
 800824e:	bf00      	nop
 8008250:	08008f6c 	.word	0x08008f6c
 8008254:	ffff0001 	.word	0xffff0001

08008258 <_fwalk_reent>:
 8008258:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800825c:	4606      	mov	r6, r0
 800825e:	4688      	mov	r8, r1
 8008260:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008264:	2700      	movs	r7, #0
 8008266:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800826a:	f1b9 0901 	subs.w	r9, r9, #1
 800826e:	d505      	bpl.n	800827c <_fwalk_reent+0x24>
 8008270:	6824      	ldr	r4, [r4, #0]
 8008272:	2c00      	cmp	r4, #0
 8008274:	d1f7      	bne.n	8008266 <_fwalk_reent+0xe>
 8008276:	4638      	mov	r0, r7
 8008278:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800827c:	89ab      	ldrh	r3, [r5, #12]
 800827e:	2b01      	cmp	r3, #1
 8008280:	d907      	bls.n	8008292 <_fwalk_reent+0x3a>
 8008282:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008286:	3301      	adds	r3, #1
 8008288:	d003      	beq.n	8008292 <_fwalk_reent+0x3a>
 800828a:	4629      	mov	r1, r5
 800828c:	4630      	mov	r0, r6
 800828e:	47c0      	blx	r8
 8008290:	4307      	orrs	r7, r0
 8008292:	3568      	adds	r5, #104	; 0x68
 8008294:	e7e9      	b.n	800826a <_fwalk_reent+0x12>

08008296 <__retarget_lock_init_recursive>:
 8008296:	4770      	bx	lr

08008298 <__retarget_lock_acquire_recursive>:
 8008298:	4770      	bx	lr

0800829a <__retarget_lock_release_recursive>:
 800829a:	4770      	bx	lr

0800829c <__swhatbuf_r>:
 800829c:	b570      	push	{r4, r5, r6, lr}
 800829e:	460e      	mov	r6, r1
 80082a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082a4:	2900      	cmp	r1, #0
 80082a6:	b096      	sub	sp, #88	; 0x58
 80082a8:	4614      	mov	r4, r2
 80082aa:	461d      	mov	r5, r3
 80082ac:	da08      	bge.n	80082c0 <__swhatbuf_r+0x24>
 80082ae:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80082b2:	2200      	movs	r2, #0
 80082b4:	602a      	str	r2, [r5, #0]
 80082b6:	061a      	lsls	r2, r3, #24
 80082b8:	d410      	bmi.n	80082dc <__swhatbuf_r+0x40>
 80082ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80082be:	e00e      	b.n	80082de <__swhatbuf_r+0x42>
 80082c0:	466a      	mov	r2, sp
 80082c2:	f000 fc95 	bl	8008bf0 <_fstat_r>
 80082c6:	2800      	cmp	r0, #0
 80082c8:	dbf1      	blt.n	80082ae <__swhatbuf_r+0x12>
 80082ca:	9a01      	ldr	r2, [sp, #4]
 80082cc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80082d0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80082d4:	425a      	negs	r2, r3
 80082d6:	415a      	adcs	r2, r3
 80082d8:	602a      	str	r2, [r5, #0]
 80082da:	e7ee      	b.n	80082ba <__swhatbuf_r+0x1e>
 80082dc:	2340      	movs	r3, #64	; 0x40
 80082de:	2000      	movs	r0, #0
 80082e0:	6023      	str	r3, [r4, #0]
 80082e2:	b016      	add	sp, #88	; 0x58
 80082e4:	bd70      	pop	{r4, r5, r6, pc}
	...

080082e8 <__smakebuf_r>:
 80082e8:	898b      	ldrh	r3, [r1, #12]
 80082ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80082ec:	079d      	lsls	r5, r3, #30
 80082ee:	4606      	mov	r6, r0
 80082f0:	460c      	mov	r4, r1
 80082f2:	d507      	bpl.n	8008304 <__smakebuf_r+0x1c>
 80082f4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80082f8:	6023      	str	r3, [r4, #0]
 80082fa:	6123      	str	r3, [r4, #16]
 80082fc:	2301      	movs	r3, #1
 80082fe:	6163      	str	r3, [r4, #20]
 8008300:	b002      	add	sp, #8
 8008302:	bd70      	pop	{r4, r5, r6, pc}
 8008304:	ab01      	add	r3, sp, #4
 8008306:	466a      	mov	r2, sp
 8008308:	f7ff ffc8 	bl	800829c <__swhatbuf_r>
 800830c:	9900      	ldr	r1, [sp, #0]
 800830e:	4605      	mov	r5, r0
 8008310:	4630      	mov	r0, r6
 8008312:	f000 f895 	bl	8008440 <_malloc_r>
 8008316:	b948      	cbnz	r0, 800832c <__smakebuf_r+0x44>
 8008318:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800831c:	059a      	lsls	r2, r3, #22
 800831e:	d4ef      	bmi.n	8008300 <__smakebuf_r+0x18>
 8008320:	f023 0303 	bic.w	r3, r3, #3
 8008324:	f043 0302 	orr.w	r3, r3, #2
 8008328:	81a3      	strh	r3, [r4, #12]
 800832a:	e7e3      	b.n	80082f4 <__smakebuf_r+0xc>
 800832c:	4b0d      	ldr	r3, [pc, #52]	; (8008364 <__smakebuf_r+0x7c>)
 800832e:	62b3      	str	r3, [r6, #40]	; 0x28
 8008330:	89a3      	ldrh	r3, [r4, #12]
 8008332:	6020      	str	r0, [r4, #0]
 8008334:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008338:	81a3      	strh	r3, [r4, #12]
 800833a:	9b00      	ldr	r3, [sp, #0]
 800833c:	6163      	str	r3, [r4, #20]
 800833e:	9b01      	ldr	r3, [sp, #4]
 8008340:	6120      	str	r0, [r4, #16]
 8008342:	b15b      	cbz	r3, 800835c <__smakebuf_r+0x74>
 8008344:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008348:	4630      	mov	r0, r6
 800834a:	f000 fc63 	bl	8008c14 <_isatty_r>
 800834e:	b128      	cbz	r0, 800835c <__smakebuf_r+0x74>
 8008350:	89a3      	ldrh	r3, [r4, #12]
 8008352:	f023 0303 	bic.w	r3, r3, #3
 8008356:	f043 0301 	orr.w	r3, r3, #1
 800835a:	81a3      	strh	r3, [r4, #12]
 800835c:	89a0      	ldrh	r0, [r4, #12]
 800835e:	4305      	orrs	r5, r0
 8008360:	81a5      	strh	r5, [r4, #12]
 8008362:	e7cd      	b.n	8008300 <__smakebuf_r+0x18>
 8008364:	080080f5 	.word	0x080080f5

08008368 <_free_r>:
 8008368:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800836a:	2900      	cmp	r1, #0
 800836c:	d044      	beq.n	80083f8 <_free_r+0x90>
 800836e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008372:	9001      	str	r0, [sp, #4]
 8008374:	2b00      	cmp	r3, #0
 8008376:	f1a1 0404 	sub.w	r4, r1, #4
 800837a:	bfb8      	it	lt
 800837c:	18e4      	addlt	r4, r4, r3
 800837e:	f000 fc6b 	bl	8008c58 <__malloc_lock>
 8008382:	4a1e      	ldr	r2, [pc, #120]	; (80083fc <_free_r+0x94>)
 8008384:	9801      	ldr	r0, [sp, #4]
 8008386:	6813      	ldr	r3, [r2, #0]
 8008388:	b933      	cbnz	r3, 8008398 <_free_r+0x30>
 800838a:	6063      	str	r3, [r4, #4]
 800838c:	6014      	str	r4, [r2, #0]
 800838e:	b003      	add	sp, #12
 8008390:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008394:	f000 bc66 	b.w	8008c64 <__malloc_unlock>
 8008398:	42a3      	cmp	r3, r4
 800839a:	d908      	bls.n	80083ae <_free_r+0x46>
 800839c:	6825      	ldr	r5, [r4, #0]
 800839e:	1961      	adds	r1, r4, r5
 80083a0:	428b      	cmp	r3, r1
 80083a2:	bf01      	itttt	eq
 80083a4:	6819      	ldreq	r1, [r3, #0]
 80083a6:	685b      	ldreq	r3, [r3, #4]
 80083a8:	1949      	addeq	r1, r1, r5
 80083aa:	6021      	streq	r1, [r4, #0]
 80083ac:	e7ed      	b.n	800838a <_free_r+0x22>
 80083ae:	461a      	mov	r2, r3
 80083b0:	685b      	ldr	r3, [r3, #4]
 80083b2:	b10b      	cbz	r3, 80083b8 <_free_r+0x50>
 80083b4:	42a3      	cmp	r3, r4
 80083b6:	d9fa      	bls.n	80083ae <_free_r+0x46>
 80083b8:	6811      	ldr	r1, [r2, #0]
 80083ba:	1855      	adds	r5, r2, r1
 80083bc:	42a5      	cmp	r5, r4
 80083be:	d10b      	bne.n	80083d8 <_free_r+0x70>
 80083c0:	6824      	ldr	r4, [r4, #0]
 80083c2:	4421      	add	r1, r4
 80083c4:	1854      	adds	r4, r2, r1
 80083c6:	42a3      	cmp	r3, r4
 80083c8:	6011      	str	r1, [r2, #0]
 80083ca:	d1e0      	bne.n	800838e <_free_r+0x26>
 80083cc:	681c      	ldr	r4, [r3, #0]
 80083ce:	685b      	ldr	r3, [r3, #4]
 80083d0:	6053      	str	r3, [r2, #4]
 80083d2:	4421      	add	r1, r4
 80083d4:	6011      	str	r1, [r2, #0]
 80083d6:	e7da      	b.n	800838e <_free_r+0x26>
 80083d8:	d902      	bls.n	80083e0 <_free_r+0x78>
 80083da:	230c      	movs	r3, #12
 80083dc:	6003      	str	r3, [r0, #0]
 80083de:	e7d6      	b.n	800838e <_free_r+0x26>
 80083e0:	6825      	ldr	r5, [r4, #0]
 80083e2:	1961      	adds	r1, r4, r5
 80083e4:	428b      	cmp	r3, r1
 80083e6:	bf04      	itt	eq
 80083e8:	6819      	ldreq	r1, [r3, #0]
 80083ea:	685b      	ldreq	r3, [r3, #4]
 80083ec:	6063      	str	r3, [r4, #4]
 80083ee:	bf04      	itt	eq
 80083f0:	1949      	addeq	r1, r1, r5
 80083f2:	6021      	streq	r1, [r4, #0]
 80083f4:	6054      	str	r4, [r2, #4]
 80083f6:	e7ca      	b.n	800838e <_free_r+0x26>
 80083f8:	b003      	add	sp, #12
 80083fa:	bd30      	pop	{r4, r5, pc}
 80083fc:	20005058 	.word	0x20005058

08008400 <sbrk_aligned>:
 8008400:	b570      	push	{r4, r5, r6, lr}
 8008402:	4e0e      	ldr	r6, [pc, #56]	; (800843c <sbrk_aligned+0x3c>)
 8008404:	460c      	mov	r4, r1
 8008406:	6831      	ldr	r1, [r6, #0]
 8008408:	4605      	mov	r5, r0
 800840a:	b911      	cbnz	r1, 8008412 <sbrk_aligned+0x12>
 800840c:	f000 fb7a 	bl	8008b04 <_sbrk_r>
 8008410:	6030      	str	r0, [r6, #0]
 8008412:	4621      	mov	r1, r4
 8008414:	4628      	mov	r0, r5
 8008416:	f000 fb75 	bl	8008b04 <_sbrk_r>
 800841a:	1c43      	adds	r3, r0, #1
 800841c:	d00a      	beq.n	8008434 <sbrk_aligned+0x34>
 800841e:	1cc4      	adds	r4, r0, #3
 8008420:	f024 0403 	bic.w	r4, r4, #3
 8008424:	42a0      	cmp	r0, r4
 8008426:	d007      	beq.n	8008438 <sbrk_aligned+0x38>
 8008428:	1a21      	subs	r1, r4, r0
 800842a:	4628      	mov	r0, r5
 800842c:	f000 fb6a 	bl	8008b04 <_sbrk_r>
 8008430:	3001      	adds	r0, #1
 8008432:	d101      	bne.n	8008438 <sbrk_aligned+0x38>
 8008434:	f04f 34ff 	mov.w	r4, #4294967295
 8008438:	4620      	mov	r0, r4
 800843a:	bd70      	pop	{r4, r5, r6, pc}
 800843c:	2000505c 	.word	0x2000505c

08008440 <_malloc_r>:
 8008440:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008444:	1ccd      	adds	r5, r1, #3
 8008446:	f025 0503 	bic.w	r5, r5, #3
 800844a:	3508      	adds	r5, #8
 800844c:	2d0c      	cmp	r5, #12
 800844e:	bf38      	it	cc
 8008450:	250c      	movcc	r5, #12
 8008452:	2d00      	cmp	r5, #0
 8008454:	4607      	mov	r7, r0
 8008456:	db01      	blt.n	800845c <_malloc_r+0x1c>
 8008458:	42a9      	cmp	r1, r5
 800845a:	d905      	bls.n	8008468 <_malloc_r+0x28>
 800845c:	230c      	movs	r3, #12
 800845e:	603b      	str	r3, [r7, #0]
 8008460:	2600      	movs	r6, #0
 8008462:	4630      	mov	r0, r6
 8008464:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008468:	4e2e      	ldr	r6, [pc, #184]	; (8008524 <_malloc_r+0xe4>)
 800846a:	f000 fbf5 	bl	8008c58 <__malloc_lock>
 800846e:	6833      	ldr	r3, [r6, #0]
 8008470:	461c      	mov	r4, r3
 8008472:	bb34      	cbnz	r4, 80084c2 <_malloc_r+0x82>
 8008474:	4629      	mov	r1, r5
 8008476:	4638      	mov	r0, r7
 8008478:	f7ff ffc2 	bl	8008400 <sbrk_aligned>
 800847c:	1c43      	adds	r3, r0, #1
 800847e:	4604      	mov	r4, r0
 8008480:	d14d      	bne.n	800851e <_malloc_r+0xde>
 8008482:	6834      	ldr	r4, [r6, #0]
 8008484:	4626      	mov	r6, r4
 8008486:	2e00      	cmp	r6, #0
 8008488:	d140      	bne.n	800850c <_malloc_r+0xcc>
 800848a:	6823      	ldr	r3, [r4, #0]
 800848c:	4631      	mov	r1, r6
 800848e:	4638      	mov	r0, r7
 8008490:	eb04 0803 	add.w	r8, r4, r3
 8008494:	f000 fb36 	bl	8008b04 <_sbrk_r>
 8008498:	4580      	cmp	r8, r0
 800849a:	d13a      	bne.n	8008512 <_malloc_r+0xd2>
 800849c:	6821      	ldr	r1, [r4, #0]
 800849e:	3503      	adds	r5, #3
 80084a0:	1a6d      	subs	r5, r5, r1
 80084a2:	f025 0503 	bic.w	r5, r5, #3
 80084a6:	3508      	adds	r5, #8
 80084a8:	2d0c      	cmp	r5, #12
 80084aa:	bf38      	it	cc
 80084ac:	250c      	movcc	r5, #12
 80084ae:	4629      	mov	r1, r5
 80084b0:	4638      	mov	r0, r7
 80084b2:	f7ff ffa5 	bl	8008400 <sbrk_aligned>
 80084b6:	3001      	adds	r0, #1
 80084b8:	d02b      	beq.n	8008512 <_malloc_r+0xd2>
 80084ba:	6823      	ldr	r3, [r4, #0]
 80084bc:	442b      	add	r3, r5
 80084be:	6023      	str	r3, [r4, #0]
 80084c0:	e00e      	b.n	80084e0 <_malloc_r+0xa0>
 80084c2:	6822      	ldr	r2, [r4, #0]
 80084c4:	1b52      	subs	r2, r2, r5
 80084c6:	d41e      	bmi.n	8008506 <_malloc_r+0xc6>
 80084c8:	2a0b      	cmp	r2, #11
 80084ca:	d916      	bls.n	80084fa <_malloc_r+0xba>
 80084cc:	1961      	adds	r1, r4, r5
 80084ce:	42a3      	cmp	r3, r4
 80084d0:	6025      	str	r5, [r4, #0]
 80084d2:	bf18      	it	ne
 80084d4:	6059      	strne	r1, [r3, #4]
 80084d6:	6863      	ldr	r3, [r4, #4]
 80084d8:	bf08      	it	eq
 80084da:	6031      	streq	r1, [r6, #0]
 80084dc:	5162      	str	r2, [r4, r5]
 80084de:	604b      	str	r3, [r1, #4]
 80084e0:	4638      	mov	r0, r7
 80084e2:	f104 060b 	add.w	r6, r4, #11
 80084e6:	f000 fbbd 	bl	8008c64 <__malloc_unlock>
 80084ea:	f026 0607 	bic.w	r6, r6, #7
 80084ee:	1d23      	adds	r3, r4, #4
 80084f0:	1af2      	subs	r2, r6, r3
 80084f2:	d0b6      	beq.n	8008462 <_malloc_r+0x22>
 80084f4:	1b9b      	subs	r3, r3, r6
 80084f6:	50a3      	str	r3, [r4, r2]
 80084f8:	e7b3      	b.n	8008462 <_malloc_r+0x22>
 80084fa:	6862      	ldr	r2, [r4, #4]
 80084fc:	42a3      	cmp	r3, r4
 80084fe:	bf0c      	ite	eq
 8008500:	6032      	streq	r2, [r6, #0]
 8008502:	605a      	strne	r2, [r3, #4]
 8008504:	e7ec      	b.n	80084e0 <_malloc_r+0xa0>
 8008506:	4623      	mov	r3, r4
 8008508:	6864      	ldr	r4, [r4, #4]
 800850a:	e7b2      	b.n	8008472 <_malloc_r+0x32>
 800850c:	4634      	mov	r4, r6
 800850e:	6876      	ldr	r6, [r6, #4]
 8008510:	e7b9      	b.n	8008486 <_malloc_r+0x46>
 8008512:	230c      	movs	r3, #12
 8008514:	603b      	str	r3, [r7, #0]
 8008516:	4638      	mov	r0, r7
 8008518:	f000 fba4 	bl	8008c64 <__malloc_unlock>
 800851c:	e7a1      	b.n	8008462 <_malloc_r+0x22>
 800851e:	6025      	str	r5, [r4, #0]
 8008520:	e7de      	b.n	80084e0 <_malloc_r+0xa0>
 8008522:	bf00      	nop
 8008524:	20005058 	.word	0x20005058

08008528 <__sfputc_r>:
 8008528:	6893      	ldr	r3, [r2, #8]
 800852a:	3b01      	subs	r3, #1
 800852c:	2b00      	cmp	r3, #0
 800852e:	b410      	push	{r4}
 8008530:	6093      	str	r3, [r2, #8]
 8008532:	da08      	bge.n	8008546 <__sfputc_r+0x1e>
 8008534:	6994      	ldr	r4, [r2, #24]
 8008536:	42a3      	cmp	r3, r4
 8008538:	db01      	blt.n	800853e <__sfputc_r+0x16>
 800853a:	290a      	cmp	r1, #10
 800853c:	d103      	bne.n	8008546 <__sfputc_r+0x1e>
 800853e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008542:	f7ff bc31 	b.w	8007da8 <__swbuf_r>
 8008546:	6813      	ldr	r3, [r2, #0]
 8008548:	1c58      	adds	r0, r3, #1
 800854a:	6010      	str	r0, [r2, #0]
 800854c:	7019      	strb	r1, [r3, #0]
 800854e:	4608      	mov	r0, r1
 8008550:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008554:	4770      	bx	lr

08008556 <__sfputs_r>:
 8008556:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008558:	4606      	mov	r6, r0
 800855a:	460f      	mov	r7, r1
 800855c:	4614      	mov	r4, r2
 800855e:	18d5      	adds	r5, r2, r3
 8008560:	42ac      	cmp	r4, r5
 8008562:	d101      	bne.n	8008568 <__sfputs_r+0x12>
 8008564:	2000      	movs	r0, #0
 8008566:	e007      	b.n	8008578 <__sfputs_r+0x22>
 8008568:	f814 1b01 	ldrb.w	r1, [r4], #1
 800856c:	463a      	mov	r2, r7
 800856e:	4630      	mov	r0, r6
 8008570:	f7ff ffda 	bl	8008528 <__sfputc_r>
 8008574:	1c43      	adds	r3, r0, #1
 8008576:	d1f3      	bne.n	8008560 <__sfputs_r+0xa>
 8008578:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800857c <_vfiprintf_r>:
 800857c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008580:	460d      	mov	r5, r1
 8008582:	b09d      	sub	sp, #116	; 0x74
 8008584:	4614      	mov	r4, r2
 8008586:	4698      	mov	r8, r3
 8008588:	4606      	mov	r6, r0
 800858a:	b118      	cbz	r0, 8008594 <_vfiprintf_r+0x18>
 800858c:	6983      	ldr	r3, [r0, #24]
 800858e:	b90b      	cbnz	r3, 8008594 <_vfiprintf_r+0x18>
 8008590:	f7ff fde4 	bl	800815c <__sinit>
 8008594:	4b89      	ldr	r3, [pc, #548]	; (80087bc <_vfiprintf_r+0x240>)
 8008596:	429d      	cmp	r5, r3
 8008598:	d11b      	bne.n	80085d2 <_vfiprintf_r+0x56>
 800859a:	6875      	ldr	r5, [r6, #4]
 800859c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800859e:	07d9      	lsls	r1, r3, #31
 80085a0:	d405      	bmi.n	80085ae <_vfiprintf_r+0x32>
 80085a2:	89ab      	ldrh	r3, [r5, #12]
 80085a4:	059a      	lsls	r2, r3, #22
 80085a6:	d402      	bmi.n	80085ae <_vfiprintf_r+0x32>
 80085a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80085aa:	f7ff fe75 	bl	8008298 <__retarget_lock_acquire_recursive>
 80085ae:	89ab      	ldrh	r3, [r5, #12]
 80085b0:	071b      	lsls	r3, r3, #28
 80085b2:	d501      	bpl.n	80085b8 <_vfiprintf_r+0x3c>
 80085b4:	692b      	ldr	r3, [r5, #16]
 80085b6:	b9eb      	cbnz	r3, 80085f4 <_vfiprintf_r+0x78>
 80085b8:	4629      	mov	r1, r5
 80085ba:	4630      	mov	r0, r6
 80085bc:	f7ff fc46 	bl	8007e4c <__swsetup_r>
 80085c0:	b1c0      	cbz	r0, 80085f4 <_vfiprintf_r+0x78>
 80085c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80085c4:	07dc      	lsls	r4, r3, #31
 80085c6:	d50e      	bpl.n	80085e6 <_vfiprintf_r+0x6a>
 80085c8:	f04f 30ff 	mov.w	r0, #4294967295
 80085cc:	b01d      	add	sp, #116	; 0x74
 80085ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085d2:	4b7b      	ldr	r3, [pc, #492]	; (80087c0 <_vfiprintf_r+0x244>)
 80085d4:	429d      	cmp	r5, r3
 80085d6:	d101      	bne.n	80085dc <_vfiprintf_r+0x60>
 80085d8:	68b5      	ldr	r5, [r6, #8]
 80085da:	e7df      	b.n	800859c <_vfiprintf_r+0x20>
 80085dc:	4b79      	ldr	r3, [pc, #484]	; (80087c4 <_vfiprintf_r+0x248>)
 80085de:	429d      	cmp	r5, r3
 80085e0:	bf08      	it	eq
 80085e2:	68f5      	ldreq	r5, [r6, #12]
 80085e4:	e7da      	b.n	800859c <_vfiprintf_r+0x20>
 80085e6:	89ab      	ldrh	r3, [r5, #12]
 80085e8:	0598      	lsls	r0, r3, #22
 80085ea:	d4ed      	bmi.n	80085c8 <_vfiprintf_r+0x4c>
 80085ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80085ee:	f7ff fe54 	bl	800829a <__retarget_lock_release_recursive>
 80085f2:	e7e9      	b.n	80085c8 <_vfiprintf_r+0x4c>
 80085f4:	2300      	movs	r3, #0
 80085f6:	9309      	str	r3, [sp, #36]	; 0x24
 80085f8:	2320      	movs	r3, #32
 80085fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80085fe:	f8cd 800c 	str.w	r8, [sp, #12]
 8008602:	2330      	movs	r3, #48	; 0x30
 8008604:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80087c8 <_vfiprintf_r+0x24c>
 8008608:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800860c:	f04f 0901 	mov.w	r9, #1
 8008610:	4623      	mov	r3, r4
 8008612:	469a      	mov	sl, r3
 8008614:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008618:	b10a      	cbz	r2, 800861e <_vfiprintf_r+0xa2>
 800861a:	2a25      	cmp	r2, #37	; 0x25
 800861c:	d1f9      	bne.n	8008612 <_vfiprintf_r+0x96>
 800861e:	ebba 0b04 	subs.w	fp, sl, r4
 8008622:	d00b      	beq.n	800863c <_vfiprintf_r+0xc0>
 8008624:	465b      	mov	r3, fp
 8008626:	4622      	mov	r2, r4
 8008628:	4629      	mov	r1, r5
 800862a:	4630      	mov	r0, r6
 800862c:	f7ff ff93 	bl	8008556 <__sfputs_r>
 8008630:	3001      	adds	r0, #1
 8008632:	f000 80aa 	beq.w	800878a <_vfiprintf_r+0x20e>
 8008636:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008638:	445a      	add	r2, fp
 800863a:	9209      	str	r2, [sp, #36]	; 0x24
 800863c:	f89a 3000 	ldrb.w	r3, [sl]
 8008640:	2b00      	cmp	r3, #0
 8008642:	f000 80a2 	beq.w	800878a <_vfiprintf_r+0x20e>
 8008646:	2300      	movs	r3, #0
 8008648:	f04f 32ff 	mov.w	r2, #4294967295
 800864c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008650:	f10a 0a01 	add.w	sl, sl, #1
 8008654:	9304      	str	r3, [sp, #16]
 8008656:	9307      	str	r3, [sp, #28]
 8008658:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800865c:	931a      	str	r3, [sp, #104]	; 0x68
 800865e:	4654      	mov	r4, sl
 8008660:	2205      	movs	r2, #5
 8008662:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008666:	4858      	ldr	r0, [pc, #352]	; (80087c8 <_vfiprintf_r+0x24c>)
 8008668:	f7f7 fdea 	bl	8000240 <memchr>
 800866c:	9a04      	ldr	r2, [sp, #16]
 800866e:	b9d8      	cbnz	r0, 80086a8 <_vfiprintf_r+0x12c>
 8008670:	06d1      	lsls	r1, r2, #27
 8008672:	bf44      	itt	mi
 8008674:	2320      	movmi	r3, #32
 8008676:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800867a:	0713      	lsls	r3, r2, #28
 800867c:	bf44      	itt	mi
 800867e:	232b      	movmi	r3, #43	; 0x2b
 8008680:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008684:	f89a 3000 	ldrb.w	r3, [sl]
 8008688:	2b2a      	cmp	r3, #42	; 0x2a
 800868a:	d015      	beq.n	80086b8 <_vfiprintf_r+0x13c>
 800868c:	9a07      	ldr	r2, [sp, #28]
 800868e:	4654      	mov	r4, sl
 8008690:	2000      	movs	r0, #0
 8008692:	f04f 0c0a 	mov.w	ip, #10
 8008696:	4621      	mov	r1, r4
 8008698:	f811 3b01 	ldrb.w	r3, [r1], #1
 800869c:	3b30      	subs	r3, #48	; 0x30
 800869e:	2b09      	cmp	r3, #9
 80086a0:	d94e      	bls.n	8008740 <_vfiprintf_r+0x1c4>
 80086a2:	b1b0      	cbz	r0, 80086d2 <_vfiprintf_r+0x156>
 80086a4:	9207      	str	r2, [sp, #28]
 80086a6:	e014      	b.n	80086d2 <_vfiprintf_r+0x156>
 80086a8:	eba0 0308 	sub.w	r3, r0, r8
 80086ac:	fa09 f303 	lsl.w	r3, r9, r3
 80086b0:	4313      	orrs	r3, r2
 80086b2:	9304      	str	r3, [sp, #16]
 80086b4:	46a2      	mov	sl, r4
 80086b6:	e7d2      	b.n	800865e <_vfiprintf_r+0xe2>
 80086b8:	9b03      	ldr	r3, [sp, #12]
 80086ba:	1d19      	adds	r1, r3, #4
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	9103      	str	r1, [sp, #12]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	bfbb      	ittet	lt
 80086c4:	425b      	neglt	r3, r3
 80086c6:	f042 0202 	orrlt.w	r2, r2, #2
 80086ca:	9307      	strge	r3, [sp, #28]
 80086cc:	9307      	strlt	r3, [sp, #28]
 80086ce:	bfb8      	it	lt
 80086d0:	9204      	strlt	r2, [sp, #16]
 80086d2:	7823      	ldrb	r3, [r4, #0]
 80086d4:	2b2e      	cmp	r3, #46	; 0x2e
 80086d6:	d10c      	bne.n	80086f2 <_vfiprintf_r+0x176>
 80086d8:	7863      	ldrb	r3, [r4, #1]
 80086da:	2b2a      	cmp	r3, #42	; 0x2a
 80086dc:	d135      	bne.n	800874a <_vfiprintf_r+0x1ce>
 80086de:	9b03      	ldr	r3, [sp, #12]
 80086e0:	1d1a      	adds	r2, r3, #4
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	9203      	str	r2, [sp, #12]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	bfb8      	it	lt
 80086ea:	f04f 33ff 	movlt.w	r3, #4294967295
 80086ee:	3402      	adds	r4, #2
 80086f0:	9305      	str	r3, [sp, #20]
 80086f2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80087d8 <_vfiprintf_r+0x25c>
 80086f6:	7821      	ldrb	r1, [r4, #0]
 80086f8:	2203      	movs	r2, #3
 80086fa:	4650      	mov	r0, sl
 80086fc:	f7f7 fda0 	bl	8000240 <memchr>
 8008700:	b140      	cbz	r0, 8008714 <_vfiprintf_r+0x198>
 8008702:	2340      	movs	r3, #64	; 0x40
 8008704:	eba0 000a 	sub.w	r0, r0, sl
 8008708:	fa03 f000 	lsl.w	r0, r3, r0
 800870c:	9b04      	ldr	r3, [sp, #16]
 800870e:	4303      	orrs	r3, r0
 8008710:	3401      	adds	r4, #1
 8008712:	9304      	str	r3, [sp, #16]
 8008714:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008718:	482c      	ldr	r0, [pc, #176]	; (80087cc <_vfiprintf_r+0x250>)
 800871a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800871e:	2206      	movs	r2, #6
 8008720:	f7f7 fd8e 	bl	8000240 <memchr>
 8008724:	2800      	cmp	r0, #0
 8008726:	d03f      	beq.n	80087a8 <_vfiprintf_r+0x22c>
 8008728:	4b29      	ldr	r3, [pc, #164]	; (80087d0 <_vfiprintf_r+0x254>)
 800872a:	bb1b      	cbnz	r3, 8008774 <_vfiprintf_r+0x1f8>
 800872c:	9b03      	ldr	r3, [sp, #12]
 800872e:	3307      	adds	r3, #7
 8008730:	f023 0307 	bic.w	r3, r3, #7
 8008734:	3308      	adds	r3, #8
 8008736:	9303      	str	r3, [sp, #12]
 8008738:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800873a:	443b      	add	r3, r7
 800873c:	9309      	str	r3, [sp, #36]	; 0x24
 800873e:	e767      	b.n	8008610 <_vfiprintf_r+0x94>
 8008740:	fb0c 3202 	mla	r2, ip, r2, r3
 8008744:	460c      	mov	r4, r1
 8008746:	2001      	movs	r0, #1
 8008748:	e7a5      	b.n	8008696 <_vfiprintf_r+0x11a>
 800874a:	2300      	movs	r3, #0
 800874c:	3401      	adds	r4, #1
 800874e:	9305      	str	r3, [sp, #20]
 8008750:	4619      	mov	r1, r3
 8008752:	f04f 0c0a 	mov.w	ip, #10
 8008756:	4620      	mov	r0, r4
 8008758:	f810 2b01 	ldrb.w	r2, [r0], #1
 800875c:	3a30      	subs	r2, #48	; 0x30
 800875e:	2a09      	cmp	r2, #9
 8008760:	d903      	bls.n	800876a <_vfiprintf_r+0x1ee>
 8008762:	2b00      	cmp	r3, #0
 8008764:	d0c5      	beq.n	80086f2 <_vfiprintf_r+0x176>
 8008766:	9105      	str	r1, [sp, #20]
 8008768:	e7c3      	b.n	80086f2 <_vfiprintf_r+0x176>
 800876a:	fb0c 2101 	mla	r1, ip, r1, r2
 800876e:	4604      	mov	r4, r0
 8008770:	2301      	movs	r3, #1
 8008772:	e7f0      	b.n	8008756 <_vfiprintf_r+0x1da>
 8008774:	ab03      	add	r3, sp, #12
 8008776:	9300      	str	r3, [sp, #0]
 8008778:	462a      	mov	r2, r5
 800877a:	4b16      	ldr	r3, [pc, #88]	; (80087d4 <_vfiprintf_r+0x258>)
 800877c:	a904      	add	r1, sp, #16
 800877e:	4630      	mov	r0, r6
 8008780:	f3af 8000 	nop.w
 8008784:	4607      	mov	r7, r0
 8008786:	1c78      	adds	r0, r7, #1
 8008788:	d1d6      	bne.n	8008738 <_vfiprintf_r+0x1bc>
 800878a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800878c:	07d9      	lsls	r1, r3, #31
 800878e:	d405      	bmi.n	800879c <_vfiprintf_r+0x220>
 8008790:	89ab      	ldrh	r3, [r5, #12]
 8008792:	059a      	lsls	r2, r3, #22
 8008794:	d402      	bmi.n	800879c <_vfiprintf_r+0x220>
 8008796:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008798:	f7ff fd7f 	bl	800829a <__retarget_lock_release_recursive>
 800879c:	89ab      	ldrh	r3, [r5, #12]
 800879e:	065b      	lsls	r3, r3, #25
 80087a0:	f53f af12 	bmi.w	80085c8 <_vfiprintf_r+0x4c>
 80087a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80087a6:	e711      	b.n	80085cc <_vfiprintf_r+0x50>
 80087a8:	ab03      	add	r3, sp, #12
 80087aa:	9300      	str	r3, [sp, #0]
 80087ac:	462a      	mov	r2, r5
 80087ae:	4b09      	ldr	r3, [pc, #36]	; (80087d4 <_vfiprintf_r+0x258>)
 80087b0:	a904      	add	r1, sp, #16
 80087b2:	4630      	mov	r0, r6
 80087b4:	f000 f880 	bl	80088b8 <_printf_i>
 80087b8:	e7e4      	b.n	8008784 <_vfiprintf_r+0x208>
 80087ba:	bf00      	nop
 80087bc:	08008f90 	.word	0x08008f90
 80087c0:	08008fb0 	.word	0x08008fb0
 80087c4:	08008f70 	.word	0x08008f70
 80087c8:	08008fd0 	.word	0x08008fd0
 80087cc:	08008fda 	.word	0x08008fda
 80087d0:	00000000 	.word	0x00000000
 80087d4:	08008557 	.word	0x08008557
 80087d8:	08008fd6 	.word	0x08008fd6

080087dc <_printf_common>:
 80087dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087e0:	4616      	mov	r6, r2
 80087e2:	4699      	mov	r9, r3
 80087e4:	688a      	ldr	r2, [r1, #8]
 80087e6:	690b      	ldr	r3, [r1, #16]
 80087e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80087ec:	4293      	cmp	r3, r2
 80087ee:	bfb8      	it	lt
 80087f0:	4613      	movlt	r3, r2
 80087f2:	6033      	str	r3, [r6, #0]
 80087f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80087f8:	4607      	mov	r7, r0
 80087fa:	460c      	mov	r4, r1
 80087fc:	b10a      	cbz	r2, 8008802 <_printf_common+0x26>
 80087fe:	3301      	adds	r3, #1
 8008800:	6033      	str	r3, [r6, #0]
 8008802:	6823      	ldr	r3, [r4, #0]
 8008804:	0699      	lsls	r1, r3, #26
 8008806:	bf42      	ittt	mi
 8008808:	6833      	ldrmi	r3, [r6, #0]
 800880a:	3302      	addmi	r3, #2
 800880c:	6033      	strmi	r3, [r6, #0]
 800880e:	6825      	ldr	r5, [r4, #0]
 8008810:	f015 0506 	ands.w	r5, r5, #6
 8008814:	d106      	bne.n	8008824 <_printf_common+0x48>
 8008816:	f104 0a19 	add.w	sl, r4, #25
 800881a:	68e3      	ldr	r3, [r4, #12]
 800881c:	6832      	ldr	r2, [r6, #0]
 800881e:	1a9b      	subs	r3, r3, r2
 8008820:	42ab      	cmp	r3, r5
 8008822:	dc26      	bgt.n	8008872 <_printf_common+0x96>
 8008824:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008828:	1e13      	subs	r3, r2, #0
 800882a:	6822      	ldr	r2, [r4, #0]
 800882c:	bf18      	it	ne
 800882e:	2301      	movne	r3, #1
 8008830:	0692      	lsls	r2, r2, #26
 8008832:	d42b      	bmi.n	800888c <_printf_common+0xb0>
 8008834:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008838:	4649      	mov	r1, r9
 800883a:	4638      	mov	r0, r7
 800883c:	47c0      	blx	r8
 800883e:	3001      	adds	r0, #1
 8008840:	d01e      	beq.n	8008880 <_printf_common+0xa4>
 8008842:	6823      	ldr	r3, [r4, #0]
 8008844:	68e5      	ldr	r5, [r4, #12]
 8008846:	6832      	ldr	r2, [r6, #0]
 8008848:	f003 0306 	and.w	r3, r3, #6
 800884c:	2b04      	cmp	r3, #4
 800884e:	bf08      	it	eq
 8008850:	1aad      	subeq	r5, r5, r2
 8008852:	68a3      	ldr	r3, [r4, #8]
 8008854:	6922      	ldr	r2, [r4, #16]
 8008856:	bf0c      	ite	eq
 8008858:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800885c:	2500      	movne	r5, #0
 800885e:	4293      	cmp	r3, r2
 8008860:	bfc4      	itt	gt
 8008862:	1a9b      	subgt	r3, r3, r2
 8008864:	18ed      	addgt	r5, r5, r3
 8008866:	2600      	movs	r6, #0
 8008868:	341a      	adds	r4, #26
 800886a:	42b5      	cmp	r5, r6
 800886c:	d11a      	bne.n	80088a4 <_printf_common+0xc8>
 800886e:	2000      	movs	r0, #0
 8008870:	e008      	b.n	8008884 <_printf_common+0xa8>
 8008872:	2301      	movs	r3, #1
 8008874:	4652      	mov	r2, sl
 8008876:	4649      	mov	r1, r9
 8008878:	4638      	mov	r0, r7
 800887a:	47c0      	blx	r8
 800887c:	3001      	adds	r0, #1
 800887e:	d103      	bne.n	8008888 <_printf_common+0xac>
 8008880:	f04f 30ff 	mov.w	r0, #4294967295
 8008884:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008888:	3501      	adds	r5, #1
 800888a:	e7c6      	b.n	800881a <_printf_common+0x3e>
 800888c:	18e1      	adds	r1, r4, r3
 800888e:	1c5a      	adds	r2, r3, #1
 8008890:	2030      	movs	r0, #48	; 0x30
 8008892:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008896:	4422      	add	r2, r4
 8008898:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800889c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80088a0:	3302      	adds	r3, #2
 80088a2:	e7c7      	b.n	8008834 <_printf_common+0x58>
 80088a4:	2301      	movs	r3, #1
 80088a6:	4622      	mov	r2, r4
 80088a8:	4649      	mov	r1, r9
 80088aa:	4638      	mov	r0, r7
 80088ac:	47c0      	blx	r8
 80088ae:	3001      	adds	r0, #1
 80088b0:	d0e6      	beq.n	8008880 <_printf_common+0xa4>
 80088b2:	3601      	adds	r6, #1
 80088b4:	e7d9      	b.n	800886a <_printf_common+0x8e>
	...

080088b8 <_printf_i>:
 80088b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80088bc:	7e0f      	ldrb	r7, [r1, #24]
 80088be:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80088c0:	2f78      	cmp	r7, #120	; 0x78
 80088c2:	4691      	mov	r9, r2
 80088c4:	4680      	mov	r8, r0
 80088c6:	460c      	mov	r4, r1
 80088c8:	469a      	mov	sl, r3
 80088ca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80088ce:	d807      	bhi.n	80088e0 <_printf_i+0x28>
 80088d0:	2f62      	cmp	r7, #98	; 0x62
 80088d2:	d80a      	bhi.n	80088ea <_printf_i+0x32>
 80088d4:	2f00      	cmp	r7, #0
 80088d6:	f000 80d8 	beq.w	8008a8a <_printf_i+0x1d2>
 80088da:	2f58      	cmp	r7, #88	; 0x58
 80088dc:	f000 80a3 	beq.w	8008a26 <_printf_i+0x16e>
 80088e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80088e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80088e8:	e03a      	b.n	8008960 <_printf_i+0xa8>
 80088ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80088ee:	2b15      	cmp	r3, #21
 80088f0:	d8f6      	bhi.n	80088e0 <_printf_i+0x28>
 80088f2:	a101      	add	r1, pc, #4	; (adr r1, 80088f8 <_printf_i+0x40>)
 80088f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80088f8:	08008951 	.word	0x08008951
 80088fc:	08008965 	.word	0x08008965
 8008900:	080088e1 	.word	0x080088e1
 8008904:	080088e1 	.word	0x080088e1
 8008908:	080088e1 	.word	0x080088e1
 800890c:	080088e1 	.word	0x080088e1
 8008910:	08008965 	.word	0x08008965
 8008914:	080088e1 	.word	0x080088e1
 8008918:	080088e1 	.word	0x080088e1
 800891c:	080088e1 	.word	0x080088e1
 8008920:	080088e1 	.word	0x080088e1
 8008924:	08008a71 	.word	0x08008a71
 8008928:	08008995 	.word	0x08008995
 800892c:	08008a53 	.word	0x08008a53
 8008930:	080088e1 	.word	0x080088e1
 8008934:	080088e1 	.word	0x080088e1
 8008938:	08008a93 	.word	0x08008a93
 800893c:	080088e1 	.word	0x080088e1
 8008940:	08008995 	.word	0x08008995
 8008944:	080088e1 	.word	0x080088e1
 8008948:	080088e1 	.word	0x080088e1
 800894c:	08008a5b 	.word	0x08008a5b
 8008950:	682b      	ldr	r3, [r5, #0]
 8008952:	1d1a      	adds	r2, r3, #4
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	602a      	str	r2, [r5, #0]
 8008958:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800895c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008960:	2301      	movs	r3, #1
 8008962:	e0a3      	b.n	8008aac <_printf_i+0x1f4>
 8008964:	6820      	ldr	r0, [r4, #0]
 8008966:	6829      	ldr	r1, [r5, #0]
 8008968:	0606      	lsls	r6, r0, #24
 800896a:	f101 0304 	add.w	r3, r1, #4
 800896e:	d50a      	bpl.n	8008986 <_printf_i+0xce>
 8008970:	680e      	ldr	r6, [r1, #0]
 8008972:	602b      	str	r3, [r5, #0]
 8008974:	2e00      	cmp	r6, #0
 8008976:	da03      	bge.n	8008980 <_printf_i+0xc8>
 8008978:	232d      	movs	r3, #45	; 0x2d
 800897a:	4276      	negs	r6, r6
 800897c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008980:	485e      	ldr	r0, [pc, #376]	; (8008afc <_printf_i+0x244>)
 8008982:	230a      	movs	r3, #10
 8008984:	e019      	b.n	80089ba <_printf_i+0x102>
 8008986:	680e      	ldr	r6, [r1, #0]
 8008988:	602b      	str	r3, [r5, #0]
 800898a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800898e:	bf18      	it	ne
 8008990:	b236      	sxthne	r6, r6
 8008992:	e7ef      	b.n	8008974 <_printf_i+0xbc>
 8008994:	682b      	ldr	r3, [r5, #0]
 8008996:	6820      	ldr	r0, [r4, #0]
 8008998:	1d19      	adds	r1, r3, #4
 800899a:	6029      	str	r1, [r5, #0]
 800899c:	0601      	lsls	r1, r0, #24
 800899e:	d501      	bpl.n	80089a4 <_printf_i+0xec>
 80089a0:	681e      	ldr	r6, [r3, #0]
 80089a2:	e002      	b.n	80089aa <_printf_i+0xf2>
 80089a4:	0646      	lsls	r6, r0, #25
 80089a6:	d5fb      	bpl.n	80089a0 <_printf_i+0xe8>
 80089a8:	881e      	ldrh	r6, [r3, #0]
 80089aa:	4854      	ldr	r0, [pc, #336]	; (8008afc <_printf_i+0x244>)
 80089ac:	2f6f      	cmp	r7, #111	; 0x6f
 80089ae:	bf0c      	ite	eq
 80089b0:	2308      	moveq	r3, #8
 80089b2:	230a      	movne	r3, #10
 80089b4:	2100      	movs	r1, #0
 80089b6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80089ba:	6865      	ldr	r5, [r4, #4]
 80089bc:	60a5      	str	r5, [r4, #8]
 80089be:	2d00      	cmp	r5, #0
 80089c0:	bfa2      	ittt	ge
 80089c2:	6821      	ldrge	r1, [r4, #0]
 80089c4:	f021 0104 	bicge.w	r1, r1, #4
 80089c8:	6021      	strge	r1, [r4, #0]
 80089ca:	b90e      	cbnz	r6, 80089d0 <_printf_i+0x118>
 80089cc:	2d00      	cmp	r5, #0
 80089ce:	d04d      	beq.n	8008a6c <_printf_i+0x1b4>
 80089d0:	4615      	mov	r5, r2
 80089d2:	fbb6 f1f3 	udiv	r1, r6, r3
 80089d6:	fb03 6711 	mls	r7, r3, r1, r6
 80089da:	5dc7      	ldrb	r7, [r0, r7]
 80089dc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80089e0:	4637      	mov	r7, r6
 80089e2:	42bb      	cmp	r3, r7
 80089e4:	460e      	mov	r6, r1
 80089e6:	d9f4      	bls.n	80089d2 <_printf_i+0x11a>
 80089e8:	2b08      	cmp	r3, #8
 80089ea:	d10b      	bne.n	8008a04 <_printf_i+0x14c>
 80089ec:	6823      	ldr	r3, [r4, #0]
 80089ee:	07de      	lsls	r6, r3, #31
 80089f0:	d508      	bpl.n	8008a04 <_printf_i+0x14c>
 80089f2:	6923      	ldr	r3, [r4, #16]
 80089f4:	6861      	ldr	r1, [r4, #4]
 80089f6:	4299      	cmp	r1, r3
 80089f8:	bfde      	ittt	le
 80089fa:	2330      	movle	r3, #48	; 0x30
 80089fc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008a00:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008a04:	1b52      	subs	r2, r2, r5
 8008a06:	6122      	str	r2, [r4, #16]
 8008a08:	f8cd a000 	str.w	sl, [sp]
 8008a0c:	464b      	mov	r3, r9
 8008a0e:	aa03      	add	r2, sp, #12
 8008a10:	4621      	mov	r1, r4
 8008a12:	4640      	mov	r0, r8
 8008a14:	f7ff fee2 	bl	80087dc <_printf_common>
 8008a18:	3001      	adds	r0, #1
 8008a1a:	d14c      	bne.n	8008ab6 <_printf_i+0x1fe>
 8008a1c:	f04f 30ff 	mov.w	r0, #4294967295
 8008a20:	b004      	add	sp, #16
 8008a22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a26:	4835      	ldr	r0, [pc, #212]	; (8008afc <_printf_i+0x244>)
 8008a28:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008a2c:	6829      	ldr	r1, [r5, #0]
 8008a2e:	6823      	ldr	r3, [r4, #0]
 8008a30:	f851 6b04 	ldr.w	r6, [r1], #4
 8008a34:	6029      	str	r1, [r5, #0]
 8008a36:	061d      	lsls	r5, r3, #24
 8008a38:	d514      	bpl.n	8008a64 <_printf_i+0x1ac>
 8008a3a:	07df      	lsls	r7, r3, #31
 8008a3c:	bf44      	itt	mi
 8008a3e:	f043 0320 	orrmi.w	r3, r3, #32
 8008a42:	6023      	strmi	r3, [r4, #0]
 8008a44:	b91e      	cbnz	r6, 8008a4e <_printf_i+0x196>
 8008a46:	6823      	ldr	r3, [r4, #0]
 8008a48:	f023 0320 	bic.w	r3, r3, #32
 8008a4c:	6023      	str	r3, [r4, #0]
 8008a4e:	2310      	movs	r3, #16
 8008a50:	e7b0      	b.n	80089b4 <_printf_i+0xfc>
 8008a52:	6823      	ldr	r3, [r4, #0]
 8008a54:	f043 0320 	orr.w	r3, r3, #32
 8008a58:	6023      	str	r3, [r4, #0]
 8008a5a:	2378      	movs	r3, #120	; 0x78
 8008a5c:	4828      	ldr	r0, [pc, #160]	; (8008b00 <_printf_i+0x248>)
 8008a5e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008a62:	e7e3      	b.n	8008a2c <_printf_i+0x174>
 8008a64:	0659      	lsls	r1, r3, #25
 8008a66:	bf48      	it	mi
 8008a68:	b2b6      	uxthmi	r6, r6
 8008a6a:	e7e6      	b.n	8008a3a <_printf_i+0x182>
 8008a6c:	4615      	mov	r5, r2
 8008a6e:	e7bb      	b.n	80089e8 <_printf_i+0x130>
 8008a70:	682b      	ldr	r3, [r5, #0]
 8008a72:	6826      	ldr	r6, [r4, #0]
 8008a74:	6961      	ldr	r1, [r4, #20]
 8008a76:	1d18      	adds	r0, r3, #4
 8008a78:	6028      	str	r0, [r5, #0]
 8008a7a:	0635      	lsls	r5, r6, #24
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	d501      	bpl.n	8008a84 <_printf_i+0x1cc>
 8008a80:	6019      	str	r1, [r3, #0]
 8008a82:	e002      	b.n	8008a8a <_printf_i+0x1d2>
 8008a84:	0670      	lsls	r0, r6, #25
 8008a86:	d5fb      	bpl.n	8008a80 <_printf_i+0x1c8>
 8008a88:	8019      	strh	r1, [r3, #0]
 8008a8a:	2300      	movs	r3, #0
 8008a8c:	6123      	str	r3, [r4, #16]
 8008a8e:	4615      	mov	r5, r2
 8008a90:	e7ba      	b.n	8008a08 <_printf_i+0x150>
 8008a92:	682b      	ldr	r3, [r5, #0]
 8008a94:	1d1a      	adds	r2, r3, #4
 8008a96:	602a      	str	r2, [r5, #0]
 8008a98:	681d      	ldr	r5, [r3, #0]
 8008a9a:	6862      	ldr	r2, [r4, #4]
 8008a9c:	2100      	movs	r1, #0
 8008a9e:	4628      	mov	r0, r5
 8008aa0:	f7f7 fbce 	bl	8000240 <memchr>
 8008aa4:	b108      	cbz	r0, 8008aaa <_printf_i+0x1f2>
 8008aa6:	1b40      	subs	r0, r0, r5
 8008aa8:	6060      	str	r0, [r4, #4]
 8008aaa:	6863      	ldr	r3, [r4, #4]
 8008aac:	6123      	str	r3, [r4, #16]
 8008aae:	2300      	movs	r3, #0
 8008ab0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008ab4:	e7a8      	b.n	8008a08 <_printf_i+0x150>
 8008ab6:	6923      	ldr	r3, [r4, #16]
 8008ab8:	462a      	mov	r2, r5
 8008aba:	4649      	mov	r1, r9
 8008abc:	4640      	mov	r0, r8
 8008abe:	47d0      	blx	sl
 8008ac0:	3001      	adds	r0, #1
 8008ac2:	d0ab      	beq.n	8008a1c <_printf_i+0x164>
 8008ac4:	6823      	ldr	r3, [r4, #0]
 8008ac6:	079b      	lsls	r3, r3, #30
 8008ac8:	d413      	bmi.n	8008af2 <_printf_i+0x23a>
 8008aca:	68e0      	ldr	r0, [r4, #12]
 8008acc:	9b03      	ldr	r3, [sp, #12]
 8008ace:	4298      	cmp	r0, r3
 8008ad0:	bfb8      	it	lt
 8008ad2:	4618      	movlt	r0, r3
 8008ad4:	e7a4      	b.n	8008a20 <_printf_i+0x168>
 8008ad6:	2301      	movs	r3, #1
 8008ad8:	4632      	mov	r2, r6
 8008ada:	4649      	mov	r1, r9
 8008adc:	4640      	mov	r0, r8
 8008ade:	47d0      	blx	sl
 8008ae0:	3001      	adds	r0, #1
 8008ae2:	d09b      	beq.n	8008a1c <_printf_i+0x164>
 8008ae4:	3501      	adds	r5, #1
 8008ae6:	68e3      	ldr	r3, [r4, #12]
 8008ae8:	9903      	ldr	r1, [sp, #12]
 8008aea:	1a5b      	subs	r3, r3, r1
 8008aec:	42ab      	cmp	r3, r5
 8008aee:	dcf2      	bgt.n	8008ad6 <_printf_i+0x21e>
 8008af0:	e7eb      	b.n	8008aca <_printf_i+0x212>
 8008af2:	2500      	movs	r5, #0
 8008af4:	f104 0619 	add.w	r6, r4, #25
 8008af8:	e7f5      	b.n	8008ae6 <_printf_i+0x22e>
 8008afa:	bf00      	nop
 8008afc:	08008fe1 	.word	0x08008fe1
 8008b00:	08008ff2 	.word	0x08008ff2

08008b04 <_sbrk_r>:
 8008b04:	b538      	push	{r3, r4, r5, lr}
 8008b06:	4d06      	ldr	r5, [pc, #24]	; (8008b20 <_sbrk_r+0x1c>)
 8008b08:	2300      	movs	r3, #0
 8008b0a:	4604      	mov	r4, r0
 8008b0c:	4608      	mov	r0, r1
 8008b0e:	602b      	str	r3, [r5, #0]
 8008b10:	f7fa f992 	bl	8002e38 <_sbrk>
 8008b14:	1c43      	adds	r3, r0, #1
 8008b16:	d102      	bne.n	8008b1e <_sbrk_r+0x1a>
 8008b18:	682b      	ldr	r3, [r5, #0]
 8008b1a:	b103      	cbz	r3, 8008b1e <_sbrk_r+0x1a>
 8008b1c:	6023      	str	r3, [r4, #0]
 8008b1e:	bd38      	pop	{r3, r4, r5, pc}
 8008b20:	20005060 	.word	0x20005060

08008b24 <__sread>:
 8008b24:	b510      	push	{r4, lr}
 8008b26:	460c      	mov	r4, r1
 8008b28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b2c:	f000 f8a0 	bl	8008c70 <_read_r>
 8008b30:	2800      	cmp	r0, #0
 8008b32:	bfab      	itete	ge
 8008b34:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008b36:	89a3      	ldrhlt	r3, [r4, #12]
 8008b38:	181b      	addge	r3, r3, r0
 8008b3a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008b3e:	bfac      	ite	ge
 8008b40:	6563      	strge	r3, [r4, #84]	; 0x54
 8008b42:	81a3      	strhlt	r3, [r4, #12]
 8008b44:	bd10      	pop	{r4, pc}

08008b46 <__swrite>:
 8008b46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b4a:	461f      	mov	r7, r3
 8008b4c:	898b      	ldrh	r3, [r1, #12]
 8008b4e:	05db      	lsls	r3, r3, #23
 8008b50:	4605      	mov	r5, r0
 8008b52:	460c      	mov	r4, r1
 8008b54:	4616      	mov	r6, r2
 8008b56:	d505      	bpl.n	8008b64 <__swrite+0x1e>
 8008b58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b5c:	2302      	movs	r3, #2
 8008b5e:	2200      	movs	r2, #0
 8008b60:	f000 f868 	bl	8008c34 <_lseek_r>
 8008b64:	89a3      	ldrh	r3, [r4, #12]
 8008b66:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008b6a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008b6e:	81a3      	strh	r3, [r4, #12]
 8008b70:	4632      	mov	r2, r6
 8008b72:	463b      	mov	r3, r7
 8008b74:	4628      	mov	r0, r5
 8008b76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008b7a:	f000 b817 	b.w	8008bac <_write_r>

08008b7e <__sseek>:
 8008b7e:	b510      	push	{r4, lr}
 8008b80:	460c      	mov	r4, r1
 8008b82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b86:	f000 f855 	bl	8008c34 <_lseek_r>
 8008b8a:	1c43      	adds	r3, r0, #1
 8008b8c:	89a3      	ldrh	r3, [r4, #12]
 8008b8e:	bf15      	itete	ne
 8008b90:	6560      	strne	r0, [r4, #84]	; 0x54
 8008b92:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008b96:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008b9a:	81a3      	strheq	r3, [r4, #12]
 8008b9c:	bf18      	it	ne
 8008b9e:	81a3      	strhne	r3, [r4, #12]
 8008ba0:	bd10      	pop	{r4, pc}

08008ba2 <__sclose>:
 8008ba2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ba6:	f000 b813 	b.w	8008bd0 <_close_r>
	...

08008bac <_write_r>:
 8008bac:	b538      	push	{r3, r4, r5, lr}
 8008bae:	4d07      	ldr	r5, [pc, #28]	; (8008bcc <_write_r+0x20>)
 8008bb0:	4604      	mov	r4, r0
 8008bb2:	4608      	mov	r0, r1
 8008bb4:	4611      	mov	r1, r2
 8008bb6:	2200      	movs	r2, #0
 8008bb8:	602a      	str	r2, [r5, #0]
 8008bba:	461a      	mov	r2, r3
 8008bbc:	f7fa f8eb 	bl	8002d96 <_write>
 8008bc0:	1c43      	adds	r3, r0, #1
 8008bc2:	d102      	bne.n	8008bca <_write_r+0x1e>
 8008bc4:	682b      	ldr	r3, [r5, #0]
 8008bc6:	b103      	cbz	r3, 8008bca <_write_r+0x1e>
 8008bc8:	6023      	str	r3, [r4, #0]
 8008bca:	bd38      	pop	{r3, r4, r5, pc}
 8008bcc:	20005060 	.word	0x20005060

08008bd0 <_close_r>:
 8008bd0:	b538      	push	{r3, r4, r5, lr}
 8008bd2:	4d06      	ldr	r5, [pc, #24]	; (8008bec <_close_r+0x1c>)
 8008bd4:	2300      	movs	r3, #0
 8008bd6:	4604      	mov	r4, r0
 8008bd8:	4608      	mov	r0, r1
 8008bda:	602b      	str	r3, [r5, #0]
 8008bdc:	f7fa f8f7 	bl	8002dce <_close>
 8008be0:	1c43      	adds	r3, r0, #1
 8008be2:	d102      	bne.n	8008bea <_close_r+0x1a>
 8008be4:	682b      	ldr	r3, [r5, #0]
 8008be6:	b103      	cbz	r3, 8008bea <_close_r+0x1a>
 8008be8:	6023      	str	r3, [r4, #0]
 8008bea:	bd38      	pop	{r3, r4, r5, pc}
 8008bec:	20005060 	.word	0x20005060

08008bf0 <_fstat_r>:
 8008bf0:	b538      	push	{r3, r4, r5, lr}
 8008bf2:	4d07      	ldr	r5, [pc, #28]	; (8008c10 <_fstat_r+0x20>)
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	4604      	mov	r4, r0
 8008bf8:	4608      	mov	r0, r1
 8008bfa:	4611      	mov	r1, r2
 8008bfc:	602b      	str	r3, [r5, #0]
 8008bfe:	f7fa f8f2 	bl	8002de6 <_fstat>
 8008c02:	1c43      	adds	r3, r0, #1
 8008c04:	d102      	bne.n	8008c0c <_fstat_r+0x1c>
 8008c06:	682b      	ldr	r3, [r5, #0]
 8008c08:	b103      	cbz	r3, 8008c0c <_fstat_r+0x1c>
 8008c0a:	6023      	str	r3, [r4, #0]
 8008c0c:	bd38      	pop	{r3, r4, r5, pc}
 8008c0e:	bf00      	nop
 8008c10:	20005060 	.word	0x20005060

08008c14 <_isatty_r>:
 8008c14:	b538      	push	{r3, r4, r5, lr}
 8008c16:	4d06      	ldr	r5, [pc, #24]	; (8008c30 <_isatty_r+0x1c>)
 8008c18:	2300      	movs	r3, #0
 8008c1a:	4604      	mov	r4, r0
 8008c1c:	4608      	mov	r0, r1
 8008c1e:	602b      	str	r3, [r5, #0]
 8008c20:	f7fa f8f1 	bl	8002e06 <_isatty>
 8008c24:	1c43      	adds	r3, r0, #1
 8008c26:	d102      	bne.n	8008c2e <_isatty_r+0x1a>
 8008c28:	682b      	ldr	r3, [r5, #0]
 8008c2a:	b103      	cbz	r3, 8008c2e <_isatty_r+0x1a>
 8008c2c:	6023      	str	r3, [r4, #0]
 8008c2e:	bd38      	pop	{r3, r4, r5, pc}
 8008c30:	20005060 	.word	0x20005060

08008c34 <_lseek_r>:
 8008c34:	b538      	push	{r3, r4, r5, lr}
 8008c36:	4d07      	ldr	r5, [pc, #28]	; (8008c54 <_lseek_r+0x20>)
 8008c38:	4604      	mov	r4, r0
 8008c3a:	4608      	mov	r0, r1
 8008c3c:	4611      	mov	r1, r2
 8008c3e:	2200      	movs	r2, #0
 8008c40:	602a      	str	r2, [r5, #0]
 8008c42:	461a      	mov	r2, r3
 8008c44:	f7fa f8ea 	bl	8002e1c <_lseek>
 8008c48:	1c43      	adds	r3, r0, #1
 8008c4a:	d102      	bne.n	8008c52 <_lseek_r+0x1e>
 8008c4c:	682b      	ldr	r3, [r5, #0]
 8008c4e:	b103      	cbz	r3, 8008c52 <_lseek_r+0x1e>
 8008c50:	6023      	str	r3, [r4, #0]
 8008c52:	bd38      	pop	{r3, r4, r5, pc}
 8008c54:	20005060 	.word	0x20005060

08008c58 <__malloc_lock>:
 8008c58:	4801      	ldr	r0, [pc, #4]	; (8008c60 <__malloc_lock+0x8>)
 8008c5a:	f7ff bb1d 	b.w	8008298 <__retarget_lock_acquire_recursive>
 8008c5e:	bf00      	nop
 8008c60:	20005054 	.word	0x20005054

08008c64 <__malloc_unlock>:
 8008c64:	4801      	ldr	r0, [pc, #4]	; (8008c6c <__malloc_unlock+0x8>)
 8008c66:	f7ff bb18 	b.w	800829a <__retarget_lock_release_recursive>
 8008c6a:	bf00      	nop
 8008c6c:	20005054 	.word	0x20005054

08008c70 <_read_r>:
 8008c70:	b538      	push	{r3, r4, r5, lr}
 8008c72:	4d07      	ldr	r5, [pc, #28]	; (8008c90 <_read_r+0x20>)
 8008c74:	4604      	mov	r4, r0
 8008c76:	4608      	mov	r0, r1
 8008c78:	4611      	mov	r1, r2
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	602a      	str	r2, [r5, #0]
 8008c7e:	461a      	mov	r2, r3
 8008c80:	f7fa f86c 	bl	8002d5c <_read>
 8008c84:	1c43      	adds	r3, r0, #1
 8008c86:	d102      	bne.n	8008c8e <_read_r+0x1e>
 8008c88:	682b      	ldr	r3, [r5, #0]
 8008c8a:	b103      	cbz	r3, 8008c8e <_read_r+0x1e>
 8008c8c:	6023      	str	r3, [r4, #0]
 8008c8e:	bd38      	pop	{r3, r4, r5, pc}
 8008c90:	20005060 	.word	0x20005060

08008c94 <_init>:
 8008c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c96:	bf00      	nop
 8008c98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c9a:	bc08      	pop	{r3}
 8008c9c:	469e      	mov	lr, r3
 8008c9e:	4770      	bx	lr

08008ca0 <_fini>:
 8008ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ca2:	bf00      	nop
 8008ca4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ca6:	bc08      	pop	{r3}
 8008ca8:	469e      	mov	lr, r3
 8008caa:	4770      	bx	lr
