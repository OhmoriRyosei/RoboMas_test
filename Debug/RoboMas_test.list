
RoboMas_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005520  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08005718  08005718  00015718  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005738  08005738  0002014c  2**0
                  CONTENTS
  4 .ARM          00000008  08005738  08005738  00015738  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005740  08005740  0002014c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005740  08005740  00015740  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005744  08005744  00015744  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005748  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  2000000c  08005754  0002000c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  200000ac  080057f4  000200ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000754  2000014c  08005894  0002014c  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  200008a0  08005894  000208a0  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  0002014c  2**0
                  CONTENTS, READONLY
 14 .debug_info   000156bb  00000000  00000000  0002017a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002929  00000000  00000000  00035835  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000f48  00000000  00000000  00038160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000e50  00000000  00000000  000390a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0000288a  00000000  00000000  00039ef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00011e01  00000000  00000000  0003c782  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000fd0ed  00000000  00000000  0004e583  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  0014b670  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00003fe8  00000000  00000000  0014b6c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000014c 	.word	0x2000014c
 8000214:	00000000 	.word	0x00000000
 8000218:	08005700 	.word	0x08005700

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000150 	.word	0x20000150
 8000234:	08005700 	.word	0x08005700

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b974 	b.w	8000538 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	468e      	mov	lr, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	d14d      	bne.n	8000312 <__udivmoddi4+0xaa>
 8000276:	428a      	cmp	r2, r1
 8000278:	4694      	mov	ip, r2
 800027a:	d969      	bls.n	8000350 <__udivmoddi4+0xe8>
 800027c:	fab2 f282 	clz	r2, r2
 8000280:	b152      	cbz	r2, 8000298 <__udivmoddi4+0x30>
 8000282:	fa01 f302 	lsl.w	r3, r1, r2
 8000286:	f1c2 0120 	rsb	r1, r2, #32
 800028a:	fa20 f101 	lsr.w	r1, r0, r1
 800028e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000292:	ea41 0e03 	orr.w	lr, r1, r3
 8000296:	4094      	lsls	r4, r2
 8000298:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800029c:	0c21      	lsrs	r1, r4, #16
 800029e:	fbbe f6f8 	udiv	r6, lr, r8
 80002a2:	fa1f f78c 	uxth.w	r7, ip
 80002a6:	fb08 e316 	mls	r3, r8, r6, lr
 80002aa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002ae:	fb06 f107 	mul.w	r1, r6, r7
 80002b2:	4299      	cmp	r1, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x64>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f106 30ff 	add.w	r0, r6, #4294967295
 80002be:	f080 811f 	bcs.w	8000500 <__udivmoddi4+0x298>
 80002c2:	4299      	cmp	r1, r3
 80002c4:	f240 811c 	bls.w	8000500 <__udivmoddi4+0x298>
 80002c8:	3e02      	subs	r6, #2
 80002ca:	4463      	add	r3, ip
 80002cc:	1a5b      	subs	r3, r3, r1
 80002ce:	b2a4      	uxth	r4, r4
 80002d0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002d4:	fb08 3310 	mls	r3, r8, r0, r3
 80002d8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002dc:	fb00 f707 	mul.w	r7, r0, r7
 80002e0:	42a7      	cmp	r7, r4
 80002e2:	d90a      	bls.n	80002fa <__udivmoddi4+0x92>
 80002e4:	eb1c 0404 	adds.w	r4, ip, r4
 80002e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ec:	f080 810a 	bcs.w	8000504 <__udivmoddi4+0x29c>
 80002f0:	42a7      	cmp	r7, r4
 80002f2:	f240 8107 	bls.w	8000504 <__udivmoddi4+0x29c>
 80002f6:	4464      	add	r4, ip
 80002f8:	3802      	subs	r0, #2
 80002fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002fe:	1be4      	subs	r4, r4, r7
 8000300:	2600      	movs	r6, #0
 8000302:	b11d      	cbz	r5, 800030c <__udivmoddi4+0xa4>
 8000304:	40d4      	lsrs	r4, r2
 8000306:	2300      	movs	r3, #0
 8000308:	e9c5 4300 	strd	r4, r3, [r5]
 800030c:	4631      	mov	r1, r6
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	428b      	cmp	r3, r1
 8000314:	d909      	bls.n	800032a <__udivmoddi4+0xc2>
 8000316:	2d00      	cmp	r5, #0
 8000318:	f000 80ef 	beq.w	80004fa <__udivmoddi4+0x292>
 800031c:	2600      	movs	r6, #0
 800031e:	e9c5 0100 	strd	r0, r1, [r5]
 8000322:	4630      	mov	r0, r6
 8000324:	4631      	mov	r1, r6
 8000326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032a:	fab3 f683 	clz	r6, r3
 800032e:	2e00      	cmp	r6, #0
 8000330:	d14a      	bne.n	80003c8 <__udivmoddi4+0x160>
 8000332:	428b      	cmp	r3, r1
 8000334:	d302      	bcc.n	800033c <__udivmoddi4+0xd4>
 8000336:	4282      	cmp	r2, r0
 8000338:	f200 80f9 	bhi.w	800052e <__udivmoddi4+0x2c6>
 800033c:	1a84      	subs	r4, r0, r2
 800033e:	eb61 0303 	sbc.w	r3, r1, r3
 8000342:	2001      	movs	r0, #1
 8000344:	469e      	mov	lr, r3
 8000346:	2d00      	cmp	r5, #0
 8000348:	d0e0      	beq.n	800030c <__udivmoddi4+0xa4>
 800034a:	e9c5 4e00 	strd	r4, lr, [r5]
 800034e:	e7dd      	b.n	800030c <__udivmoddi4+0xa4>
 8000350:	b902      	cbnz	r2, 8000354 <__udivmoddi4+0xec>
 8000352:	deff      	udf	#255	; 0xff
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	2a00      	cmp	r2, #0
 800035a:	f040 8092 	bne.w	8000482 <__udivmoddi4+0x21a>
 800035e:	eba1 010c 	sub.w	r1, r1, ip
 8000362:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000366:	fa1f fe8c 	uxth.w	lr, ip
 800036a:	2601      	movs	r6, #1
 800036c:	0c20      	lsrs	r0, r4, #16
 800036e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000372:	fb07 1113 	mls	r1, r7, r3, r1
 8000376:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800037a:	fb0e f003 	mul.w	r0, lr, r3
 800037e:	4288      	cmp	r0, r1
 8000380:	d908      	bls.n	8000394 <__udivmoddi4+0x12c>
 8000382:	eb1c 0101 	adds.w	r1, ip, r1
 8000386:	f103 38ff 	add.w	r8, r3, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x12a>
 800038c:	4288      	cmp	r0, r1
 800038e:	f200 80cb 	bhi.w	8000528 <__udivmoddi4+0x2c0>
 8000392:	4643      	mov	r3, r8
 8000394:	1a09      	subs	r1, r1, r0
 8000396:	b2a4      	uxth	r4, r4
 8000398:	fbb1 f0f7 	udiv	r0, r1, r7
 800039c:	fb07 1110 	mls	r1, r7, r0, r1
 80003a0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003a4:	fb0e fe00 	mul.w	lr, lr, r0
 80003a8:	45a6      	cmp	lr, r4
 80003aa:	d908      	bls.n	80003be <__udivmoddi4+0x156>
 80003ac:	eb1c 0404 	adds.w	r4, ip, r4
 80003b0:	f100 31ff 	add.w	r1, r0, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x154>
 80003b6:	45a6      	cmp	lr, r4
 80003b8:	f200 80bb 	bhi.w	8000532 <__udivmoddi4+0x2ca>
 80003bc:	4608      	mov	r0, r1
 80003be:	eba4 040e 	sub.w	r4, r4, lr
 80003c2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003c6:	e79c      	b.n	8000302 <__udivmoddi4+0x9a>
 80003c8:	f1c6 0720 	rsb	r7, r6, #32
 80003cc:	40b3      	lsls	r3, r6
 80003ce:	fa22 fc07 	lsr.w	ip, r2, r7
 80003d2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003d6:	fa20 f407 	lsr.w	r4, r0, r7
 80003da:	fa01 f306 	lsl.w	r3, r1, r6
 80003de:	431c      	orrs	r4, r3
 80003e0:	40f9      	lsrs	r1, r7
 80003e2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003e6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ea:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ee:	0c20      	lsrs	r0, r4, #16
 80003f0:	fa1f fe8c 	uxth.w	lr, ip
 80003f4:	fb09 1118 	mls	r1, r9, r8, r1
 80003f8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003fc:	fb08 f00e 	mul.w	r0, r8, lr
 8000400:	4288      	cmp	r0, r1
 8000402:	fa02 f206 	lsl.w	r2, r2, r6
 8000406:	d90b      	bls.n	8000420 <__udivmoddi4+0x1b8>
 8000408:	eb1c 0101 	adds.w	r1, ip, r1
 800040c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000410:	f080 8088 	bcs.w	8000524 <__udivmoddi4+0x2bc>
 8000414:	4288      	cmp	r0, r1
 8000416:	f240 8085 	bls.w	8000524 <__udivmoddi4+0x2bc>
 800041a:	f1a8 0802 	sub.w	r8, r8, #2
 800041e:	4461      	add	r1, ip
 8000420:	1a09      	subs	r1, r1, r0
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb1 f0f9 	udiv	r0, r1, r9
 8000428:	fb09 1110 	mls	r1, r9, r0, r1
 800042c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	458e      	cmp	lr, r1
 8000436:	d908      	bls.n	800044a <__udivmoddi4+0x1e2>
 8000438:	eb1c 0101 	adds.w	r1, ip, r1
 800043c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000440:	d26c      	bcs.n	800051c <__udivmoddi4+0x2b4>
 8000442:	458e      	cmp	lr, r1
 8000444:	d96a      	bls.n	800051c <__udivmoddi4+0x2b4>
 8000446:	3802      	subs	r0, #2
 8000448:	4461      	add	r1, ip
 800044a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800044e:	fba0 9402 	umull	r9, r4, r0, r2
 8000452:	eba1 010e 	sub.w	r1, r1, lr
 8000456:	42a1      	cmp	r1, r4
 8000458:	46c8      	mov	r8, r9
 800045a:	46a6      	mov	lr, r4
 800045c:	d356      	bcc.n	800050c <__udivmoddi4+0x2a4>
 800045e:	d053      	beq.n	8000508 <__udivmoddi4+0x2a0>
 8000460:	b15d      	cbz	r5, 800047a <__udivmoddi4+0x212>
 8000462:	ebb3 0208 	subs.w	r2, r3, r8
 8000466:	eb61 010e 	sbc.w	r1, r1, lr
 800046a:	fa01 f707 	lsl.w	r7, r1, r7
 800046e:	fa22 f306 	lsr.w	r3, r2, r6
 8000472:	40f1      	lsrs	r1, r6
 8000474:	431f      	orrs	r7, r3
 8000476:	e9c5 7100 	strd	r7, r1, [r5]
 800047a:	2600      	movs	r6, #0
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	f1c2 0320 	rsb	r3, r2, #32
 8000486:	40d8      	lsrs	r0, r3
 8000488:	fa0c fc02 	lsl.w	ip, ip, r2
 800048c:	fa21 f303 	lsr.w	r3, r1, r3
 8000490:	4091      	lsls	r1, r2
 8000492:	4301      	orrs	r1, r0
 8000494:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fbb3 f0f7 	udiv	r0, r3, r7
 80004a0:	fb07 3610 	mls	r6, r7, r0, r3
 80004a4:	0c0b      	lsrs	r3, r1, #16
 80004a6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004aa:	fb00 f60e 	mul.w	r6, r0, lr
 80004ae:	429e      	cmp	r6, r3
 80004b0:	fa04 f402 	lsl.w	r4, r4, r2
 80004b4:	d908      	bls.n	80004c8 <__udivmoddi4+0x260>
 80004b6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ba:	f100 38ff 	add.w	r8, r0, #4294967295
 80004be:	d22f      	bcs.n	8000520 <__udivmoddi4+0x2b8>
 80004c0:	429e      	cmp	r6, r3
 80004c2:	d92d      	bls.n	8000520 <__udivmoddi4+0x2b8>
 80004c4:	3802      	subs	r0, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	1b9b      	subs	r3, r3, r6
 80004ca:	b289      	uxth	r1, r1
 80004cc:	fbb3 f6f7 	udiv	r6, r3, r7
 80004d0:	fb07 3316 	mls	r3, r7, r6, r3
 80004d4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004d8:	fb06 f30e 	mul.w	r3, r6, lr
 80004dc:	428b      	cmp	r3, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x28a>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004e8:	d216      	bcs.n	8000518 <__udivmoddi4+0x2b0>
 80004ea:	428b      	cmp	r3, r1
 80004ec:	d914      	bls.n	8000518 <__udivmoddi4+0x2b0>
 80004ee:	3e02      	subs	r6, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	1ac9      	subs	r1, r1, r3
 80004f4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004f8:	e738      	b.n	800036c <__udivmoddi4+0x104>
 80004fa:	462e      	mov	r6, r5
 80004fc:	4628      	mov	r0, r5
 80004fe:	e705      	b.n	800030c <__udivmoddi4+0xa4>
 8000500:	4606      	mov	r6, r0
 8000502:	e6e3      	b.n	80002cc <__udivmoddi4+0x64>
 8000504:	4618      	mov	r0, r3
 8000506:	e6f8      	b.n	80002fa <__udivmoddi4+0x92>
 8000508:	454b      	cmp	r3, r9
 800050a:	d2a9      	bcs.n	8000460 <__udivmoddi4+0x1f8>
 800050c:	ebb9 0802 	subs.w	r8, r9, r2
 8000510:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000514:	3801      	subs	r0, #1
 8000516:	e7a3      	b.n	8000460 <__udivmoddi4+0x1f8>
 8000518:	4646      	mov	r6, r8
 800051a:	e7ea      	b.n	80004f2 <__udivmoddi4+0x28a>
 800051c:	4620      	mov	r0, r4
 800051e:	e794      	b.n	800044a <__udivmoddi4+0x1e2>
 8000520:	4640      	mov	r0, r8
 8000522:	e7d1      	b.n	80004c8 <__udivmoddi4+0x260>
 8000524:	46d0      	mov	r8, sl
 8000526:	e77b      	b.n	8000420 <__udivmoddi4+0x1b8>
 8000528:	3b02      	subs	r3, #2
 800052a:	4461      	add	r1, ip
 800052c:	e732      	b.n	8000394 <__udivmoddi4+0x12c>
 800052e:	4630      	mov	r0, r6
 8000530:	e709      	b.n	8000346 <__udivmoddi4+0xde>
 8000532:	4464      	add	r4, ip
 8000534:	3802      	subs	r0, #2
 8000536:	e742      	b.n	80003be <__udivmoddi4+0x156>

08000538 <__aeabi_idiv0>:
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop

0800053c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000540:	f000 fdcd 	bl	80010de <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000544:	f000 f810 	bl	8000568 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000548:	f000 f9b6 	bl	80008b8 <MX_GPIO_Init>
  MX_DMA_Init();
 800054c:	f000 f996 	bl	800087c <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000550:	f000 f936 	bl	80007c0 <MX_USART3_UART_Init>
  MX_ETH_Init();
 8000554:	f000 f8e6 	bl	8000724 <MX_ETH_Init>
  MX_CAN1_Init();
 8000558:	f000 f878 	bl	800064c <MX_CAN1_Init>
  MX_CAN2_Init();
 800055c:	f000 f8ac 	bl	80006b8 <MX_CAN2_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000560:	f000 f95e 	bl	8000820 <MX_USB_OTG_FS_PCD_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000564:	e7fe      	b.n	8000564 <main+0x28>
	...

08000568 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b094      	sub	sp, #80	; 0x50
 800056c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800056e:	f107 031c 	add.w	r3, r7, #28
 8000572:	2234      	movs	r2, #52	; 0x34
 8000574:	2100      	movs	r1, #0
 8000576:	4618      	mov	r0, r3
 8000578:	f005 f8ba 	bl	80056f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800057c:	f107 0308 	add.w	r3, r7, #8
 8000580:	2200      	movs	r2, #0
 8000582:	601a      	str	r2, [r3, #0]
 8000584:	605a      	str	r2, [r3, #4]
 8000586:	609a      	str	r2, [r3, #8]
 8000588:	60da      	str	r2, [r3, #12]
 800058a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800058c:	f002 fc1e 	bl	8002dcc <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000590:	4b2c      	ldr	r3, [pc, #176]	; (8000644 <SystemClock_Config+0xdc>)
 8000592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000594:	4a2b      	ldr	r2, [pc, #172]	; (8000644 <SystemClock_Config+0xdc>)
 8000596:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800059a:	6413      	str	r3, [r2, #64]	; 0x40
 800059c:	4b29      	ldr	r3, [pc, #164]	; (8000644 <SystemClock_Config+0xdc>)
 800059e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005a4:	607b      	str	r3, [r7, #4]
 80005a6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005a8:	4b27      	ldr	r3, [pc, #156]	; (8000648 <SystemClock_Config+0xe0>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005b0:	4a25      	ldr	r2, [pc, #148]	; (8000648 <SystemClock_Config+0xe0>)
 80005b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005b6:	6013      	str	r3, [r2, #0]
 80005b8:	4b23      	ldr	r3, [pc, #140]	; (8000648 <SystemClock_Config+0xe0>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005c0:	603b      	str	r3, [r7, #0]
 80005c2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005c4:	2301      	movs	r3, #1
 80005c6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80005c8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80005cc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ce:	2302      	movs	r3, #2
 80005d0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005d6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005d8:	2304      	movs	r3, #4
 80005da:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 80005dc:	2360      	movs	r3, #96	; 0x60
 80005de:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005e0:	2302      	movs	r3, #2
 80005e2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005e4:	2304      	movs	r3, #4
 80005e6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005e8:	2302      	movs	r3, #2
 80005ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ec:	f107 031c 	add.w	r3, r7, #28
 80005f0:	4618      	mov	r0, r3
 80005f2:	f002 fc4b 	bl	8002e8c <HAL_RCC_OscConfig>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80005fc:	f000 f9fe 	bl	80009fc <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000600:	f002 fbf4 	bl	8002dec <HAL_PWREx_EnableOverDrive>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d001      	beq.n	800060e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800060a:	f000 f9f7 	bl	80009fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800060e:	230f      	movs	r3, #15
 8000610:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000612:	2302      	movs	r3, #2
 8000614:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000616:	2300      	movs	r3, #0
 8000618:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800061a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800061e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000620:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000624:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000626:	f107 0308 	add.w	r3, r7, #8
 800062a:	2103      	movs	r1, #3
 800062c:	4618      	mov	r0, r3
 800062e:	f002 fedb 	bl	80033e8 <HAL_RCC_ClockConfig>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000638:	f000 f9e0 	bl	80009fc <Error_Handler>
  }
}
 800063c:	bf00      	nop
 800063e:	3750      	adds	r7, #80	; 0x50
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	40023800 	.word	0x40023800
 8000648:	40007000 	.word	0x40007000

0800064c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000650:	4b17      	ldr	r3, [pc, #92]	; (80006b0 <MX_CAN1_Init+0x64>)
 8000652:	4a18      	ldr	r2, [pc, #96]	; (80006b4 <MX_CAN1_Init+0x68>)
 8000654:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 8000656:	4b16      	ldr	r3, [pc, #88]	; (80006b0 <MX_CAN1_Init+0x64>)
 8000658:	2206      	movs	r2, #6
 800065a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800065c:	4b14      	ldr	r3, [pc, #80]	; (80006b0 <MX_CAN1_Init+0x64>)
 800065e:	2200      	movs	r2, #0
 8000660:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000662:	4b13      	ldr	r3, [pc, #76]	; (80006b0 <MX_CAN1_Init+0x64>)
 8000664:	2200      	movs	r2, #0
 8000666:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_6TQ;
 8000668:	4b11      	ldr	r3, [pc, #68]	; (80006b0 <MX_CAN1_Init+0x64>)
 800066a:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 800066e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000670:	4b0f      	ldr	r3, [pc, #60]	; (80006b0 <MX_CAN1_Init+0x64>)
 8000672:	2200      	movs	r2, #0
 8000674:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000676:	4b0e      	ldr	r3, [pc, #56]	; (80006b0 <MX_CAN1_Init+0x64>)
 8000678:	2200      	movs	r2, #0
 800067a:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800067c:	4b0c      	ldr	r3, [pc, #48]	; (80006b0 <MX_CAN1_Init+0x64>)
 800067e:	2200      	movs	r2, #0
 8000680:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000682:	4b0b      	ldr	r3, [pc, #44]	; (80006b0 <MX_CAN1_Init+0x64>)
 8000684:	2200      	movs	r2, #0
 8000686:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000688:	4b09      	ldr	r3, [pc, #36]	; (80006b0 <MX_CAN1_Init+0x64>)
 800068a:	2200      	movs	r2, #0
 800068c:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800068e:	4b08      	ldr	r3, [pc, #32]	; (80006b0 <MX_CAN1_Init+0x64>)
 8000690:	2200      	movs	r2, #0
 8000692:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = ENABLE;
 8000694:	4b06      	ldr	r3, [pc, #24]	; (80006b0 <MX_CAN1_Init+0x64>)
 8000696:	2201      	movs	r2, #1
 8000698:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800069a:	4805      	ldr	r0, [pc, #20]	; (80006b0 <MX_CAN1_Init+0x64>)
 800069c:	f000 fda0 	bl	80011e0 <HAL_CAN_Init>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 80006a6:	f000 f9a9 	bl	80009fc <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80006aa:	bf00      	nop
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	200001a0 	.word	0x200001a0
 80006b4:	40006400 	.word	0x40006400

080006b8 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 80006bc:	4b17      	ldr	r3, [pc, #92]	; (800071c <MX_CAN2_Init+0x64>)
 80006be:	4a18      	ldr	r2, [pc, #96]	; (8000720 <MX_CAN2_Init+0x68>)
 80006c0:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 6;
 80006c2:	4b16      	ldr	r3, [pc, #88]	; (800071c <MX_CAN2_Init+0x64>)
 80006c4:	2206      	movs	r2, #6
 80006c6:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 80006c8:	4b14      	ldr	r3, [pc, #80]	; (800071c <MX_CAN2_Init+0x64>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80006ce:	4b13      	ldr	r3, [pc, #76]	; (800071c <MX_CAN2_Init+0x64>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_6TQ;
 80006d4:	4b11      	ldr	r3, [pc, #68]	; (800071c <MX_CAN2_Init+0x64>)
 80006d6:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 80006da:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 80006dc:	4b0f      	ldr	r3, [pc, #60]	; (800071c <MX_CAN2_Init+0x64>)
 80006de:	2200      	movs	r2, #0
 80006e0:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 80006e2:	4b0e      	ldr	r3, [pc, #56]	; (800071c <MX_CAN2_Init+0x64>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 80006e8:	4b0c      	ldr	r3, [pc, #48]	; (800071c <MX_CAN2_Init+0x64>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 80006ee:	4b0b      	ldr	r3, [pc, #44]	; (800071c <MX_CAN2_Init+0x64>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 80006f4:	4b09      	ldr	r3, [pc, #36]	; (800071c <MX_CAN2_Init+0x64>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 80006fa:	4b08      	ldr	r3, [pc, #32]	; (800071c <MX_CAN2_Init+0x64>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = ENABLE;
 8000700:	4b06      	ldr	r3, [pc, #24]	; (800071c <MX_CAN2_Init+0x64>)
 8000702:	2201      	movs	r2, #1
 8000704:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000706:	4805      	ldr	r0, [pc, #20]	; (800071c <MX_CAN2_Init+0x64>)
 8000708:	f000 fd6a 	bl	80011e0 <HAL_CAN_Init>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <MX_CAN2_Init+0x5e>
  {
    Error_Handler();
 8000712:	f000 f973 	bl	80009fc <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8000716:	bf00      	nop
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	200001c8 	.word	0x200001c8
 8000720:	40006800 	.word	0x40006800

08000724 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000728:	4b1f      	ldr	r3, [pc, #124]	; (80007a8 <MX_ETH_Init+0x84>)
 800072a:	4a20      	ldr	r2, [pc, #128]	; (80007ac <MX_ETH_Init+0x88>)
 800072c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800072e:	4b20      	ldr	r3, [pc, #128]	; (80007b0 <MX_ETH_Init+0x8c>)
 8000730:	2200      	movs	r2, #0
 8000732:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000734:	4b1e      	ldr	r3, [pc, #120]	; (80007b0 <MX_ETH_Init+0x8c>)
 8000736:	2280      	movs	r2, #128	; 0x80
 8000738:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800073a:	4b1d      	ldr	r3, [pc, #116]	; (80007b0 <MX_ETH_Init+0x8c>)
 800073c:	22e1      	movs	r2, #225	; 0xe1
 800073e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000740:	4b1b      	ldr	r3, [pc, #108]	; (80007b0 <MX_ETH_Init+0x8c>)
 8000742:	2200      	movs	r2, #0
 8000744:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000746:	4b1a      	ldr	r3, [pc, #104]	; (80007b0 <MX_ETH_Init+0x8c>)
 8000748:	2200      	movs	r2, #0
 800074a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 800074c:	4b18      	ldr	r3, [pc, #96]	; (80007b0 <MX_ETH_Init+0x8c>)
 800074e:	2200      	movs	r2, #0
 8000750:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000752:	4b15      	ldr	r3, [pc, #84]	; (80007a8 <MX_ETH_Init+0x84>)
 8000754:	4a16      	ldr	r2, [pc, #88]	; (80007b0 <MX_ETH_Init+0x8c>)
 8000756:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000758:	4b13      	ldr	r3, [pc, #76]	; (80007a8 <MX_ETH_Init+0x84>)
 800075a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800075e:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000760:	4b11      	ldr	r3, [pc, #68]	; (80007a8 <MX_ETH_Init+0x84>)
 8000762:	4a14      	ldr	r2, [pc, #80]	; (80007b4 <MX_ETH_Init+0x90>)
 8000764:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000766:	4b10      	ldr	r3, [pc, #64]	; (80007a8 <MX_ETH_Init+0x84>)
 8000768:	4a13      	ldr	r2, [pc, #76]	; (80007b8 <MX_ETH_Init+0x94>)
 800076a:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800076c:	4b0e      	ldr	r3, [pc, #56]	; (80007a8 <MX_ETH_Init+0x84>)
 800076e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000772:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000774:	480c      	ldr	r0, [pc, #48]	; (80007a8 <MX_ETH_Init+0x84>)
 8000776:	f001 fcf5 	bl	8002164 <HAL_ETH_Init>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000780:	f000 f93c 	bl	80009fc <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000784:	2238      	movs	r2, #56	; 0x38
 8000786:	2100      	movs	r1, #0
 8000788:	480c      	ldr	r0, [pc, #48]	; (80007bc <MX_ETH_Init+0x98>)
 800078a:	f004 ffb1 	bl	80056f0 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800078e:	4b0b      	ldr	r3, [pc, #44]	; (80007bc <MX_ETH_Init+0x98>)
 8000790:	2221      	movs	r2, #33	; 0x21
 8000792:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000794:	4b09      	ldr	r3, [pc, #36]	; (80007bc <MX_ETH_Init+0x98>)
 8000796:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800079a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800079c:	4b07      	ldr	r3, [pc, #28]	; (80007bc <MX_ETH_Init+0x98>)
 800079e:	2200      	movs	r2, #0
 80007a0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80007a2:	bf00      	nop
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	200001f0 	.word	0x200001f0
 80007ac:	40028000 	.word	0x40028000
 80007b0:	20000890 	.word	0x20000890
 80007b4:	200000ac 	.word	0x200000ac
 80007b8:	2000000c 	.word	0x2000000c
 80007bc:	20000168 	.word	0x20000168

080007c0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80007c4:	4b14      	ldr	r3, [pc, #80]	; (8000818 <MX_USART3_UART_Init+0x58>)
 80007c6:	4a15      	ldr	r2, [pc, #84]	; (800081c <MX_USART3_UART_Init+0x5c>)
 80007c8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80007ca:	4b13      	ldr	r3, [pc, #76]	; (8000818 <MX_USART3_UART_Init+0x58>)
 80007cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007d0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007d2:	4b11      	ldr	r3, [pc, #68]	; (8000818 <MX_USART3_UART_Init+0x58>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007d8:	4b0f      	ldr	r3, [pc, #60]	; (8000818 <MX_USART3_UART_Init+0x58>)
 80007da:	2200      	movs	r2, #0
 80007dc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007de:	4b0e      	ldr	r3, [pc, #56]	; (8000818 <MX_USART3_UART_Init+0x58>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007e4:	4b0c      	ldr	r3, [pc, #48]	; (8000818 <MX_USART3_UART_Init+0x58>)
 80007e6:	220c      	movs	r2, #12
 80007e8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ea:	4b0b      	ldr	r3, [pc, #44]	; (8000818 <MX_USART3_UART_Init+0x58>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80007f0:	4b09      	ldr	r3, [pc, #36]	; (8000818 <MX_USART3_UART_Init+0x58>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007f6:	4b08      	ldr	r3, [pc, #32]	; (8000818 <MX_USART3_UART_Init+0x58>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007fc:	4b06      	ldr	r3, [pc, #24]	; (8000818 <MX_USART3_UART_Init+0x58>)
 80007fe:	2200      	movs	r2, #0
 8000800:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000802:	4805      	ldr	r0, [pc, #20]	; (8000818 <MX_USART3_UART_Init+0x58>)
 8000804:	f003 fc3e 	bl	8004084 <HAL_UART_Init>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800080e:	f000 f8f5 	bl	80009fc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000812:	bf00      	nop
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	200002a0 	.word	0x200002a0
 800081c:	40004800 	.word	0x40004800

08000820 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000824:	4b14      	ldr	r3, [pc, #80]	; (8000878 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000826:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800082a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800082c:	4b12      	ldr	r3, [pc, #72]	; (8000878 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800082e:	2206      	movs	r2, #6
 8000830:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000832:	4b11      	ldr	r3, [pc, #68]	; (8000878 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000834:	2202      	movs	r2, #2
 8000836:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000838:	4b0f      	ldr	r3, [pc, #60]	; (8000878 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800083a:	2200      	movs	r2, #0
 800083c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800083e:	4b0e      	ldr	r3, [pc, #56]	; (8000878 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000840:	2202      	movs	r2, #2
 8000842:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000844:	4b0c      	ldr	r3, [pc, #48]	; (8000878 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000846:	2201      	movs	r2, #1
 8000848:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800084a:	4b0b      	ldr	r3, [pc, #44]	; (8000878 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800084c:	2200      	movs	r2, #0
 800084e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000850:	4b09      	ldr	r3, [pc, #36]	; (8000878 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000852:	2200      	movs	r2, #0
 8000854:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000856:	4b08      	ldr	r3, [pc, #32]	; (8000878 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000858:	2201      	movs	r2, #1
 800085a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800085c:	4b06      	ldr	r3, [pc, #24]	; (8000878 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800085e:	2200      	movs	r2, #0
 8000860:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000862:	4805      	ldr	r0, [pc, #20]	; (8000878 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000864:	f002 f969 	bl	8002b3a <HAL_PCD_Init>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800086e:	f000 f8c5 	bl	80009fc <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000872:	bf00      	nop
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	20000388 	.word	0x20000388

0800087c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000882:	4b0c      	ldr	r3, [pc, #48]	; (80008b4 <MX_DMA_Init+0x38>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	4a0b      	ldr	r2, [pc, #44]	; (80008b4 <MX_DMA_Init+0x38>)
 8000888:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800088c:	6313      	str	r3, [r2, #48]	; 0x30
 800088e:	4b09      	ldr	r3, [pc, #36]	; (80008b4 <MX_DMA_Init+0x38>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000896:	607b      	str	r3, [r7, #4]
 8000898:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 800089a:	2200      	movs	r2, #0
 800089c:	2100      	movs	r1, #0
 800089e:	200e      	movs	r0, #14
 80008a0:	f001 f8ad 	bl	80019fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80008a4:	200e      	movs	r0, #14
 80008a6:	f001 f8c6 	bl	8001a36 <HAL_NVIC_EnableIRQ>

}
 80008aa:	bf00      	nop
 80008ac:	3708      	adds	r7, #8
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	40023800 	.word	0x40023800

080008b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b08c      	sub	sp, #48	; 0x30
 80008bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008be:	f107 031c 	add.w	r3, r7, #28
 80008c2:	2200      	movs	r2, #0
 80008c4:	601a      	str	r2, [r3, #0]
 80008c6:	605a      	str	r2, [r3, #4]
 80008c8:	609a      	str	r2, [r3, #8]
 80008ca:	60da      	str	r2, [r3, #12]
 80008cc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ce:	4b47      	ldr	r3, [pc, #284]	; (80009ec <MX_GPIO_Init+0x134>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	4a46      	ldr	r2, [pc, #280]	; (80009ec <MX_GPIO_Init+0x134>)
 80008d4:	f043 0304 	orr.w	r3, r3, #4
 80008d8:	6313      	str	r3, [r2, #48]	; 0x30
 80008da:	4b44      	ldr	r3, [pc, #272]	; (80009ec <MX_GPIO_Init+0x134>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	f003 0304 	and.w	r3, r3, #4
 80008e2:	61bb      	str	r3, [r7, #24]
 80008e4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008e6:	4b41      	ldr	r3, [pc, #260]	; (80009ec <MX_GPIO_Init+0x134>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ea:	4a40      	ldr	r2, [pc, #256]	; (80009ec <MX_GPIO_Init+0x134>)
 80008ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008f0:	6313      	str	r3, [r2, #48]	; 0x30
 80008f2:	4b3e      	ldr	r3, [pc, #248]	; (80009ec <MX_GPIO_Init+0x134>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008fa:	617b      	str	r3, [r7, #20]
 80008fc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008fe:	4b3b      	ldr	r3, [pc, #236]	; (80009ec <MX_GPIO_Init+0x134>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	4a3a      	ldr	r2, [pc, #232]	; (80009ec <MX_GPIO_Init+0x134>)
 8000904:	f043 0301 	orr.w	r3, r3, #1
 8000908:	6313      	str	r3, [r2, #48]	; 0x30
 800090a:	4b38      	ldr	r3, [pc, #224]	; (80009ec <MX_GPIO_Init+0x134>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	f003 0301 	and.w	r3, r3, #1
 8000912:	613b      	str	r3, [r7, #16]
 8000914:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000916:	4b35      	ldr	r3, [pc, #212]	; (80009ec <MX_GPIO_Init+0x134>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	4a34      	ldr	r2, [pc, #208]	; (80009ec <MX_GPIO_Init+0x134>)
 800091c:	f043 0302 	orr.w	r3, r3, #2
 8000920:	6313      	str	r3, [r2, #48]	; 0x30
 8000922:	4b32      	ldr	r3, [pc, #200]	; (80009ec <MX_GPIO_Init+0x134>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	f003 0302 	and.w	r3, r3, #2
 800092a:	60fb      	str	r3, [r7, #12]
 800092c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800092e:	4b2f      	ldr	r3, [pc, #188]	; (80009ec <MX_GPIO_Init+0x134>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	4a2e      	ldr	r2, [pc, #184]	; (80009ec <MX_GPIO_Init+0x134>)
 8000934:	f043 0308 	orr.w	r3, r3, #8
 8000938:	6313      	str	r3, [r2, #48]	; 0x30
 800093a:	4b2c      	ldr	r3, [pc, #176]	; (80009ec <MX_GPIO_Init+0x134>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	f003 0308 	and.w	r3, r3, #8
 8000942:	60bb      	str	r3, [r7, #8]
 8000944:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000946:	4b29      	ldr	r3, [pc, #164]	; (80009ec <MX_GPIO_Init+0x134>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	4a28      	ldr	r2, [pc, #160]	; (80009ec <MX_GPIO_Init+0x134>)
 800094c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000950:	6313      	str	r3, [r2, #48]	; 0x30
 8000952:	4b26      	ldr	r3, [pc, #152]	; (80009ec <MX_GPIO_Init+0x134>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800095a:	607b      	str	r3, [r7, #4]
 800095c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800095e:	2200      	movs	r2, #0
 8000960:	f244 0181 	movw	r1, #16513	; 0x4081
 8000964:	4822      	ldr	r0, [pc, #136]	; (80009f0 <MX_GPIO_Init+0x138>)
 8000966:	f002 f8cf 	bl	8002b08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800096a:	2200      	movs	r2, #0
 800096c:	2140      	movs	r1, #64	; 0x40
 800096e:	4821      	ldr	r0, [pc, #132]	; (80009f4 <MX_GPIO_Init+0x13c>)
 8000970:	f002 f8ca 	bl	8002b08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000974:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000978:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800097a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800097e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000980:	2300      	movs	r3, #0
 8000982:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000984:	f107 031c 	add.w	r3, r7, #28
 8000988:	4619      	mov	r1, r3
 800098a:	481b      	ldr	r0, [pc, #108]	; (80009f8 <MX_GPIO_Init+0x140>)
 800098c:	f001 ff10 	bl	80027b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000990:	f244 0381 	movw	r3, #16513	; 0x4081
 8000994:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000996:	2301      	movs	r3, #1
 8000998:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099a:	2300      	movs	r3, #0
 800099c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099e:	2300      	movs	r3, #0
 80009a0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009a2:	f107 031c 	add.w	r3, r7, #28
 80009a6:	4619      	mov	r1, r3
 80009a8:	4811      	ldr	r0, [pc, #68]	; (80009f0 <MX_GPIO_Init+0x138>)
 80009aa:	f001 ff01 	bl	80027b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80009ae:	2340      	movs	r3, #64	; 0x40
 80009b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b2:	2301      	movs	r3, #1
 80009b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b6:	2300      	movs	r3, #0
 80009b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ba:	2300      	movs	r3, #0
 80009bc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009be:	f107 031c 	add.w	r3, r7, #28
 80009c2:	4619      	mov	r1, r3
 80009c4:	480b      	ldr	r0, [pc, #44]	; (80009f4 <MX_GPIO_Init+0x13c>)
 80009c6:	f001 fef3 	bl	80027b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80009ca:	2380      	movs	r3, #128	; 0x80
 80009cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009ce:	2300      	movs	r3, #0
 80009d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d2:	2300      	movs	r3, #0
 80009d4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009d6:	f107 031c 	add.w	r3, r7, #28
 80009da:	4619      	mov	r1, r3
 80009dc:	4805      	ldr	r0, [pc, #20]	; (80009f4 <MX_GPIO_Init+0x13c>)
 80009de:	f001 fee7 	bl	80027b0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009e2:	bf00      	nop
 80009e4:	3730      	adds	r7, #48	; 0x30
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	40023800 	.word	0x40023800
 80009f0:	40020400 	.word	0x40020400
 80009f4:	40021800 	.word	0x40021800
 80009f8:	40020800 	.word	0x40020800

080009fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a00:	b672      	cpsid	i
}
 8000a02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a04:	e7fe      	b.n	8000a04 <Error_Handler+0x8>
	...

08000a08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b083      	sub	sp, #12
 8000a0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000a0e:	4b0f      	ldr	r3, [pc, #60]	; (8000a4c <HAL_MspInit+0x44>)
 8000a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a12:	4a0e      	ldr	r2, [pc, #56]	; (8000a4c <HAL_MspInit+0x44>)
 8000a14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a18:	6413      	str	r3, [r2, #64]	; 0x40
 8000a1a:	4b0c      	ldr	r3, [pc, #48]	; (8000a4c <HAL_MspInit+0x44>)
 8000a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a22:	607b      	str	r3, [r7, #4]
 8000a24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a26:	4b09      	ldr	r3, [pc, #36]	; (8000a4c <HAL_MspInit+0x44>)
 8000a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a2a:	4a08      	ldr	r2, [pc, #32]	; (8000a4c <HAL_MspInit+0x44>)
 8000a2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a30:	6453      	str	r3, [r2, #68]	; 0x44
 8000a32:	4b06      	ldr	r3, [pc, #24]	; (8000a4c <HAL_MspInit+0x44>)
 8000a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a3a:	603b      	str	r3, [r7, #0]
 8000a3c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a3e:	bf00      	nop
 8000a40:	370c      	adds	r7, #12
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop
 8000a4c:	40023800 	.word	0x40023800

08000a50 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b08c      	sub	sp, #48	; 0x30
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a58:	f107 031c 	add.w	r3, r7, #28
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	601a      	str	r2, [r3, #0]
 8000a60:	605a      	str	r2, [r3, #4]
 8000a62:	609a      	str	r2, [r3, #8]
 8000a64:	60da      	str	r2, [r3, #12]
 8000a66:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a55      	ldr	r2, [pc, #340]	; (8000bc4 <HAL_CAN_MspInit+0x174>)
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d149      	bne.n	8000b06 <HAL_CAN_MspInit+0xb6>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000a72:	4b55      	ldr	r3, [pc, #340]	; (8000bc8 <HAL_CAN_MspInit+0x178>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	3301      	adds	r3, #1
 8000a78:	4a53      	ldr	r2, [pc, #332]	; (8000bc8 <HAL_CAN_MspInit+0x178>)
 8000a7a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000a7c:	4b52      	ldr	r3, [pc, #328]	; (8000bc8 <HAL_CAN_MspInit+0x178>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	2b01      	cmp	r3, #1
 8000a82:	d10b      	bne.n	8000a9c <HAL_CAN_MspInit+0x4c>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000a84:	4b51      	ldr	r3, [pc, #324]	; (8000bcc <HAL_CAN_MspInit+0x17c>)
 8000a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a88:	4a50      	ldr	r2, [pc, #320]	; (8000bcc <HAL_CAN_MspInit+0x17c>)
 8000a8a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a8e:	6413      	str	r3, [r2, #64]	; 0x40
 8000a90:	4b4e      	ldr	r3, [pc, #312]	; (8000bcc <HAL_CAN_MspInit+0x17c>)
 8000a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000a98:	61bb      	str	r3, [r7, #24]
 8000a9a:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a9c:	4b4b      	ldr	r3, [pc, #300]	; (8000bcc <HAL_CAN_MspInit+0x17c>)
 8000a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa0:	4a4a      	ldr	r2, [pc, #296]	; (8000bcc <HAL_CAN_MspInit+0x17c>)
 8000aa2:	f043 0308 	orr.w	r3, r3, #8
 8000aa6:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa8:	4b48      	ldr	r3, [pc, #288]	; (8000bcc <HAL_CAN_MspInit+0x17c>)
 8000aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aac:	f003 0308 	and.w	r3, r3, #8
 8000ab0:	617b      	str	r3, [r7, #20]
 8000ab2:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000ab4:	2303      	movs	r3, #3
 8000ab6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab8:	2302      	movs	r3, #2
 8000aba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abc:	2300      	movs	r3, #0
 8000abe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ac0:	2303      	movs	r3, #3
 8000ac2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000ac4:	2309      	movs	r3, #9
 8000ac6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ac8:	f107 031c 	add.w	r3, r7, #28
 8000acc:	4619      	mov	r1, r3
 8000ace:	4840      	ldr	r0, [pc, #256]	; (8000bd0 <HAL_CAN_MspInit+0x180>)
 8000ad0:	f001 fe6e 	bl	80027b0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	2100      	movs	r1, #0
 8000ad8:	2013      	movs	r0, #19
 8000ada:	f000 ff90 	bl	80019fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8000ade:	2013      	movs	r0, #19
 8000ae0:	f000 ffa9 	bl	8001a36 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	2100      	movs	r1, #0
 8000ae8:	2014      	movs	r0, #20
 8000aea:	f000 ff88 	bl	80019fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000aee:	2014      	movs	r0, #20
 8000af0:	f000 ffa1 	bl	8001a36 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000af4:	2200      	movs	r2, #0
 8000af6:	2100      	movs	r1, #0
 8000af8:	2015      	movs	r0, #21
 8000afa:	f000 ff80 	bl	80019fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000afe:	2015      	movs	r0, #21
 8000b00:	f000 ff99 	bl	8001a36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8000b04:	e05a      	b.n	8000bbc <HAL_CAN_MspInit+0x16c>
  else if(hcan->Instance==CAN2)
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	4a32      	ldr	r2, [pc, #200]	; (8000bd4 <HAL_CAN_MspInit+0x184>)
 8000b0c:	4293      	cmp	r3, r2
 8000b0e:	d155      	bne.n	8000bbc <HAL_CAN_MspInit+0x16c>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8000b10:	4b2e      	ldr	r3, [pc, #184]	; (8000bcc <HAL_CAN_MspInit+0x17c>)
 8000b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b14:	4a2d      	ldr	r2, [pc, #180]	; (8000bcc <HAL_CAN_MspInit+0x17c>)
 8000b16:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000b1a:	6413      	str	r3, [r2, #64]	; 0x40
 8000b1c:	4b2b      	ldr	r3, [pc, #172]	; (8000bcc <HAL_CAN_MspInit+0x17c>)
 8000b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b20:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000b24:	613b      	str	r3, [r7, #16]
 8000b26:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000b28:	4b27      	ldr	r3, [pc, #156]	; (8000bc8 <HAL_CAN_MspInit+0x178>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	3301      	adds	r3, #1
 8000b2e:	4a26      	ldr	r2, [pc, #152]	; (8000bc8 <HAL_CAN_MspInit+0x178>)
 8000b30:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000b32:	4b25      	ldr	r3, [pc, #148]	; (8000bc8 <HAL_CAN_MspInit+0x178>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	2b01      	cmp	r3, #1
 8000b38:	d10b      	bne.n	8000b52 <HAL_CAN_MspInit+0x102>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000b3a:	4b24      	ldr	r3, [pc, #144]	; (8000bcc <HAL_CAN_MspInit+0x17c>)
 8000b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b3e:	4a23      	ldr	r2, [pc, #140]	; (8000bcc <HAL_CAN_MspInit+0x17c>)
 8000b40:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b44:	6413      	str	r3, [r2, #64]	; 0x40
 8000b46:	4b21      	ldr	r3, [pc, #132]	; (8000bcc <HAL_CAN_MspInit+0x17c>)
 8000b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b4e:	60fb      	str	r3, [r7, #12]
 8000b50:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b52:	4b1e      	ldr	r3, [pc, #120]	; (8000bcc <HAL_CAN_MspInit+0x17c>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b56:	4a1d      	ldr	r2, [pc, #116]	; (8000bcc <HAL_CAN_MspInit+0x17c>)
 8000b58:	f043 0302 	orr.w	r3, r3, #2
 8000b5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b5e:	4b1b      	ldr	r3, [pc, #108]	; (8000bcc <HAL_CAN_MspInit+0x17c>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b62:	f003 0302 	and.w	r3, r3, #2
 8000b66:	60bb      	str	r3, [r7, #8]
 8000b68:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_6;
 8000b6a:	f44f 5382 	mov.w	r3, #4160	; 0x1040
 8000b6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b70:	2302      	movs	r3, #2
 8000b72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b74:	2300      	movs	r3, #0
 8000b76:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b78:	2303      	movs	r3, #3
 8000b7a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8000b7c:	2309      	movs	r3, #9
 8000b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b80:	f107 031c 	add.w	r3, r7, #28
 8000b84:	4619      	mov	r1, r3
 8000b86:	4814      	ldr	r0, [pc, #80]	; (8000bd8 <HAL_CAN_MspInit+0x188>)
 8000b88:	f001 fe12 	bl	80027b0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_TX_IRQn, 0, 0);
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	2100      	movs	r1, #0
 8000b90:	203f      	movs	r0, #63	; 0x3f
 8000b92:	f000 ff34 	bl	80019fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_TX_IRQn);
 8000b96:	203f      	movs	r0, #63	; 0x3f
 8000b98:	f000 ff4d 	bl	8001a36 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	2100      	movs	r1, #0
 8000ba0:	2040      	movs	r0, #64	; 0x40
 8000ba2:	f000 ff2c 	bl	80019fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8000ba6:	2040      	movs	r0, #64	; 0x40
 8000ba8:	f000 ff45 	bl	8001a36 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 0, 0);
 8000bac:	2200      	movs	r2, #0
 8000bae:	2100      	movs	r1, #0
 8000bb0:	2041      	movs	r0, #65	; 0x41
 8000bb2:	f000 ff24 	bl	80019fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 8000bb6:	2041      	movs	r0, #65	; 0x41
 8000bb8:	f000 ff3d 	bl	8001a36 <HAL_NVIC_EnableIRQ>
}
 8000bbc:	bf00      	nop
 8000bbe:	3730      	adds	r7, #48	; 0x30
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	40006400 	.word	0x40006400
 8000bc8:	20000898 	.word	0x20000898
 8000bcc:	40023800 	.word	0x40023800
 8000bd0:	40020c00 	.word	0x40020c00
 8000bd4:	40006800 	.word	0x40006800
 8000bd8:	40020400 	.word	0x40020400

08000bdc <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b08e      	sub	sp, #56	; 0x38
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000be8:	2200      	movs	r2, #0
 8000bea:	601a      	str	r2, [r3, #0]
 8000bec:	605a      	str	r2, [r3, #4]
 8000bee:	609a      	str	r2, [r3, #8]
 8000bf0:	60da      	str	r2, [r3, #12]
 8000bf2:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4a4e      	ldr	r2, [pc, #312]	; (8000d34 <HAL_ETH_MspInit+0x158>)
 8000bfa:	4293      	cmp	r3, r2
 8000bfc:	f040 8096 	bne.w	8000d2c <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000c00:	4b4d      	ldr	r3, [pc, #308]	; (8000d38 <HAL_ETH_MspInit+0x15c>)
 8000c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c04:	4a4c      	ldr	r2, [pc, #304]	; (8000d38 <HAL_ETH_MspInit+0x15c>)
 8000c06:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c0a:	6313      	str	r3, [r2, #48]	; 0x30
 8000c0c:	4b4a      	ldr	r3, [pc, #296]	; (8000d38 <HAL_ETH_MspInit+0x15c>)
 8000c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c14:	623b      	str	r3, [r7, #32]
 8000c16:	6a3b      	ldr	r3, [r7, #32]
 8000c18:	4b47      	ldr	r3, [pc, #284]	; (8000d38 <HAL_ETH_MspInit+0x15c>)
 8000c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1c:	4a46      	ldr	r2, [pc, #280]	; (8000d38 <HAL_ETH_MspInit+0x15c>)
 8000c1e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000c22:	6313      	str	r3, [r2, #48]	; 0x30
 8000c24:	4b44      	ldr	r3, [pc, #272]	; (8000d38 <HAL_ETH_MspInit+0x15c>)
 8000c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c28:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000c2c:	61fb      	str	r3, [r7, #28]
 8000c2e:	69fb      	ldr	r3, [r7, #28]
 8000c30:	4b41      	ldr	r3, [pc, #260]	; (8000d38 <HAL_ETH_MspInit+0x15c>)
 8000c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c34:	4a40      	ldr	r2, [pc, #256]	; (8000d38 <HAL_ETH_MspInit+0x15c>)
 8000c36:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000c3a:	6313      	str	r3, [r2, #48]	; 0x30
 8000c3c:	4b3e      	ldr	r3, [pc, #248]	; (8000d38 <HAL_ETH_MspInit+0x15c>)
 8000c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000c44:	61bb      	str	r3, [r7, #24]
 8000c46:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c48:	4b3b      	ldr	r3, [pc, #236]	; (8000d38 <HAL_ETH_MspInit+0x15c>)
 8000c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4c:	4a3a      	ldr	r2, [pc, #232]	; (8000d38 <HAL_ETH_MspInit+0x15c>)
 8000c4e:	f043 0304 	orr.w	r3, r3, #4
 8000c52:	6313      	str	r3, [r2, #48]	; 0x30
 8000c54:	4b38      	ldr	r3, [pc, #224]	; (8000d38 <HAL_ETH_MspInit+0x15c>)
 8000c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c58:	f003 0304 	and.w	r3, r3, #4
 8000c5c:	617b      	str	r3, [r7, #20]
 8000c5e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c60:	4b35      	ldr	r3, [pc, #212]	; (8000d38 <HAL_ETH_MspInit+0x15c>)
 8000c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c64:	4a34      	ldr	r2, [pc, #208]	; (8000d38 <HAL_ETH_MspInit+0x15c>)
 8000c66:	f043 0301 	orr.w	r3, r3, #1
 8000c6a:	6313      	str	r3, [r2, #48]	; 0x30
 8000c6c:	4b32      	ldr	r3, [pc, #200]	; (8000d38 <HAL_ETH_MspInit+0x15c>)
 8000c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c70:	f003 0301 	and.w	r3, r3, #1
 8000c74:	613b      	str	r3, [r7, #16]
 8000c76:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c78:	4b2f      	ldr	r3, [pc, #188]	; (8000d38 <HAL_ETH_MspInit+0x15c>)
 8000c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7c:	4a2e      	ldr	r2, [pc, #184]	; (8000d38 <HAL_ETH_MspInit+0x15c>)
 8000c7e:	f043 0302 	orr.w	r3, r3, #2
 8000c82:	6313      	str	r3, [r2, #48]	; 0x30
 8000c84:	4b2c      	ldr	r3, [pc, #176]	; (8000d38 <HAL_ETH_MspInit+0x15c>)
 8000c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c88:	f003 0302 	and.w	r3, r3, #2
 8000c8c:	60fb      	str	r3, [r7, #12]
 8000c8e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c90:	4b29      	ldr	r3, [pc, #164]	; (8000d38 <HAL_ETH_MspInit+0x15c>)
 8000c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c94:	4a28      	ldr	r2, [pc, #160]	; (8000d38 <HAL_ETH_MspInit+0x15c>)
 8000c96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c9a:	6313      	str	r3, [r2, #48]	; 0x30
 8000c9c:	4b26      	ldr	r3, [pc, #152]	; (8000d38 <HAL_ETH_MspInit+0x15c>)
 8000c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ca4:	60bb      	str	r3, [r7, #8]
 8000ca6:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000ca8:	2332      	movs	r3, #50	; 0x32
 8000caa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cac:	2302      	movs	r3, #2
 8000cae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cb4:	2303      	movs	r3, #3
 8000cb6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cb8:	230b      	movs	r3, #11
 8000cba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	481e      	ldr	r0, [pc, #120]	; (8000d3c <HAL_ETH_MspInit+0x160>)
 8000cc4:	f001 fd74 	bl	80027b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000cc8:	2386      	movs	r3, #134	; 0x86
 8000cca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ccc:	2302      	movs	r3, #2
 8000cce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cd4:	2303      	movs	r3, #3
 8000cd6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cd8:	230b      	movs	r3, #11
 8000cda:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cdc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	4817      	ldr	r0, [pc, #92]	; (8000d40 <HAL_ETH_MspInit+0x164>)
 8000ce4:	f001 fd64 	bl	80027b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000ce8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cee:	2302      	movs	r3, #2
 8000cf0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cf6:	2303      	movs	r3, #3
 8000cf8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cfa:	230b      	movs	r3, #11
 8000cfc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000cfe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d02:	4619      	mov	r1, r3
 8000d04:	480f      	ldr	r0, [pc, #60]	; (8000d44 <HAL_ETH_MspInit+0x168>)
 8000d06:	f001 fd53 	bl	80027b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000d0a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000d0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d10:	2302      	movs	r3, #2
 8000d12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d14:	2300      	movs	r3, #0
 8000d16:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d18:	2303      	movs	r3, #3
 8000d1a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d1c:	230b      	movs	r3, #11
 8000d1e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d24:	4619      	mov	r1, r3
 8000d26:	4808      	ldr	r0, [pc, #32]	; (8000d48 <HAL_ETH_MspInit+0x16c>)
 8000d28:	f001 fd42 	bl	80027b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000d2c:	bf00      	nop
 8000d2e:	3738      	adds	r7, #56	; 0x38
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	40028000 	.word	0x40028000
 8000d38:	40023800 	.word	0x40023800
 8000d3c:	40020800 	.word	0x40020800
 8000d40:	40020000 	.word	0x40020000
 8000d44:	40020400 	.word	0x40020400
 8000d48:	40021800 	.word	0x40021800

08000d4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b0ae      	sub	sp, #184	; 0xb8
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d54:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000d58:	2200      	movs	r2, #0
 8000d5a:	601a      	str	r2, [r3, #0]
 8000d5c:	605a      	str	r2, [r3, #4]
 8000d5e:	609a      	str	r2, [r3, #8]
 8000d60:	60da      	str	r2, [r3, #12]
 8000d62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d64:	f107 0314 	add.w	r3, r7, #20
 8000d68:	2290      	movs	r2, #144	; 0x90
 8000d6a:	2100      	movs	r1, #0
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f004 fcbf 	bl	80056f0 <memset>
  if(huart->Instance==USART3)
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	4a3d      	ldr	r2, [pc, #244]	; (8000e6c <HAL_UART_MspInit+0x120>)
 8000d78:	4293      	cmp	r3, r2
 8000d7a:	d172      	bne.n	8000e62 <HAL_UART_MspInit+0x116>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000d7c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d80:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000d82:	2300      	movs	r3, #0
 8000d84:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d86:	f107 0314 	add.w	r3, r7, #20
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f002 fd52 	bl	8003834 <HAL_RCCEx_PeriphCLKConfig>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000d96:	f7ff fe31 	bl	80009fc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d9a:	4b35      	ldr	r3, [pc, #212]	; (8000e70 <HAL_UART_MspInit+0x124>)
 8000d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d9e:	4a34      	ldr	r2, [pc, #208]	; (8000e70 <HAL_UART_MspInit+0x124>)
 8000da0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000da4:	6413      	str	r3, [r2, #64]	; 0x40
 8000da6:	4b32      	ldr	r3, [pc, #200]	; (8000e70 <HAL_UART_MspInit+0x124>)
 8000da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000daa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000dae:	613b      	str	r3, [r7, #16]
 8000db0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000db2:	4b2f      	ldr	r3, [pc, #188]	; (8000e70 <HAL_UART_MspInit+0x124>)
 8000db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db6:	4a2e      	ldr	r2, [pc, #184]	; (8000e70 <HAL_UART_MspInit+0x124>)
 8000db8:	f043 0308 	orr.w	r3, r3, #8
 8000dbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dbe:	4b2c      	ldr	r3, [pc, #176]	; (8000e70 <HAL_UART_MspInit+0x124>)
 8000dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc2:	f003 0308 	and.w	r3, r3, #8
 8000dc6:	60fb      	str	r3, [r7, #12]
 8000dc8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000dca:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000dce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd2:	2302      	movs	r3, #2
 8000dd4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dde:	2303      	movs	r3, #3
 8000de0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000de4:	2307      	movs	r3, #7
 8000de6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dea:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000dee:	4619      	mov	r1, r3
 8000df0:	4820      	ldr	r0, [pc, #128]	; (8000e74 <HAL_UART_MspInit+0x128>)
 8000df2:	f001 fcdd 	bl	80027b0 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8000df6:	4b20      	ldr	r3, [pc, #128]	; (8000e78 <HAL_UART_MspInit+0x12c>)
 8000df8:	4a20      	ldr	r2, [pc, #128]	; (8000e7c <HAL_UART_MspInit+0x130>)
 8000dfa:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8000dfc:	4b1e      	ldr	r3, [pc, #120]	; (8000e78 <HAL_UART_MspInit+0x12c>)
 8000dfe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e02:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e04:	4b1c      	ldr	r3, [pc, #112]	; (8000e78 <HAL_UART_MspInit+0x12c>)
 8000e06:	2240      	movs	r2, #64	; 0x40
 8000e08:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e0a:	4b1b      	ldr	r3, [pc, #108]	; (8000e78 <HAL_UART_MspInit+0x12c>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000e10:	4b19      	ldr	r3, [pc, #100]	; (8000e78 <HAL_UART_MspInit+0x12c>)
 8000e12:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e16:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e18:	4b17      	ldr	r3, [pc, #92]	; (8000e78 <HAL_UART_MspInit+0x12c>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e1e:	4b16      	ldr	r3, [pc, #88]	; (8000e78 <HAL_UART_MspInit+0x12c>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8000e24:	4b14      	ldr	r3, [pc, #80]	; (8000e78 <HAL_UART_MspInit+0x12c>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000e2a:	4b13      	ldr	r3, [pc, #76]	; (8000e78 <HAL_UART_MspInit+0x12c>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e30:	4b11      	ldr	r3, [pc, #68]	; (8000e78 <HAL_UART_MspInit+0x12c>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8000e36:	4810      	ldr	r0, [pc, #64]	; (8000e78 <HAL_UART_MspInit+0x12c>)
 8000e38:	f000 fe18 	bl	8001a6c <HAL_DMA_Init>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <HAL_UART_MspInit+0xfa>
    {
      Error_Handler();
 8000e42:	f7ff fddb 	bl	80009fc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	4a0b      	ldr	r2, [pc, #44]	; (8000e78 <HAL_UART_MspInit+0x12c>)
 8000e4a:	671a      	str	r2, [r3, #112]	; 0x70
 8000e4c:	4a0a      	ldr	r2, [pc, #40]	; (8000e78 <HAL_UART_MspInit+0x12c>)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000e52:	2200      	movs	r2, #0
 8000e54:	2100      	movs	r1, #0
 8000e56:	2027      	movs	r0, #39	; 0x27
 8000e58:	f000 fdd1 	bl	80019fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000e5c:	2027      	movs	r0, #39	; 0x27
 8000e5e:	f000 fdea 	bl	8001a36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000e62:	bf00      	nop
 8000e64:	37b8      	adds	r7, #184	; 0xb8
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	40004800 	.word	0x40004800
 8000e70:	40023800 	.word	0x40023800
 8000e74:	40020c00 	.word	0x40020c00
 8000e78:	20000328 	.word	0x20000328
 8000e7c:	40026058 	.word	0x40026058

08000e80 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b0ae      	sub	sp, #184	; 0xb8
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e88:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	601a      	str	r2, [r3, #0]
 8000e90:	605a      	str	r2, [r3, #4]
 8000e92:	609a      	str	r2, [r3, #8]
 8000e94:	60da      	str	r2, [r3, #12]
 8000e96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e98:	f107 0314 	add.w	r3, r7, #20
 8000e9c:	2290      	movs	r2, #144	; 0x90
 8000e9e:	2100      	movs	r1, #0
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f004 fc25 	bl	80056f0 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000eae:	d159      	bne.n	8000f64 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000eb0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000eb4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ebc:	f107 0314 	add.w	r3, r7, #20
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f002 fcb7 	bl	8003834 <HAL_RCCEx_PeriphCLKConfig>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d001      	beq.n	8000ed0 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000ecc:	f7ff fd96 	bl	80009fc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed0:	4b26      	ldr	r3, [pc, #152]	; (8000f6c <HAL_PCD_MspInit+0xec>)
 8000ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed4:	4a25      	ldr	r2, [pc, #148]	; (8000f6c <HAL_PCD_MspInit+0xec>)
 8000ed6:	f043 0301 	orr.w	r3, r3, #1
 8000eda:	6313      	str	r3, [r2, #48]	; 0x30
 8000edc:	4b23      	ldr	r3, [pc, #140]	; (8000f6c <HAL_PCD_MspInit+0xec>)
 8000ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee0:	f003 0301 	and.w	r3, r3, #1
 8000ee4:	613b      	str	r3, [r7, #16]
 8000ee6:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000ee8:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000eec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef0:	2302      	movs	r3, #2
 8000ef2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000efc:	2303      	movs	r3, #3
 8000efe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000f02:	230a      	movs	r3, #10
 8000f04:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f08:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	4818      	ldr	r0, [pc, #96]	; (8000f70 <HAL_PCD_MspInit+0xf0>)
 8000f10:	f001 fc4e 	bl	80027b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000f14:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f18:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f22:	2300      	movs	r3, #0
 8000f24:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000f28:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	4810      	ldr	r0, [pc, #64]	; (8000f70 <HAL_PCD_MspInit+0xf0>)
 8000f30:	f001 fc3e 	bl	80027b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000f34:	4b0d      	ldr	r3, [pc, #52]	; (8000f6c <HAL_PCD_MspInit+0xec>)
 8000f36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f38:	4a0c      	ldr	r2, [pc, #48]	; (8000f6c <HAL_PCD_MspInit+0xec>)
 8000f3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f3e:	6353      	str	r3, [r2, #52]	; 0x34
 8000f40:	4b0a      	ldr	r3, [pc, #40]	; (8000f6c <HAL_PCD_MspInit+0xec>)
 8000f42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f48:	60fb      	str	r3, [r7, #12]
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	4b07      	ldr	r3, [pc, #28]	; (8000f6c <HAL_PCD_MspInit+0xec>)
 8000f4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f50:	4a06      	ldr	r2, [pc, #24]	; (8000f6c <HAL_PCD_MspInit+0xec>)
 8000f52:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f56:	6453      	str	r3, [r2, #68]	; 0x44
 8000f58:	4b04      	ldr	r3, [pc, #16]	; (8000f6c <HAL_PCD_MspInit+0xec>)
 8000f5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f60:	60bb      	str	r3, [r7, #8]
 8000f62:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000f64:	bf00      	nop
 8000f66:	37b8      	adds	r7, #184	; 0xb8
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	40023800 	.word	0x40023800
 8000f70:	40020000 	.word	0x40020000

08000f74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f78:	e7fe      	b.n	8000f78 <NMI_Handler+0x4>

08000f7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f7a:	b480      	push	{r7}
 8000f7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f7e:	e7fe      	b.n	8000f7e <HardFault_Handler+0x4>

08000f80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f84:	e7fe      	b.n	8000f84 <MemManage_Handler+0x4>

08000f86 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f86:	b480      	push	{r7}
 8000f88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f8a:	e7fe      	b.n	8000f8a <BusFault_Handler+0x4>

08000f8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f90:	e7fe      	b.n	8000f90 <UsageFault_Handler+0x4>

08000f92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f92:	b480      	push	{r7}
 8000f94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f96:	bf00      	nop
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr

08000fa0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fa4:	bf00      	nop
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr

08000fae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fae:	b480      	push	{r7}
 8000fb0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fb2:	bf00      	nop
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr

08000fbc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fc0:	f000 f8ca 	bl	8001158 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fc4:	bf00      	nop
 8000fc6:	bd80      	pop	{r7, pc}

08000fc8 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8000fcc:	4802      	ldr	r0, [pc, #8]	; (8000fd8 <DMA1_Stream3_IRQHandler+0x10>)
 8000fce:	f000 fe8d 	bl	8001cec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8000fd2:	bf00      	nop
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	20000328 	.word	0x20000328

08000fdc <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000fe0:	4802      	ldr	r0, [pc, #8]	; (8000fec <CAN1_TX_IRQHandler+0x10>)
 8000fe2:	f000 f9f8 	bl	80013d6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8000fe6:	bf00      	nop
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	200001a0 	.word	0x200001a0

08000ff0 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000ff4:	4802      	ldr	r0, [pc, #8]	; (8001000 <CAN1_RX0_IRQHandler+0x10>)
 8000ff6:	f000 f9ee 	bl	80013d6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000ffa:	bf00      	nop
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	200001a0 	.word	0x200001a0

08001004 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001008:	4802      	ldr	r0, [pc, #8]	; (8001014 <CAN1_RX1_IRQHandler+0x10>)
 800100a:	f000 f9e4 	bl	80013d6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 800100e:	bf00      	nop
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	200001a0 	.word	0x200001a0

08001018 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800101c:	4802      	ldr	r0, [pc, #8]	; (8001028 <USART3_IRQHandler+0x10>)
 800101e:	f003 f87f 	bl	8004120 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001022:	bf00      	nop
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	200002a0 	.word	0x200002a0

0800102c <CAN2_TX_IRQHandler>:

/**
  * @brief This function handles CAN2 TX interrupts.
  */
void CAN2_TX_IRQHandler(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_TX_IRQn 0 */

  /* USER CODE END CAN2_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8001030:	4802      	ldr	r0, [pc, #8]	; (800103c <CAN2_TX_IRQHandler+0x10>)
 8001032:	f000 f9d0 	bl	80013d6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_TX_IRQn 1 */

  /* USER CODE END CAN2_TX_IRQn 1 */
}
 8001036:	bf00      	nop
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	200001c8 	.word	0x200001c8

08001040 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8001044:	4802      	ldr	r0, [pc, #8]	; (8001050 <CAN2_RX0_IRQHandler+0x10>)
 8001046:	f000 f9c6 	bl	80013d6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 800104a:	bf00      	nop
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	200001c8 	.word	0x200001c8

08001054 <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8001058:	4802      	ldr	r0, [pc, #8]	; (8001064 <CAN2_RX1_IRQHandler+0x10>)
 800105a:	f000 f9bc 	bl	80013d6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 800105e:	bf00      	nop
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	200001c8 	.word	0x200001c8

08001068 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800106c:	4b06      	ldr	r3, [pc, #24]	; (8001088 <SystemInit+0x20>)
 800106e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001072:	4a05      	ldr	r2, [pc, #20]	; (8001088 <SystemInit+0x20>)
 8001074:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001078:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800107c:	bf00      	nop
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop
 8001088:	e000ed00 	.word	0xe000ed00

0800108c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800108c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010c4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001090:	480d      	ldr	r0, [pc, #52]	; (80010c8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001092:	490e      	ldr	r1, [pc, #56]	; (80010cc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001094:	4a0e      	ldr	r2, [pc, #56]	; (80010d0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001096:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001098:	e002      	b.n	80010a0 <LoopCopyDataInit>

0800109a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800109a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800109c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800109e:	3304      	adds	r3, #4

080010a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010a4:	d3f9      	bcc.n	800109a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010a6:	4a0b      	ldr	r2, [pc, #44]	; (80010d4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80010a8:	4c0b      	ldr	r4, [pc, #44]	; (80010d8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80010aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010ac:	e001      	b.n	80010b2 <LoopFillZerobss>

080010ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010b0:	3204      	adds	r2, #4

080010b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010b4:	d3fb      	bcc.n	80010ae <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80010b6:	f7ff ffd7 	bl	8001068 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010ba:	f004 faf5 	bl	80056a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010be:	f7ff fa3d 	bl	800053c <main>
  bx  lr    
 80010c2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80010c4:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80010c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010cc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80010d0:	08005748 	.word	0x08005748
  ldr r2, =_sbss
 80010d4:	2000014c 	.word	0x2000014c
  ldr r4, =_ebss
 80010d8:	200008a0 	.word	0x200008a0

080010dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010dc:	e7fe      	b.n	80010dc <ADC_IRQHandler>

080010de <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010de:	b580      	push	{r7, lr}
 80010e0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010e2:	2003      	movs	r0, #3
 80010e4:	f000 fc80 	bl	80019e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010e8:	2000      	movs	r0, #0
 80010ea:	f000 f805 	bl	80010f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010ee:	f7ff fc8b 	bl	8000a08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010f2:	2300      	movs	r3, #0
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	bd80      	pop	{r7, pc}

080010f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001100:	4b12      	ldr	r3, [pc, #72]	; (800114c <HAL_InitTick+0x54>)
 8001102:	681a      	ldr	r2, [r3, #0]
 8001104:	4b12      	ldr	r3, [pc, #72]	; (8001150 <HAL_InitTick+0x58>)
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	4619      	mov	r1, r3
 800110a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800110e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001112:	fbb2 f3f3 	udiv	r3, r2, r3
 8001116:	4618      	mov	r0, r3
 8001118:	f000 fc9b 	bl	8001a52 <HAL_SYSTICK_Config>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001122:	2301      	movs	r3, #1
 8001124:	e00e      	b.n	8001144 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	2b0f      	cmp	r3, #15
 800112a:	d80a      	bhi.n	8001142 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800112c:	2200      	movs	r2, #0
 800112e:	6879      	ldr	r1, [r7, #4]
 8001130:	f04f 30ff 	mov.w	r0, #4294967295
 8001134:	f000 fc63 	bl	80019fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001138:	4a06      	ldr	r2, [pc, #24]	; (8001154 <HAL_InitTick+0x5c>)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800113e:	2300      	movs	r3, #0
 8001140:	e000      	b.n	8001144 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001142:	2301      	movs	r3, #1
}
 8001144:	4618      	mov	r0, r3
 8001146:	3708      	adds	r7, #8
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	20000000 	.word	0x20000000
 8001150:	20000008 	.word	0x20000008
 8001154:	20000004 	.word	0x20000004

08001158 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800115c:	4b06      	ldr	r3, [pc, #24]	; (8001178 <HAL_IncTick+0x20>)
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	461a      	mov	r2, r3
 8001162:	4b06      	ldr	r3, [pc, #24]	; (800117c <HAL_IncTick+0x24>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4413      	add	r3, r2
 8001168:	4a04      	ldr	r2, [pc, #16]	; (800117c <HAL_IncTick+0x24>)
 800116a:	6013      	str	r3, [r2, #0]
}
 800116c:	bf00      	nop
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	20000008 	.word	0x20000008
 800117c:	2000089c 	.word	0x2000089c

08001180 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  return uwTick;
 8001184:	4b03      	ldr	r3, [pc, #12]	; (8001194 <HAL_GetTick+0x14>)
 8001186:	681b      	ldr	r3, [r3, #0]
}
 8001188:	4618      	mov	r0, r3
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	2000089c 	.word	0x2000089c

08001198 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b084      	sub	sp, #16
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011a0:	f7ff ffee 	bl	8001180 <HAL_GetTick>
 80011a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011b0:	d005      	beq.n	80011be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011b2:	4b0a      	ldr	r3, [pc, #40]	; (80011dc <HAL_Delay+0x44>)
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	461a      	mov	r2, r3
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	4413      	add	r3, r2
 80011bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011be:	bf00      	nop
 80011c0:	f7ff ffde 	bl	8001180 <HAL_GetTick>
 80011c4:	4602      	mov	r2, r0
 80011c6:	68bb      	ldr	r3, [r7, #8]
 80011c8:	1ad3      	subs	r3, r2, r3
 80011ca:	68fa      	ldr	r2, [r7, #12]
 80011cc:	429a      	cmp	r2, r3
 80011ce:	d8f7      	bhi.n	80011c0 <HAL_Delay+0x28>
  {
  }
}
 80011d0:	bf00      	nop
 80011d2:	bf00      	nop
 80011d4:	3710      	adds	r7, #16
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	20000008 	.word	0x20000008

080011e0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b084      	sub	sp, #16
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d101      	bne.n	80011f2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80011ee:	2301      	movs	r3, #1
 80011f0:	e0ed      	b.n	80013ce <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d102      	bne.n	8001204 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80011fe:	6878      	ldr	r0, [r7, #4]
 8001200:	f7ff fc26 	bl	8000a50 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	681a      	ldr	r2, [r3, #0]
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f042 0201 	orr.w	r2, r2, #1
 8001212:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001214:	f7ff ffb4 	bl	8001180 <HAL_GetTick>
 8001218:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800121a:	e012      	b.n	8001242 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800121c:	f7ff ffb0 	bl	8001180 <HAL_GetTick>
 8001220:	4602      	mov	r2, r0
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	1ad3      	subs	r3, r2, r3
 8001226:	2b0a      	cmp	r3, #10
 8001228:	d90b      	bls.n	8001242 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800122e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	2205      	movs	r2, #5
 800123a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800123e:	2301      	movs	r3, #1
 8001240:	e0c5      	b.n	80013ce <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	f003 0301 	and.w	r3, r3, #1
 800124c:	2b00      	cmp	r3, #0
 800124e:	d0e5      	beq.n	800121c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f022 0202 	bic.w	r2, r2, #2
 800125e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001260:	f7ff ff8e 	bl	8001180 <HAL_GetTick>
 8001264:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001266:	e012      	b.n	800128e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001268:	f7ff ff8a 	bl	8001180 <HAL_GetTick>
 800126c:	4602      	mov	r2, r0
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	1ad3      	subs	r3, r2, r3
 8001272:	2b0a      	cmp	r3, #10
 8001274:	d90b      	bls.n	800128e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800127a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2205      	movs	r2, #5
 8001286:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800128a:	2301      	movs	r3, #1
 800128c:	e09f      	b.n	80013ce <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f003 0302 	and.w	r3, r3, #2
 8001298:	2b00      	cmp	r3, #0
 800129a:	d1e5      	bne.n	8001268 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	7e1b      	ldrb	r3, [r3, #24]
 80012a0:	2b01      	cmp	r3, #1
 80012a2:	d108      	bne.n	80012b6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	681a      	ldr	r2, [r3, #0]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80012b2:	601a      	str	r2, [r3, #0]
 80012b4:	e007      	b.n	80012c6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	681a      	ldr	r2, [r3, #0]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80012c4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	7e5b      	ldrb	r3, [r3, #25]
 80012ca:	2b01      	cmp	r3, #1
 80012cc:	d108      	bne.n	80012e0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	681a      	ldr	r2, [r3, #0]
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80012dc:	601a      	str	r2, [r3, #0]
 80012de:	e007      	b.n	80012f0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80012ee:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	7e9b      	ldrb	r3, [r3, #26]
 80012f4:	2b01      	cmp	r3, #1
 80012f6:	d108      	bne.n	800130a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	681a      	ldr	r2, [r3, #0]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f042 0220 	orr.w	r2, r2, #32
 8001306:	601a      	str	r2, [r3, #0]
 8001308:	e007      	b.n	800131a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	681a      	ldr	r2, [r3, #0]
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f022 0220 	bic.w	r2, r2, #32
 8001318:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	7edb      	ldrb	r3, [r3, #27]
 800131e:	2b01      	cmp	r3, #1
 8001320:	d108      	bne.n	8001334 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	681a      	ldr	r2, [r3, #0]
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f022 0210 	bic.w	r2, r2, #16
 8001330:	601a      	str	r2, [r3, #0]
 8001332:	e007      	b.n	8001344 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	681a      	ldr	r2, [r3, #0]
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f042 0210 	orr.w	r2, r2, #16
 8001342:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	7f1b      	ldrb	r3, [r3, #28]
 8001348:	2b01      	cmp	r3, #1
 800134a:	d108      	bne.n	800135e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	681a      	ldr	r2, [r3, #0]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f042 0208 	orr.w	r2, r2, #8
 800135a:	601a      	str	r2, [r3, #0]
 800135c:	e007      	b.n	800136e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	681a      	ldr	r2, [r3, #0]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f022 0208 	bic.w	r2, r2, #8
 800136c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	7f5b      	ldrb	r3, [r3, #29]
 8001372:	2b01      	cmp	r3, #1
 8001374:	d108      	bne.n	8001388 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	681a      	ldr	r2, [r3, #0]
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f042 0204 	orr.w	r2, r2, #4
 8001384:	601a      	str	r2, [r3, #0]
 8001386:	e007      	b.n	8001398 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	681a      	ldr	r2, [r3, #0]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f022 0204 	bic.w	r2, r2, #4
 8001396:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	689a      	ldr	r2, [r3, #8]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	68db      	ldr	r3, [r3, #12]
 80013a0:	431a      	orrs	r2, r3
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	691b      	ldr	r3, [r3, #16]
 80013a6:	431a      	orrs	r2, r3
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	695b      	ldr	r3, [r3, #20]
 80013ac:	ea42 0103 	orr.w	r1, r2, r3
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	1e5a      	subs	r2, r3, #1
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	430a      	orrs	r2, r1
 80013bc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2200      	movs	r2, #0
 80013c2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2201      	movs	r2, #1
 80013c8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80013cc:	2300      	movs	r3, #0
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	3710      	adds	r7, #16
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}

080013d6 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80013d6:	b580      	push	{r7, lr}
 80013d8:	b08a      	sub	sp, #40	; 0x28
 80013da:	af00      	add	r7, sp, #0
 80013dc:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80013de:	2300      	movs	r3, #0
 80013e0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	695b      	ldr	r3, [r3, #20]
 80013e8:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	689b      	ldr	r3, [r3, #8]
 80013f8:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	68db      	ldr	r3, [r3, #12]
 8001400:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	691b      	ldr	r3, [r3, #16]
 8001408:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	699b      	ldr	r3, [r3, #24]
 8001410:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001412:	6a3b      	ldr	r3, [r7, #32]
 8001414:	f003 0301 	and.w	r3, r3, #1
 8001418:	2b00      	cmp	r3, #0
 800141a:	d07c      	beq.n	8001516 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800141c:	69bb      	ldr	r3, [r7, #24]
 800141e:	f003 0301 	and.w	r3, r3, #1
 8001422:	2b00      	cmp	r3, #0
 8001424:	d023      	beq.n	800146e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	2201      	movs	r2, #1
 800142c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800142e:	69bb      	ldr	r3, [r7, #24]
 8001430:	f003 0302 	and.w	r3, r3, #2
 8001434:	2b00      	cmp	r3, #0
 8001436:	d003      	beq.n	8001440 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001438:	6878      	ldr	r0, [r7, #4]
 800143a:	f000 f983 	bl	8001744 <HAL_CAN_TxMailbox0CompleteCallback>
 800143e:	e016      	b.n	800146e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001440:	69bb      	ldr	r3, [r7, #24]
 8001442:	f003 0304 	and.w	r3, r3, #4
 8001446:	2b00      	cmp	r3, #0
 8001448:	d004      	beq.n	8001454 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800144a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800144c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001450:	627b      	str	r3, [r7, #36]	; 0x24
 8001452:	e00c      	b.n	800146e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001454:	69bb      	ldr	r3, [r7, #24]
 8001456:	f003 0308 	and.w	r3, r3, #8
 800145a:	2b00      	cmp	r3, #0
 800145c:	d004      	beq.n	8001468 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800145e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001460:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001464:	627b      	str	r3, [r7, #36]	; 0x24
 8001466:	e002      	b.n	800146e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001468:	6878      	ldr	r0, [r7, #4]
 800146a:	f000 f989 	bl	8001780 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800146e:	69bb      	ldr	r3, [r7, #24]
 8001470:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001474:	2b00      	cmp	r3, #0
 8001476:	d024      	beq.n	80014c2 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001480:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001482:	69bb      	ldr	r3, [r7, #24]
 8001484:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001488:	2b00      	cmp	r3, #0
 800148a:	d003      	beq.n	8001494 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800148c:	6878      	ldr	r0, [r7, #4]
 800148e:	f000 f963 	bl	8001758 <HAL_CAN_TxMailbox1CompleteCallback>
 8001492:	e016      	b.n	80014c2 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001494:	69bb      	ldr	r3, [r7, #24]
 8001496:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800149a:	2b00      	cmp	r3, #0
 800149c:	d004      	beq.n	80014a8 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800149e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80014a4:	627b      	str	r3, [r7, #36]	; 0x24
 80014a6:	e00c      	b.n	80014c2 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80014a8:	69bb      	ldr	r3, [r7, #24]
 80014aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d004      	beq.n	80014bc <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80014b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014b8:	627b      	str	r3, [r7, #36]	; 0x24
 80014ba:	e002      	b.n	80014c2 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80014bc:	6878      	ldr	r0, [r7, #4]
 80014be:	f000 f969 	bl	8001794 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80014c2:	69bb      	ldr	r3, [r7, #24]
 80014c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d024      	beq.n	8001516 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80014d4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80014d6:	69bb      	ldr	r3, [r7, #24]
 80014d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d003      	beq.n	80014e8 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80014e0:	6878      	ldr	r0, [r7, #4]
 80014e2:	f000 f943 	bl	800176c <HAL_CAN_TxMailbox2CompleteCallback>
 80014e6:	e016      	b.n	8001516 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80014e8:	69bb      	ldr	r3, [r7, #24]
 80014ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d004      	beq.n	80014fc <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80014f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014f8:	627b      	str	r3, [r7, #36]	; 0x24
 80014fa:	e00c      	b.n	8001516 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80014fc:	69bb      	ldr	r3, [r7, #24]
 80014fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001502:	2b00      	cmp	r3, #0
 8001504:	d004      	beq.n	8001510 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001508:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800150c:	627b      	str	r3, [r7, #36]	; 0x24
 800150e:	e002      	b.n	8001516 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001510:	6878      	ldr	r0, [r7, #4]
 8001512:	f000 f949 	bl	80017a8 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001516:	6a3b      	ldr	r3, [r7, #32]
 8001518:	f003 0308 	and.w	r3, r3, #8
 800151c:	2b00      	cmp	r3, #0
 800151e:	d00c      	beq.n	800153a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	f003 0310 	and.w	r3, r3, #16
 8001526:	2b00      	cmp	r3, #0
 8001528:	d007      	beq.n	800153a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800152a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800152c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001530:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	2210      	movs	r2, #16
 8001538:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800153a:	6a3b      	ldr	r3, [r7, #32]
 800153c:	f003 0304 	and.w	r3, r3, #4
 8001540:	2b00      	cmp	r3, #0
 8001542:	d00b      	beq.n	800155c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	f003 0308 	and.w	r3, r3, #8
 800154a:	2b00      	cmp	r3, #0
 800154c:	d006      	beq.n	800155c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	2208      	movs	r2, #8
 8001554:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001556:	6878      	ldr	r0, [r7, #4]
 8001558:	f000 f93a 	bl	80017d0 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800155c:	6a3b      	ldr	r3, [r7, #32]
 800155e:	f003 0302 	and.w	r3, r3, #2
 8001562:	2b00      	cmp	r3, #0
 8001564:	d009      	beq.n	800157a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	68db      	ldr	r3, [r3, #12]
 800156c:	f003 0303 	and.w	r3, r3, #3
 8001570:	2b00      	cmp	r3, #0
 8001572:	d002      	beq.n	800157a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001574:	6878      	ldr	r0, [r7, #4]
 8001576:	f000 f921 	bl	80017bc <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800157a:	6a3b      	ldr	r3, [r7, #32]
 800157c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001580:	2b00      	cmp	r3, #0
 8001582:	d00c      	beq.n	800159e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	f003 0310 	and.w	r3, r3, #16
 800158a:	2b00      	cmp	r3, #0
 800158c:	d007      	beq.n	800159e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800158e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001590:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001594:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	2210      	movs	r2, #16
 800159c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800159e:	6a3b      	ldr	r3, [r7, #32]
 80015a0:	f003 0320 	and.w	r3, r3, #32
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d00b      	beq.n	80015c0 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	f003 0308 	and.w	r3, r3, #8
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d006      	beq.n	80015c0 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	2208      	movs	r2, #8
 80015b8:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80015ba:	6878      	ldr	r0, [r7, #4]
 80015bc:	f000 f91c 	bl	80017f8 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80015c0:	6a3b      	ldr	r3, [r7, #32]
 80015c2:	f003 0310 	and.w	r3, r3, #16
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d009      	beq.n	80015de <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	691b      	ldr	r3, [r3, #16]
 80015d0:	f003 0303 	and.w	r3, r3, #3
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d002      	beq.n	80015de <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80015d8:	6878      	ldr	r0, [r7, #4]
 80015da:	f000 f903 	bl	80017e4 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80015de:	6a3b      	ldr	r3, [r7, #32]
 80015e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d00b      	beq.n	8001600 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80015e8:	69fb      	ldr	r3, [r7, #28]
 80015ea:	f003 0310 	and.w	r3, r3, #16
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d006      	beq.n	8001600 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	2210      	movs	r2, #16
 80015f8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80015fa:	6878      	ldr	r0, [r7, #4]
 80015fc:	f000 f906 	bl	800180c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001600:	6a3b      	ldr	r3, [r7, #32]
 8001602:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001606:	2b00      	cmp	r3, #0
 8001608:	d00b      	beq.n	8001622 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800160a:	69fb      	ldr	r3, [r7, #28]
 800160c:	f003 0308 	and.w	r3, r3, #8
 8001610:	2b00      	cmp	r3, #0
 8001612:	d006      	beq.n	8001622 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	2208      	movs	r2, #8
 800161a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800161c:	6878      	ldr	r0, [r7, #4]
 800161e:	f000 f8ff 	bl	8001820 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001622:	6a3b      	ldr	r3, [r7, #32]
 8001624:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001628:	2b00      	cmp	r3, #0
 800162a:	d07b      	beq.n	8001724 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800162c:	69fb      	ldr	r3, [r7, #28]
 800162e:	f003 0304 	and.w	r3, r3, #4
 8001632:	2b00      	cmp	r3, #0
 8001634:	d072      	beq.n	800171c <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001636:	6a3b      	ldr	r3, [r7, #32]
 8001638:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800163c:	2b00      	cmp	r3, #0
 800163e:	d008      	beq.n	8001652 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001646:	2b00      	cmp	r3, #0
 8001648:	d003      	beq.n	8001652 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800164a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800164c:	f043 0301 	orr.w	r3, r3, #1
 8001650:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001652:	6a3b      	ldr	r3, [r7, #32]
 8001654:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001658:	2b00      	cmp	r3, #0
 800165a:	d008      	beq.n	800166e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001662:	2b00      	cmp	r3, #0
 8001664:	d003      	beq.n	800166e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001668:	f043 0302 	orr.w	r3, r3, #2
 800166c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800166e:	6a3b      	ldr	r3, [r7, #32]
 8001670:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001674:	2b00      	cmp	r3, #0
 8001676:	d008      	beq.n	800168a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800167e:	2b00      	cmp	r3, #0
 8001680:	d003      	beq.n	800168a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001684:	f043 0304 	orr.w	r3, r3, #4
 8001688:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800168a:	6a3b      	ldr	r3, [r7, #32]
 800168c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001690:	2b00      	cmp	r3, #0
 8001692:	d043      	beq.n	800171c <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800169a:	2b00      	cmp	r3, #0
 800169c:	d03e      	beq.n	800171c <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80016a4:	2b60      	cmp	r3, #96	; 0x60
 80016a6:	d02b      	beq.n	8001700 <HAL_CAN_IRQHandler+0x32a>
 80016a8:	2b60      	cmp	r3, #96	; 0x60
 80016aa:	d82e      	bhi.n	800170a <HAL_CAN_IRQHandler+0x334>
 80016ac:	2b50      	cmp	r3, #80	; 0x50
 80016ae:	d022      	beq.n	80016f6 <HAL_CAN_IRQHandler+0x320>
 80016b0:	2b50      	cmp	r3, #80	; 0x50
 80016b2:	d82a      	bhi.n	800170a <HAL_CAN_IRQHandler+0x334>
 80016b4:	2b40      	cmp	r3, #64	; 0x40
 80016b6:	d019      	beq.n	80016ec <HAL_CAN_IRQHandler+0x316>
 80016b8:	2b40      	cmp	r3, #64	; 0x40
 80016ba:	d826      	bhi.n	800170a <HAL_CAN_IRQHandler+0x334>
 80016bc:	2b30      	cmp	r3, #48	; 0x30
 80016be:	d010      	beq.n	80016e2 <HAL_CAN_IRQHandler+0x30c>
 80016c0:	2b30      	cmp	r3, #48	; 0x30
 80016c2:	d822      	bhi.n	800170a <HAL_CAN_IRQHandler+0x334>
 80016c4:	2b10      	cmp	r3, #16
 80016c6:	d002      	beq.n	80016ce <HAL_CAN_IRQHandler+0x2f8>
 80016c8:	2b20      	cmp	r3, #32
 80016ca:	d005      	beq.n	80016d8 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80016cc:	e01d      	b.n	800170a <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80016ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d0:	f043 0308 	orr.w	r3, r3, #8
 80016d4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80016d6:	e019      	b.n	800170c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80016d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016da:	f043 0310 	orr.w	r3, r3, #16
 80016de:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80016e0:	e014      	b.n	800170c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80016e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e4:	f043 0320 	orr.w	r3, r3, #32
 80016e8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80016ea:	e00f      	b.n	800170c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80016ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016f2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80016f4:	e00a      	b.n	800170c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80016f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016fc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80016fe:	e005      	b.n	800170c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001702:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001706:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001708:	e000      	b.n	800170c <HAL_CAN_IRQHandler+0x336>
            break;
 800170a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	699a      	ldr	r2, [r3, #24]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800171a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	2204      	movs	r2, #4
 8001722:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001726:	2b00      	cmp	r3, #0
 8001728:	d008      	beq.n	800173c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800172e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001730:	431a      	orrs	r2, r3
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001736:	6878      	ldr	r0, [r7, #4]
 8001738:	f000 f87c 	bl	8001834 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800173c:	bf00      	nop
 800173e:	3728      	adds	r7, #40	; 0x28
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}

08001744 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001744:	b480      	push	{r7}
 8001746:	b083      	sub	sp, #12
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800174c:	bf00      	nop
 800174e:	370c      	adds	r7, #12
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr

08001758 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001760:	bf00      	nop
 8001762:	370c      	adds	r7, #12
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr

0800176c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800176c:	b480      	push	{r7}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001774:	bf00      	nop
 8001776:	370c      	adds	r7, #12
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr

08001780 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001780:	b480      	push	{r7}
 8001782:	b083      	sub	sp, #12
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001788:	bf00      	nop
 800178a:	370c      	adds	r7, #12
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr

08001794 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001794:	b480      	push	{r7}
 8001796:	b083      	sub	sp, #12
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800179c:	bf00      	nop
 800179e:	370c      	adds	r7, #12
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr

080017a8 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b083      	sub	sp, #12
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80017b0:	bf00      	nop
 80017b2:	370c      	adds	r7, #12
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr

080017bc <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80017bc:	b480      	push	{r7}
 80017be:	b083      	sub	sp, #12
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 80017c4:	bf00      	nop
 80017c6:	370c      	adds	r7, #12
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr

080017d0 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80017d8:	bf00      	nop
 80017da:	370c      	adds	r7, #12
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr

080017e4 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80017ec:	bf00      	nop
 80017ee:	370c      	adds	r7, #12
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr

080017f8 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001800:	bf00      	nop
 8001802:	370c      	adds	r7, #12
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr

0800180c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001814:	bf00      	nop
 8001816:	370c      	adds	r7, #12
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr

08001820 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001828:	bf00      	nop
 800182a:	370c      	adds	r7, #12
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr

08001834 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800183c:	bf00      	nop
 800183e:	370c      	adds	r7, #12
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr

08001848 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001848:	b480      	push	{r7}
 800184a:	b085      	sub	sp, #20
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	f003 0307 	and.w	r3, r3, #7
 8001856:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001858:	4b0b      	ldr	r3, [pc, #44]	; (8001888 <__NVIC_SetPriorityGrouping+0x40>)
 800185a:	68db      	ldr	r3, [r3, #12]
 800185c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800185e:	68ba      	ldr	r2, [r7, #8]
 8001860:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001864:	4013      	ands	r3, r2
 8001866:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001870:	4b06      	ldr	r3, [pc, #24]	; (800188c <__NVIC_SetPriorityGrouping+0x44>)
 8001872:	4313      	orrs	r3, r2
 8001874:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001876:	4a04      	ldr	r2, [pc, #16]	; (8001888 <__NVIC_SetPriorityGrouping+0x40>)
 8001878:	68bb      	ldr	r3, [r7, #8]
 800187a:	60d3      	str	r3, [r2, #12]
}
 800187c:	bf00      	nop
 800187e:	3714      	adds	r7, #20
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr
 8001888:	e000ed00 	.word	0xe000ed00
 800188c:	05fa0000 	.word	0x05fa0000

08001890 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001894:	4b04      	ldr	r3, [pc, #16]	; (80018a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	0a1b      	lsrs	r3, r3, #8
 800189a:	f003 0307 	and.w	r3, r3, #7
}
 800189e:	4618      	mov	r0, r3
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr
 80018a8:	e000ed00 	.word	0xe000ed00

080018ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	4603      	mov	r3, r0
 80018b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	db0b      	blt.n	80018d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018be:	79fb      	ldrb	r3, [r7, #7]
 80018c0:	f003 021f 	and.w	r2, r3, #31
 80018c4:	4907      	ldr	r1, [pc, #28]	; (80018e4 <__NVIC_EnableIRQ+0x38>)
 80018c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ca:	095b      	lsrs	r3, r3, #5
 80018cc:	2001      	movs	r0, #1
 80018ce:	fa00 f202 	lsl.w	r2, r0, r2
 80018d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018d6:	bf00      	nop
 80018d8:	370c      	adds	r7, #12
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop
 80018e4:	e000e100 	.word	0xe000e100

080018e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	4603      	mov	r3, r0
 80018f0:	6039      	str	r1, [r7, #0]
 80018f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	db0a      	blt.n	8001912 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	b2da      	uxtb	r2, r3
 8001900:	490c      	ldr	r1, [pc, #48]	; (8001934 <__NVIC_SetPriority+0x4c>)
 8001902:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001906:	0112      	lsls	r2, r2, #4
 8001908:	b2d2      	uxtb	r2, r2
 800190a:	440b      	add	r3, r1
 800190c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001910:	e00a      	b.n	8001928 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	b2da      	uxtb	r2, r3
 8001916:	4908      	ldr	r1, [pc, #32]	; (8001938 <__NVIC_SetPriority+0x50>)
 8001918:	79fb      	ldrb	r3, [r7, #7]
 800191a:	f003 030f 	and.w	r3, r3, #15
 800191e:	3b04      	subs	r3, #4
 8001920:	0112      	lsls	r2, r2, #4
 8001922:	b2d2      	uxtb	r2, r2
 8001924:	440b      	add	r3, r1
 8001926:	761a      	strb	r2, [r3, #24]
}
 8001928:	bf00      	nop
 800192a:	370c      	adds	r7, #12
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr
 8001934:	e000e100 	.word	0xe000e100
 8001938:	e000ed00 	.word	0xe000ed00

0800193c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800193c:	b480      	push	{r7}
 800193e:	b089      	sub	sp, #36	; 0x24
 8001940:	af00      	add	r7, sp, #0
 8001942:	60f8      	str	r0, [r7, #12]
 8001944:	60b9      	str	r1, [r7, #8]
 8001946:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	f003 0307 	and.w	r3, r3, #7
 800194e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001950:	69fb      	ldr	r3, [r7, #28]
 8001952:	f1c3 0307 	rsb	r3, r3, #7
 8001956:	2b04      	cmp	r3, #4
 8001958:	bf28      	it	cs
 800195a:	2304      	movcs	r3, #4
 800195c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800195e:	69fb      	ldr	r3, [r7, #28]
 8001960:	3304      	adds	r3, #4
 8001962:	2b06      	cmp	r3, #6
 8001964:	d902      	bls.n	800196c <NVIC_EncodePriority+0x30>
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	3b03      	subs	r3, #3
 800196a:	e000      	b.n	800196e <NVIC_EncodePriority+0x32>
 800196c:	2300      	movs	r3, #0
 800196e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001970:	f04f 32ff 	mov.w	r2, #4294967295
 8001974:	69bb      	ldr	r3, [r7, #24]
 8001976:	fa02 f303 	lsl.w	r3, r2, r3
 800197a:	43da      	mvns	r2, r3
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	401a      	ands	r2, r3
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001984:	f04f 31ff 	mov.w	r1, #4294967295
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	fa01 f303 	lsl.w	r3, r1, r3
 800198e:	43d9      	mvns	r1, r3
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001994:	4313      	orrs	r3, r2
         );
}
 8001996:	4618      	mov	r0, r3
 8001998:	3724      	adds	r7, #36	; 0x24
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
	...

080019a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	3b01      	subs	r3, #1
 80019b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019b4:	d301      	bcc.n	80019ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019b6:	2301      	movs	r3, #1
 80019b8:	e00f      	b.n	80019da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019ba:	4a0a      	ldr	r2, [pc, #40]	; (80019e4 <SysTick_Config+0x40>)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	3b01      	subs	r3, #1
 80019c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019c2:	210f      	movs	r1, #15
 80019c4:	f04f 30ff 	mov.w	r0, #4294967295
 80019c8:	f7ff ff8e 	bl	80018e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019cc:	4b05      	ldr	r3, [pc, #20]	; (80019e4 <SysTick_Config+0x40>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019d2:	4b04      	ldr	r3, [pc, #16]	; (80019e4 <SysTick_Config+0x40>)
 80019d4:	2207      	movs	r2, #7
 80019d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019d8:	2300      	movs	r3, #0
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3708      	adds	r7, #8
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	e000e010 	.word	0xe000e010

080019e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019f0:	6878      	ldr	r0, [r7, #4]
 80019f2:	f7ff ff29 	bl	8001848 <__NVIC_SetPriorityGrouping>
}
 80019f6:	bf00      	nop
 80019f8:	3708      	adds	r7, #8
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}

080019fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019fe:	b580      	push	{r7, lr}
 8001a00:	b086      	sub	sp, #24
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	4603      	mov	r3, r0
 8001a06:	60b9      	str	r1, [r7, #8]
 8001a08:	607a      	str	r2, [r7, #4]
 8001a0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a10:	f7ff ff3e 	bl	8001890 <__NVIC_GetPriorityGrouping>
 8001a14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a16:	687a      	ldr	r2, [r7, #4]
 8001a18:	68b9      	ldr	r1, [r7, #8]
 8001a1a:	6978      	ldr	r0, [r7, #20]
 8001a1c:	f7ff ff8e 	bl	800193c <NVIC_EncodePriority>
 8001a20:	4602      	mov	r2, r0
 8001a22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a26:	4611      	mov	r1, r2
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f7ff ff5d 	bl	80018e8 <__NVIC_SetPriority>
}
 8001a2e:	bf00      	nop
 8001a30:	3718      	adds	r7, #24
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}

08001a36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a36:	b580      	push	{r7, lr}
 8001a38:	b082      	sub	sp, #8
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a44:	4618      	mov	r0, r3
 8001a46:	f7ff ff31 	bl	80018ac <__NVIC_EnableIRQ>
}
 8001a4a:	bf00      	nop
 8001a4c:	3708      	adds	r7, #8
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}

08001a52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a52:	b580      	push	{r7, lr}
 8001a54:	b082      	sub	sp, #8
 8001a56:	af00      	add	r7, sp, #0
 8001a58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a5a:	6878      	ldr	r0, [r7, #4]
 8001a5c:	f7ff ffa2 	bl	80019a4 <SysTick_Config>
 8001a60:	4603      	mov	r3, r0
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	3708      	adds	r7, #8
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
	...

08001a6c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b086      	sub	sp, #24
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001a74:	2300      	movs	r3, #0
 8001a76:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001a78:	f7ff fb82 	bl	8001180 <HAL_GetTick>
 8001a7c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d101      	bne.n	8001a88 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001a84:	2301      	movs	r3, #1
 8001a86:	e099      	b.n	8001bbc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2202      	movs	r2, #2
 8001a8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2200      	movs	r2, #0
 8001a94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f022 0201 	bic.w	r2, r2, #1
 8001aa6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001aa8:	e00f      	b.n	8001aca <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001aaa:	f7ff fb69 	bl	8001180 <HAL_GetTick>
 8001aae:	4602      	mov	r2, r0
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	1ad3      	subs	r3, r2, r3
 8001ab4:	2b05      	cmp	r3, #5
 8001ab6:	d908      	bls.n	8001aca <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2220      	movs	r2, #32
 8001abc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2203      	movs	r2, #3
 8001ac2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001ac6:	2303      	movs	r3, #3
 8001ac8:	e078      	b.n	8001bbc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f003 0301 	and.w	r3, r3, #1
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d1e8      	bne.n	8001aaa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001ae0:	697a      	ldr	r2, [r7, #20]
 8001ae2:	4b38      	ldr	r3, [pc, #224]	; (8001bc4 <HAL_DMA_Init+0x158>)
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	685a      	ldr	r2, [r3, #4]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001af6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	691b      	ldr	r3, [r3, #16]
 8001afc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b02:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	699b      	ldr	r3, [r3, #24]
 8001b08:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b0e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6a1b      	ldr	r3, [r3, #32]
 8001b14:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b16:	697a      	ldr	r2, [r7, #20]
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b20:	2b04      	cmp	r3, #4
 8001b22:	d107      	bne.n	8001b34 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	697a      	ldr	r2, [r7, #20]
 8001b30:	4313      	orrs	r3, r2
 8001b32:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	697a      	ldr	r2, [r7, #20]
 8001b3a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	695b      	ldr	r3, [r3, #20]
 8001b42:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	f023 0307 	bic.w	r3, r3, #7
 8001b4a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b50:	697a      	ldr	r2, [r7, #20]
 8001b52:	4313      	orrs	r3, r2
 8001b54:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b5a:	2b04      	cmp	r3, #4
 8001b5c:	d117      	bne.n	8001b8e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b62:	697a      	ldr	r2, [r7, #20]
 8001b64:	4313      	orrs	r3, r2
 8001b66:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d00e      	beq.n	8001b8e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001b70:	6878      	ldr	r0, [r7, #4]
 8001b72:	f000 fa7b 	bl	800206c <DMA_CheckFifoParam>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d008      	beq.n	8001b8e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2240      	movs	r2, #64	; 0x40
 8001b80:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2201      	movs	r2, #1
 8001b86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e016      	b.n	8001bbc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	697a      	ldr	r2, [r7, #20]
 8001b94:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001b96:	6878      	ldr	r0, [r7, #4]
 8001b98:	f000 fa32 	bl	8002000 <DMA_CalcBaseAndBitshift>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ba4:	223f      	movs	r2, #63	; 0x3f
 8001ba6:	409a      	lsls	r2, r3
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2200      	movs	r2, #0
 8001bb0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001bba:	2300      	movs	r3, #0
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	3718      	adds	r7, #24
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	e010803f 	.word	0xe010803f

08001bc8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b084      	sub	sp, #16
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bd4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001bd6:	f7ff fad3 	bl	8001180 <HAL_GetTick>
 8001bda:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001be2:	b2db      	uxtb	r3, r3
 8001be4:	2b02      	cmp	r3, #2
 8001be6:	d008      	beq.n	8001bfa <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2280      	movs	r2, #128	; 0x80
 8001bec:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e052      	b.n	8001ca0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f022 0216 	bic.w	r2, r2, #22
 8001c08:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	695a      	ldr	r2, [r3, #20]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c18:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d103      	bne.n	8001c2a <HAL_DMA_Abort+0x62>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d007      	beq.n	8001c3a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f022 0208 	bic.w	r2, r2, #8
 8001c38:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f022 0201 	bic.w	r2, r2, #1
 8001c48:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c4a:	e013      	b.n	8001c74 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c4c:	f7ff fa98 	bl	8001180 <HAL_GetTick>
 8001c50:	4602      	mov	r2, r0
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	1ad3      	subs	r3, r2, r3
 8001c56:	2b05      	cmp	r3, #5
 8001c58:	d90c      	bls.n	8001c74 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2220      	movs	r2, #32
 8001c5e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2203      	movs	r2, #3
 8001c64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8001c70:	2303      	movs	r3, #3
 8001c72:	e015      	b.n	8001ca0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f003 0301 	and.w	r3, r3, #1
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d1e4      	bne.n	8001c4c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c86:	223f      	movs	r2, #63	; 0x3f
 8001c88:	409a      	lsls	r2, r3
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2201      	movs	r2, #1
 8001c92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2200      	movs	r2, #0
 8001c9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8001c9e:	2300      	movs	r3, #0
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	3710      	adds	r7, #16
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}

08001ca8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b083      	sub	sp, #12
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001cb6:	b2db      	uxtb	r3, r3
 8001cb8:	2b02      	cmp	r3, #2
 8001cba:	d004      	beq.n	8001cc6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2280      	movs	r2, #128	; 0x80
 8001cc0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e00c      	b.n	8001ce0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2205      	movs	r2, #5
 8001cca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f022 0201 	bic.w	r2, r2, #1
 8001cdc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001cde:	2300      	movs	r3, #0
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	370c      	adds	r7, #12
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr

08001cec <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b086      	sub	sp, #24
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8001cf8:	4b8e      	ldr	r3, [pc, #568]	; (8001f34 <HAL_DMA_IRQHandler+0x248>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a8e      	ldr	r2, [pc, #568]	; (8001f38 <HAL_DMA_IRQHandler+0x24c>)
 8001cfe:	fba2 2303 	umull	r2, r3, r2, r3
 8001d02:	0a9b      	lsrs	r3, r3, #10
 8001d04:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d0a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d16:	2208      	movs	r2, #8
 8001d18:	409a      	lsls	r2, r3
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d01a      	beq.n	8001d58 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f003 0304 	and.w	r3, r3, #4
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d013      	beq.n	8001d58 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f022 0204 	bic.w	r2, r2, #4
 8001d3e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d44:	2208      	movs	r2, #8
 8001d46:	409a      	lsls	r2, r3
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d50:	f043 0201 	orr.w	r2, r3, #1
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	409a      	lsls	r2, r3
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	4013      	ands	r3, r2
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d012      	beq.n	8001d8e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	695b      	ldr	r3, [r3, #20]
 8001d6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d00b      	beq.n	8001d8e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	409a      	lsls	r2, r3
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d86:	f043 0202 	orr.w	r2, r3, #2
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d92:	2204      	movs	r2, #4
 8001d94:	409a      	lsls	r2, r3
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	4013      	ands	r3, r2
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d012      	beq.n	8001dc4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f003 0302 	and.w	r3, r3, #2
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d00b      	beq.n	8001dc4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001db0:	2204      	movs	r2, #4
 8001db2:	409a      	lsls	r2, r3
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dbc:	f043 0204 	orr.w	r2, r3, #4
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dc8:	2210      	movs	r2, #16
 8001dca:	409a      	lsls	r2, r3
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	4013      	ands	r3, r2
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d043      	beq.n	8001e5c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 0308 	and.w	r3, r3, #8
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d03c      	beq.n	8001e5c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001de6:	2210      	movs	r2, #16
 8001de8:	409a      	lsls	r2, r3
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d018      	beq.n	8001e2e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d108      	bne.n	8001e1c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d024      	beq.n	8001e5c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	4798      	blx	r3
 8001e1a:	e01f      	b.n	8001e5c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d01b      	beq.n	8001e5c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e28:	6878      	ldr	r0, [r7, #4]
 8001e2a:	4798      	blx	r3
 8001e2c:	e016      	b.n	8001e5c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d107      	bne.n	8001e4c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f022 0208 	bic.w	r2, r2, #8
 8001e4a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d003      	beq.n	8001e5c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e58:	6878      	ldr	r0, [r7, #4]
 8001e5a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e60:	2220      	movs	r2, #32
 8001e62:	409a      	lsls	r2, r3
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	4013      	ands	r3, r2
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	f000 808f 	beq.w	8001f8c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f003 0310 	and.w	r3, r3, #16
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	f000 8087 	beq.w	8001f8c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e82:	2220      	movs	r2, #32
 8001e84:	409a      	lsls	r2, r3
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	2b05      	cmp	r3, #5
 8001e94:	d136      	bne.n	8001f04 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f022 0216 	bic.w	r2, r2, #22
 8001ea4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	695a      	ldr	r2, [r3, #20]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001eb4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d103      	bne.n	8001ec6 <HAL_DMA_IRQHandler+0x1da>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d007      	beq.n	8001ed6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f022 0208 	bic.w	r2, r2, #8
 8001ed4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eda:	223f      	movs	r2, #63	; 0x3f
 8001edc:	409a      	lsls	r2, r3
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2200      	movs	r2, #0
 8001eee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d07e      	beq.n	8001ff8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	4798      	blx	r3
        }
        return;
 8001f02:	e079      	b.n	8001ff8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d01d      	beq.n	8001f4e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d10d      	bne.n	8001f3c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d031      	beq.n	8001f8c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f2c:	6878      	ldr	r0, [r7, #4]
 8001f2e:	4798      	blx	r3
 8001f30:	e02c      	b.n	8001f8c <HAL_DMA_IRQHandler+0x2a0>
 8001f32:	bf00      	nop
 8001f34:	20000000 	.word	0x20000000
 8001f38:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d023      	beq.n	8001f8c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f48:	6878      	ldr	r0, [r7, #4]
 8001f4a:	4798      	blx	r3
 8001f4c:	e01e      	b.n	8001f8c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d10f      	bne.n	8001f7c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f022 0210 	bic.w	r2, r2, #16
 8001f6a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2201      	movs	r2, #1
 8001f70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2200      	movs	r2, #0
 8001f78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d003      	beq.n	8001f8c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f88:	6878      	ldr	r0, [r7, #4]
 8001f8a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d032      	beq.n	8001ffa <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f98:	f003 0301 	and.w	r3, r3, #1
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d022      	beq.n	8001fe6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2205      	movs	r2, #5
 8001fa4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f022 0201 	bic.w	r2, r2, #1
 8001fb6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	3301      	adds	r3, #1
 8001fbc:	60bb      	str	r3, [r7, #8]
 8001fbe:	697a      	ldr	r2, [r7, #20]
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	d307      	bcc.n	8001fd4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 0301 	and.w	r3, r3, #1
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d1f2      	bne.n	8001fb8 <HAL_DMA_IRQHandler+0x2cc>
 8001fd2:	e000      	b.n	8001fd6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001fd4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2201      	movs	r2, #1
 8001fda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d005      	beq.n	8001ffa <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	4798      	blx	r3
 8001ff6:	e000      	b.n	8001ffa <HAL_DMA_IRQHandler+0x30e>
        return;
 8001ff8:	bf00      	nop
    }
  }
}
 8001ffa:	3718      	adds	r7, #24
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}

08002000 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002000:	b480      	push	{r7}
 8002002:	b085      	sub	sp, #20
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	b2db      	uxtb	r3, r3
 800200e:	3b10      	subs	r3, #16
 8002010:	4a13      	ldr	r2, [pc, #76]	; (8002060 <DMA_CalcBaseAndBitshift+0x60>)
 8002012:	fba2 2303 	umull	r2, r3, r2, r3
 8002016:	091b      	lsrs	r3, r3, #4
 8002018:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800201a:	4a12      	ldr	r2, [pc, #72]	; (8002064 <DMA_CalcBaseAndBitshift+0x64>)
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	4413      	add	r3, r2
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	461a      	mov	r2, r3
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	2b03      	cmp	r3, #3
 800202c:	d908      	bls.n	8002040 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	461a      	mov	r2, r3
 8002034:	4b0c      	ldr	r3, [pc, #48]	; (8002068 <DMA_CalcBaseAndBitshift+0x68>)
 8002036:	4013      	ands	r3, r2
 8002038:	1d1a      	adds	r2, r3, #4
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	659a      	str	r2, [r3, #88]	; 0x58
 800203e:	e006      	b.n	800204e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	461a      	mov	r2, r3
 8002046:	4b08      	ldr	r3, [pc, #32]	; (8002068 <DMA_CalcBaseAndBitshift+0x68>)
 8002048:	4013      	ands	r3, r2
 800204a:	687a      	ldr	r2, [r7, #4]
 800204c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002052:	4618      	mov	r0, r3
 8002054:	3714      	adds	r7, #20
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr
 800205e:	bf00      	nop
 8002060:	aaaaaaab 	.word	0xaaaaaaab
 8002064:	08005730 	.word	0x08005730
 8002068:	fffffc00 	.word	0xfffffc00

0800206c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800206c:	b480      	push	{r7}
 800206e:	b085      	sub	sp, #20
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002074:	2300      	movs	r3, #0
 8002076:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800207c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	699b      	ldr	r3, [r3, #24]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d11f      	bne.n	80020c6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	2b03      	cmp	r3, #3
 800208a:	d856      	bhi.n	800213a <DMA_CheckFifoParam+0xce>
 800208c:	a201      	add	r2, pc, #4	; (adr r2, 8002094 <DMA_CheckFifoParam+0x28>)
 800208e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002092:	bf00      	nop
 8002094:	080020a5 	.word	0x080020a5
 8002098:	080020b7 	.word	0x080020b7
 800209c:	080020a5 	.word	0x080020a5
 80020a0:	0800213b 	.word	0x0800213b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d046      	beq.n	800213e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020b4:	e043      	b.n	800213e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ba:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80020be:	d140      	bne.n	8002142 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80020c0:	2301      	movs	r3, #1
 80020c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020c4:	e03d      	b.n	8002142 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	699b      	ldr	r3, [r3, #24]
 80020ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80020ce:	d121      	bne.n	8002114 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	2b03      	cmp	r3, #3
 80020d4:	d837      	bhi.n	8002146 <DMA_CheckFifoParam+0xda>
 80020d6:	a201      	add	r2, pc, #4	; (adr r2, 80020dc <DMA_CheckFifoParam+0x70>)
 80020d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020dc:	080020ed 	.word	0x080020ed
 80020e0:	080020f3 	.word	0x080020f3
 80020e4:	080020ed 	.word	0x080020ed
 80020e8:	08002105 	.word	0x08002105
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80020ec:	2301      	movs	r3, #1
 80020ee:	73fb      	strb	r3, [r7, #15]
      break;
 80020f0:	e030      	b.n	8002154 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d025      	beq.n	800214a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002102:	e022      	b.n	800214a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002108:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800210c:	d11f      	bne.n	800214e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002112:	e01c      	b.n	800214e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	2b02      	cmp	r3, #2
 8002118:	d903      	bls.n	8002122 <DMA_CheckFifoParam+0xb6>
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	2b03      	cmp	r3, #3
 800211e:	d003      	beq.n	8002128 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002120:	e018      	b.n	8002154 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	73fb      	strb	r3, [r7, #15]
      break;
 8002126:	e015      	b.n	8002154 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800212c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002130:	2b00      	cmp	r3, #0
 8002132:	d00e      	beq.n	8002152 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	73fb      	strb	r3, [r7, #15]
      break;
 8002138:	e00b      	b.n	8002152 <DMA_CheckFifoParam+0xe6>
      break;
 800213a:	bf00      	nop
 800213c:	e00a      	b.n	8002154 <DMA_CheckFifoParam+0xe8>
      break;
 800213e:	bf00      	nop
 8002140:	e008      	b.n	8002154 <DMA_CheckFifoParam+0xe8>
      break;
 8002142:	bf00      	nop
 8002144:	e006      	b.n	8002154 <DMA_CheckFifoParam+0xe8>
      break;
 8002146:	bf00      	nop
 8002148:	e004      	b.n	8002154 <DMA_CheckFifoParam+0xe8>
      break;
 800214a:	bf00      	nop
 800214c:	e002      	b.n	8002154 <DMA_CheckFifoParam+0xe8>
      break;   
 800214e:	bf00      	nop
 8002150:	e000      	b.n	8002154 <DMA_CheckFifoParam+0xe8>
      break;
 8002152:	bf00      	nop
    }
  } 
  
  return status; 
 8002154:	7bfb      	ldrb	r3, [r7, #15]
}
 8002156:	4618      	mov	r0, r3
 8002158:	3714      	adds	r7, #20
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr
 8002162:	bf00      	nop

08002164 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b084      	sub	sp, #16
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d101      	bne.n	8002176 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e06a      	b.n	800224c <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800217c:	2b00      	cmp	r3, #0
 800217e:	d106      	bne.n	800218e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2223      	movs	r2, #35	; 0x23
 8002184:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002188:	6878      	ldr	r0, [r7, #4]
 800218a:	f7fe fd27 	bl	8000bdc <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800218e:	4b31      	ldr	r3, [pc, #196]	; (8002254 <HAL_ETH_Init+0xf0>)
 8002190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002192:	4a30      	ldr	r2, [pc, #192]	; (8002254 <HAL_ETH_Init+0xf0>)
 8002194:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002198:	6453      	str	r3, [r2, #68]	; 0x44
 800219a:	4b2e      	ldr	r3, [pc, #184]	; (8002254 <HAL_ETH_Init+0xf0>)
 800219c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800219e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021a2:	60bb      	str	r3, [r7, #8]
 80021a4:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80021a6:	4b2c      	ldr	r3, [pc, #176]	; (8002258 <HAL_ETH_Init+0xf4>)
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	4a2b      	ldr	r2, [pc, #172]	; (8002258 <HAL_ETH_Init+0xf4>)
 80021ac:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80021b0:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80021b2:	4b29      	ldr	r3, [pc, #164]	; (8002258 <HAL_ETH_Init+0xf4>)
 80021b4:	685a      	ldr	r2, [r3, #4]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	4927      	ldr	r1, [pc, #156]	; (8002258 <HAL_ETH_Init+0xf4>)
 80021bc:	4313      	orrs	r3, r2
 80021be:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80021c0:	4b25      	ldr	r3, [pc, #148]	; (8002258 <HAL_ETH_Init+0xf4>)
 80021c2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	687a      	ldr	r2, [r7, #4]
 80021d0:	6812      	ldr	r2, [r2, #0]
 80021d2:	f043 0301 	orr.w	r3, r3, #1
 80021d6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80021da:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80021dc:	f7fe ffd0 	bl	8001180 <HAL_GetTick>
 80021e0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80021e2:	e011      	b.n	8002208 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80021e4:	f7fe ffcc 	bl	8001180 <HAL_GetTick>
 80021e8:	4602      	mov	r2, r0
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80021f2:	d909      	bls.n	8002208 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2204      	movs	r2, #4
 80021f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	22e0      	movs	r2, #224	; 0xe0
 8002200:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	e021      	b.n	800224c <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f003 0301 	and.w	r3, r3, #1
 8002216:	2b00      	cmp	r3, #0
 8002218:	d1e4      	bne.n	80021e4 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	f000 f958 	bl	80024d0 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002220:	6878      	ldr	r0, [r7, #4]
 8002222:	f000 f9ff 	bl	8002624 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	f000 fa55 	bl	80026d6 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	461a      	mov	r2, r3
 8002232:	2100      	movs	r1, #0
 8002234:	6878      	ldr	r0, [r7, #4]
 8002236:	f000 f9bd 	bl	80025b4 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2200      	movs	r2, #0
 800223e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2210      	movs	r2, #16
 8002246:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800224a:	2300      	movs	r3, #0
}
 800224c:	4618      	mov	r0, r3
 800224e:	3710      	adds	r7, #16
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}
 8002254:	40023800 	.word	0x40023800
 8002258:	40013800 	.word	0x40013800

0800225c <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b084      	sub	sp, #16
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800226e:	68fa      	ldr	r2, [r7, #12]
 8002270:	4b51      	ldr	r3, [pc, #324]	; (80023b8 <ETH_SetMACConfig+0x15c>)
 8002272:	4013      	ands	r3, r2
 8002274:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	7c1b      	ldrb	r3, [r3, #16]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d102      	bne.n	8002284 <ETH_SetMACConfig+0x28>
 800227e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002282:	e000      	b.n	8002286 <ETH_SetMACConfig+0x2a>
 8002284:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	7c5b      	ldrb	r3, [r3, #17]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d102      	bne.n	8002294 <ETH_SetMACConfig+0x38>
 800228e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002292:	e000      	b.n	8002296 <ETH_SetMACConfig+0x3a>
 8002294:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002296:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800229c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	7fdb      	ldrb	r3, [r3, #31]
 80022a2:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80022a4:	431a      	orrs	r2, r3
                        macconf->Speed |
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80022aa:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80022ac:	683a      	ldr	r2, [r7, #0]
 80022ae:	7f92      	ldrb	r2, [r2, #30]
 80022b0:	2a00      	cmp	r2, #0
 80022b2:	d102      	bne.n	80022ba <ETH_SetMACConfig+0x5e>
 80022b4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80022b8:	e000      	b.n	80022bc <ETH_SetMACConfig+0x60>
 80022ba:	2200      	movs	r2, #0
                        macconf->Speed |
 80022bc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	7f1b      	ldrb	r3, [r3, #28]
 80022c2:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80022c4:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80022ca:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	791b      	ldrb	r3, [r3, #4]
 80022d0:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80022d2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80022d4:	683a      	ldr	r2, [r7, #0]
 80022d6:	f892 2020 	ldrb.w	r2, [r2, #32]
 80022da:	2a00      	cmp	r2, #0
 80022dc:	d102      	bne.n	80022e4 <ETH_SetMACConfig+0x88>
 80022de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022e2:	e000      	b.n	80022e6 <ETH_SetMACConfig+0x8a>
 80022e4:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80022e6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	7bdb      	ldrb	r3, [r3, #15]
 80022ec:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80022ee:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80022f4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80022fc:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80022fe:	4313      	orrs	r3, r2
 8002300:	68fa      	ldr	r2, [r7, #12]
 8002302:	4313      	orrs	r3, r2
 8002304:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	68fa      	ldr	r2, [r7, #12]
 800230c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002316:	2001      	movs	r0, #1
 8002318:	f7fe ff3e 	bl	8001198 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	68fa      	ldr	r2, [r7, #12]
 8002322:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	699b      	ldr	r3, [r3, #24]
 800232a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800232c:	68fa      	ldr	r2, [r7, #12]
 800232e:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002332:	4013      	ands	r3, r2
 8002334:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800233a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800233c:	683a      	ldr	r2, [r7, #0]
 800233e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002342:	2a00      	cmp	r2, #0
 8002344:	d101      	bne.n	800234a <ETH_SetMACConfig+0xee>
 8002346:	2280      	movs	r2, #128	; 0x80
 8002348:	e000      	b.n	800234c <ETH_SetMACConfig+0xf0>
 800234a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800234c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002352:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002354:	683a      	ldr	r2, [r7, #0]
 8002356:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 800235a:	2a01      	cmp	r2, #1
 800235c:	d101      	bne.n	8002362 <ETH_SetMACConfig+0x106>
 800235e:	2208      	movs	r2, #8
 8002360:	e000      	b.n	8002364 <ETH_SetMACConfig+0x108>
 8002362:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002364:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002366:	683a      	ldr	r2, [r7, #0]
 8002368:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 800236c:	2a01      	cmp	r2, #1
 800236e:	d101      	bne.n	8002374 <ETH_SetMACConfig+0x118>
 8002370:	2204      	movs	r2, #4
 8002372:	e000      	b.n	8002376 <ETH_SetMACConfig+0x11a>
 8002374:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002376:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002378:	683a      	ldr	r2, [r7, #0]
 800237a:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 800237e:	2a01      	cmp	r2, #1
 8002380:	d101      	bne.n	8002386 <ETH_SetMACConfig+0x12a>
 8002382:	2202      	movs	r2, #2
 8002384:	e000      	b.n	8002388 <ETH_SetMACConfig+0x12c>
 8002386:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002388:	4313      	orrs	r3, r2
 800238a:	68fa      	ldr	r2, [r7, #12]
 800238c:	4313      	orrs	r3, r2
 800238e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	68fa      	ldr	r2, [r7, #12]
 8002396:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	699b      	ldr	r3, [r3, #24]
 800239e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80023a0:	2001      	movs	r0, #1
 80023a2:	f7fe fef9 	bl	8001198 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	68fa      	ldr	r2, [r7, #12]
 80023ac:	619a      	str	r2, [r3, #24]
}
 80023ae:	bf00      	nop
 80023b0:	3710      	adds	r7, #16
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	ff20810f 	.word	0xff20810f

080023bc <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b084      	sub	sp, #16
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
 80023c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023ce:	699b      	ldr	r3, [r3, #24]
 80023d0:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80023d2:	68fa      	ldr	r2, [r7, #12]
 80023d4:	4b3d      	ldr	r3, [pc, #244]	; (80024cc <ETH_SetDMAConfig+0x110>)
 80023d6:	4013      	ands	r3, r2
 80023d8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	7b1b      	ldrb	r3, [r3, #12]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d102      	bne.n	80023e8 <ETH_SetDMAConfig+0x2c>
 80023e2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80023e6:	e000      	b.n	80023ea <ETH_SetDMAConfig+0x2e>
 80023e8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	7b5b      	ldrb	r3, [r3, #13]
 80023ee:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80023f0:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80023f2:	683a      	ldr	r2, [r7, #0]
 80023f4:	7f52      	ldrb	r2, [r2, #29]
 80023f6:	2a00      	cmp	r2, #0
 80023f8:	d102      	bne.n	8002400 <ETH_SetDMAConfig+0x44>
 80023fa:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80023fe:	e000      	b.n	8002402 <ETH_SetDMAConfig+0x46>
 8002400:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002402:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	7b9b      	ldrb	r3, [r3, #14]
 8002408:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800240a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002410:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	7f1b      	ldrb	r3, [r3, #28]
 8002416:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002418:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	7f9b      	ldrb	r3, [r3, #30]
 800241e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002420:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002426:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800242e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002430:	4313      	orrs	r3, r2
 8002432:	68fa      	ldr	r2, [r7, #12]
 8002434:	4313      	orrs	r3, r2
 8002436:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002440:	461a      	mov	r2, r3
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800244e:	699b      	ldr	r3, [r3, #24]
 8002450:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002452:	2001      	movs	r0, #1
 8002454:	f7fe fea0 	bl	8001198 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002460:	461a      	mov	r2, r3
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	791b      	ldrb	r3, [r3, #4]
 800246a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002470:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002476:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800247c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002484:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002486:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800248c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800248e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002494:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002496:	687a      	ldr	r2, [r7, #4]
 8002498:	6812      	ldr	r2, [r2, #0]
 800249a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800249e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80024a2:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80024b0:	2001      	movs	r0, #1
 80024b2:	f7fe fe71 	bl	8001198 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024be:	461a      	mov	r2, r3
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	6013      	str	r3, [r2, #0]
}
 80024c4:	bf00      	nop
 80024c6:	3710      	adds	r7, #16
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	f8de3f23 	.word	0xf8de3f23

080024d0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b0a6      	sub	sp, #152	; 0x98
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80024d8:	2301      	movs	r3, #1
 80024da:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80024de:	2301      	movs	r3, #1
 80024e0:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80024e4:	2300      	movs	r3, #0
 80024e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80024e8:	2300      	movs	r3, #0
 80024ea:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80024ee:	2301      	movs	r3, #1
 80024f0:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80024f4:	2300      	movs	r3, #0
 80024f6:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80024fa:	2301      	movs	r3, #1
 80024fc:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002500:	2300      	movs	r3, #0
 8002502:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002506:	2300      	movs	r3, #0
 8002508:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800250c:	2300      	movs	r3, #0
 800250e:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002510:	2300      	movs	r3, #0
 8002512:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002516:	2300      	movs	r3, #0
 8002518:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800251a:	2300      	movs	r3, #0
 800251c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002520:	2300      	movs	r3, #0
 8002522:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002526:	2300      	movs	r3, #0
 8002528:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800252c:	2300      	movs	r3, #0
 800252e:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002532:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002536:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002538:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800253c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800253e:	2300      	movs	r3, #0
 8002540:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002544:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002548:	4619      	mov	r1, r3
 800254a:	6878      	ldr	r0, [r7, #4]
 800254c:	f7ff fe86 	bl	800225c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002550:	2301      	movs	r3, #1
 8002552:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002554:	2301      	movs	r3, #1
 8002556:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002558:	2301      	movs	r3, #1
 800255a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800255e:	2301      	movs	r3, #1
 8002560:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002562:	2300      	movs	r3, #0
 8002564:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002566:	2300      	movs	r3, #0
 8002568:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 800256c:	2300      	movs	r3, #0
 800256e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002572:	2300      	movs	r3, #0
 8002574:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002576:	2301      	movs	r3, #1
 8002578:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800257c:	2301      	movs	r3, #1
 800257e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002580:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002584:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002586:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800258a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800258c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002590:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002592:	2301      	movs	r3, #1
 8002594:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002598:	2300      	movs	r3, #0
 800259a:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800259c:	2300      	movs	r3, #0
 800259e:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80025a0:	f107 0308 	add.w	r3, r7, #8
 80025a4:	4619      	mov	r1, r3
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	f7ff ff08 	bl	80023bc <ETH_SetDMAConfig>
}
 80025ac:	bf00      	nop
 80025ae:	3798      	adds	r7, #152	; 0x98
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}

080025b4 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b087      	sub	sp, #28
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	60f8      	str	r0, [r7, #12]
 80025bc:	60b9      	str	r1, [r7, #8]
 80025be:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	3305      	adds	r3, #5
 80025c4:	781b      	ldrb	r3, [r3, #0]
 80025c6:	021b      	lsls	r3, r3, #8
 80025c8:	687a      	ldr	r2, [r7, #4]
 80025ca:	3204      	adds	r2, #4
 80025cc:	7812      	ldrb	r2, [r2, #0]
 80025ce:	4313      	orrs	r3, r2
 80025d0:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80025d2:	68ba      	ldr	r2, [r7, #8]
 80025d4:	4b11      	ldr	r3, [pc, #68]	; (800261c <ETH_MACAddressConfig+0x68>)
 80025d6:	4413      	add	r3, r2
 80025d8:	461a      	mov	r2, r3
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	3303      	adds	r3, #3
 80025e2:	781b      	ldrb	r3, [r3, #0]
 80025e4:	061a      	lsls	r2, r3, #24
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	3302      	adds	r3, #2
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	041b      	lsls	r3, r3, #16
 80025ee:	431a      	orrs	r2, r3
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	3301      	adds	r3, #1
 80025f4:	781b      	ldrb	r3, [r3, #0]
 80025f6:	021b      	lsls	r3, r3, #8
 80025f8:	4313      	orrs	r3, r2
 80025fa:	687a      	ldr	r2, [r7, #4]
 80025fc:	7812      	ldrb	r2, [r2, #0]
 80025fe:	4313      	orrs	r3, r2
 8002600:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002602:	68ba      	ldr	r2, [r7, #8]
 8002604:	4b06      	ldr	r3, [pc, #24]	; (8002620 <ETH_MACAddressConfig+0x6c>)
 8002606:	4413      	add	r3, r2
 8002608:	461a      	mov	r2, r3
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	6013      	str	r3, [r2, #0]
}
 800260e:	bf00      	nop
 8002610:	371c      	adds	r7, #28
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr
 800261a:	bf00      	nop
 800261c:	40028040 	.word	0x40028040
 8002620:	40028044 	.word	0x40028044

08002624 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002624:	b480      	push	{r7}
 8002626:	b085      	sub	sp, #20
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800262c:	2300      	movs	r3, #0
 800262e:	60fb      	str	r3, [r7, #12]
 8002630:	e03e      	b.n	80026b0 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	68d9      	ldr	r1, [r3, #12]
 8002636:	68fa      	ldr	r2, [r7, #12]
 8002638:	4613      	mov	r3, r2
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	4413      	add	r3, r2
 800263e:	00db      	lsls	r3, r3, #3
 8002640:	440b      	add	r3, r1
 8002642:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	2200      	movs	r2, #0
 8002648:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	2200      	movs	r2, #0
 800264e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	2200      	movs	r2, #0
 8002654:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	2200      	movs	r2, #0
 800265a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800265c:	68b9      	ldr	r1, [r7, #8]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	68fa      	ldr	r2, [r7, #12]
 8002662:	3206      	adds	r2, #6
 8002664:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	2b02      	cmp	r3, #2
 8002678:	d80c      	bhi.n	8002694 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	68d9      	ldr	r1, [r3, #12]
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	1c5a      	adds	r2, r3, #1
 8002682:	4613      	mov	r3, r2
 8002684:	009b      	lsls	r3, r3, #2
 8002686:	4413      	add	r3, r2
 8002688:	00db      	lsls	r3, r3, #3
 800268a:	440b      	add	r3, r1
 800268c:	461a      	mov	r2, r3
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	60da      	str	r2, [r3, #12]
 8002692:	e004      	b.n	800269e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	461a      	mov	r2, r3
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	3301      	adds	r3, #1
 80026ae:	60fb      	str	r3, [r7, #12]
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2b03      	cmp	r3, #3
 80026b4:	d9bd      	bls.n	8002632 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2200      	movs	r2, #0
 80026ba:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	68da      	ldr	r2, [r3, #12]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026c8:	611a      	str	r2, [r3, #16]
}
 80026ca:	bf00      	nop
 80026cc:	3714      	adds	r7, #20
 80026ce:	46bd      	mov	sp, r7
 80026d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d4:	4770      	bx	lr

080026d6 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80026d6:	b480      	push	{r7}
 80026d8:	b085      	sub	sp, #20
 80026da:	af00      	add	r7, sp, #0
 80026dc:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80026de:	2300      	movs	r3, #0
 80026e0:	60fb      	str	r3, [r7, #12]
 80026e2:	e046      	b.n	8002772 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6919      	ldr	r1, [r3, #16]
 80026e8:	68fa      	ldr	r2, [r7, #12]
 80026ea:	4613      	mov	r3, r2
 80026ec:	009b      	lsls	r3, r3, #2
 80026ee:	4413      	add	r3, r2
 80026f0:	00db      	lsls	r3, r3, #3
 80026f2:	440b      	add	r3, r1
 80026f4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	2200      	movs	r2, #0
 80026fa:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	2200      	movs	r2, #0
 8002700:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	2200      	movs	r2, #0
 8002706:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	2200      	movs	r2, #0
 800270c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	2200      	movs	r2, #0
 8002712:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	2200      	movs	r2, #0
 8002718:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002720:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8002728:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002736:	68b9      	ldr	r1, [r7, #8]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	68fa      	ldr	r2, [r7, #12]
 800273c:	3212      	adds	r2, #18
 800273e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2b02      	cmp	r3, #2
 8002746:	d80c      	bhi.n	8002762 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6919      	ldr	r1, [r3, #16]
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	1c5a      	adds	r2, r3, #1
 8002750:	4613      	mov	r3, r2
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	4413      	add	r3, r2
 8002756:	00db      	lsls	r3, r3, #3
 8002758:	440b      	add	r3, r1
 800275a:	461a      	mov	r2, r3
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	60da      	str	r2, [r3, #12]
 8002760:	e004      	b.n	800276c <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	691b      	ldr	r3, [r3, #16]
 8002766:	461a      	mov	r2, r3
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	3301      	adds	r3, #1
 8002770:	60fb      	str	r3, [r7, #12]
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	2b03      	cmp	r3, #3
 8002776:	d9b5      	bls.n	80026e4 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2200      	movs	r2, #0
 800277c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2200      	movs	r2, #0
 8002782:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2200      	movs	r2, #0
 8002788:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2200      	movs	r2, #0
 800278e:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2200      	movs	r2, #0
 8002794:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	691a      	ldr	r2, [r3, #16]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027a2:	60da      	str	r2, [r3, #12]
}
 80027a4:	bf00      	nop
 80027a6:	3714      	adds	r7, #20
 80027a8:	46bd      	mov	sp, r7
 80027aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ae:	4770      	bx	lr

080027b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b089      	sub	sp, #36	; 0x24
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
 80027b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80027ba:	2300      	movs	r3, #0
 80027bc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80027be:	2300      	movs	r3, #0
 80027c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80027c2:	2300      	movs	r3, #0
 80027c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80027c6:	2300      	movs	r3, #0
 80027c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80027ca:	2300      	movs	r3, #0
 80027cc:	61fb      	str	r3, [r7, #28]
 80027ce:	e175      	b.n	8002abc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80027d0:	2201      	movs	r2, #1
 80027d2:	69fb      	ldr	r3, [r7, #28]
 80027d4:	fa02 f303 	lsl.w	r3, r2, r3
 80027d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	697a      	ldr	r2, [r7, #20]
 80027e0:	4013      	ands	r3, r2
 80027e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80027e4:	693a      	ldr	r2, [r7, #16]
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	429a      	cmp	r2, r3
 80027ea:	f040 8164 	bne.w	8002ab6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	f003 0303 	and.w	r3, r3, #3
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d005      	beq.n	8002806 <HAL_GPIO_Init+0x56>
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	f003 0303 	and.w	r3, r3, #3
 8002802:	2b02      	cmp	r3, #2
 8002804:	d130      	bne.n	8002868 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800280c:	69fb      	ldr	r3, [r7, #28]
 800280e:	005b      	lsls	r3, r3, #1
 8002810:	2203      	movs	r2, #3
 8002812:	fa02 f303 	lsl.w	r3, r2, r3
 8002816:	43db      	mvns	r3, r3
 8002818:	69ba      	ldr	r2, [r7, #24]
 800281a:	4013      	ands	r3, r2
 800281c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	68da      	ldr	r2, [r3, #12]
 8002822:	69fb      	ldr	r3, [r7, #28]
 8002824:	005b      	lsls	r3, r3, #1
 8002826:	fa02 f303 	lsl.w	r3, r2, r3
 800282a:	69ba      	ldr	r2, [r7, #24]
 800282c:	4313      	orrs	r3, r2
 800282e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	69ba      	ldr	r2, [r7, #24]
 8002834:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800283c:	2201      	movs	r2, #1
 800283e:	69fb      	ldr	r3, [r7, #28]
 8002840:	fa02 f303 	lsl.w	r3, r2, r3
 8002844:	43db      	mvns	r3, r3
 8002846:	69ba      	ldr	r2, [r7, #24]
 8002848:	4013      	ands	r3, r2
 800284a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	091b      	lsrs	r3, r3, #4
 8002852:	f003 0201 	and.w	r2, r3, #1
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	fa02 f303 	lsl.w	r3, r2, r3
 800285c:	69ba      	ldr	r2, [r7, #24]
 800285e:	4313      	orrs	r3, r2
 8002860:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	69ba      	ldr	r2, [r7, #24]
 8002866:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	f003 0303 	and.w	r3, r3, #3
 8002870:	2b03      	cmp	r3, #3
 8002872:	d017      	beq.n	80028a4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	68db      	ldr	r3, [r3, #12]
 8002878:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	005b      	lsls	r3, r3, #1
 800287e:	2203      	movs	r2, #3
 8002880:	fa02 f303 	lsl.w	r3, r2, r3
 8002884:	43db      	mvns	r3, r3
 8002886:	69ba      	ldr	r2, [r7, #24]
 8002888:	4013      	ands	r3, r2
 800288a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	689a      	ldr	r2, [r3, #8]
 8002890:	69fb      	ldr	r3, [r7, #28]
 8002892:	005b      	lsls	r3, r3, #1
 8002894:	fa02 f303 	lsl.w	r3, r2, r3
 8002898:	69ba      	ldr	r2, [r7, #24]
 800289a:	4313      	orrs	r3, r2
 800289c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	69ba      	ldr	r2, [r7, #24]
 80028a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	f003 0303 	and.w	r3, r3, #3
 80028ac:	2b02      	cmp	r3, #2
 80028ae:	d123      	bne.n	80028f8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80028b0:	69fb      	ldr	r3, [r7, #28]
 80028b2:	08da      	lsrs	r2, r3, #3
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	3208      	adds	r2, #8
 80028b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	f003 0307 	and.w	r3, r3, #7
 80028c4:	009b      	lsls	r3, r3, #2
 80028c6:	220f      	movs	r2, #15
 80028c8:	fa02 f303 	lsl.w	r3, r2, r3
 80028cc:	43db      	mvns	r3, r3
 80028ce:	69ba      	ldr	r2, [r7, #24]
 80028d0:	4013      	ands	r3, r2
 80028d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	691a      	ldr	r2, [r3, #16]
 80028d8:	69fb      	ldr	r3, [r7, #28]
 80028da:	f003 0307 	and.w	r3, r3, #7
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	fa02 f303 	lsl.w	r3, r2, r3
 80028e4:	69ba      	ldr	r2, [r7, #24]
 80028e6:	4313      	orrs	r3, r2
 80028e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80028ea:	69fb      	ldr	r3, [r7, #28]
 80028ec:	08da      	lsrs	r2, r3, #3
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	3208      	adds	r2, #8
 80028f2:	69b9      	ldr	r1, [r7, #24]
 80028f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80028fe:	69fb      	ldr	r3, [r7, #28]
 8002900:	005b      	lsls	r3, r3, #1
 8002902:	2203      	movs	r2, #3
 8002904:	fa02 f303 	lsl.w	r3, r2, r3
 8002908:	43db      	mvns	r3, r3
 800290a:	69ba      	ldr	r2, [r7, #24]
 800290c:	4013      	ands	r3, r2
 800290e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	f003 0203 	and.w	r2, r3, #3
 8002918:	69fb      	ldr	r3, [r7, #28]
 800291a:	005b      	lsls	r3, r3, #1
 800291c:	fa02 f303 	lsl.w	r3, r2, r3
 8002920:	69ba      	ldr	r2, [r7, #24]
 8002922:	4313      	orrs	r3, r2
 8002924:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	69ba      	ldr	r2, [r7, #24]
 800292a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002934:	2b00      	cmp	r3, #0
 8002936:	f000 80be 	beq.w	8002ab6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800293a:	4b66      	ldr	r3, [pc, #408]	; (8002ad4 <HAL_GPIO_Init+0x324>)
 800293c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800293e:	4a65      	ldr	r2, [pc, #404]	; (8002ad4 <HAL_GPIO_Init+0x324>)
 8002940:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002944:	6453      	str	r3, [r2, #68]	; 0x44
 8002946:	4b63      	ldr	r3, [pc, #396]	; (8002ad4 <HAL_GPIO_Init+0x324>)
 8002948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800294a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800294e:	60fb      	str	r3, [r7, #12]
 8002950:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002952:	4a61      	ldr	r2, [pc, #388]	; (8002ad8 <HAL_GPIO_Init+0x328>)
 8002954:	69fb      	ldr	r3, [r7, #28]
 8002956:	089b      	lsrs	r3, r3, #2
 8002958:	3302      	adds	r3, #2
 800295a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800295e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002960:	69fb      	ldr	r3, [r7, #28]
 8002962:	f003 0303 	and.w	r3, r3, #3
 8002966:	009b      	lsls	r3, r3, #2
 8002968:	220f      	movs	r2, #15
 800296a:	fa02 f303 	lsl.w	r3, r2, r3
 800296e:	43db      	mvns	r3, r3
 8002970:	69ba      	ldr	r2, [r7, #24]
 8002972:	4013      	ands	r3, r2
 8002974:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	4a58      	ldr	r2, [pc, #352]	; (8002adc <HAL_GPIO_Init+0x32c>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d037      	beq.n	80029ee <HAL_GPIO_Init+0x23e>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	4a57      	ldr	r2, [pc, #348]	; (8002ae0 <HAL_GPIO_Init+0x330>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d031      	beq.n	80029ea <HAL_GPIO_Init+0x23a>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	4a56      	ldr	r2, [pc, #344]	; (8002ae4 <HAL_GPIO_Init+0x334>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d02b      	beq.n	80029e6 <HAL_GPIO_Init+0x236>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	4a55      	ldr	r2, [pc, #340]	; (8002ae8 <HAL_GPIO_Init+0x338>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d025      	beq.n	80029e2 <HAL_GPIO_Init+0x232>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	4a54      	ldr	r2, [pc, #336]	; (8002aec <HAL_GPIO_Init+0x33c>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d01f      	beq.n	80029de <HAL_GPIO_Init+0x22e>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	4a53      	ldr	r2, [pc, #332]	; (8002af0 <HAL_GPIO_Init+0x340>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d019      	beq.n	80029da <HAL_GPIO_Init+0x22a>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	4a52      	ldr	r2, [pc, #328]	; (8002af4 <HAL_GPIO_Init+0x344>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d013      	beq.n	80029d6 <HAL_GPIO_Init+0x226>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	4a51      	ldr	r2, [pc, #324]	; (8002af8 <HAL_GPIO_Init+0x348>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d00d      	beq.n	80029d2 <HAL_GPIO_Init+0x222>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	4a50      	ldr	r2, [pc, #320]	; (8002afc <HAL_GPIO_Init+0x34c>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d007      	beq.n	80029ce <HAL_GPIO_Init+0x21e>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	4a4f      	ldr	r2, [pc, #316]	; (8002b00 <HAL_GPIO_Init+0x350>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d101      	bne.n	80029ca <HAL_GPIO_Init+0x21a>
 80029c6:	2309      	movs	r3, #9
 80029c8:	e012      	b.n	80029f0 <HAL_GPIO_Init+0x240>
 80029ca:	230a      	movs	r3, #10
 80029cc:	e010      	b.n	80029f0 <HAL_GPIO_Init+0x240>
 80029ce:	2308      	movs	r3, #8
 80029d0:	e00e      	b.n	80029f0 <HAL_GPIO_Init+0x240>
 80029d2:	2307      	movs	r3, #7
 80029d4:	e00c      	b.n	80029f0 <HAL_GPIO_Init+0x240>
 80029d6:	2306      	movs	r3, #6
 80029d8:	e00a      	b.n	80029f0 <HAL_GPIO_Init+0x240>
 80029da:	2305      	movs	r3, #5
 80029dc:	e008      	b.n	80029f0 <HAL_GPIO_Init+0x240>
 80029de:	2304      	movs	r3, #4
 80029e0:	e006      	b.n	80029f0 <HAL_GPIO_Init+0x240>
 80029e2:	2303      	movs	r3, #3
 80029e4:	e004      	b.n	80029f0 <HAL_GPIO_Init+0x240>
 80029e6:	2302      	movs	r3, #2
 80029e8:	e002      	b.n	80029f0 <HAL_GPIO_Init+0x240>
 80029ea:	2301      	movs	r3, #1
 80029ec:	e000      	b.n	80029f0 <HAL_GPIO_Init+0x240>
 80029ee:	2300      	movs	r3, #0
 80029f0:	69fa      	ldr	r2, [r7, #28]
 80029f2:	f002 0203 	and.w	r2, r2, #3
 80029f6:	0092      	lsls	r2, r2, #2
 80029f8:	4093      	lsls	r3, r2
 80029fa:	69ba      	ldr	r2, [r7, #24]
 80029fc:	4313      	orrs	r3, r2
 80029fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002a00:	4935      	ldr	r1, [pc, #212]	; (8002ad8 <HAL_GPIO_Init+0x328>)
 8002a02:	69fb      	ldr	r3, [r7, #28]
 8002a04:	089b      	lsrs	r3, r3, #2
 8002a06:	3302      	adds	r3, #2
 8002a08:	69ba      	ldr	r2, [r7, #24]
 8002a0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a0e:	4b3d      	ldr	r3, [pc, #244]	; (8002b04 <HAL_GPIO_Init+0x354>)
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	43db      	mvns	r3, r3
 8002a18:	69ba      	ldr	r2, [r7, #24]
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d003      	beq.n	8002a32 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002a2a:	69ba      	ldr	r2, [r7, #24]
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a32:	4a34      	ldr	r2, [pc, #208]	; (8002b04 <HAL_GPIO_Init+0x354>)
 8002a34:	69bb      	ldr	r3, [r7, #24]
 8002a36:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a38:	4b32      	ldr	r3, [pc, #200]	; (8002b04 <HAL_GPIO_Init+0x354>)
 8002a3a:	68db      	ldr	r3, [r3, #12]
 8002a3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	43db      	mvns	r3, r3
 8002a42:	69ba      	ldr	r2, [r7, #24]
 8002a44:	4013      	ands	r3, r2
 8002a46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d003      	beq.n	8002a5c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002a54:	69ba      	ldr	r2, [r7, #24]
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a5c:	4a29      	ldr	r2, [pc, #164]	; (8002b04 <HAL_GPIO_Init+0x354>)
 8002a5e:	69bb      	ldr	r3, [r7, #24]
 8002a60:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a62:	4b28      	ldr	r3, [pc, #160]	; (8002b04 <HAL_GPIO_Init+0x354>)
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	43db      	mvns	r3, r3
 8002a6c:	69ba      	ldr	r2, [r7, #24]
 8002a6e:	4013      	ands	r3, r2
 8002a70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d003      	beq.n	8002a86 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002a7e:	69ba      	ldr	r2, [r7, #24]
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	4313      	orrs	r3, r2
 8002a84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a86:	4a1f      	ldr	r2, [pc, #124]	; (8002b04 <HAL_GPIO_Init+0x354>)
 8002a88:	69bb      	ldr	r3, [r7, #24]
 8002a8a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a8c:	4b1d      	ldr	r3, [pc, #116]	; (8002b04 <HAL_GPIO_Init+0x354>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	43db      	mvns	r3, r3
 8002a96:	69ba      	ldr	r2, [r7, #24]
 8002a98:	4013      	ands	r3, r2
 8002a9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d003      	beq.n	8002ab0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002aa8:	69ba      	ldr	r2, [r7, #24]
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	4313      	orrs	r3, r2
 8002aae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ab0:	4a14      	ldr	r2, [pc, #80]	; (8002b04 <HAL_GPIO_Init+0x354>)
 8002ab2:	69bb      	ldr	r3, [r7, #24]
 8002ab4:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002ab6:	69fb      	ldr	r3, [r7, #28]
 8002ab8:	3301      	adds	r3, #1
 8002aba:	61fb      	str	r3, [r7, #28]
 8002abc:	69fb      	ldr	r3, [r7, #28]
 8002abe:	2b0f      	cmp	r3, #15
 8002ac0:	f67f ae86 	bls.w	80027d0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002ac4:	bf00      	nop
 8002ac6:	bf00      	nop
 8002ac8:	3724      	adds	r7, #36	; 0x24
 8002aca:	46bd      	mov	sp, r7
 8002acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad0:	4770      	bx	lr
 8002ad2:	bf00      	nop
 8002ad4:	40023800 	.word	0x40023800
 8002ad8:	40013800 	.word	0x40013800
 8002adc:	40020000 	.word	0x40020000
 8002ae0:	40020400 	.word	0x40020400
 8002ae4:	40020800 	.word	0x40020800
 8002ae8:	40020c00 	.word	0x40020c00
 8002aec:	40021000 	.word	0x40021000
 8002af0:	40021400 	.word	0x40021400
 8002af4:	40021800 	.word	0x40021800
 8002af8:	40021c00 	.word	0x40021c00
 8002afc:	40022000 	.word	0x40022000
 8002b00:	40022400 	.word	0x40022400
 8002b04:	40013c00 	.word	0x40013c00

08002b08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b083      	sub	sp, #12
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
 8002b10:	460b      	mov	r3, r1
 8002b12:	807b      	strh	r3, [r7, #2]
 8002b14:	4613      	mov	r3, r2
 8002b16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b18:	787b      	ldrb	r3, [r7, #1]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d003      	beq.n	8002b26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b1e:	887a      	ldrh	r2, [r7, #2]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002b24:	e003      	b.n	8002b2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002b26:	887b      	ldrh	r3, [r7, #2]
 8002b28:	041a      	lsls	r2, r3, #16
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	619a      	str	r2, [r3, #24]
}
 8002b2e:	bf00      	nop
 8002b30:	370c      	adds	r7, #12
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr

08002b3a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002b3a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b3c:	b08f      	sub	sp, #60	; 0x3c
 8002b3e:	af0a      	add	r7, sp, #40	; 0x28
 8002b40:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d101      	bne.n	8002b4c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e116      	b.n	8002d7a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d106      	bne.n	8002b6c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2200      	movs	r2, #0
 8002b62:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002b66:	6878      	ldr	r0, [r7, #4]
 8002b68:	f7fe f98a 	bl	8000e80 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2203      	movs	r2, #3
 8002b70:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d102      	bne.n	8002b86 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2200      	movs	r2, #0
 8002b84:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f002 faf0 	bl	8005170 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	603b      	str	r3, [r7, #0]
 8002b96:	687e      	ldr	r6, [r7, #4]
 8002b98:	466d      	mov	r5, sp
 8002b9a:	f106 0410 	add.w	r4, r6, #16
 8002b9e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ba0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ba2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ba4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ba6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002baa:	e885 0003 	stmia.w	r5, {r0, r1}
 8002bae:	1d33      	adds	r3, r6, #4
 8002bb0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002bb2:	6838      	ldr	r0, [r7, #0]
 8002bb4:	f002 fa84 	bl	80050c0 <USB_CoreInit>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d005      	beq.n	8002bca <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2202      	movs	r2, #2
 8002bc2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e0d7      	b.n	8002d7a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	2100      	movs	r1, #0
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f002 fade 	bl	8005192 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	73fb      	strb	r3, [r7, #15]
 8002bda:	e04a      	b.n	8002c72 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002bdc:	7bfa      	ldrb	r2, [r7, #15]
 8002bde:	6879      	ldr	r1, [r7, #4]
 8002be0:	4613      	mov	r3, r2
 8002be2:	00db      	lsls	r3, r3, #3
 8002be4:	4413      	add	r3, r2
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	440b      	add	r3, r1
 8002bea:	333d      	adds	r3, #61	; 0x3d
 8002bec:	2201      	movs	r2, #1
 8002bee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002bf0:	7bfa      	ldrb	r2, [r7, #15]
 8002bf2:	6879      	ldr	r1, [r7, #4]
 8002bf4:	4613      	mov	r3, r2
 8002bf6:	00db      	lsls	r3, r3, #3
 8002bf8:	4413      	add	r3, r2
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	440b      	add	r3, r1
 8002bfe:	333c      	adds	r3, #60	; 0x3c
 8002c00:	7bfa      	ldrb	r2, [r7, #15]
 8002c02:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002c04:	7bfa      	ldrb	r2, [r7, #15]
 8002c06:	7bfb      	ldrb	r3, [r7, #15]
 8002c08:	b298      	uxth	r0, r3
 8002c0a:	6879      	ldr	r1, [r7, #4]
 8002c0c:	4613      	mov	r3, r2
 8002c0e:	00db      	lsls	r3, r3, #3
 8002c10:	4413      	add	r3, r2
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	440b      	add	r3, r1
 8002c16:	3344      	adds	r3, #68	; 0x44
 8002c18:	4602      	mov	r2, r0
 8002c1a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002c1c:	7bfa      	ldrb	r2, [r7, #15]
 8002c1e:	6879      	ldr	r1, [r7, #4]
 8002c20:	4613      	mov	r3, r2
 8002c22:	00db      	lsls	r3, r3, #3
 8002c24:	4413      	add	r3, r2
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	440b      	add	r3, r1
 8002c2a:	3340      	adds	r3, #64	; 0x40
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002c30:	7bfa      	ldrb	r2, [r7, #15]
 8002c32:	6879      	ldr	r1, [r7, #4]
 8002c34:	4613      	mov	r3, r2
 8002c36:	00db      	lsls	r3, r3, #3
 8002c38:	4413      	add	r3, r2
 8002c3a:	009b      	lsls	r3, r3, #2
 8002c3c:	440b      	add	r3, r1
 8002c3e:	3348      	adds	r3, #72	; 0x48
 8002c40:	2200      	movs	r2, #0
 8002c42:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002c44:	7bfa      	ldrb	r2, [r7, #15]
 8002c46:	6879      	ldr	r1, [r7, #4]
 8002c48:	4613      	mov	r3, r2
 8002c4a:	00db      	lsls	r3, r3, #3
 8002c4c:	4413      	add	r3, r2
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	440b      	add	r3, r1
 8002c52:	334c      	adds	r3, #76	; 0x4c
 8002c54:	2200      	movs	r2, #0
 8002c56:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002c58:	7bfa      	ldrb	r2, [r7, #15]
 8002c5a:	6879      	ldr	r1, [r7, #4]
 8002c5c:	4613      	mov	r3, r2
 8002c5e:	00db      	lsls	r3, r3, #3
 8002c60:	4413      	add	r3, r2
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	440b      	add	r3, r1
 8002c66:	3354      	adds	r3, #84	; 0x54
 8002c68:	2200      	movs	r2, #0
 8002c6a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c6c:	7bfb      	ldrb	r3, [r7, #15]
 8002c6e:	3301      	adds	r3, #1
 8002c70:	73fb      	strb	r3, [r7, #15]
 8002c72:	7bfa      	ldrb	r2, [r7, #15]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	d3af      	bcc.n	8002bdc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	73fb      	strb	r3, [r7, #15]
 8002c80:	e044      	b.n	8002d0c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002c82:	7bfa      	ldrb	r2, [r7, #15]
 8002c84:	6879      	ldr	r1, [r7, #4]
 8002c86:	4613      	mov	r3, r2
 8002c88:	00db      	lsls	r3, r3, #3
 8002c8a:	4413      	add	r3, r2
 8002c8c:	009b      	lsls	r3, r3, #2
 8002c8e:	440b      	add	r3, r1
 8002c90:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002c94:	2200      	movs	r2, #0
 8002c96:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002c98:	7bfa      	ldrb	r2, [r7, #15]
 8002c9a:	6879      	ldr	r1, [r7, #4]
 8002c9c:	4613      	mov	r3, r2
 8002c9e:	00db      	lsls	r3, r3, #3
 8002ca0:	4413      	add	r3, r2
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	440b      	add	r3, r1
 8002ca6:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002caa:	7bfa      	ldrb	r2, [r7, #15]
 8002cac:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002cae:	7bfa      	ldrb	r2, [r7, #15]
 8002cb0:	6879      	ldr	r1, [r7, #4]
 8002cb2:	4613      	mov	r3, r2
 8002cb4:	00db      	lsls	r3, r3, #3
 8002cb6:	4413      	add	r3, r2
 8002cb8:	009b      	lsls	r3, r3, #2
 8002cba:	440b      	add	r3, r1
 8002cbc:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002cc4:	7bfa      	ldrb	r2, [r7, #15]
 8002cc6:	6879      	ldr	r1, [r7, #4]
 8002cc8:	4613      	mov	r3, r2
 8002cca:	00db      	lsls	r3, r3, #3
 8002ccc:	4413      	add	r3, r2
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	440b      	add	r3, r1
 8002cd2:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002cda:	7bfa      	ldrb	r2, [r7, #15]
 8002cdc:	6879      	ldr	r1, [r7, #4]
 8002cde:	4613      	mov	r3, r2
 8002ce0:	00db      	lsls	r3, r3, #3
 8002ce2:	4413      	add	r3, r2
 8002ce4:	009b      	lsls	r3, r3, #2
 8002ce6:	440b      	add	r3, r1
 8002ce8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002cec:	2200      	movs	r2, #0
 8002cee:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002cf0:	7bfa      	ldrb	r2, [r7, #15]
 8002cf2:	6879      	ldr	r1, [r7, #4]
 8002cf4:	4613      	mov	r3, r2
 8002cf6:	00db      	lsls	r3, r3, #3
 8002cf8:	4413      	add	r3, r2
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	440b      	add	r3, r1
 8002cfe:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002d02:	2200      	movs	r2, #0
 8002d04:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d06:	7bfb      	ldrb	r3, [r7, #15]
 8002d08:	3301      	adds	r3, #1
 8002d0a:	73fb      	strb	r3, [r7, #15]
 8002d0c:	7bfa      	ldrb	r2, [r7, #15]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	429a      	cmp	r2, r3
 8002d14:	d3b5      	bcc.n	8002c82 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	603b      	str	r3, [r7, #0]
 8002d1c:	687e      	ldr	r6, [r7, #4]
 8002d1e:	466d      	mov	r5, sp
 8002d20:	f106 0410 	add.w	r4, r6, #16
 8002d24:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d26:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d28:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d2a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d2c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002d30:	e885 0003 	stmia.w	r5, {r0, r1}
 8002d34:	1d33      	adds	r3, r6, #4
 8002d36:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d38:	6838      	ldr	r0, [r7, #0]
 8002d3a:	f002 fa77 	bl	800522c <USB_DevInit>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d005      	beq.n	8002d50 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2202      	movs	r2, #2
 8002d48:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e014      	b.n	8002d7a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2200      	movs	r2, #0
 8002d54:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d102      	bne.n	8002d6e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002d68:	6878      	ldr	r0, [r7, #4]
 8002d6a:	f000 f80b 	bl	8002d84 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4618      	mov	r0, r3
 8002d74:	f002 fc35 	bl	80055e2 <USB_DevDisconnect>

  return HAL_OK;
 8002d78:	2300      	movs	r3, #0
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3714      	adds	r7, #20
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002d84 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b085      	sub	sp, #20
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2201      	movs	r2, #1
 8002d96:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	699b      	ldr	r3, [r3, #24]
 8002da6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002db2:	4b05      	ldr	r3, [pc, #20]	; (8002dc8 <HAL_PCDEx_ActivateLPM+0x44>)
 8002db4:	4313      	orrs	r3, r2
 8002db6:	68fa      	ldr	r2, [r7, #12]
 8002db8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002dba:	2300      	movs	r3, #0
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3714      	adds	r7, #20
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc6:	4770      	bx	lr
 8002dc8:	10000003 	.word	0x10000003

08002dcc <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002dd0:	4b05      	ldr	r3, [pc, #20]	; (8002de8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a04      	ldr	r2, [pc, #16]	; (8002de8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002dd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dda:	6013      	str	r3, [r2, #0]
}
 8002ddc:	bf00      	nop
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr
 8002de6:	bf00      	nop
 8002de8:	40007000 	.word	0x40007000

08002dec <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b082      	sub	sp, #8
 8002df0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002df2:	2300      	movs	r3, #0
 8002df4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002df6:	4b23      	ldr	r3, [pc, #140]	; (8002e84 <HAL_PWREx_EnableOverDrive+0x98>)
 8002df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfa:	4a22      	ldr	r2, [pc, #136]	; (8002e84 <HAL_PWREx_EnableOverDrive+0x98>)
 8002dfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e00:	6413      	str	r3, [r2, #64]	; 0x40
 8002e02:	4b20      	ldr	r3, [pc, #128]	; (8002e84 <HAL_PWREx_EnableOverDrive+0x98>)
 8002e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e0a:	603b      	str	r3, [r7, #0]
 8002e0c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002e0e:	4b1e      	ldr	r3, [pc, #120]	; (8002e88 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a1d      	ldr	r2, [pc, #116]	; (8002e88 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002e14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e18:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e1a:	f7fe f9b1 	bl	8001180 <HAL_GetTick>
 8002e1e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002e20:	e009      	b.n	8002e36 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002e22:	f7fe f9ad 	bl	8001180 <HAL_GetTick>
 8002e26:	4602      	mov	r2, r0
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	1ad3      	subs	r3, r2, r3
 8002e2c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e30:	d901      	bls.n	8002e36 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002e32:	2303      	movs	r3, #3
 8002e34:	e022      	b.n	8002e7c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002e36:	4b14      	ldr	r3, [pc, #80]	; (8002e88 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e42:	d1ee      	bne.n	8002e22 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002e44:	4b10      	ldr	r3, [pc, #64]	; (8002e88 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a0f      	ldr	r2, [pc, #60]	; (8002e88 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002e4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e4e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e50:	f7fe f996 	bl	8001180 <HAL_GetTick>
 8002e54:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002e56:	e009      	b.n	8002e6c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002e58:	f7fe f992 	bl	8001180 <HAL_GetTick>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	1ad3      	subs	r3, r2, r3
 8002e62:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e66:	d901      	bls.n	8002e6c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002e68:	2303      	movs	r3, #3
 8002e6a:	e007      	b.n	8002e7c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002e6c:	4b06      	ldr	r3, [pc, #24]	; (8002e88 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e74:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002e78:	d1ee      	bne.n	8002e58 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002e7a:	2300      	movs	r3, #0
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	3708      	adds	r7, #8
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}
 8002e84:	40023800 	.word	0x40023800
 8002e88:	40007000 	.word	0x40007000

08002e8c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b086      	sub	sp, #24
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002e94:	2300      	movs	r3, #0
 8002e96:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d101      	bne.n	8002ea2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e29b      	b.n	80033da <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 0301 	and.w	r3, r3, #1
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	f000 8087 	beq.w	8002fbe <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002eb0:	4b96      	ldr	r3, [pc, #600]	; (800310c <HAL_RCC_OscConfig+0x280>)
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	f003 030c 	and.w	r3, r3, #12
 8002eb8:	2b04      	cmp	r3, #4
 8002eba:	d00c      	beq.n	8002ed6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ebc:	4b93      	ldr	r3, [pc, #588]	; (800310c <HAL_RCC_OscConfig+0x280>)
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	f003 030c 	and.w	r3, r3, #12
 8002ec4:	2b08      	cmp	r3, #8
 8002ec6:	d112      	bne.n	8002eee <HAL_RCC_OscConfig+0x62>
 8002ec8:	4b90      	ldr	r3, [pc, #576]	; (800310c <HAL_RCC_OscConfig+0x280>)
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ed0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ed4:	d10b      	bne.n	8002eee <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ed6:	4b8d      	ldr	r3, [pc, #564]	; (800310c <HAL_RCC_OscConfig+0x280>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d06c      	beq.n	8002fbc <HAL_RCC_OscConfig+0x130>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d168      	bne.n	8002fbc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	e275      	b.n	80033da <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ef6:	d106      	bne.n	8002f06 <HAL_RCC_OscConfig+0x7a>
 8002ef8:	4b84      	ldr	r3, [pc, #528]	; (800310c <HAL_RCC_OscConfig+0x280>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a83      	ldr	r2, [pc, #524]	; (800310c <HAL_RCC_OscConfig+0x280>)
 8002efe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f02:	6013      	str	r3, [r2, #0]
 8002f04:	e02e      	b.n	8002f64 <HAL_RCC_OscConfig+0xd8>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d10c      	bne.n	8002f28 <HAL_RCC_OscConfig+0x9c>
 8002f0e:	4b7f      	ldr	r3, [pc, #508]	; (800310c <HAL_RCC_OscConfig+0x280>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a7e      	ldr	r2, [pc, #504]	; (800310c <HAL_RCC_OscConfig+0x280>)
 8002f14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f18:	6013      	str	r3, [r2, #0]
 8002f1a:	4b7c      	ldr	r3, [pc, #496]	; (800310c <HAL_RCC_OscConfig+0x280>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a7b      	ldr	r2, [pc, #492]	; (800310c <HAL_RCC_OscConfig+0x280>)
 8002f20:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f24:	6013      	str	r3, [r2, #0]
 8002f26:	e01d      	b.n	8002f64 <HAL_RCC_OscConfig+0xd8>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f30:	d10c      	bne.n	8002f4c <HAL_RCC_OscConfig+0xc0>
 8002f32:	4b76      	ldr	r3, [pc, #472]	; (800310c <HAL_RCC_OscConfig+0x280>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a75      	ldr	r2, [pc, #468]	; (800310c <HAL_RCC_OscConfig+0x280>)
 8002f38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f3c:	6013      	str	r3, [r2, #0]
 8002f3e:	4b73      	ldr	r3, [pc, #460]	; (800310c <HAL_RCC_OscConfig+0x280>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a72      	ldr	r2, [pc, #456]	; (800310c <HAL_RCC_OscConfig+0x280>)
 8002f44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f48:	6013      	str	r3, [r2, #0]
 8002f4a:	e00b      	b.n	8002f64 <HAL_RCC_OscConfig+0xd8>
 8002f4c:	4b6f      	ldr	r3, [pc, #444]	; (800310c <HAL_RCC_OscConfig+0x280>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a6e      	ldr	r2, [pc, #440]	; (800310c <HAL_RCC_OscConfig+0x280>)
 8002f52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f56:	6013      	str	r3, [r2, #0]
 8002f58:	4b6c      	ldr	r3, [pc, #432]	; (800310c <HAL_RCC_OscConfig+0x280>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a6b      	ldr	r2, [pc, #428]	; (800310c <HAL_RCC_OscConfig+0x280>)
 8002f5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d013      	beq.n	8002f94 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f6c:	f7fe f908 	bl	8001180 <HAL_GetTick>
 8002f70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f72:	e008      	b.n	8002f86 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f74:	f7fe f904 	bl	8001180 <HAL_GetTick>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	1ad3      	subs	r3, r2, r3
 8002f7e:	2b64      	cmp	r3, #100	; 0x64
 8002f80:	d901      	bls.n	8002f86 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f82:	2303      	movs	r3, #3
 8002f84:	e229      	b.n	80033da <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f86:	4b61      	ldr	r3, [pc, #388]	; (800310c <HAL_RCC_OscConfig+0x280>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d0f0      	beq.n	8002f74 <HAL_RCC_OscConfig+0xe8>
 8002f92:	e014      	b.n	8002fbe <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f94:	f7fe f8f4 	bl	8001180 <HAL_GetTick>
 8002f98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f9a:	e008      	b.n	8002fae <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f9c:	f7fe f8f0 	bl	8001180 <HAL_GetTick>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	2b64      	cmp	r3, #100	; 0x64
 8002fa8:	d901      	bls.n	8002fae <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002faa:	2303      	movs	r3, #3
 8002fac:	e215      	b.n	80033da <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fae:	4b57      	ldr	r3, [pc, #348]	; (800310c <HAL_RCC_OscConfig+0x280>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d1f0      	bne.n	8002f9c <HAL_RCC_OscConfig+0x110>
 8002fba:	e000      	b.n	8002fbe <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 0302 	and.w	r3, r3, #2
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d069      	beq.n	800309e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002fca:	4b50      	ldr	r3, [pc, #320]	; (800310c <HAL_RCC_OscConfig+0x280>)
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	f003 030c 	and.w	r3, r3, #12
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d00b      	beq.n	8002fee <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fd6:	4b4d      	ldr	r3, [pc, #308]	; (800310c <HAL_RCC_OscConfig+0x280>)
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	f003 030c 	and.w	r3, r3, #12
 8002fde:	2b08      	cmp	r3, #8
 8002fe0:	d11c      	bne.n	800301c <HAL_RCC_OscConfig+0x190>
 8002fe2:	4b4a      	ldr	r3, [pc, #296]	; (800310c <HAL_RCC_OscConfig+0x280>)
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d116      	bne.n	800301c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fee:	4b47      	ldr	r3, [pc, #284]	; (800310c <HAL_RCC_OscConfig+0x280>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 0302 	and.w	r3, r3, #2
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d005      	beq.n	8003006 <HAL_RCC_OscConfig+0x17a>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	68db      	ldr	r3, [r3, #12]
 8002ffe:	2b01      	cmp	r3, #1
 8003000:	d001      	beq.n	8003006 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e1e9      	b.n	80033da <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003006:	4b41      	ldr	r3, [pc, #260]	; (800310c <HAL_RCC_OscConfig+0x280>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	691b      	ldr	r3, [r3, #16]
 8003012:	00db      	lsls	r3, r3, #3
 8003014:	493d      	ldr	r1, [pc, #244]	; (800310c <HAL_RCC_OscConfig+0x280>)
 8003016:	4313      	orrs	r3, r2
 8003018:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800301a:	e040      	b.n	800309e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	68db      	ldr	r3, [r3, #12]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d023      	beq.n	800306c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003024:	4b39      	ldr	r3, [pc, #228]	; (800310c <HAL_RCC_OscConfig+0x280>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a38      	ldr	r2, [pc, #224]	; (800310c <HAL_RCC_OscConfig+0x280>)
 800302a:	f043 0301 	orr.w	r3, r3, #1
 800302e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003030:	f7fe f8a6 	bl	8001180 <HAL_GetTick>
 8003034:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003036:	e008      	b.n	800304a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003038:	f7fe f8a2 	bl	8001180 <HAL_GetTick>
 800303c:	4602      	mov	r2, r0
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	1ad3      	subs	r3, r2, r3
 8003042:	2b02      	cmp	r3, #2
 8003044:	d901      	bls.n	800304a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003046:	2303      	movs	r3, #3
 8003048:	e1c7      	b.n	80033da <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800304a:	4b30      	ldr	r3, [pc, #192]	; (800310c <HAL_RCC_OscConfig+0x280>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 0302 	and.w	r3, r3, #2
 8003052:	2b00      	cmp	r3, #0
 8003054:	d0f0      	beq.n	8003038 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003056:	4b2d      	ldr	r3, [pc, #180]	; (800310c <HAL_RCC_OscConfig+0x280>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	691b      	ldr	r3, [r3, #16]
 8003062:	00db      	lsls	r3, r3, #3
 8003064:	4929      	ldr	r1, [pc, #164]	; (800310c <HAL_RCC_OscConfig+0x280>)
 8003066:	4313      	orrs	r3, r2
 8003068:	600b      	str	r3, [r1, #0]
 800306a:	e018      	b.n	800309e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800306c:	4b27      	ldr	r3, [pc, #156]	; (800310c <HAL_RCC_OscConfig+0x280>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a26      	ldr	r2, [pc, #152]	; (800310c <HAL_RCC_OscConfig+0x280>)
 8003072:	f023 0301 	bic.w	r3, r3, #1
 8003076:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003078:	f7fe f882 	bl	8001180 <HAL_GetTick>
 800307c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800307e:	e008      	b.n	8003092 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003080:	f7fe f87e 	bl	8001180 <HAL_GetTick>
 8003084:	4602      	mov	r2, r0
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	1ad3      	subs	r3, r2, r3
 800308a:	2b02      	cmp	r3, #2
 800308c:	d901      	bls.n	8003092 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800308e:	2303      	movs	r3, #3
 8003090:	e1a3      	b.n	80033da <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003092:	4b1e      	ldr	r3, [pc, #120]	; (800310c <HAL_RCC_OscConfig+0x280>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 0302 	and.w	r3, r3, #2
 800309a:	2b00      	cmp	r3, #0
 800309c:	d1f0      	bne.n	8003080 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 0308 	and.w	r3, r3, #8
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d038      	beq.n	800311c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	695b      	ldr	r3, [r3, #20]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d019      	beq.n	80030e6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030b2:	4b16      	ldr	r3, [pc, #88]	; (800310c <HAL_RCC_OscConfig+0x280>)
 80030b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030b6:	4a15      	ldr	r2, [pc, #84]	; (800310c <HAL_RCC_OscConfig+0x280>)
 80030b8:	f043 0301 	orr.w	r3, r3, #1
 80030bc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030be:	f7fe f85f 	bl	8001180 <HAL_GetTick>
 80030c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030c4:	e008      	b.n	80030d8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030c6:	f7fe f85b 	bl	8001180 <HAL_GetTick>
 80030ca:	4602      	mov	r2, r0
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	1ad3      	subs	r3, r2, r3
 80030d0:	2b02      	cmp	r3, #2
 80030d2:	d901      	bls.n	80030d8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80030d4:	2303      	movs	r3, #3
 80030d6:	e180      	b.n	80033da <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030d8:	4b0c      	ldr	r3, [pc, #48]	; (800310c <HAL_RCC_OscConfig+0x280>)
 80030da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030dc:	f003 0302 	and.w	r3, r3, #2
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d0f0      	beq.n	80030c6 <HAL_RCC_OscConfig+0x23a>
 80030e4:	e01a      	b.n	800311c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030e6:	4b09      	ldr	r3, [pc, #36]	; (800310c <HAL_RCC_OscConfig+0x280>)
 80030e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030ea:	4a08      	ldr	r2, [pc, #32]	; (800310c <HAL_RCC_OscConfig+0x280>)
 80030ec:	f023 0301 	bic.w	r3, r3, #1
 80030f0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030f2:	f7fe f845 	bl	8001180 <HAL_GetTick>
 80030f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030f8:	e00a      	b.n	8003110 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030fa:	f7fe f841 	bl	8001180 <HAL_GetTick>
 80030fe:	4602      	mov	r2, r0
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	1ad3      	subs	r3, r2, r3
 8003104:	2b02      	cmp	r3, #2
 8003106:	d903      	bls.n	8003110 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003108:	2303      	movs	r3, #3
 800310a:	e166      	b.n	80033da <HAL_RCC_OscConfig+0x54e>
 800310c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003110:	4b92      	ldr	r3, [pc, #584]	; (800335c <HAL_RCC_OscConfig+0x4d0>)
 8003112:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003114:	f003 0302 	and.w	r3, r3, #2
 8003118:	2b00      	cmp	r3, #0
 800311a:	d1ee      	bne.n	80030fa <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 0304 	and.w	r3, r3, #4
 8003124:	2b00      	cmp	r3, #0
 8003126:	f000 80a4 	beq.w	8003272 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800312a:	4b8c      	ldr	r3, [pc, #560]	; (800335c <HAL_RCC_OscConfig+0x4d0>)
 800312c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003132:	2b00      	cmp	r3, #0
 8003134:	d10d      	bne.n	8003152 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003136:	4b89      	ldr	r3, [pc, #548]	; (800335c <HAL_RCC_OscConfig+0x4d0>)
 8003138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800313a:	4a88      	ldr	r2, [pc, #544]	; (800335c <HAL_RCC_OscConfig+0x4d0>)
 800313c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003140:	6413      	str	r3, [r2, #64]	; 0x40
 8003142:	4b86      	ldr	r3, [pc, #536]	; (800335c <HAL_RCC_OscConfig+0x4d0>)
 8003144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003146:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800314a:	60bb      	str	r3, [r7, #8]
 800314c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800314e:	2301      	movs	r3, #1
 8003150:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003152:	4b83      	ldr	r3, [pc, #524]	; (8003360 <HAL_RCC_OscConfig+0x4d4>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800315a:	2b00      	cmp	r3, #0
 800315c:	d118      	bne.n	8003190 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800315e:	4b80      	ldr	r3, [pc, #512]	; (8003360 <HAL_RCC_OscConfig+0x4d4>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a7f      	ldr	r2, [pc, #508]	; (8003360 <HAL_RCC_OscConfig+0x4d4>)
 8003164:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003168:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800316a:	f7fe f809 	bl	8001180 <HAL_GetTick>
 800316e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003170:	e008      	b.n	8003184 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003172:	f7fe f805 	bl	8001180 <HAL_GetTick>
 8003176:	4602      	mov	r2, r0
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	1ad3      	subs	r3, r2, r3
 800317c:	2b64      	cmp	r3, #100	; 0x64
 800317e:	d901      	bls.n	8003184 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003180:	2303      	movs	r3, #3
 8003182:	e12a      	b.n	80033da <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003184:	4b76      	ldr	r3, [pc, #472]	; (8003360 <HAL_RCC_OscConfig+0x4d4>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800318c:	2b00      	cmp	r3, #0
 800318e:	d0f0      	beq.n	8003172 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	2b01      	cmp	r3, #1
 8003196:	d106      	bne.n	80031a6 <HAL_RCC_OscConfig+0x31a>
 8003198:	4b70      	ldr	r3, [pc, #448]	; (800335c <HAL_RCC_OscConfig+0x4d0>)
 800319a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800319c:	4a6f      	ldr	r2, [pc, #444]	; (800335c <HAL_RCC_OscConfig+0x4d0>)
 800319e:	f043 0301 	orr.w	r3, r3, #1
 80031a2:	6713      	str	r3, [r2, #112]	; 0x70
 80031a4:	e02d      	b.n	8003202 <HAL_RCC_OscConfig+0x376>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d10c      	bne.n	80031c8 <HAL_RCC_OscConfig+0x33c>
 80031ae:	4b6b      	ldr	r3, [pc, #428]	; (800335c <HAL_RCC_OscConfig+0x4d0>)
 80031b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031b2:	4a6a      	ldr	r2, [pc, #424]	; (800335c <HAL_RCC_OscConfig+0x4d0>)
 80031b4:	f023 0301 	bic.w	r3, r3, #1
 80031b8:	6713      	str	r3, [r2, #112]	; 0x70
 80031ba:	4b68      	ldr	r3, [pc, #416]	; (800335c <HAL_RCC_OscConfig+0x4d0>)
 80031bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031be:	4a67      	ldr	r2, [pc, #412]	; (800335c <HAL_RCC_OscConfig+0x4d0>)
 80031c0:	f023 0304 	bic.w	r3, r3, #4
 80031c4:	6713      	str	r3, [r2, #112]	; 0x70
 80031c6:	e01c      	b.n	8003202 <HAL_RCC_OscConfig+0x376>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	2b05      	cmp	r3, #5
 80031ce:	d10c      	bne.n	80031ea <HAL_RCC_OscConfig+0x35e>
 80031d0:	4b62      	ldr	r3, [pc, #392]	; (800335c <HAL_RCC_OscConfig+0x4d0>)
 80031d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031d4:	4a61      	ldr	r2, [pc, #388]	; (800335c <HAL_RCC_OscConfig+0x4d0>)
 80031d6:	f043 0304 	orr.w	r3, r3, #4
 80031da:	6713      	str	r3, [r2, #112]	; 0x70
 80031dc:	4b5f      	ldr	r3, [pc, #380]	; (800335c <HAL_RCC_OscConfig+0x4d0>)
 80031de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031e0:	4a5e      	ldr	r2, [pc, #376]	; (800335c <HAL_RCC_OscConfig+0x4d0>)
 80031e2:	f043 0301 	orr.w	r3, r3, #1
 80031e6:	6713      	str	r3, [r2, #112]	; 0x70
 80031e8:	e00b      	b.n	8003202 <HAL_RCC_OscConfig+0x376>
 80031ea:	4b5c      	ldr	r3, [pc, #368]	; (800335c <HAL_RCC_OscConfig+0x4d0>)
 80031ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031ee:	4a5b      	ldr	r2, [pc, #364]	; (800335c <HAL_RCC_OscConfig+0x4d0>)
 80031f0:	f023 0301 	bic.w	r3, r3, #1
 80031f4:	6713      	str	r3, [r2, #112]	; 0x70
 80031f6:	4b59      	ldr	r3, [pc, #356]	; (800335c <HAL_RCC_OscConfig+0x4d0>)
 80031f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031fa:	4a58      	ldr	r2, [pc, #352]	; (800335c <HAL_RCC_OscConfig+0x4d0>)
 80031fc:	f023 0304 	bic.w	r3, r3, #4
 8003200:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d015      	beq.n	8003236 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800320a:	f7fd ffb9 	bl	8001180 <HAL_GetTick>
 800320e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003210:	e00a      	b.n	8003228 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003212:	f7fd ffb5 	bl	8001180 <HAL_GetTick>
 8003216:	4602      	mov	r2, r0
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	1ad3      	subs	r3, r2, r3
 800321c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003220:	4293      	cmp	r3, r2
 8003222:	d901      	bls.n	8003228 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003224:	2303      	movs	r3, #3
 8003226:	e0d8      	b.n	80033da <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003228:	4b4c      	ldr	r3, [pc, #304]	; (800335c <HAL_RCC_OscConfig+0x4d0>)
 800322a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800322c:	f003 0302 	and.w	r3, r3, #2
 8003230:	2b00      	cmp	r3, #0
 8003232:	d0ee      	beq.n	8003212 <HAL_RCC_OscConfig+0x386>
 8003234:	e014      	b.n	8003260 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003236:	f7fd ffa3 	bl	8001180 <HAL_GetTick>
 800323a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800323c:	e00a      	b.n	8003254 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800323e:	f7fd ff9f 	bl	8001180 <HAL_GetTick>
 8003242:	4602      	mov	r2, r0
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	1ad3      	subs	r3, r2, r3
 8003248:	f241 3288 	movw	r2, #5000	; 0x1388
 800324c:	4293      	cmp	r3, r2
 800324e:	d901      	bls.n	8003254 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003250:	2303      	movs	r3, #3
 8003252:	e0c2      	b.n	80033da <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003254:	4b41      	ldr	r3, [pc, #260]	; (800335c <HAL_RCC_OscConfig+0x4d0>)
 8003256:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003258:	f003 0302 	and.w	r3, r3, #2
 800325c:	2b00      	cmp	r3, #0
 800325e:	d1ee      	bne.n	800323e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003260:	7dfb      	ldrb	r3, [r7, #23]
 8003262:	2b01      	cmp	r3, #1
 8003264:	d105      	bne.n	8003272 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003266:	4b3d      	ldr	r3, [pc, #244]	; (800335c <HAL_RCC_OscConfig+0x4d0>)
 8003268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800326a:	4a3c      	ldr	r2, [pc, #240]	; (800335c <HAL_RCC_OscConfig+0x4d0>)
 800326c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003270:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	699b      	ldr	r3, [r3, #24]
 8003276:	2b00      	cmp	r3, #0
 8003278:	f000 80ae 	beq.w	80033d8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800327c:	4b37      	ldr	r3, [pc, #220]	; (800335c <HAL_RCC_OscConfig+0x4d0>)
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	f003 030c 	and.w	r3, r3, #12
 8003284:	2b08      	cmp	r3, #8
 8003286:	d06d      	beq.n	8003364 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	699b      	ldr	r3, [r3, #24]
 800328c:	2b02      	cmp	r3, #2
 800328e:	d14b      	bne.n	8003328 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003290:	4b32      	ldr	r3, [pc, #200]	; (800335c <HAL_RCC_OscConfig+0x4d0>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a31      	ldr	r2, [pc, #196]	; (800335c <HAL_RCC_OscConfig+0x4d0>)
 8003296:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800329a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800329c:	f7fd ff70 	bl	8001180 <HAL_GetTick>
 80032a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032a2:	e008      	b.n	80032b6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032a4:	f7fd ff6c 	bl	8001180 <HAL_GetTick>
 80032a8:	4602      	mov	r2, r0
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	2b02      	cmp	r3, #2
 80032b0:	d901      	bls.n	80032b6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80032b2:	2303      	movs	r3, #3
 80032b4:	e091      	b.n	80033da <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032b6:	4b29      	ldr	r3, [pc, #164]	; (800335c <HAL_RCC_OscConfig+0x4d0>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d1f0      	bne.n	80032a4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	69da      	ldr	r2, [r3, #28]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6a1b      	ldr	r3, [r3, #32]
 80032ca:	431a      	orrs	r2, r3
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d0:	019b      	lsls	r3, r3, #6
 80032d2:	431a      	orrs	r2, r3
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032d8:	085b      	lsrs	r3, r3, #1
 80032da:	3b01      	subs	r3, #1
 80032dc:	041b      	lsls	r3, r3, #16
 80032de:	431a      	orrs	r2, r3
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032e4:	061b      	lsls	r3, r3, #24
 80032e6:	431a      	orrs	r2, r3
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ec:	071b      	lsls	r3, r3, #28
 80032ee:	491b      	ldr	r1, [pc, #108]	; (800335c <HAL_RCC_OscConfig+0x4d0>)
 80032f0:	4313      	orrs	r3, r2
 80032f2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032f4:	4b19      	ldr	r3, [pc, #100]	; (800335c <HAL_RCC_OscConfig+0x4d0>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a18      	ldr	r2, [pc, #96]	; (800335c <HAL_RCC_OscConfig+0x4d0>)
 80032fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003300:	f7fd ff3e 	bl	8001180 <HAL_GetTick>
 8003304:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003306:	e008      	b.n	800331a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003308:	f7fd ff3a 	bl	8001180 <HAL_GetTick>
 800330c:	4602      	mov	r2, r0
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	1ad3      	subs	r3, r2, r3
 8003312:	2b02      	cmp	r3, #2
 8003314:	d901      	bls.n	800331a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003316:	2303      	movs	r3, #3
 8003318:	e05f      	b.n	80033da <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800331a:	4b10      	ldr	r3, [pc, #64]	; (800335c <HAL_RCC_OscConfig+0x4d0>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003322:	2b00      	cmp	r3, #0
 8003324:	d0f0      	beq.n	8003308 <HAL_RCC_OscConfig+0x47c>
 8003326:	e057      	b.n	80033d8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003328:	4b0c      	ldr	r3, [pc, #48]	; (800335c <HAL_RCC_OscConfig+0x4d0>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a0b      	ldr	r2, [pc, #44]	; (800335c <HAL_RCC_OscConfig+0x4d0>)
 800332e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003332:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003334:	f7fd ff24 	bl	8001180 <HAL_GetTick>
 8003338:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800333a:	e008      	b.n	800334e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800333c:	f7fd ff20 	bl	8001180 <HAL_GetTick>
 8003340:	4602      	mov	r2, r0
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	2b02      	cmp	r3, #2
 8003348:	d901      	bls.n	800334e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800334a:	2303      	movs	r3, #3
 800334c:	e045      	b.n	80033da <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800334e:	4b03      	ldr	r3, [pc, #12]	; (800335c <HAL_RCC_OscConfig+0x4d0>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003356:	2b00      	cmp	r3, #0
 8003358:	d1f0      	bne.n	800333c <HAL_RCC_OscConfig+0x4b0>
 800335a:	e03d      	b.n	80033d8 <HAL_RCC_OscConfig+0x54c>
 800335c:	40023800 	.word	0x40023800
 8003360:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003364:	4b1f      	ldr	r3, [pc, #124]	; (80033e4 <HAL_RCC_OscConfig+0x558>)
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	699b      	ldr	r3, [r3, #24]
 800336e:	2b01      	cmp	r3, #1
 8003370:	d030      	beq.n	80033d4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800337c:	429a      	cmp	r2, r3
 800337e:	d129      	bne.n	80033d4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800338a:	429a      	cmp	r2, r3
 800338c:	d122      	bne.n	80033d4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800338e:	68fa      	ldr	r2, [r7, #12]
 8003390:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003394:	4013      	ands	r3, r2
 8003396:	687a      	ldr	r2, [r7, #4]
 8003398:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800339a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800339c:	4293      	cmp	r3, r2
 800339e:	d119      	bne.n	80033d4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033aa:	085b      	lsrs	r3, r3, #1
 80033ac:	3b01      	subs	r3, #1
 80033ae:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80033b0:	429a      	cmp	r2, r3
 80033b2:	d10f      	bne.n	80033d4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033be:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80033c0:	429a      	cmp	r2, r3
 80033c2:	d107      	bne.n	80033d4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ce:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033d0:	429a      	cmp	r2, r3
 80033d2:	d001      	beq.n	80033d8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	e000      	b.n	80033da <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80033d8:	2300      	movs	r3, #0
}
 80033da:	4618      	mov	r0, r3
 80033dc:	3718      	adds	r7, #24
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	bf00      	nop
 80033e4:	40023800 	.word	0x40023800

080033e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b084      	sub	sp, #16
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
 80033f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80033f2:	2300      	movs	r3, #0
 80033f4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d101      	bne.n	8003400 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	e0d0      	b.n	80035a2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003400:	4b6a      	ldr	r3, [pc, #424]	; (80035ac <HAL_RCC_ClockConfig+0x1c4>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f003 030f 	and.w	r3, r3, #15
 8003408:	683a      	ldr	r2, [r7, #0]
 800340a:	429a      	cmp	r2, r3
 800340c:	d910      	bls.n	8003430 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800340e:	4b67      	ldr	r3, [pc, #412]	; (80035ac <HAL_RCC_ClockConfig+0x1c4>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f023 020f 	bic.w	r2, r3, #15
 8003416:	4965      	ldr	r1, [pc, #404]	; (80035ac <HAL_RCC_ClockConfig+0x1c4>)
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	4313      	orrs	r3, r2
 800341c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800341e:	4b63      	ldr	r3, [pc, #396]	; (80035ac <HAL_RCC_ClockConfig+0x1c4>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 030f 	and.w	r3, r3, #15
 8003426:	683a      	ldr	r2, [r7, #0]
 8003428:	429a      	cmp	r2, r3
 800342a:	d001      	beq.n	8003430 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	e0b8      	b.n	80035a2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 0302 	and.w	r3, r3, #2
 8003438:	2b00      	cmp	r3, #0
 800343a:	d020      	beq.n	800347e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f003 0304 	and.w	r3, r3, #4
 8003444:	2b00      	cmp	r3, #0
 8003446:	d005      	beq.n	8003454 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003448:	4b59      	ldr	r3, [pc, #356]	; (80035b0 <HAL_RCC_ClockConfig+0x1c8>)
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	4a58      	ldr	r2, [pc, #352]	; (80035b0 <HAL_RCC_ClockConfig+0x1c8>)
 800344e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003452:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 0308 	and.w	r3, r3, #8
 800345c:	2b00      	cmp	r3, #0
 800345e:	d005      	beq.n	800346c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003460:	4b53      	ldr	r3, [pc, #332]	; (80035b0 <HAL_RCC_ClockConfig+0x1c8>)
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	4a52      	ldr	r2, [pc, #328]	; (80035b0 <HAL_RCC_ClockConfig+0x1c8>)
 8003466:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800346a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800346c:	4b50      	ldr	r3, [pc, #320]	; (80035b0 <HAL_RCC_ClockConfig+0x1c8>)
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	494d      	ldr	r1, [pc, #308]	; (80035b0 <HAL_RCC_ClockConfig+0x1c8>)
 800347a:	4313      	orrs	r3, r2
 800347c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 0301 	and.w	r3, r3, #1
 8003486:	2b00      	cmp	r3, #0
 8003488:	d040      	beq.n	800350c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	2b01      	cmp	r3, #1
 8003490:	d107      	bne.n	80034a2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003492:	4b47      	ldr	r3, [pc, #284]	; (80035b0 <HAL_RCC_ClockConfig+0x1c8>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800349a:	2b00      	cmp	r3, #0
 800349c:	d115      	bne.n	80034ca <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	e07f      	b.n	80035a2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	2b02      	cmp	r3, #2
 80034a8:	d107      	bne.n	80034ba <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034aa:	4b41      	ldr	r3, [pc, #260]	; (80035b0 <HAL_RCC_ClockConfig+0x1c8>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d109      	bne.n	80034ca <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	e073      	b.n	80035a2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034ba:	4b3d      	ldr	r3, [pc, #244]	; (80035b0 <HAL_RCC_ClockConfig+0x1c8>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f003 0302 	and.w	r3, r3, #2
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d101      	bne.n	80034ca <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	e06b      	b.n	80035a2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034ca:	4b39      	ldr	r3, [pc, #228]	; (80035b0 <HAL_RCC_ClockConfig+0x1c8>)
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	f023 0203 	bic.w	r2, r3, #3
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	4936      	ldr	r1, [pc, #216]	; (80035b0 <HAL_RCC_ClockConfig+0x1c8>)
 80034d8:	4313      	orrs	r3, r2
 80034da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034dc:	f7fd fe50 	bl	8001180 <HAL_GetTick>
 80034e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034e2:	e00a      	b.n	80034fa <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034e4:	f7fd fe4c 	bl	8001180 <HAL_GetTick>
 80034e8:	4602      	mov	r2, r0
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	1ad3      	subs	r3, r2, r3
 80034ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d901      	bls.n	80034fa <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80034f6:	2303      	movs	r3, #3
 80034f8:	e053      	b.n	80035a2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034fa:	4b2d      	ldr	r3, [pc, #180]	; (80035b0 <HAL_RCC_ClockConfig+0x1c8>)
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	f003 020c 	and.w	r2, r3, #12
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	009b      	lsls	r3, r3, #2
 8003508:	429a      	cmp	r2, r3
 800350a:	d1eb      	bne.n	80034e4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800350c:	4b27      	ldr	r3, [pc, #156]	; (80035ac <HAL_RCC_ClockConfig+0x1c4>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f003 030f 	and.w	r3, r3, #15
 8003514:	683a      	ldr	r2, [r7, #0]
 8003516:	429a      	cmp	r2, r3
 8003518:	d210      	bcs.n	800353c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800351a:	4b24      	ldr	r3, [pc, #144]	; (80035ac <HAL_RCC_ClockConfig+0x1c4>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f023 020f 	bic.w	r2, r3, #15
 8003522:	4922      	ldr	r1, [pc, #136]	; (80035ac <HAL_RCC_ClockConfig+0x1c4>)
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	4313      	orrs	r3, r2
 8003528:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800352a:	4b20      	ldr	r3, [pc, #128]	; (80035ac <HAL_RCC_ClockConfig+0x1c4>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 030f 	and.w	r3, r3, #15
 8003532:	683a      	ldr	r2, [r7, #0]
 8003534:	429a      	cmp	r2, r3
 8003536:	d001      	beq.n	800353c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003538:	2301      	movs	r3, #1
 800353a:	e032      	b.n	80035a2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f003 0304 	and.w	r3, r3, #4
 8003544:	2b00      	cmp	r3, #0
 8003546:	d008      	beq.n	800355a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003548:	4b19      	ldr	r3, [pc, #100]	; (80035b0 <HAL_RCC_ClockConfig+0x1c8>)
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	68db      	ldr	r3, [r3, #12]
 8003554:	4916      	ldr	r1, [pc, #88]	; (80035b0 <HAL_RCC_ClockConfig+0x1c8>)
 8003556:	4313      	orrs	r3, r2
 8003558:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 0308 	and.w	r3, r3, #8
 8003562:	2b00      	cmp	r3, #0
 8003564:	d009      	beq.n	800357a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003566:	4b12      	ldr	r3, [pc, #72]	; (80035b0 <HAL_RCC_ClockConfig+0x1c8>)
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	691b      	ldr	r3, [r3, #16]
 8003572:	00db      	lsls	r3, r3, #3
 8003574:	490e      	ldr	r1, [pc, #56]	; (80035b0 <HAL_RCC_ClockConfig+0x1c8>)
 8003576:	4313      	orrs	r3, r2
 8003578:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800357a:	f000 f821 	bl	80035c0 <HAL_RCC_GetSysClockFreq>
 800357e:	4602      	mov	r2, r0
 8003580:	4b0b      	ldr	r3, [pc, #44]	; (80035b0 <HAL_RCC_ClockConfig+0x1c8>)
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	091b      	lsrs	r3, r3, #4
 8003586:	f003 030f 	and.w	r3, r3, #15
 800358a:	490a      	ldr	r1, [pc, #40]	; (80035b4 <HAL_RCC_ClockConfig+0x1cc>)
 800358c:	5ccb      	ldrb	r3, [r1, r3]
 800358e:	fa22 f303 	lsr.w	r3, r2, r3
 8003592:	4a09      	ldr	r2, [pc, #36]	; (80035b8 <HAL_RCC_ClockConfig+0x1d0>)
 8003594:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003596:	4b09      	ldr	r3, [pc, #36]	; (80035bc <HAL_RCC_ClockConfig+0x1d4>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4618      	mov	r0, r3
 800359c:	f7fd fdac 	bl	80010f8 <HAL_InitTick>

  return HAL_OK;
 80035a0:	2300      	movs	r3, #0
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	3710      	adds	r7, #16
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}
 80035aa:	bf00      	nop
 80035ac:	40023c00 	.word	0x40023c00
 80035b0:	40023800 	.word	0x40023800
 80035b4:	08005718 	.word	0x08005718
 80035b8:	20000000 	.word	0x20000000
 80035bc:	20000004 	.word	0x20000004

080035c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80035c4:	b094      	sub	sp, #80	; 0x50
 80035c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80035c8:	2300      	movs	r3, #0
 80035ca:	647b      	str	r3, [r7, #68]	; 0x44
 80035cc:	2300      	movs	r3, #0
 80035ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80035d0:	2300      	movs	r3, #0
 80035d2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80035d4:	2300      	movs	r3, #0
 80035d6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80035d8:	4b79      	ldr	r3, [pc, #484]	; (80037c0 <HAL_RCC_GetSysClockFreq+0x200>)
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	f003 030c 	and.w	r3, r3, #12
 80035e0:	2b08      	cmp	r3, #8
 80035e2:	d00d      	beq.n	8003600 <HAL_RCC_GetSysClockFreq+0x40>
 80035e4:	2b08      	cmp	r3, #8
 80035e6:	f200 80e1 	bhi.w	80037ac <HAL_RCC_GetSysClockFreq+0x1ec>
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d002      	beq.n	80035f4 <HAL_RCC_GetSysClockFreq+0x34>
 80035ee:	2b04      	cmp	r3, #4
 80035f0:	d003      	beq.n	80035fa <HAL_RCC_GetSysClockFreq+0x3a>
 80035f2:	e0db      	b.n	80037ac <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80035f4:	4b73      	ldr	r3, [pc, #460]	; (80037c4 <HAL_RCC_GetSysClockFreq+0x204>)
 80035f6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80035f8:	e0db      	b.n	80037b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80035fa:	4b73      	ldr	r3, [pc, #460]	; (80037c8 <HAL_RCC_GetSysClockFreq+0x208>)
 80035fc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80035fe:	e0d8      	b.n	80037b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003600:	4b6f      	ldr	r3, [pc, #444]	; (80037c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003608:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800360a:	4b6d      	ldr	r3, [pc, #436]	; (80037c0 <HAL_RCC_GetSysClockFreq+0x200>)
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003612:	2b00      	cmp	r3, #0
 8003614:	d063      	beq.n	80036de <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003616:	4b6a      	ldr	r3, [pc, #424]	; (80037c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	099b      	lsrs	r3, r3, #6
 800361c:	2200      	movs	r2, #0
 800361e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003620:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003624:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003628:	633b      	str	r3, [r7, #48]	; 0x30
 800362a:	2300      	movs	r3, #0
 800362c:	637b      	str	r3, [r7, #52]	; 0x34
 800362e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003632:	4622      	mov	r2, r4
 8003634:	462b      	mov	r3, r5
 8003636:	f04f 0000 	mov.w	r0, #0
 800363a:	f04f 0100 	mov.w	r1, #0
 800363e:	0159      	lsls	r1, r3, #5
 8003640:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003644:	0150      	lsls	r0, r2, #5
 8003646:	4602      	mov	r2, r0
 8003648:	460b      	mov	r3, r1
 800364a:	4621      	mov	r1, r4
 800364c:	1a51      	subs	r1, r2, r1
 800364e:	6139      	str	r1, [r7, #16]
 8003650:	4629      	mov	r1, r5
 8003652:	eb63 0301 	sbc.w	r3, r3, r1
 8003656:	617b      	str	r3, [r7, #20]
 8003658:	f04f 0200 	mov.w	r2, #0
 800365c:	f04f 0300 	mov.w	r3, #0
 8003660:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003664:	4659      	mov	r1, fp
 8003666:	018b      	lsls	r3, r1, #6
 8003668:	4651      	mov	r1, sl
 800366a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800366e:	4651      	mov	r1, sl
 8003670:	018a      	lsls	r2, r1, #6
 8003672:	4651      	mov	r1, sl
 8003674:	ebb2 0801 	subs.w	r8, r2, r1
 8003678:	4659      	mov	r1, fp
 800367a:	eb63 0901 	sbc.w	r9, r3, r1
 800367e:	f04f 0200 	mov.w	r2, #0
 8003682:	f04f 0300 	mov.w	r3, #0
 8003686:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800368a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800368e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003692:	4690      	mov	r8, r2
 8003694:	4699      	mov	r9, r3
 8003696:	4623      	mov	r3, r4
 8003698:	eb18 0303 	adds.w	r3, r8, r3
 800369c:	60bb      	str	r3, [r7, #8]
 800369e:	462b      	mov	r3, r5
 80036a0:	eb49 0303 	adc.w	r3, r9, r3
 80036a4:	60fb      	str	r3, [r7, #12]
 80036a6:	f04f 0200 	mov.w	r2, #0
 80036aa:	f04f 0300 	mov.w	r3, #0
 80036ae:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80036b2:	4629      	mov	r1, r5
 80036b4:	024b      	lsls	r3, r1, #9
 80036b6:	4621      	mov	r1, r4
 80036b8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80036bc:	4621      	mov	r1, r4
 80036be:	024a      	lsls	r2, r1, #9
 80036c0:	4610      	mov	r0, r2
 80036c2:	4619      	mov	r1, r3
 80036c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036c6:	2200      	movs	r2, #0
 80036c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80036ca:	62fa      	str	r2, [r7, #44]	; 0x2c
 80036cc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80036d0:	f7fc fdb2 	bl	8000238 <__aeabi_uldivmod>
 80036d4:	4602      	mov	r2, r0
 80036d6:	460b      	mov	r3, r1
 80036d8:	4613      	mov	r3, r2
 80036da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80036dc:	e058      	b.n	8003790 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036de:	4b38      	ldr	r3, [pc, #224]	; (80037c0 <HAL_RCC_GetSysClockFreq+0x200>)
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	099b      	lsrs	r3, r3, #6
 80036e4:	2200      	movs	r2, #0
 80036e6:	4618      	mov	r0, r3
 80036e8:	4611      	mov	r1, r2
 80036ea:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80036ee:	623b      	str	r3, [r7, #32]
 80036f0:	2300      	movs	r3, #0
 80036f2:	627b      	str	r3, [r7, #36]	; 0x24
 80036f4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80036f8:	4642      	mov	r2, r8
 80036fa:	464b      	mov	r3, r9
 80036fc:	f04f 0000 	mov.w	r0, #0
 8003700:	f04f 0100 	mov.w	r1, #0
 8003704:	0159      	lsls	r1, r3, #5
 8003706:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800370a:	0150      	lsls	r0, r2, #5
 800370c:	4602      	mov	r2, r0
 800370e:	460b      	mov	r3, r1
 8003710:	4641      	mov	r1, r8
 8003712:	ebb2 0a01 	subs.w	sl, r2, r1
 8003716:	4649      	mov	r1, r9
 8003718:	eb63 0b01 	sbc.w	fp, r3, r1
 800371c:	f04f 0200 	mov.w	r2, #0
 8003720:	f04f 0300 	mov.w	r3, #0
 8003724:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003728:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800372c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003730:	ebb2 040a 	subs.w	r4, r2, sl
 8003734:	eb63 050b 	sbc.w	r5, r3, fp
 8003738:	f04f 0200 	mov.w	r2, #0
 800373c:	f04f 0300 	mov.w	r3, #0
 8003740:	00eb      	lsls	r3, r5, #3
 8003742:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003746:	00e2      	lsls	r2, r4, #3
 8003748:	4614      	mov	r4, r2
 800374a:	461d      	mov	r5, r3
 800374c:	4643      	mov	r3, r8
 800374e:	18e3      	adds	r3, r4, r3
 8003750:	603b      	str	r3, [r7, #0]
 8003752:	464b      	mov	r3, r9
 8003754:	eb45 0303 	adc.w	r3, r5, r3
 8003758:	607b      	str	r3, [r7, #4]
 800375a:	f04f 0200 	mov.w	r2, #0
 800375e:	f04f 0300 	mov.w	r3, #0
 8003762:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003766:	4629      	mov	r1, r5
 8003768:	028b      	lsls	r3, r1, #10
 800376a:	4621      	mov	r1, r4
 800376c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003770:	4621      	mov	r1, r4
 8003772:	028a      	lsls	r2, r1, #10
 8003774:	4610      	mov	r0, r2
 8003776:	4619      	mov	r1, r3
 8003778:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800377a:	2200      	movs	r2, #0
 800377c:	61bb      	str	r3, [r7, #24]
 800377e:	61fa      	str	r2, [r7, #28]
 8003780:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003784:	f7fc fd58 	bl	8000238 <__aeabi_uldivmod>
 8003788:	4602      	mov	r2, r0
 800378a:	460b      	mov	r3, r1
 800378c:	4613      	mov	r3, r2
 800378e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003790:	4b0b      	ldr	r3, [pc, #44]	; (80037c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	0c1b      	lsrs	r3, r3, #16
 8003796:	f003 0303 	and.w	r3, r3, #3
 800379a:	3301      	adds	r3, #1
 800379c:	005b      	lsls	r3, r3, #1
 800379e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80037a0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80037a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80037a8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80037aa:	e002      	b.n	80037b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80037ac:	4b05      	ldr	r3, [pc, #20]	; (80037c4 <HAL_RCC_GetSysClockFreq+0x204>)
 80037ae:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80037b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	3750      	adds	r7, #80	; 0x50
 80037b8:	46bd      	mov	sp, r7
 80037ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80037be:	bf00      	nop
 80037c0:	40023800 	.word	0x40023800
 80037c4:	00f42400 	.word	0x00f42400
 80037c8:	007a1200 	.word	0x007a1200

080037cc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037cc:	b480      	push	{r7}
 80037ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037d0:	4b03      	ldr	r3, [pc, #12]	; (80037e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80037d2:	681b      	ldr	r3, [r3, #0]
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	46bd      	mov	sp, r7
 80037d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037dc:	4770      	bx	lr
 80037de:	bf00      	nop
 80037e0:	20000000 	.word	0x20000000

080037e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80037e8:	f7ff fff0 	bl	80037cc <HAL_RCC_GetHCLKFreq>
 80037ec:	4602      	mov	r2, r0
 80037ee:	4b05      	ldr	r3, [pc, #20]	; (8003804 <HAL_RCC_GetPCLK1Freq+0x20>)
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	0a9b      	lsrs	r3, r3, #10
 80037f4:	f003 0307 	and.w	r3, r3, #7
 80037f8:	4903      	ldr	r1, [pc, #12]	; (8003808 <HAL_RCC_GetPCLK1Freq+0x24>)
 80037fa:	5ccb      	ldrb	r3, [r1, r3]
 80037fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003800:	4618      	mov	r0, r3
 8003802:	bd80      	pop	{r7, pc}
 8003804:	40023800 	.word	0x40023800
 8003808:	08005728 	.word	0x08005728

0800380c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003810:	f7ff ffdc 	bl	80037cc <HAL_RCC_GetHCLKFreq>
 8003814:	4602      	mov	r2, r0
 8003816:	4b05      	ldr	r3, [pc, #20]	; (800382c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	0b5b      	lsrs	r3, r3, #13
 800381c:	f003 0307 	and.w	r3, r3, #7
 8003820:	4903      	ldr	r1, [pc, #12]	; (8003830 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003822:	5ccb      	ldrb	r3, [r1, r3]
 8003824:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003828:	4618      	mov	r0, r3
 800382a:	bd80      	pop	{r7, pc}
 800382c:	40023800 	.word	0x40023800
 8003830:	08005728 	.word	0x08005728

08003834 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b088      	sub	sp, #32
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800383c:	2300      	movs	r3, #0
 800383e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003840:	2300      	movs	r3, #0
 8003842:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003844:	2300      	movs	r3, #0
 8003846:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003848:	2300      	movs	r3, #0
 800384a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800384c:	2300      	movs	r3, #0
 800384e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f003 0301 	and.w	r3, r3, #1
 8003858:	2b00      	cmp	r3, #0
 800385a:	d012      	beq.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800385c:	4b69      	ldr	r3, [pc, #420]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	4a68      	ldr	r2, [pc, #416]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003862:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003866:	6093      	str	r3, [r2, #8]
 8003868:	4b66      	ldr	r3, [pc, #408]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800386a:	689a      	ldr	r2, [r3, #8]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003870:	4964      	ldr	r1, [pc, #400]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003872:	4313      	orrs	r3, r2
 8003874:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800387a:	2b00      	cmp	r3, #0
 800387c:	d101      	bne.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800387e:	2301      	movs	r3, #1
 8003880:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800388a:	2b00      	cmp	r3, #0
 800388c:	d017      	beq.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800388e:	4b5d      	ldr	r3, [pc, #372]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003890:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003894:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800389c:	4959      	ldr	r1, [pc, #356]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800389e:	4313      	orrs	r3, r2
 80038a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80038ac:	d101      	bne.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80038ae:	2301      	movs	r3, #1
 80038b0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d101      	bne.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80038ba:	2301      	movs	r3, #1
 80038bc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d017      	beq.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80038ca:	4b4e      	ldr	r3, [pc, #312]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80038d0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d8:	494a      	ldr	r1, [pc, #296]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038da:	4313      	orrs	r3, r2
 80038dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038e8:	d101      	bne.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80038ea:	2301      	movs	r3, #1
 80038ec:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d101      	bne.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80038f6:	2301      	movs	r3, #1
 80038f8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003902:	2b00      	cmp	r3, #0
 8003904:	d001      	beq.n	800390a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003906:	2301      	movs	r3, #1
 8003908:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 0320 	and.w	r3, r3, #32
 8003912:	2b00      	cmp	r3, #0
 8003914:	f000 808b 	beq.w	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003918:	4b3a      	ldr	r3, [pc, #232]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800391a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800391c:	4a39      	ldr	r2, [pc, #228]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800391e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003922:	6413      	str	r3, [r2, #64]	; 0x40
 8003924:	4b37      	ldr	r3, [pc, #220]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003928:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800392c:	60bb      	str	r3, [r7, #8]
 800392e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003930:	4b35      	ldr	r3, [pc, #212]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a34      	ldr	r2, [pc, #208]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003936:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800393a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800393c:	f7fd fc20 	bl	8001180 <HAL_GetTick>
 8003940:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003942:	e008      	b.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003944:	f7fd fc1c 	bl	8001180 <HAL_GetTick>
 8003948:	4602      	mov	r2, r0
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	1ad3      	subs	r3, r2, r3
 800394e:	2b64      	cmp	r3, #100	; 0x64
 8003950:	d901      	bls.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003952:	2303      	movs	r3, #3
 8003954:	e38f      	b.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003956:	4b2c      	ldr	r3, [pc, #176]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800395e:	2b00      	cmp	r3, #0
 8003960:	d0f0      	beq.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003962:	4b28      	ldr	r3, [pc, #160]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003964:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003966:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800396a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d035      	beq.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003976:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800397a:	693a      	ldr	r2, [r7, #16]
 800397c:	429a      	cmp	r2, r3
 800397e:	d02e      	beq.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003980:	4b20      	ldr	r3, [pc, #128]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003982:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003984:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003988:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800398a:	4b1e      	ldr	r3, [pc, #120]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800398c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800398e:	4a1d      	ldr	r2, [pc, #116]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003990:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003994:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003996:	4b1b      	ldr	r3, [pc, #108]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003998:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800399a:	4a1a      	ldr	r2, [pc, #104]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800399c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039a0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80039a2:	4a18      	ldr	r2, [pc, #96]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80039a8:	4b16      	ldr	r3, [pc, #88]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ac:	f003 0301 	and.w	r3, r3, #1
 80039b0:	2b01      	cmp	r3, #1
 80039b2:	d114      	bne.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039b4:	f7fd fbe4 	bl	8001180 <HAL_GetTick>
 80039b8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039ba:	e00a      	b.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039bc:	f7fd fbe0 	bl	8001180 <HAL_GetTick>
 80039c0:	4602      	mov	r2, r0
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	1ad3      	subs	r3, r2, r3
 80039c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d901      	bls.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80039ce:	2303      	movs	r3, #3
 80039d0:	e351      	b.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039d2:	4b0c      	ldr	r3, [pc, #48]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039d6:	f003 0302 	and.w	r3, r3, #2
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d0ee      	beq.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80039ea:	d111      	bne.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80039ec:	4b05      	ldr	r3, [pc, #20]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80039f8:	4b04      	ldr	r3, [pc, #16]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80039fa:	400b      	ands	r3, r1
 80039fc:	4901      	ldr	r1, [pc, #4]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039fe:	4313      	orrs	r3, r2
 8003a00:	608b      	str	r3, [r1, #8]
 8003a02:	e00b      	b.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003a04:	40023800 	.word	0x40023800
 8003a08:	40007000 	.word	0x40007000
 8003a0c:	0ffffcff 	.word	0x0ffffcff
 8003a10:	4bac      	ldr	r3, [pc, #688]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	4aab      	ldr	r2, [pc, #684]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a16:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003a1a:	6093      	str	r3, [r2, #8]
 8003a1c:	4ba9      	ldr	r3, [pc, #676]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a1e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a28:	49a6      	ldr	r1, [pc, #664]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f003 0310 	and.w	r3, r3, #16
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d010      	beq.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003a3a:	4ba2      	ldr	r3, [pc, #648]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a40:	4aa0      	ldr	r2, [pc, #640]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a42:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a46:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003a4a:	4b9e      	ldr	r3, [pc, #632]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a4c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a54:	499b      	ldr	r1, [pc, #620]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a56:	4313      	orrs	r3, r2
 8003a58:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d00a      	beq.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a68:	4b96      	ldr	r3, [pc, #600]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a6e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a76:	4993      	ldr	r1, [pc, #588]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d00a      	beq.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003a8a:	4b8e      	ldr	r3, [pc, #568]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a90:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a98:	498a      	ldr	r1, [pc, #552]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d00a      	beq.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003aac:	4b85      	ldr	r3, [pc, #532]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003aae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ab2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003aba:	4982      	ldr	r1, [pc, #520]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003abc:	4313      	orrs	r3, r2
 8003abe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d00a      	beq.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003ace:	4b7d      	ldr	r3, [pc, #500]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ad0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ad4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003adc:	4979      	ldr	r1, [pc, #484]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d00a      	beq.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003af0:	4b74      	ldr	r3, [pc, #464]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003af2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003af6:	f023 0203 	bic.w	r2, r3, #3
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003afe:	4971      	ldr	r1, [pc, #452]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b00:	4313      	orrs	r3, r2
 8003b02:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d00a      	beq.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003b12:	4b6c      	ldr	r3, [pc, #432]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b18:	f023 020c 	bic.w	r2, r3, #12
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b20:	4968      	ldr	r1, [pc, #416]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b22:	4313      	orrs	r3, r2
 8003b24:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d00a      	beq.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003b34:	4b63      	ldr	r3, [pc, #396]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b3a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b42:	4960      	ldr	r1, [pc, #384]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b44:	4313      	orrs	r3, r2
 8003b46:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d00a      	beq.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003b56:	4b5b      	ldr	r3, [pc, #364]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b5c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b64:	4957      	ldr	r1, [pc, #348]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b66:	4313      	orrs	r3, r2
 8003b68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d00a      	beq.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003b78:	4b52      	ldr	r3, [pc, #328]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b7e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b86:	494f      	ldr	r1, [pc, #316]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d00a      	beq.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003b9a:	4b4a      	ldr	r3, [pc, #296]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ba0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ba8:	4946      	ldr	r1, [pc, #280]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003baa:	4313      	orrs	r3, r2
 8003bac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d00a      	beq.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003bbc:	4b41      	ldr	r3, [pc, #260]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bc2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bca:	493e      	ldr	r1, [pc, #248]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d00a      	beq.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003bde:	4b39      	ldr	r3, [pc, #228]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003be0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003be4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bec:	4935      	ldr	r1, [pc, #212]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d00a      	beq.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003c00:	4b30      	ldr	r3, [pc, #192]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c06:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c0e:	492d      	ldr	r1, [pc, #180]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c10:	4313      	orrs	r3, r2
 8003c12:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d011      	beq.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003c22:	4b28      	ldr	r3, [pc, #160]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c28:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c30:	4924      	ldr	r1, [pc, #144]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c32:	4313      	orrs	r3, r2
 8003c34:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c3c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c40:	d101      	bne.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003c42:	2301      	movs	r3, #1
 8003c44:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 0308 	and.w	r3, r3, #8
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d001      	beq.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003c52:	2301      	movs	r3, #1
 8003c54:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d00a      	beq.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003c62:	4b18      	ldr	r3, [pc, #96]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c68:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c70:	4914      	ldr	r1, [pc, #80]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c72:	4313      	orrs	r3, r2
 8003c74:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d00b      	beq.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003c84:	4b0f      	ldr	r3, [pc, #60]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c8a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c94:	490b      	ldr	r1, [pc, #44]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c96:	4313      	orrs	r3, r2
 8003c98:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d00f      	beq.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003ca8:	4b06      	ldr	r3, [pc, #24]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003caa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cae:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cb8:	4902      	ldr	r1, [pc, #8]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003cc0:	e002      	b.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8003cc2:	bf00      	nop
 8003cc4:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d00b      	beq.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003cd4:	4b8a      	ldr	r3, [pc, #552]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cd6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003cda:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ce4:	4986      	ldr	r1, [pc, #536]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d00b      	beq.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003cf8:	4b81      	ldr	r3, [pc, #516]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cfa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003cfe:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d08:	497d      	ldr	r1, [pc, #500]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003d10:	69fb      	ldr	r3, [r7, #28]
 8003d12:	2b01      	cmp	r3, #1
 8003d14:	d006      	beq.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	f000 80d6 	beq.w	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003d24:	4b76      	ldr	r3, [pc, #472]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a75      	ldr	r2, [pc, #468]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d2a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003d2e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d30:	f7fd fa26 	bl	8001180 <HAL_GetTick>
 8003d34:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003d36:	e008      	b.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003d38:	f7fd fa22 	bl	8001180 <HAL_GetTick>
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	1ad3      	subs	r3, r2, r3
 8003d42:	2b64      	cmp	r3, #100	; 0x64
 8003d44:	d901      	bls.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d46:	2303      	movs	r3, #3
 8003d48:	e195      	b.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003d4a:	4b6d      	ldr	r3, [pc, #436]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d1f0      	bne.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f003 0301 	and.w	r3, r3, #1
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d021      	beq.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d11d      	bne.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003d6a:	4b65      	ldr	r3, [pc, #404]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d70:	0c1b      	lsrs	r3, r3, #16
 8003d72:	f003 0303 	and.w	r3, r3, #3
 8003d76:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003d78:	4b61      	ldr	r3, [pc, #388]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d7e:	0e1b      	lsrs	r3, r3, #24
 8003d80:	f003 030f 	and.w	r3, r3, #15
 8003d84:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	019a      	lsls	r2, r3, #6
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	041b      	lsls	r3, r3, #16
 8003d90:	431a      	orrs	r2, r3
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	061b      	lsls	r3, r3, #24
 8003d96:	431a      	orrs	r2, r3
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	071b      	lsls	r3, r3, #28
 8003d9e:	4958      	ldr	r1, [pc, #352]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003da0:	4313      	orrs	r3, r2
 8003da2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d004      	beq.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003db6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003dba:	d00a      	beq.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d02e      	beq.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dcc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003dd0:	d129      	bne.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003dd2:	4b4b      	ldr	r3, [pc, #300]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003dd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003dd8:	0c1b      	lsrs	r3, r3, #16
 8003dda:	f003 0303 	and.w	r3, r3, #3
 8003dde:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003de0:	4b47      	ldr	r3, [pc, #284]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003de2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003de6:	0f1b      	lsrs	r3, r3, #28
 8003de8:	f003 0307 	and.w	r3, r3, #7
 8003dec:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	019a      	lsls	r2, r3, #6
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	041b      	lsls	r3, r3, #16
 8003df8:	431a      	orrs	r2, r3
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	68db      	ldr	r3, [r3, #12]
 8003dfe:	061b      	lsls	r3, r3, #24
 8003e00:	431a      	orrs	r2, r3
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	071b      	lsls	r3, r3, #28
 8003e06:	493e      	ldr	r1, [pc, #248]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003e0e:	4b3c      	ldr	r3, [pc, #240]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e14:	f023 021f 	bic.w	r2, r3, #31
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e1c:	3b01      	subs	r3, #1
 8003e1e:	4938      	ldr	r1, [pc, #224]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e20:	4313      	orrs	r3, r2
 8003e22:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d01d      	beq.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003e32:	4b33      	ldr	r3, [pc, #204]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e38:	0e1b      	lsrs	r3, r3, #24
 8003e3a:	f003 030f 	and.w	r3, r3, #15
 8003e3e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003e40:	4b2f      	ldr	r3, [pc, #188]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e46:	0f1b      	lsrs	r3, r3, #28
 8003e48:	f003 0307 	and.w	r3, r3, #7
 8003e4c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	019a      	lsls	r2, r3, #6
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	691b      	ldr	r3, [r3, #16]
 8003e58:	041b      	lsls	r3, r3, #16
 8003e5a:	431a      	orrs	r2, r3
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	061b      	lsls	r3, r3, #24
 8003e60:	431a      	orrs	r2, r3
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	071b      	lsls	r3, r3, #28
 8003e66:	4926      	ldr	r1, [pc, #152]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d011      	beq.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	019a      	lsls	r2, r3, #6
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	691b      	ldr	r3, [r3, #16]
 8003e84:	041b      	lsls	r3, r3, #16
 8003e86:	431a      	orrs	r2, r3
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	68db      	ldr	r3, [r3, #12]
 8003e8c:	061b      	lsls	r3, r3, #24
 8003e8e:	431a      	orrs	r2, r3
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	071b      	lsls	r3, r3, #28
 8003e96:	491a      	ldr	r1, [pc, #104]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003e9e:	4b18      	ldr	r3, [pc, #96]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a17      	ldr	r2, [pc, #92]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ea4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003ea8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003eaa:	f7fd f969 	bl	8001180 <HAL_GetTick>
 8003eae:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003eb0:	e008      	b.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003eb2:	f7fd f965 	bl	8001180 <HAL_GetTick>
 8003eb6:	4602      	mov	r2, r0
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	1ad3      	subs	r3, r2, r3
 8003ebc:	2b64      	cmp	r3, #100	; 0x64
 8003ebe:	d901      	bls.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ec0:	2303      	movs	r3, #3
 8003ec2:	e0d8      	b.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003ec4:	4b0e      	ldr	r3, [pc, #56]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d0f0      	beq.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003ed0:	69bb      	ldr	r3, [r7, #24]
 8003ed2:	2b01      	cmp	r3, #1
 8003ed4:	f040 80ce 	bne.w	8004074 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003ed8:	4b09      	ldr	r3, [pc, #36]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a08      	ldr	r2, [pc, #32]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ede:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ee2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ee4:	f7fd f94c 	bl	8001180 <HAL_GetTick>
 8003ee8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003eea:	e00b      	b.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003eec:	f7fd f948 	bl	8001180 <HAL_GetTick>
 8003ef0:	4602      	mov	r2, r0
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	1ad3      	subs	r3, r2, r3
 8003ef6:	2b64      	cmp	r3, #100	; 0x64
 8003ef8:	d904      	bls.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003efa:	2303      	movs	r3, #3
 8003efc:	e0bb      	b.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003efe:	bf00      	nop
 8003f00:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003f04:	4b5e      	ldr	r3, [pc, #376]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f10:	d0ec      	beq.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d003      	beq.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d009      	beq.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d02e      	beq.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d12a      	bne.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003f3a:	4b51      	ldr	r3, [pc, #324]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f40:	0c1b      	lsrs	r3, r3, #16
 8003f42:	f003 0303 	and.w	r3, r3, #3
 8003f46:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003f48:	4b4d      	ldr	r3, [pc, #308]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f4e:	0f1b      	lsrs	r3, r3, #28
 8003f50:	f003 0307 	and.w	r3, r3, #7
 8003f54:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	695b      	ldr	r3, [r3, #20]
 8003f5a:	019a      	lsls	r2, r3, #6
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	041b      	lsls	r3, r3, #16
 8003f60:	431a      	orrs	r2, r3
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	699b      	ldr	r3, [r3, #24]
 8003f66:	061b      	lsls	r3, r3, #24
 8003f68:	431a      	orrs	r2, r3
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	071b      	lsls	r3, r3, #28
 8003f6e:	4944      	ldr	r1, [pc, #272]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f70:	4313      	orrs	r3, r2
 8003f72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003f76:	4b42      	ldr	r3, [pc, #264]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f7c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f84:	3b01      	subs	r3, #1
 8003f86:	021b      	lsls	r3, r3, #8
 8003f88:	493d      	ldr	r1, [pc, #244]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d022      	beq.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003fa0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003fa4:	d11d      	bne.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003fa6:	4b36      	ldr	r3, [pc, #216]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003fa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fac:	0e1b      	lsrs	r3, r3, #24
 8003fae:	f003 030f 	and.w	r3, r3, #15
 8003fb2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003fb4:	4b32      	ldr	r3, [pc, #200]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fba:	0f1b      	lsrs	r3, r3, #28
 8003fbc:	f003 0307 	and.w	r3, r3, #7
 8003fc0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	695b      	ldr	r3, [r3, #20]
 8003fc6:	019a      	lsls	r2, r3, #6
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6a1b      	ldr	r3, [r3, #32]
 8003fcc:	041b      	lsls	r3, r3, #16
 8003fce:	431a      	orrs	r2, r3
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	061b      	lsls	r3, r3, #24
 8003fd4:	431a      	orrs	r2, r3
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	071b      	lsls	r3, r3, #28
 8003fda:	4929      	ldr	r1, [pc, #164]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f003 0308 	and.w	r3, r3, #8
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d028      	beq.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003fee:	4b24      	ldr	r3, [pc, #144]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ff0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ff4:	0e1b      	lsrs	r3, r3, #24
 8003ff6:	f003 030f 	and.w	r3, r3, #15
 8003ffa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003ffc:	4b20      	ldr	r3, [pc, #128]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004002:	0c1b      	lsrs	r3, r3, #16
 8004004:	f003 0303 	and.w	r3, r3, #3
 8004008:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	695b      	ldr	r3, [r3, #20]
 800400e:	019a      	lsls	r2, r3, #6
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	041b      	lsls	r3, r3, #16
 8004014:	431a      	orrs	r2, r3
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	061b      	lsls	r3, r3, #24
 800401a:	431a      	orrs	r2, r3
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	69db      	ldr	r3, [r3, #28]
 8004020:	071b      	lsls	r3, r3, #28
 8004022:	4917      	ldr	r1, [pc, #92]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004024:	4313      	orrs	r3, r2
 8004026:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800402a:	4b15      	ldr	r3, [pc, #84]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800402c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004030:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004038:	4911      	ldr	r1, [pc, #68]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800403a:	4313      	orrs	r3, r2
 800403c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004040:	4b0f      	ldr	r3, [pc, #60]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a0e      	ldr	r2, [pc, #56]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004046:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800404a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800404c:	f7fd f898 	bl	8001180 <HAL_GetTick>
 8004050:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004052:	e008      	b.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004054:	f7fd f894 	bl	8001180 <HAL_GetTick>
 8004058:	4602      	mov	r2, r0
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	1ad3      	subs	r3, r2, r3
 800405e:	2b64      	cmp	r3, #100	; 0x64
 8004060:	d901      	bls.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004062:	2303      	movs	r3, #3
 8004064:	e007      	b.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004066:	4b06      	ldr	r3, [pc, #24]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800406e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004072:	d1ef      	bne.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004074:	2300      	movs	r3, #0
}
 8004076:	4618      	mov	r0, r3
 8004078:	3720      	adds	r7, #32
 800407a:	46bd      	mov	sp, r7
 800407c:	bd80      	pop	{r7, pc}
 800407e:	bf00      	nop
 8004080:	40023800 	.word	0x40023800

08004084 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b082      	sub	sp, #8
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d101      	bne.n	8004096 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	e040      	b.n	8004118 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800409a:	2b00      	cmp	r3, #0
 800409c:	d106      	bne.n	80040ac <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2200      	movs	r2, #0
 80040a2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	f7fc fe50 	bl	8000d4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2224      	movs	r2, #36	; 0x24
 80040b0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	681a      	ldr	r2, [r3, #0]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f022 0201 	bic.w	r2, r2, #1
 80040c0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f000 fb3e 	bl	8004744 <UART_SetConfig>
 80040c8:	4603      	mov	r3, r0
 80040ca:	2b01      	cmp	r3, #1
 80040cc:	d101      	bne.n	80040d2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	e022      	b.n	8004118 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d002      	beq.n	80040e0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	f000 fd96 	bl	8004c0c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	685a      	ldr	r2, [r3, #4]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80040ee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	689a      	ldr	r2, [r3, #8]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80040fe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	681a      	ldr	r2, [r3, #0]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f042 0201 	orr.w	r2, r2, #1
 800410e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004110:	6878      	ldr	r0, [r7, #4]
 8004112:	f000 fe1d 	bl	8004d50 <UART_CheckIdleState>
 8004116:	4603      	mov	r3, r0
}
 8004118:	4618      	mov	r0, r3
 800411a:	3708      	adds	r7, #8
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}

08004120 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b0ba      	sub	sp, #232	; 0xe8
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	69db      	ldr	r3, [r3, #28]
 800412e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	689b      	ldr	r3, [r3, #8]
 8004142:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004146:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800414a:	f640 030f 	movw	r3, #2063	; 0x80f
 800414e:	4013      	ands	r3, r2
 8004150:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004154:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004158:	2b00      	cmp	r3, #0
 800415a:	d115      	bne.n	8004188 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800415c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004160:	f003 0320 	and.w	r3, r3, #32
 8004164:	2b00      	cmp	r3, #0
 8004166:	d00f      	beq.n	8004188 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004168:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800416c:	f003 0320 	and.w	r3, r3, #32
 8004170:	2b00      	cmp	r3, #0
 8004172:	d009      	beq.n	8004188 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004178:	2b00      	cmp	r3, #0
 800417a:	f000 82ac 	beq.w	80046d6 <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004182:	6878      	ldr	r0, [r7, #4]
 8004184:	4798      	blx	r3
      }
      return;
 8004186:	e2a6      	b.n	80046d6 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004188:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800418c:	2b00      	cmp	r3, #0
 800418e:	f000 8117 	beq.w	80043c0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004192:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004196:	f003 0301 	and.w	r3, r3, #1
 800419a:	2b00      	cmp	r3, #0
 800419c:	d106      	bne.n	80041ac <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800419e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80041a2:	4b85      	ldr	r3, [pc, #532]	; (80043b8 <HAL_UART_IRQHandler+0x298>)
 80041a4:	4013      	ands	r3, r2
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	f000 810a 	beq.w	80043c0 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80041ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041b0:	f003 0301 	and.w	r3, r3, #1
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d011      	beq.n	80041dc <HAL_UART_IRQHandler+0xbc>
 80041b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d00b      	beq.n	80041dc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	2201      	movs	r2, #1
 80041ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041d2:	f043 0201 	orr.w	r2, r3, #1
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80041dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041e0:	f003 0302 	and.w	r3, r3, #2
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d011      	beq.n	800420c <HAL_UART_IRQHandler+0xec>
 80041e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80041ec:	f003 0301 	and.w	r3, r3, #1
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d00b      	beq.n	800420c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	2202      	movs	r2, #2
 80041fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004202:	f043 0204 	orr.w	r2, r3, #4
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800420c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004210:	f003 0304 	and.w	r3, r3, #4
 8004214:	2b00      	cmp	r3, #0
 8004216:	d011      	beq.n	800423c <HAL_UART_IRQHandler+0x11c>
 8004218:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800421c:	f003 0301 	and.w	r3, r3, #1
 8004220:	2b00      	cmp	r3, #0
 8004222:	d00b      	beq.n	800423c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	2204      	movs	r2, #4
 800422a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004232:	f043 0202 	orr.w	r2, r3, #2
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800423c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004240:	f003 0308 	and.w	r3, r3, #8
 8004244:	2b00      	cmp	r3, #0
 8004246:	d017      	beq.n	8004278 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004248:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800424c:	f003 0320 	and.w	r3, r3, #32
 8004250:	2b00      	cmp	r3, #0
 8004252:	d105      	bne.n	8004260 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004254:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004258:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800425c:	2b00      	cmp	r3, #0
 800425e:	d00b      	beq.n	8004278 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	2208      	movs	r2, #8
 8004266:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800426e:	f043 0208 	orr.w	r2, r3, #8
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004278:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800427c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004280:	2b00      	cmp	r3, #0
 8004282:	d012      	beq.n	80042aa <HAL_UART_IRQHandler+0x18a>
 8004284:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004288:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800428c:	2b00      	cmp	r3, #0
 800428e:	d00c      	beq.n	80042aa <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004298:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042a0:	f043 0220 	orr.w	r2, r3, #32
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	f000 8212 	beq.w	80046da <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80042b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042ba:	f003 0320 	and.w	r3, r3, #32
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d00d      	beq.n	80042de <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80042c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042c6:	f003 0320 	and.w	r3, r3, #32
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d007      	beq.n	80042de <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d003      	beq.n	80042de <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80042da:	6878      	ldr	r0, [r7, #4]
 80042dc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042e4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042f2:	2b40      	cmp	r3, #64	; 0x40
 80042f4:	d005      	beq.n	8004302 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80042f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80042fa:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d04f      	beq.n	80043a2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f000 fe37 	bl	8004f76 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004312:	2b40      	cmp	r3, #64	; 0x40
 8004314:	d141      	bne.n	800439a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	3308      	adds	r3, #8
 800431c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004320:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004324:	e853 3f00 	ldrex	r3, [r3]
 8004328:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800432c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004330:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004334:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	3308      	adds	r3, #8
 800433e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004342:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004346:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800434a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800434e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004352:	e841 2300 	strex	r3, r2, [r1]
 8004356:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800435a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800435e:	2b00      	cmp	r3, #0
 8004360:	d1d9      	bne.n	8004316 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004366:	2b00      	cmp	r3, #0
 8004368:	d013      	beq.n	8004392 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800436e:	4a13      	ldr	r2, [pc, #76]	; (80043bc <HAL_UART_IRQHandler+0x29c>)
 8004370:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004376:	4618      	mov	r0, r3
 8004378:	f7fd fc96 	bl	8001ca8 <HAL_DMA_Abort_IT>
 800437c:	4603      	mov	r3, r0
 800437e:	2b00      	cmp	r3, #0
 8004380:	d017      	beq.n	80043b2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004386:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004388:	687a      	ldr	r2, [r7, #4]
 800438a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800438c:	4610      	mov	r0, r2
 800438e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004390:	e00f      	b.n	80043b2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	f000 f9b6 	bl	8004704 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004398:	e00b      	b.n	80043b2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f000 f9b2 	bl	8004704 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043a0:	e007      	b.n	80043b2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	f000 f9ae 	bl	8004704 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2200      	movs	r2, #0
 80043ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80043b0:	e193      	b.n	80046da <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043b2:	bf00      	nop
    return;
 80043b4:	e191      	b.n	80046da <HAL_UART_IRQHandler+0x5ba>
 80043b6:	bf00      	nop
 80043b8:	04000120 	.word	0x04000120
 80043bc:	0800503f 	.word	0x0800503f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043c4:	2b01      	cmp	r3, #1
 80043c6:	f040 814c 	bne.w	8004662 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80043ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043ce:	f003 0310 	and.w	r3, r3, #16
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	f000 8145 	beq.w	8004662 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80043d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043dc:	f003 0310 	and.w	r3, r3, #16
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	f000 813e 	beq.w	8004662 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	2210      	movs	r2, #16
 80043ec:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	689b      	ldr	r3, [r3, #8]
 80043f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043f8:	2b40      	cmp	r3, #64	; 0x40
 80043fa:	f040 80b6 	bne.w	800456a <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800440a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800440e:	2b00      	cmp	r3, #0
 8004410:	f000 8165 	beq.w	80046de <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800441a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800441e:	429a      	cmp	r2, r3
 8004420:	f080 815d 	bcs.w	80046de <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800442a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004432:	69db      	ldr	r3, [r3, #28]
 8004434:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004438:	f000 8086 	beq.w	8004548 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004444:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004448:	e853 3f00 	ldrex	r3, [r3]
 800444c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004450:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004454:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004458:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	461a      	mov	r2, r3
 8004462:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004466:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800446a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800446e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004472:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004476:	e841 2300 	strex	r3, r2, [r1]
 800447a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800447e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004482:	2b00      	cmp	r3, #0
 8004484:	d1da      	bne.n	800443c <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	3308      	adds	r3, #8
 800448c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800448e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004490:	e853 3f00 	ldrex	r3, [r3]
 8004494:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004496:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004498:	f023 0301 	bic.w	r3, r3, #1
 800449c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	3308      	adds	r3, #8
 80044a6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80044aa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80044ae:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044b0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80044b2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80044b6:	e841 2300 	strex	r3, r2, [r1]
 80044ba:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80044bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d1e1      	bne.n	8004486 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	3308      	adds	r3, #8
 80044c8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80044cc:	e853 3f00 	ldrex	r3, [r3]
 80044d0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80044d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	3308      	adds	r3, #8
 80044e2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80044e6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80044e8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044ea:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80044ec:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80044ee:	e841 2300 	strex	r3, r2, [r1]
 80044f2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80044f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d1e3      	bne.n	80044c2 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2220      	movs	r2, #32
 80044fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2200      	movs	r2, #0
 8004506:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800450e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004510:	e853 3f00 	ldrex	r3, [r3]
 8004514:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004516:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004518:	f023 0310 	bic.w	r3, r3, #16
 800451c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	461a      	mov	r2, r3
 8004526:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800452a:	65bb      	str	r3, [r7, #88]	; 0x58
 800452c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800452e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004530:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004532:	e841 2300 	strex	r3, r2, [r1]
 8004536:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004538:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800453a:	2b00      	cmp	r3, #0
 800453c:	d1e4      	bne.n	8004508 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004542:	4618      	mov	r0, r3
 8004544:	f7fd fb40 	bl	8001bc8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2202      	movs	r2, #2
 800454c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800455a:	b29b      	uxth	r3, r3
 800455c:	1ad3      	subs	r3, r2, r3
 800455e:	b29b      	uxth	r3, r3
 8004560:	4619      	mov	r1, r3
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	f000 f8d8 	bl	8004718 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004568:	e0b9      	b.n	80046de <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004576:	b29b      	uxth	r3, r3
 8004578:	1ad3      	subs	r3, r2, r3
 800457a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004584:	b29b      	uxth	r3, r3
 8004586:	2b00      	cmp	r3, #0
 8004588:	f000 80ab 	beq.w	80046e2 <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 800458c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004590:	2b00      	cmp	r3, #0
 8004592:	f000 80a6 	beq.w	80046e2 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800459c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800459e:	e853 3f00 	ldrex	r3, [r3]
 80045a2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80045a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045a6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80045aa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	461a      	mov	r2, r3
 80045b4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80045b8:	647b      	str	r3, [r7, #68]	; 0x44
 80045ba:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045bc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80045be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80045c0:	e841 2300 	strex	r3, r2, [r1]
 80045c4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80045c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d1e4      	bne.n	8004596 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	3308      	adds	r3, #8
 80045d2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d6:	e853 3f00 	ldrex	r3, [r3]
 80045da:	623b      	str	r3, [r7, #32]
   return(result);
 80045dc:	6a3b      	ldr	r3, [r7, #32]
 80045de:	f023 0301 	bic.w	r3, r3, #1
 80045e2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	3308      	adds	r3, #8
 80045ec:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80045f0:	633a      	str	r2, [r7, #48]	; 0x30
 80045f2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045f4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80045f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045f8:	e841 2300 	strex	r3, r2, [r1]
 80045fc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80045fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004600:	2b00      	cmp	r3, #0
 8004602:	d1e3      	bne.n	80045cc <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2220      	movs	r2, #32
 8004608:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2200      	movs	r2, #0
 8004610:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2200      	movs	r2, #0
 8004616:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	e853 3f00 	ldrex	r3, [r3]
 8004624:	60fb      	str	r3, [r7, #12]
   return(result);
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	f023 0310 	bic.w	r3, r3, #16
 800462c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	461a      	mov	r2, r3
 8004636:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800463a:	61fb      	str	r3, [r7, #28]
 800463c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800463e:	69b9      	ldr	r1, [r7, #24]
 8004640:	69fa      	ldr	r2, [r7, #28]
 8004642:	e841 2300 	strex	r3, r2, [r1]
 8004646:	617b      	str	r3, [r7, #20]
   return(result);
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d1e4      	bne.n	8004618 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2202      	movs	r2, #2
 8004652:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004654:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004658:	4619      	mov	r1, r3
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	f000 f85c 	bl	8004718 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004660:	e03f      	b.n	80046e2 <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004662:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004666:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800466a:	2b00      	cmp	r3, #0
 800466c:	d00e      	beq.n	800468c <HAL_UART_IRQHandler+0x56c>
 800466e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004672:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004676:	2b00      	cmp	r3, #0
 8004678:	d008      	beq.n	800468c <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004682:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004684:	6878      	ldr	r0, [r7, #4]
 8004686:	f000 f853 	bl	8004730 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800468a:	e02d      	b.n	80046e8 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800468c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004690:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004694:	2b00      	cmp	r3, #0
 8004696:	d00e      	beq.n	80046b6 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004698:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800469c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d008      	beq.n	80046b6 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d01c      	beq.n	80046e6 <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046b0:	6878      	ldr	r0, [r7, #4]
 80046b2:	4798      	blx	r3
    }
    return;
 80046b4:	e017      	b.n	80046e6 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80046b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d012      	beq.n	80046e8 <HAL_UART_IRQHandler+0x5c8>
 80046c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d00c      	beq.n	80046e8 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f000 fccb 	bl	800506a <UART_EndTransmit_IT>
    return;
 80046d4:	e008      	b.n	80046e8 <HAL_UART_IRQHandler+0x5c8>
      return;
 80046d6:	bf00      	nop
 80046d8:	e006      	b.n	80046e8 <HAL_UART_IRQHandler+0x5c8>
    return;
 80046da:	bf00      	nop
 80046dc:	e004      	b.n	80046e8 <HAL_UART_IRQHandler+0x5c8>
      return;
 80046de:	bf00      	nop
 80046e0:	e002      	b.n	80046e8 <HAL_UART_IRQHandler+0x5c8>
      return;
 80046e2:	bf00      	nop
 80046e4:	e000      	b.n	80046e8 <HAL_UART_IRQHandler+0x5c8>
    return;
 80046e6:	bf00      	nop
  }

}
 80046e8:	37e8      	adds	r7, #232	; 0xe8
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}
 80046ee:	bf00      	nop

080046f0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80046f0:	b480      	push	{r7}
 80046f2:	b083      	sub	sp, #12
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80046f8:	bf00      	nop
 80046fa:	370c      	adds	r7, #12
 80046fc:	46bd      	mov	sp, r7
 80046fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004702:	4770      	bx	lr

08004704 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004704:	b480      	push	{r7}
 8004706:	b083      	sub	sp, #12
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800470c:	bf00      	nop
 800470e:	370c      	adds	r7, #12
 8004710:	46bd      	mov	sp, r7
 8004712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004716:	4770      	bx	lr

08004718 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004718:	b480      	push	{r7}
 800471a:	b083      	sub	sp, #12
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
 8004720:	460b      	mov	r3, r1
 8004722:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004724:	bf00      	nop
 8004726:	370c      	adds	r7, #12
 8004728:	46bd      	mov	sp, r7
 800472a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472e:	4770      	bx	lr

08004730 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004730:	b480      	push	{r7}
 8004732:	b083      	sub	sp, #12
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004738:	bf00      	nop
 800473a:	370c      	adds	r7, #12
 800473c:	46bd      	mov	sp, r7
 800473e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004742:	4770      	bx	lr

08004744 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b088      	sub	sp, #32
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800474c:	2300      	movs	r3, #0
 800474e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	689a      	ldr	r2, [r3, #8]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	691b      	ldr	r3, [r3, #16]
 8004758:	431a      	orrs	r2, r3
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	695b      	ldr	r3, [r3, #20]
 800475e:	431a      	orrs	r2, r3
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	69db      	ldr	r3, [r3, #28]
 8004764:	4313      	orrs	r3, r2
 8004766:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	681a      	ldr	r2, [r3, #0]
 800476e:	4ba6      	ldr	r3, [pc, #664]	; (8004a08 <UART_SetConfig+0x2c4>)
 8004770:	4013      	ands	r3, r2
 8004772:	687a      	ldr	r2, [r7, #4]
 8004774:	6812      	ldr	r2, [r2, #0]
 8004776:	6979      	ldr	r1, [r7, #20]
 8004778:	430b      	orrs	r3, r1
 800477a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	68da      	ldr	r2, [r3, #12]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	430a      	orrs	r2, r1
 8004790:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	699b      	ldr	r3, [r3, #24]
 8004796:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6a1b      	ldr	r3, [r3, #32]
 800479c:	697a      	ldr	r2, [r7, #20]
 800479e:	4313      	orrs	r3, r2
 80047a0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	697a      	ldr	r2, [r7, #20]
 80047b2:	430a      	orrs	r2, r1
 80047b4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a94      	ldr	r2, [pc, #592]	; (8004a0c <UART_SetConfig+0x2c8>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d120      	bne.n	8004802 <UART_SetConfig+0xbe>
 80047c0:	4b93      	ldr	r3, [pc, #588]	; (8004a10 <UART_SetConfig+0x2cc>)
 80047c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047c6:	f003 0303 	and.w	r3, r3, #3
 80047ca:	2b03      	cmp	r3, #3
 80047cc:	d816      	bhi.n	80047fc <UART_SetConfig+0xb8>
 80047ce:	a201      	add	r2, pc, #4	; (adr r2, 80047d4 <UART_SetConfig+0x90>)
 80047d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047d4:	080047e5 	.word	0x080047e5
 80047d8:	080047f1 	.word	0x080047f1
 80047dc:	080047eb 	.word	0x080047eb
 80047e0:	080047f7 	.word	0x080047f7
 80047e4:	2301      	movs	r3, #1
 80047e6:	77fb      	strb	r3, [r7, #31]
 80047e8:	e150      	b.n	8004a8c <UART_SetConfig+0x348>
 80047ea:	2302      	movs	r3, #2
 80047ec:	77fb      	strb	r3, [r7, #31]
 80047ee:	e14d      	b.n	8004a8c <UART_SetConfig+0x348>
 80047f0:	2304      	movs	r3, #4
 80047f2:	77fb      	strb	r3, [r7, #31]
 80047f4:	e14a      	b.n	8004a8c <UART_SetConfig+0x348>
 80047f6:	2308      	movs	r3, #8
 80047f8:	77fb      	strb	r3, [r7, #31]
 80047fa:	e147      	b.n	8004a8c <UART_SetConfig+0x348>
 80047fc:	2310      	movs	r3, #16
 80047fe:	77fb      	strb	r3, [r7, #31]
 8004800:	e144      	b.n	8004a8c <UART_SetConfig+0x348>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a83      	ldr	r2, [pc, #524]	; (8004a14 <UART_SetConfig+0x2d0>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d132      	bne.n	8004872 <UART_SetConfig+0x12e>
 800480c:	4b80      	ldr	r3, [pc, #512]	; (8004a10 <UART_SetConfig+0x2cc>)
 800480e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004812:	f003 030c 	and.w	r3, r3, #12
 8004816:	2b0c      	cmp	r3, #12
 8004818:	d828      	bhi.n	800486c <UART_SetConfig+0x128>
 800481a:	a201      	add	r2, pc, #4	; (adr r2, 8004820 <UART_SetConfig+0xdc>)
 800481c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004820:	08004855 	.word	0x08004855
 8004824:	0800486d 	.word	0x0800486d
 8004828:	0800486d 	.word	0x0800486d
 800482c:	0800486d 	.word	0x0800486d
 8004830:	08004861 	.word	0x08004861
 8004834:	0800486d 	.word	0x0800486d
 8004838:	0800486d 	.word	0x0800486d
 800483c:	0800486d 	.word	0x0800486d
 8004840:	0800485b 	.word	0x0800485b
 8004844:	0800486d 	.word	0x0800486d
 8004848:	0800486d 	.word	0x0800486d
 800484c:	0800486d 	.word	0x0800486d
 8004850:	08004867 	.word	0x08004867
 8004854:	2300      	movs	r3, #0
 8004856:	77fb      	strb	r3, [r7, #31]
 8004858:	e118      	b.n	8004a8c <UART_SetConfig+0x348>
 800485a:	2302      	movs	r3, #2
 800485c:	77fb      	strb	r3, [r7, #31]
 800485e:	e115      	b.n	8004a8c <UART_SetConfig+0x348>
 8004860:	2304      	movs	r3, #4
 8004862:	77fb      	strb	r3, [r7, #31]
 8004864:	e112      	b.n	8004a8c <UART_SetConfig+0x348>
 8004866:	2308      	movs	r3, #8
 8004868:	77fb      	strb	r3, [r7, #31]
 800486a:	e10f      	b.n	8004a8c <UART_SetConfig+0x348>
 800486c:	2310      	movs	r3, #16
 800486e:	77fb      	strb	r3, [r7, #31]
 8004870:	e10c      	b.n	8004a8c <UART_SetConfig+0x348>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a68      	ldr	r2, [pc, #416]	; (8004a18 <UART_SetConfig+0x2d4>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d120      	bne.n	80048be <UART_SetConfig+0x17a>
 800487c:	4b64      	ldr	r3, [pc, #400]	; (8004a10 <UART_SetConfig+0x2cc>)
 800487e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004882:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004886:	2b30      	cmp	r3, #48	; 0x30
 8004888:	d013      	beq.n	80048b2 <UART_SetConfig+0x16e>
 800488a:	2b30      	cmp	r3, #48	; 0x30
 800488c:	d814      	bhi.n	80048b8 <UART_SetConfig+0x174>
 800488e:	2b20      	cmp	r3, #32
 8004890:	d009      	beq.n	80048a6 <UART_SetConfig+0x162>
 8004892:	2b20      	cmp	r3, #32
 8004894:	d810      	bhi.n	80048b8 <UART_SetConfig+0x174>
 8004896:	2b00      	cmp	r3, #0
 8004898:	d002      	beq.n	80048a0 <UART_SetConfig+0x15c>
 800489a:	2b10      	cmp	r3, #16
 800489c:	d006      	beq.n	80048ac <UART_SetConfig+0x168>
 800489e:	e00b      	b.n	80048b8 <UART_SetConfig+0x174>
 80048a0:	2300      	movs	r3, #0
 80048a2:	77fb      	strb	r3, [r7, #31]
 80048a4:	e0f2      	b.n	8004a8c <UART_SetConfig+0x348>
 80048a6:	2302      	movs	r3, #2
 80048a8:	77fb      	strb	r3, [r7, #31]
 80048aa:	e0ef      	b.n	8004a8c <UART_SetConfig+0x348>
 80048ac:	2304      	movs	r3, #4
 80048ae:	77fb      	strb	r3, [r7, #31]
 80048b0:	e0ec      	b.n	8004a8c <UART_SetConfig+0x348>
 80048b2:	2308      	movs	r3, #8
 80048b4:	77fb      	strb	r3, [r7, #31]
 80048b6:	e0e9      	b.n	8004a8c <UART_SetConfig+0x348>
 80048b8:	2310      	movs	r3, #16
 80048ba:	77fb      	strb	r3, [r7, #31]
 80048bc:	e0e6      	b.n	8004a8c <UART_SetConfig+0x348>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a56      	ldr	r2, [pc, #344]	; (8004a1c <UART_SetConfig+0x2d8>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d120      	bne.n	800490a <UART_SetConfig+0x1c6>
 80048c8:	4b51      	ldr	r3, [pc, #324]	; (8004a10 <UART_SetConfig+0x2cc>)
 80048ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048ce:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80048d2:	2bc0      	cmp	r3, #192	; 0xc0
 80048d4:	d013      	beq.n	80048fe <UART_SetConfig+0x1ba>
 80048d6:	2bc0      	cmp	r3, #192	; 0xc0
 80048d8:	d814      	bhi.n	8004904 <UART_SetConfig+0x1c0>
 80048da:	2b80      	cmp	r3, #128	; 0x80
 80048dc:	d009      	beq.n	80048f2 <UART_SetConfig+0x1ae>
 80048de:	2b80      	cmp	r3, #128	; 0x80
 80048e0:	d810      	bhi.n	8004904 <UART_SetConfig+0x1c0>
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d002      	beq.n	80048ec <UART_SetConfig+0x1a8>
 80048e6:	2b40      	cmp	r3, #64	; 0x40
 80048e8:	d006      	beq.n	80048f8 <UART_SetConfig+0x1b4>
 80048ea:	e00b      	b.n	8004904 <UART_SetConfig+0x1c0>
 80048ec:	2300      	movs	r3, #0
 80048ee:	77fb      	strb	r3, [r7, #31]
 80048f0:	e0cc      	b.n	8004a8c <UART_SetConfig+0x348>
 80048f2:	2302      	movs	r3, #2
 80048f4:	77fb      	strb	r3, [r7, #31]
 80048f6:	e0c9      	b.n	8004a8c <UART_SetConfig+0x348>
 80048f8:	2304      	movs	r3, #4
 80048fa:	77fb      	strb	r3, [r7, #31]
 80048fc:	e0c6      	b.n	8004a8c <UART_SetConfig+0x348>
 80048fe:	2308      	movs	r3, #8
 8004900:	77fb      	strb	r3, [r7, #31]
 8004902:	e0c3      	b.n	8004a8c <UART_SetConfig+0x348>
 8004904:	2310      	movs	r3, #16
 8004906:	77fb      	strb	r3, [r7, #31]
 8004908:	e0c0      	b.n	8004a8c <UART_SetConfig+0x348>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a44      	ldr	r2, [pc, #272]	; (8004a20 <UART_SetConfig+0x2dc>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d125      	bne.n	8004960 <UART_SetConfig+0x21c>
 8004914:	4b3e      	ldr	r3, [pc, #248]	; (8004a10 <UART_SetConfig+0x2cc>)
 8004916:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800491a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800491e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004922:	d017      	beq.n	8004954 <UART_SetConfig+0x210>
 8004924:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004928:	d817      	bhi.n	800495a <UART_SetConfig+0x216>
 800492a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800492e:	d00b      	beq.n	8004948 <UART_SetConfig+0x204>
 8004930:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004934:	d811      	bhi.n	800495a <UART_SetConfig+0x216>
 8004936:	2b00      	cmp	r3, #0
 8004938:	d003      	beq.n	8004942 <UART_SetConfig+0x1fe>
 800493a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800493e:	d006      	beq.n	800494e <UART_SetConfig+0x20a>
 8004940:	e00b      	b.n	800495a <UART_SetConfig+0x216>
 8004942:	2300      	movs	r3, #0
 8004944:	77fb      	strb	r3, [r7, #31]
 8004946:	e0a1      	b.n	8004a8c <UART_SetConfig+0x348>
 8004948:	2302      	movs	r3, #2
 800494a:	77fb      	strb	r3, [r7, #31]
 800494c:	e09e      	b.n	8004a8c <UART_SetConfig+0x348>
 800494e:	2304      	movs	r3, #4
 8004950:	77fb      	strb	r3, [r7, #31]
 8004952:	e09b      	b.n	8004a8c <UART_SetConfig+0x348>
 8004954:	2308      	movs	r3, #8
 8004956:	77fb      	strb	r3, [r7, #31]
 8004958:	e098      	b.n	8004a8c <UART_SetConfig+0x348>
 800495a:	2310      	movs	r3, #16
 800495c:	77fb      	strb	r3, [r7, #31]
 800495e:	e095      	b.n	8004a8c <UART_SetConfig+0x348>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a2f      	ldr	r2, [pc, #188]	; (8004a24 <UART_SetConfig+0x2e0>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d125      	bne.n	80049b6 <UART_SetConfig+0x272>
 800496a:	4b29      	ldr	r3, [pc, #164]	; (8004a10 <UART_SetConfig+0x2cc>)
 800496c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004970:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004974:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004978:	d017      	beq.n	80049aa <UART_SetConfig+0x266>
 800497a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800497e:	d817      	bhi.n	80049b0 <UART_SetConfig+0x26c>
 8004980:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004984:	d00b      	beq.n	800499e <UART_SetConfig+0x25a>
 8004986:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800498a:	d811      	bhi.n	80049b0 <UART_SetConfig+0x26c>
 800498c:	2b00      	cmp	r3, #0
 800498e:	d003      	beq.n	8004998 <UART_SetConfig+0x254>
 8004990:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004994:	d006      	beq.n	80049a4 <UART_SetConfig+0x260>
 8004996:	e00b      	b.n	80049b0 <UART_SetConfig+0x26c>
 8004998:	2301      	movs	r3, #1
 800499a:	77fb      	strb	r3, [r7, #31]
 800499c:	e076      	b.n	8004a8c <UART_SetConfig+0x348>
 800499e:	2302      	movs	r3, #2
 80049a0:	77fb      	strb	r3, [r7, #31]
 80049a2:	e073      	b.n	8004a8c <UART_SetConfig+0x348>
 80049a4:	2304      	movs	r3, #4
 80049a6:	77fb      	strb	r3, [r7, #31]
 80049a8:	e070      	b.n	8004a8c <UART_SetConfig+0x348>
 80049aa:	2308      	movs	r3, #8
 80049ac:	77fb      	strb	r3, [r7, #31]
 80049ae:	e06d      	b.n	8004a8c <UART_SetConfig+0x348>
 80049b0:	2310      	movs	r3, #16
 80049b2:	77fb      	strb	r3, [r7, #31]
 80049b4:	e06a      	b.n	8004a8c <UART_SetConfig+0x348>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a1b      	ldr	r2, [pc, #108]	; (8004a28 <UART_SetConfig+0x2e4>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d138      	bne.n	8004a32 <UART_SetConfig+0x2ee>
 80049c0:	4b13      	ldr	r3, [pc, #76]	; (8004a10 <UART_SetConfig+0x2cc>)
 80049c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049c6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80049ca:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80049ce:	d017      	beq.n	8004a00 <UART_SetConfig+0x2bc>
 80049d0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80049d4:	d82a      	bhi.n	8004a2c <UART_SetConfig+0x2e8>
 80049d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049da:	d00b      	beq.n	80049f4 <UART_SetConfig+0x2b0>
 80049dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049e0:	d824      	bhi.n	8004a2c <UART_SetConfig+0x2e8>
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d003      	beq.n	80049ee <UART_SetConfig+0x2aa>
 80049e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049ea:	d006      	beq.n	80049fa <UART_SetConfig+0x2b6>
 80049ec:	e01e      	b.n	8004a2c <UART_SetConfig+0x2e8>
 80049ee:	2300      	movs	r3, #0
 80049f0:	77fb      	strb	r3, [r7, #31]
 80049f2:	e04b      	b.n	8004a8c <UART_SetConfig+0x348>
 80049f4:	2302      	movs	r3, #2
 80049f6:	77fb      	strb	r3, [r7, #31]
 80049f8:	e048      	b.n	8004a8c <UART_SetConfig+0x348>
 80049fa:	2304      	movs	r3, #4
 80049fc:	77fb      	strb	r3, [r7, #31]
 80049fe:	e045      	b.n	8004a8c <UART_SetConfig+0x348>
 8004a00:	2308      	movs	r3, #8
 8004a02:	77fb      	strb	r3, [r7, #31]
 8004a04:	e042      	b.n	8004a8c <UART_SetConfig+0x348>
 8004a06:	bf00      	nop
 8004a08:	efff69f3 	.word	0xefff69f3
 8004a0c:	40011000 	.word	0x40011000
 8004a10:	40023800 	.word	0x40023800
 8004a14:	40004400 	.word	0x40004400
 8004a18:	40004800 	.word	0x40004800
 8004a1c:	40004c00 	.word	0x40004c00
 8004a20:	40005000 	.word	0x40005000
 8004a24:	40011400 	.word	0x40011400
 8004a28:	40007800 	.word	0x40007800
 8004a2c:	2310      	movs	r3, #16
 8004a2e:	77fb      	strb	r3, [r7, #31]
 8004a30:	e02c      	b.n	8004a8c <UART_SetConfig+0x348>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a72      	ldr	r2, [pc, #456]	; (8004c00 <UART_SetConfig+0x4bc>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d125      	bne.n	8004a88 <UART_SetConfig+0x344>
 8004a3c:	4b71      	ldr	r3, [pc, #452]	; (8004c04 <UART_SetConfig+0x4c0>)
 8004a3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a42:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004a46:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004a4a:	d017      	beq.n	8004a7c <UART_SetConfig+0x338>
 8004a4c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004a50:	d817      	bhi.n	8004a82 <UART_SetConfig+0x33e>
 8004a52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a56:	d00b      	beq.n	8004a70 <UART_SetConfig+0x32c>
 8004a58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a5c:	d811      	bhi.n	8004a82 <UART_SetConfig+0x33e>
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d003      	beq.n	8004a6a <UART_SetConfig+0x326>
 8004a62:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a66:	d006      	beq.n	8004a76 <UART_SetConfig+0x332>
 8004a68:	e00b      	b.n	8004a82 <UART_SetConfig+0x33e>
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	77fb      	strb	r3, [r7, #31]
 8004a6e:	e00d      	b.n	8004a8c <UART_SetConfig+0x348>
 8004a70:	2302      	movs	r3, #2
 8004a72:	77fb      	strb	r3, [r7, #31]
 8004a74:	e00a      	b.n	8004a8c <UART_SetConfig+0x348>
 8004a76:	2304      	movs	r3, #4
 8004a78:	77fb      	strb	r3, [r7, #31]
 8004a7a:	e007      	b.n	8004a8c <UART_SetConfig+0x348>
 8004a7c:	2308      	movs	r3, #8
 8004a7e:	77fb      	strb	r3, [r7, #31]
 8004a80:	e004      	b.n	8004a8c <UART_SetConfig+0x348>
 8004a82:	2310      	movs	r3, #16
 8004a84:	77fb      	strb	r3, [r7, #31]
 8004a86:	e001      	b.n	8004a8c <UART_SetConfig+0x348>
 8004a88:	2310      	movs	r3, #16
 8004a8a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	69db      	ldr	r3, [r3, #28]
 8004a90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a94:	d15b      	bne.n	8004b4e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004a96:	7ffb      	ldrb	r3, [r7, #31]
 8004a98:	2b08      	cmp	r3, #8
 8004a9a:	d828      	bhi.n	8004aee <UART_SetConfig+0x3aa>
 8004a9c:	a201      	add	r2, pc, #4	; (adr r2, 8004aa4 <UART_SetConfig+0x360>)
 8004a9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aa2:	bf00      	nop
 8004aa4:	08004ac9 	.word	0x08004ac9
 8004aa8:	08004ad1 	.word	0x08004ad1
 8004aac:	08004ad9 	.word	0x08004ad9
 8004ab0:	08004aef 	.word	0x08004aef
 8004ab4:	08004adf 	.word	0x08004adf
 8004ab8:	08004aef 	.word	0x08004aef
 8004abc:	08004aef 	.word	0x08004aef
 8004ac0:	08004aef 	.word	0x08004aef
 8004ac4:	08004ae7 	.word	0x08004ae7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ac8:	f7fe fe8c 	bl	80037e4 <HAL_RCC_GetPCLK1Freq>
 8004acc:	61b8      	str	r0, [r7, #24]
        break;
 8004ace:	e013      	b.n	8004af8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ad0:	f7fe fe9c 	bl	800380c <HAL_RCC_GetPCLK2Freq>
 8004ad4:	61b8      	str	r0, [r7, #24]
        break;
 8004ad6:	e00f      	b.n	8004af8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ad8:	4b4b      	ldr	r3, [pc, #300]	; (8004c08 <UART_SetConfig+0x4c4>)
 8004ada:	61bb      	str	r3, [r7, #24]
        break;
 8004adc:	e00c      	b.n	8004af8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ade:	f7fe fd6f 	bl	80035c0 <HAL_RCC_GetSysClockFreq>
 8004ae2:	61b8      	str	r0, [r7, #24]
        break;
 8004ae4:	e008      	b.n	8004af8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ae6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004aea:	61bb      	str	r3, [r7, #24]
        break;
 8004aec:	e004      	b.n	8004af8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004aee:	2300      	movs	r3, #0
 8004af0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	77bb      	strb	r3, [r7, #30]
        break;
 8004af6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004af8:	69bb      	ldr	r3, [r7, #24]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d074      	beq.n	8004be8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004afe:	69bb      	ldr	r3, [r7, #24]
 8004b00:	005a      	lsls	r2, r3, #1
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	085b      	lsrs	r3, r3, #1
 8004b08:	441a      	add	r2, r3
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b12:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b14:	693b      	ldr	r3, [r7, #16]
 8004b16:	2b0f      	cmp	r3, #15
 8004b18:	d916      	bls.n	8004b48 <UART_SetConfig+0x404>
 8004b1a:	693b      	ldr	r3, [r7, #16]
 8004b1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b20:	d212      	bcs.n	8004b48 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004b22:	693b      	ldr	r3, [r7, #16]
 8004b24:	b29b      	uxth	r3, r3
 8004b26:	f023 030f 	bic.w	r3, r3, #15
 8004b2a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004b2c:	693b      	ldr	r3, [r7, #16]
 8004b2e:	085b      	lsrs	r3, r3, #1
 8004b30:	b29b      	uxth	r3, r3
 8004b32:	f003 0307 	and.w	r3, r3, #7
 8004b36:	b29a      	uxth	r2, r3
 8004b38:	89fb      	ldrh	r3, [r7, #14]
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	89fa      	ldrh	r2, [r7, #14]
 8004b44:	60da      	str	r2, [r3, #12]
 8004b46:	e04f      	b.n	8004be8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004b48:	2301      	movs	r3, #1
 8004b4a:	77bb      	strb	r3, [r7, #30]
 8004b4c:	e04c      	b.n	8004be8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004b4e:	7ffb      	ldrb	r3, [r7, #31]
 8004b50:	2b08      	cmp	r3, #8
 8004b52:	d828      	bhi.n	8004ba6 <UART_SetConfig+0x462>
 8004b54:	a201      	add	r2, pc, #4	; (adr r2, 8004b5c <UART_SetConfig+0x418>)
 8004b56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b5a:	bf00      	nop
 8004b5c:	08004b81 	.word	0x08004b81
 8004b60:	08004b89 	.word	0x08004b89
 8004b64:	08004b91 	.word	0x08004b91
 8004b68:	08004ba7 	.word	0x08004ba7
 8004b6c:	08004b97 	.word	0x08004b97
 8004b70:	08004ba7 	.word	0x08004ba7
 8004b74:	08004ba7 	.word	0x08004ba7
 8004b78:	08004ba7 	.word	0x08004ba7
 8004b7c:	08004b9f 	.word	0x08004b9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b80:	f7fe fe30 	bl	80037e4 <HAL_RCC_GetPCLK1Freq>
 8004b84:	61b8      	str	r0, [r7, #24]
        break;
 8004b86:	e013      	b.n	8004bb0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b88:	f7fe fe40 	bl	800380c <HAL_RCC_GetPCLK2Freq>
 8004b8c:	61b8      	str	r0, [r7, #24]
        break;
 8004b8e:	e00f      	b.n	8004bb0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b90:	4b1d      	ldr	r3, [pc, #116]	; (8004c08 <UART_SetConfig+0x4c4>)
 8004b92:	61bb      	str	r3, [r7, #24]
        break;
 8004b94:	e00c      	b.n	8004bb0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b96:	f7fe fd13 	bl	80035c0 <HAL_RCC_GetSysClockFreq>
 8004b9a:	61b8      	str	r0, [r7, #24]
        break;
 8004b9c:	e008      	b.n	8004bb0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ba2:	61bb      	str	r3, [r7, #24]
        break;
 8004ba4:	e004      	b.n	8004bb0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004baa:	2301      	movs	r3, #1
 8004bac:	77bb      	strb	r3, [r7, #30]
        break;
 8004bae:	bf00      	nop
    }

    if (pclk != 0U)
 8004bb0:	69bb      	ldr	r3, [r7, #24]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d018      	beq.n	8004be8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	085a      	lsrs	r2, r3, #1
 8004bbc:	69bb      	ldr	r3, [r7, #24]
 8004bbe:	441a      	add	r2, r3
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bc8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	2b0f      	cmp	r3, #15
 8004bce:	d909      	bls.n	8004be4 <UART_SetConfig+0x4a0>
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bd6:	d205      	bcs.n	8004be4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	b29a      	uxth	r2, r3
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	60da      	str	r2, [r3, #12]
 8004be2:	e001      	b.n	8004be8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004be4:	2301      	movs	r3, #1
 8004be6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2200      	movs	r2, #0
 8004bec:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004bf4:	7fbb      	ldrb	r3, [r7, #30]
}
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	3720      	adds	r7, #32
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bd80      	pop	{r7, pc}
 8004bfe:	bf00      	nop
 8004c00:	40007c00 	.word	0x40007c00
 8004c04:	40023800 	.word	0x40023800
 8004c08:	00f42400 	.word	0x00f42400

08004c0c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b083      	sub	sp, #12
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c18:	f003 0301 	and.w	r3, r3, #1
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d00a      	beq.n	8004c36 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	430a      	orrs	r2, r1
 8004c34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c3a:	f003 0302 	and.w	r3, r3, #2
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d00a      	beq.n	8004c58 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	430a      	orrs	r2, r1
 8004c56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c5c:	f003 0304 	and.w	r3, r3, #4
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d00a      	beq.n	8004c7a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	430a      	orrs	r2, r1
 8004c78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c7e:	f003 0308 	and.w	r3, r3, #8
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d00a      	beq.n	8004c9c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	430a      	orrs	r2, r1
 8004c9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca0:	f003 0310 	and.w	r3, r3, #16
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d00a      	beq.n	8004cbe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	430a      	orrs	r2, r1
 8004cbc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc2:	f003 0320 	and.w	r3, r3, #32
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d00a      	beq.n	8004ce0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	689b      	ldr	r3, [r3, #8]
 8004cd0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	430a      	orrs	r2, r1
 8004cde:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d01a      	beq.n	8004d22 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	430a      	orrs	r2, r1
 8004d00:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d0a:	d10a      	bne.n	8004d22 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	430a      	orrs	r2, r1
 8004d20:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d00a      	beq.n	8004d44 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	430a      	orrs	r2, r1
 8004d42:	605a      	str	r2, [r3, #4]
  }
}
 8004d44:	bf00      	nop
 8004d46:	370c      	adds	r7, #12
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4e:	4770      	bx	lr

08004d50 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b086      	sub	sp, #24
 8004d54:	af02      	add	r7, sp, #8
 8004d56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004d60:	f7fc fa0e 	bl	8001180 <HAL_GetTick>
 8004d64:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f003 0308 	and.w	r3, r3, #8
 8004d70:	2b08      	cmp	r3, #8
 8004d72:	d10e      	bne.n	8004d92 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d74:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004d78:	9300      	str	r3, [sp, #0]
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	f000 f831 	bl	8004dea <UART_WaitOnFlagUntilTimeout>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d001      	beq.n	8004d92 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d8e:	2303      	movs	r3, #3
 8004d90:	e027      	b.n	8004de2 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f003 0304 	and.w	r3, r3, #4
 8004d9c:	2b04      	cmp	r3, #4
 8004d9e:	d10e      	bne.n	8004dbe <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004da0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004da4:	9300      	str	r3, [sp, #0]
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	2200      	movs	r2, #0
 8004daa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f000 f81b 	bl	8004dea <UART_WaitOnFlagUntilTimeout>
 8004db4:	4603      	mov	r3, r0
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d001      	beq.n	8004dbe <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004dba:	2303      	movs	r3, #3
 8004dbc:	e011      	b.n	8004de2 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2220      	movs	r2, #32
 8004dc2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2220      	movs	r2, #32
 8004dc8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004de0:	2300      	movs	r3, #0
}
 8004de2:	4618      	mov	r0, r3
 8004de4:	3710      	adds	r7, #16
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bd80      	pop	{r7, pc}

08004dea <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004dea:	b580      	push	{r7, lr}
 8004dec:	b09c      	sub	sp, #112	; 0x70
 8004dee:	af00      	add	r7, sp, #0
 8004df0:	60f8      	str	r0, [r7, #12]
 8004df2:	60b9      	str	r1, [r7, #8]
 8004df4:	603b      	str	r3, [r7, #0]
 8004df6:	4613      	mov	r3, r2
 8004df8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004dfa:	e0a7      	b.n	8004f4c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004dfc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004dfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e02:	f000 80a3 	beq.w	8004f4c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e06:	f7fc f9bb 	bl	8001180 <HAL_GetTick>
 8004e0a:	4602      	mov	r2, r0
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	1ad3      	subs	r3, r2, r3
 8004e10:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004e12:	429a      	cmp	r2, r3
 8004e14:	d302      	bcc.n	8004e1c <UART_WaitOnFlagUntilTimeout+0x32>
 8004e16:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d13f      	bne.n	8004e9c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e24:	e853 3f00 	ldrex	r3, [r3]
 8004e28:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004e2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e2c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004e30:	667b      	str	r3, [r7, #100]	; 0x64
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	461a      	mov	r2, r3
 8004e38:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e3a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004e3c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e3e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004e40:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004e42:	e841 2300 	strex	r3, r2, [r1]
 8004e46:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004e48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d1e6      	bne.n	8004e1c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	3308      	adds	r3, #8
 8004e54:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e58:	e853 3f00 	ldrex	r3, [r3]
 8004e5c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004e5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e60:	f023 0301 	bic.w	r3, r3, #1
 8004e64:	663b      	str	r3, [r7, #96]	; 0x60
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	3308      	adds	r3, #8
 8004e6c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004e6e:	64ba      	str	r2, [r7, #72]	; 0x48
 8004e70:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e72:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004e74:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004e76:	e841 2300 	strex	r3, r2, [r1]
 8004e7a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004e7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d1e5      	bne.n	8004e4e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	2220      	movs	r2, #32
 8004e86:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	2220      	movs	r2, #32
 8004e8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	2200      	movs	r2, #0
 8004e94:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8004e98:	2303      	movs	r3, #3
 8004e9a:	e068      	b.n	8004f6e <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f003 0304 	and.w	r3, r3, #4
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d050      	beq.n	8004f4c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	69db      	ldr	r3, [r3, #28]
 8004eb0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004eb4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004eb8:	d148      	bne.n	8004f4c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004ec2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ecc:	e853 3f00 	ldrex	r3, [r3]
 8004ed0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004ed8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	461a      	mov	r2, r3
 8004ee0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ee2:	637b      	str	r3, [r7, #52]	; 0x34
 8004ee4:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ee6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004ee8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004eea:	e841 2300 	strex	r3, r2, [r1]
 8004eee:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d1e6      	bne.n	8004ec4 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	3308      	adds	r3, #8
 8004efc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	e853 3f00 	ldrex	r3, [r3]
 8004f04:	613b      	str	r3, [r7, #16]
   return(result);
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	f023 0301 	bic.w	r3, r3, #1
 8004f0c:	66bb      	str	r3, [r7, #104]	; 0x68
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	3308      	adds	r3, #8
 8004f14:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004f16:	623a      	str	r2, [r7, #32]
 8004f18:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f1a:	69f9      	ldr	r1, [r7, #28]
 8004f1c:	6a3a      	ldr	r2, [r7, #32]
 8004f1e:	e841 2300 	strex	r3, r2, [r1]
 8004f22:	61bb      	str	r3, [r7, #24]
   return(result);
 8004f24:	69bb      	ldr	r3, [r7, #24]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d1e5      	bne.n	8004ef6 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2220      	movs	r2, #32
 8004f2e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	2220      	movs	r2, #32
 8004f34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	2220      	movs	r2, #32
 8004f3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	2200      	movs	r2, #0
 8004f44:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004f48:	2303      	movs	r3, #3
 8004f4a:	e010      	b.n	8004f6e <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	69da      	ldr	r2, [r3, #28]
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	4013      	ands	r3, r2
 8004f56:	68ba      	ldr	r2, [r7, #8]
 8004f58:	429a      	cmp	r2, r3
 8004f5a:	bf0c      	ite	eq
 8004f5c:	2301      	moveq	r3, #1
 8004f5e:	2300      	movne	r3, #0
 8004f60:	b2db      	uxtb	r3, r3
 8004f62:	461a      	mov	r2, r3
 8004f64:	79fb      	ldrb	r3, [r7, #7]
 8004f66:	429a      	cmp	r2, r3
 8004f68:	f43f af48 	beq.w	8004dfc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f6c:	2300      	movs	r3, #0
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	3770      	adds	r7, #112	; 0x70
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd80      	pop	{r7, pc}

08004f76 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f76:	b480      	push	{r7}
 8004f78:	b095      	sub	sp, #84	; 0x54
 8004f7a:	af00      	add	r7, sp, #0
 8004f7c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f86:	e853 3f00 	ldrex	r3, [r3]
 8004f8a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f8e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004f92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	461a      	mov	r2, r3
 8004f9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f9c:	643b      	str	r3, [r7, #64]	; 0x40
 8004f9e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fa0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004fa2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004fa4:	e841 2300 	strex	r3, r2, [r1]
 8004fa8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004faa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d1e6      	bne.n	8004f7e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	3308      	adds	r3, #8
 8004fb6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fb8:	6a3b      	ldr	r3, [r7, #32]
 8004fba:	e853 3f00 	ldrex	r3, [r3]
 8004fbe:	61fb      	str	r3, [r7, #28]
   return(result);
 8004fc0:	69fb      	ldr	r3, [r7, #28]
 8004fc2:	f023 0301 	bic.w	r3, r3, #1
 8004fc6:	64bb      	str	r3, [r7, #72]	; 0x48
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	3308      	adds	r3, #8
 8004fce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004fd0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004fd2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fd4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004fd6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004fd8:	e841 2300 	strex	r3, r2, [r1]
 8004fdc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d1e5      	bne.n	8004fb0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	d118      	bne.n	800501e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	e853 3f00 	ldrex	r3, [r3]
 8004ff8:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	f023 0310 	bic.w	r3, r3, #16
 8005000:	647b      	str	r3, [r7, #68]	; 0x44
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	461a      	mov	r2, r3
 8005008:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800500a:	61bb      	str	r3, [r7, #24]
 800500c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800500e:	6979      	ldr	r1, [r7, #20]
 8005010:	69ba      	ldr	r2, [r7, #24]
 8005012:	e841 2300 	strex	r3, r2, [r1]
 8005016:	613b      	str	r3, [r7, #16]
   return(result);
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d1e6      	bne.n	8004fec <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2220      	movs	r2, #32
 8005022:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2200      	movs	r2, #0
 800502a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2200      	movs	r2, #0
 8005030:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005032:	bf00      	nop
 8005034:	3754      	adds	r7, #84	; 0x54
 8005036:	46bd      	mov	sp, r7
 8005038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503c:	4770      	bx	lr

0800503e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800503e:	b580      	push	{r7, lr}
 8005040:	b084      	sub	sp, #16
 8005042:	af00      	add	r7, sp, #0
 8005044:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800504a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	2200      	movs	r2, #0
 8005050:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	2200      	movs	r2, #0
 8005058:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800505c:	68f8      	ldr	r0, [r7, #12]
 800505e:	f7ff fb51 	bl	8004704 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005062:	bf00      	nop
 8005064:	3710      	adds	r7, #16
 8005066:	46bd      	mov	sp, r7
 8005068:	bd80      	pop	{r7, pc}

0800506a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800506a:	b580      	push	{r7, lr}
 800506c:	b088      	sub	sp, #32
 800506e:	af00      	add	r7, sp, #0
 8005070:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	e853 3f00 	ldrex	r3, [r3]
 800507e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005086:	61fb      	str	r3, [r7, #28]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	461a      	mov	r2, r3
 800508e:	69fb      	ldr	r3, [r7, #28]
 8005090:	61bb      	str	r3, [r7, #24]
 8005092:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005094:	6979      	ldr	r1, [r7, #20]
 8005096:	69ba      	ldr	r2, [r7, #24]
 8005098:	e841 2300 	strex	r3, r2, [r1]
 800509c:	613b      	str	r3, [r7, #16]
   return(result);
 800509e:	693b      	ldr	r3, [r7, #16]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d1e6      	bne.n	8005072 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2220      	movs	r2, #32
 80050a8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2200      	movs	r2, #0
 80050ae:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80050b0:	6878      	ldr	r0, [r7, #4]
 80050b2:	f7ff fb1d 	bl	80046f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80050b6:	bf00      	nop
 80050b8:	3720      	adds	r7, #32
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bd80      	pop	{r7, pc}
	...

080050c0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80050c0:	b084      	sub	sp, #16
 80050c2:	b580      	push	{r7, lr}
 80050c4:	b084      	sub	sp, #16
 80050c6:	af00      	add	r7, sp, #0
 80050c8:	6078      	str	r0, [r7, #4]
 80050ca:	f107 001c 	add.w	r0, r7, #28
 80050ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80050d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050d4:	2b01      	cmp	r3, #1
 80050d6:	d120      	bne.n	800511a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050dc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	68da      	ldr	r2, [r3, #12]
 80050e8:	4b20      	ldr	r3, [pc, #128]	; (800516c <USB_CoreInit+0xac>)
 80050ea:	4013      	ands	r3, r2
 80050ec:	687a      	ldr	r2, [r7, #4]
 80050ee:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	68db      	ldr	r3, [r3, #12]
 80050f4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80050fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050fe:	2b01      	cmp	r3, #1
 8005100:	d105      	bne.n	800510e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	68db      	ldr	r3, [r3, #12]
 8005106:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	f000 fa96 	bl	8005640 <USB_CoreReset>
 8005114:	4603      	mov	r3, r0
 8005116:	73fb      	strb	r3, [r7, #15]
 8005118:	e010      	b.n	800513c <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	68db      	ldr	r3, [r3, #12]
 800511e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005126:	6878      	ldr	r0, [r7, #4]
 8005128:	f000 fa8a 	bl	8005640 <USB_CoreReset>
 800512c:	4603      	mov	r3, r0
 800512e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005134:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800513c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800513e:	2b01      	cmp	r3, #1
 8005140:	d10b      	bne.n	800515a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	689b      	ldr	r3, [r3, #8]
 8005146:	f043 0206 	orr.w	r2, r3, #6
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	689b      	ldr	r3, [r3, #8]
 8005152:	f043 0220 	orr.w	r2, r3, #32
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800515a:	7bfb      	ldrb	r3, [r7, #15]
}
 800515c:	4618      	mov	r0, r3
 800515e:	3710      	adds	r7, #16
 8005160:	46bd      	mov	sp, r7
 8005162:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005166:	b004      	add	sp, #16
 8005168:	4770      	bx	lr
 800516a:	bf00      	nop
 800516c:	ffbdffbf 	.word	0xffbdffbf

08005170 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005170:	b480      	push	{r7}
 8005172:	b083      	sub	sp, #12
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	689b      	ldr	r3, [r3, #8]
 800517c:	f023 0201 	bic.w	r2, r3, #1
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005184:	2300      	movs	r3, #0
}
 8005186:	4618      	mov	r0, r3
 8005188:	370c      	adds	r7, #12
 800518a:	46bd      	mov	sp, r7
 800518c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005190:	4770      	bx	lr

08005192 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005192:	b580      	push	{r7, lr}
 8005194:	b084      	sub	sp, #16
 8005196:	af00      	add	r7, sp, #0
 8005198:	6078      	str	r0, [r7, #4]
 800519a:	460b      	mov	r3, r1
 800519c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800519e:	2300      	movs	r3, #0
 80051a0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	68db      	ldr	r3, [r3, #12]
 80051a6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80051ae:	78fb      	ldrb	r3, [r7, #3]
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	d115      	bne.n	80051e0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	68db      	ldr	r3, [r3, #12]
 80051b8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80051c0:	2001      	movs	r0, #1
 80051c2:	f7fb ffe9 	bl	8001198 <HAL_Delay>
      ms++;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	3301      	adds	r3, #1
 80051ca:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80051cc:	6878      	ldr	r0, [r7, #4]
 80051ce:	f000 fa29 	bl	8005624 <USB_GetMode>
 80051d2:	4603      	mov	r3, r0
 80051d4:	2b01      	cmp	r3, #1
 80051d6:	d01e      	beq.n	8005216 <USB_SetCurrentMode+0x84>
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	2b31      	cmp	r3, #49	; 0x31
 80051dc:	d9f0      	bls.n	80051c0 <USB_SetCurrentMode+0x2e>
 80051de:	e01a      	b.n	8005216 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80051e0:	78fb      	ldrb	r3, [r7, #3]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d115      	bne.n	8005212 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	68db      	ldr	r3, [r3, #12]
 80051ea:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80051f2:	2001      	movs	r0, #1
 80051f4:	f7fb ffd0 	bl	8001198 <HAL_Delay>
      ms++;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	3301      	adds	r3, #1
 80051fc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	f000 fa10 	bl	8005624 <USB_GetMode>
 8005204:	4603      	mov	r3, r0
 8005206:	2b00      	cmp	r3, #0
 8005208:	d005      	beq.n	8005216 <USB_SetCurrentMode+0x84>
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	2b31      	cmp	r3, #49	; 0x31
 800520e:	d9f0      	bls.n	80051f2 <USB_SetCurrentMode+0x60>
 8005210:	e001      	b.n	8005216 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005212:	2301      	movs	r3, #1
 8005214:	e005      	b.n	8005222 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	2b32      	cmp	r3, #50	; 0x32
 800521a:	d101      	bne.n	8005220 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800521c:	2301      	movs	r3, #1
 800521e:	e000      	b.n	8005222 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005220:	2300      	movs	r3, #0
}
 8005222:	4618      	mov	r0, r3
 8005224:	3710      	adds	r7, #16
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}
	...

0800522c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800522c:	b084      	sub	sp, #16
 800522e:	b580      	push	{r7, lr}
 8005230:	b086      	sub	sp, #24
 8005232:	af00      	add	r7, sp, #0
 8005234:	6078      	str	r0, [r7, #4]
 8005236:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800523a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800523e:	2300      	movs	r3, #0
 8005240:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005246:	2300      	movs	r3, #0
 8005248:	613b      	str	r3, [r7, #16]
 800524a:	e009      	b.n	8005260 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800524c:	687a      	ldr	r2, [r7, #4]
 800524e:	693b      	ldr	r3, [r7, #16]
 8005250:	3340      	adds	r3, #64	; 0x40
 8005252:	009b      	lsls	r3, r3, #2
 8005254:	4413      	add	r3, r2
 8005256:	2200      	movs	r2, #0
 8005258:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800525a:	693b      	ldr	r3, [r7, #16]
 800525c:	3301      	adds	r3, #1
 800525e:	613b      	str	r3, [r7, #16]
 8005260:	693b      	ldr	r3, [r7, #16]
 8005262:	2b0e      	cmp	r3, #14
 8005264:	d9f2      	bls.n	800524c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005266:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005268:	2b00      	cmp	r3, #0
 800526a:	d11c      	bne.n	80052a6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	68fa      	ldr	r2, [r7, #12]
 8005276:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800527a:	f043 0302 	orr.w	r3, r3, #2
 800527e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005284:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	601a      	str	r2, [r3, #0]
 80052a4:	e005      	b.n	80052b2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052aa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80052b8:	461a      	mov	r2, r3
 80052ba:	2300      	movs	r3, #0
 80052bc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052c4:	4619      	mov	r1, r3
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052cc:	461a      	mov	r2, r3
 80052ce:	680b      	ldr	r3, [r1, #0]
 80052d0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80052d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052d4:	2b01      	cmp	r3, #1
 80052d6:	d10c      	bne.n	80052f2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80052d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d104      	bne.n	80052e8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80052de:	2100      	movs	r1, #0
 80052e0:	6878      	ldr	r0, [r7, #4]
 80052e2:	f000 f965 	bl	80055b0 <USB_SetDevSpeed>
 80052e6:	e008      	b.n	80052fa <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80052e8:	2101      	movs	r1, #1
 80052ea:	6878      	ldr	r0, [r7, #4]
 80052ec:	f000 f960 	bl	80055b0 <USB_SetDevSpeed>
 80052f0:	e003      	b.n	80052fa <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80052f2:	2103      	movs	r1, #3
 80052f4:	6878      	ldr	r0, [r7, #4]
 80052f6:	f000 f95b 	bl	80055b0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80052fa:	2110      	movs	r1, #16
 80052fc:	6878      	ldr	r0, [r7, #4]
 80052fe:	f000 f8f3 	bl	80054e8 <USB_FlushTxFifo>
 8005302:	4603      	mov	r3, r0
 8005304:	2b00      	cmp	r3, #0
 8005306:	d001      	beq.n	800530c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8005308:	2301      	movs	r3, #1
 800530a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800530c:	6878      	ldr	r0, [r7, #4]
 800530e:	f000 f91f 	bl	8005550 <USB_FlushRxFifo>
 8005312:	4603      	mov	r3, r0
 8005314:	2b00      	cmp	r3, #0
 8005316:	d001      	beq.n	800531c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8005318:	2301      	movs	r3, #1
 800531a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005322:	461a      	mov	r2, r3
 8005324:	2300      	movs	r3, #0
 8005326:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800532e:	461a      	mov	r2, r3
 8005330:	2300      	movs	r3, #0
 8005332:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800533a:	461a      	mov	r2, r3
 800533c:	2300      	movs	r3, #0
 800533e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005340:	2300      	movs	r3, #0
 8005342:	613b      	str	r3, [r7, #16]
 8005344:	e043      	b.n	80053ce <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005346:	693b      	ldr	r3, [r7, #16]
 8005348:	015a      	lsls	r2, r3, #5
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	4413      	add	r3, r2
 800534e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005358:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800535c:	d118      	bne.n	8005390 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800535e:	693b      	ldr	r3, [r7, #16]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d10a      	bne.n	800537a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005364:	693b      	ldr	r3, [r7, #16]
 8005366:	015a      	lsls	r2, r3, #5
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	4413      	add	r3, r2
 800536c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005370:	461a      	mov	r2, r3
 8005372:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005376:	6013      	str	r3, [r2, #0]
 8005378:	e013      	b.n	80053a2 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800537a:	693b      	ldr	r3, [r7, #16]
 800537c:	015a      	lsls	r2, r3, #5
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	4413      	add	r3, r2
 8005382:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005386:	461a      	mov	r2, r3
 8005388:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800538c:	6013      	str	r3, [r2, #0]
 800538e:	e008      	b.n	80053a2 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005390:	693b      	ldr	r3, [r7, #16]
 8005392:	015a      	lsls	r2, r3, #5
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	4413      	add	r3, r2
 8005398:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800539c:	461a      	mov	r2, r3
 800539e:	2300      	movs	r3, #0
 80053a0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	015a      	lsls	r2, r3, #5
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	4413      	add	r3, r2
 80053aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053ae:	461a      	mov	r2, r3
 80053b0:	2300      	movs	r3, #0
 80053b2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80053b4:	693b      	ldr	r3, [r7, #16]
 80053b6:	015a      	lsls	r2, r3, #5
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	4413      	add	r3, r2
 80053bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053c0:	461a      	mov	r2, r3
 80053c2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80053c6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80053c8:	693b      	ldr	r3, [r7, #16]
 80053ca:	3301      	adds	r3, #1
 80053cc:	613b      	str	r3, [r7, #16]
 80053ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d0:	693a      	ldr	r2, [r7, #16]
 80053d2:	429a      	cmp	r2, r3
 80053d4:	d3b7      	bcc.n	8005346 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80053d6:	2300      	movs	r3, #0
 80053d8:	613b      	str	r3, [r7, #16]
 80053da:	e043      	b.n	8005464 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80053dc:	693b      	ldr	r3, [r7, #16]
 80053de:	015a      	lsls	r2, r3, #5
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	4413      	add	r3, r2
 80053e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80053ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80053f2:	d118      	bne.n	8005426 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80053f4:	693b      	ldr	r3, [r7, #16]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d10a      	bne.n	8005410 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80053fa:	693b      	ldr	r3, [r7, #16]
 80053fc:	015a      	lsls	r2, r3, #5
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	4413      	add	r3, r2
 8005402:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005406:	461a      	mov	r2, r3
 8005408:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800540c:	6013      	str	r3, [r2, #0]
 800540e:	e013      	b.n	8005438 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005410:	693b      	ldr	r3, [r7, #16]
 8005412:	015a      	lsls	r2, r3, #5
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	4413      	add	r3, r2
 8005418:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800541c:	461a      	mov	r2, r3
 800541e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005422:	6013      	str	r3, [r2, #0]
 8005424:	e008      	b.n	8005438 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005426:	693b      	ldr	r3, [r7, #16]
 8005428:	015a      	lsls	r2, r3, #5
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	4413      	add	r3, r2
 800542e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005432:	461a      	mov	r2, r3
 8005434:	2300      	movs	r3, #0
 8005436:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005438:	693b      	ldr	r3, [r7, #16]
 800543a:	015a      	lsls	r2, r3, #5
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	4413      	add	r3, r2
 8005440:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005444:	461a      	mov	r2, r3
 8005446:	2300      	movs	r3, #0
 8005448:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	015a      	lsls	r2, r3, #5
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	4413      	add	r3, r2
 8005452:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005456:	461a      	mov	r2, r3
 8005458:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800545c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800545e:	693b      	ldr	r3, [r7, #16]
 8005460:	3301      	adds	r3, #1
 8005462:	613b      	str	r3, [r7, #16]
 8005464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005466:	693a      	ldr	r2, [r7, #16]
 8005468:	429a      	cmp	r2, r3
 800546a:	d3b7      	bcc.n	80053dc <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005472:	691b      	ldr	r3, [r3, #16]
 8005474:	68fa      	ldr	r2, [r7, #12]
 8005476:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800547a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800547e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2200      	movs	r2, #0
 8005484:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800548c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800548e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005490:	2b00      	cmp	r3, #0
 8005492:	d105      	bne.n	80054a0 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	699b      	ldr	r3, [r3, #24]
 8005498:	f043 0210 	orr.w	r2, r3, #16
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	699a      	ldr	r2, [r3, #24]
 80054a4:	4b0e      	ldr	r3, [pc, #56]	; (80054e0 <USB_DevInit+0x2b4>)
 80054a6:	4313      	orrs	r3, r2
 80054a8:	687a      	ldr	r2, [r7, #4]
 80054aa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80054ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d005      	beq.n	80054be <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	699b      	ldr	r3, [r3, #24]
 80054b6:	f043 0208 	orr.w	r2, r3, #8
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80054be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054c0:	2b01      	cmp	r3, #1
 80054c2:	d105      	bne.n	80054d0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	699a      	ldr	r2, [r3, #24]
 80054c8:	4b06      	ldr	r3, [pc, #24]	; (80054e4 <USB_DevInit+0x2b8>)
 80054ca:	4313      	orrs	r3, r2
 80054cc:	687a      	ldr	r2, [r7, #4]
 80054ce:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80054d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	3718      	adds	r7, #24
 80054d6:	46bd      	mov	sp, r7
 80054d8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80054dc:	b004      	add	sp, #16
 80054de:	4770      	bx	lr
 80054e0:	803c3800 	.word	0x803c3800
 80054e4:	40000004 	.word	0x40000004

080054e8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80054e8:	b480      	push	{r7}
 80054ea:	b085      	sub	sp, #20
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
 80054f0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80054f2:	2300      	movs	r3, #0
 80054f4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	3301      	adds	r3, #1
 80054fa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	4a13      	ldr	r2, [pc, #76]	; (800554c <USB_FlushTxFifo+0x64>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d901      	bls.n	8005508 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005504:	2303      	movs	r3, #3
 8005506:	e01b      	b.n	8005540 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	691b      	ldr	r3, [r3, #16]
 800550c:	2b00      	cmp	r3, #0
 800550e:	daf2      	bge.n	80054f6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005510:	2300      	movs	r3, #0
 8005512:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	019b      	lsls	r3, r3, #6
 8005518:	f043 0220 	orr.w	r2, r3, #32
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	3301      	adds	r3, #1
 8005524:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	4a08      	ldr	r2, [pc, #32]	; (800554c <USB_FlushTxFifo+0x64>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d901      	bls.n	8005532 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800552e:	2303      	movs	r3, #3
 8005530:	e006      	b.n	8005540 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	691b      	ldr	r3, [r3, #16]
 8005536:	f003 0320 	and.w	r3, r3, #32
 800553a:	2b20      	cmp	r3, #32
 800553c:	d0f0      	beq.n	8005520 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800553e:	2300      	movs	r3, #0
}
 8005540:	4618      	mov	r0, r3
 8005542:	3714      	adds	r7, #20
 8005544:	46bd      	mov	sp, r7
 8005546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554a:	4770      	bx	lr
 800554c:	00030d40 	.word	0x00030d40

08005550 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005550:	b480      	push	{r7}
 8005552:	b085      	sub	sp, #20
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005558:	2300      	movs	r3, #0
 800555a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	3301      	adds	r3, #1
 8005560:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	4a11      	ldr	r2, [pc, #68]	; (80055ac <USB_FlushRxFifo+0x5c>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d901      	bls.n	800556e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800556a:	2303      	movs	r3, #3
 800556c:	e018      	b.n	80055a0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	691b      	ldr	r3, [r3, #16]
 8005572:	2b00      	cmp	r3, #0
 8005574:	daf2      	bge.n	800555c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005576:	2300      	movs	r3, #0
 8005578:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2210      	movs	r2, #16
 800557e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	3301      	adds	r3, #1
 8005584:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	4a08      	ldr	r2, [pc, #32]	; (80055ac <USB_FlushRxFifo+0x5c>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d901      	bls.n	8005592 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800558e:	2303      	movs	r3, #3
 8005590:	e006      	b.n	80055a0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	691b      	ldr	r3, [r3, #16]
 8005596:	f003 0310 	and.w	r3, r3, #16
 800559a:	2b10      	cmp	r3, #16
 800559c:	d0f0      	beq.n	8005580 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800559e:	2300      	movs	r3, #0
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	3714      	adds	r7, #20
 80055a4:	46bd      	mov	sp, r7
 80055a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055aa:	4770      	bx	lr
 80055ac:	00030d40 	.word	0x00030d40

080055b0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80055b0:	b480      	push	{r7}
 80055b2:	b085      	sub	sp, #20
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
 80055b8:	460b      	mov	r3, r1
 80055ba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055c6:	681a      	ldr	r2, [r3, #0]
 80055c8:	78fb      	ldrb	r3, [r7, #3]
 80055ca:	68f9      	ldr	r1, [r7, #12]
 80055cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80055d0:	4313      	orrs	r3, r2
 80055d2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80055d4:	2300      	movs	r3, #0
}
 80055d6:	4618      	mov	r0, r3
 80055d8:	3714      	adds	r7, #20
 80055da:	46bd      	mov	sp, r7
 80055dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e0:	4770      	bx	lr

080055e2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80055e2:	b480      	push	{r7}
 80055e4:	b085      	sub	sp, #20
 80055e6:	af00      	add	r7, sp, #0
 80055e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	68fa      	ldr	r2, [r7, #12]
 80055f8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80055fc:	f023 0303 	bic.w	r3, r3, #3
 8005600:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	68fa      	ldr	r2, [r7, #12]
 800560c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005610:	f043 0302 	orr.w	r3, r3, #2
 8005614:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005616:	2300      	movs	r3, #0
}
 8005618:	4618      	mov	r0, r3
 800561a:	3714      	adds	r7, #20
 800561c:	46bd      	mov	sp, r7
 800561e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005622:	4770      	bx	lr

08005624 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005624:	b480      	push	{r7}
 8005626:	b083      	sub	sp, #12
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	695b      	ldr	r3, [r3, #20]
 8005630:	f003 0301 	and.w	r3, r3, #1
}
 8005634:	4618      	mov	r0, r3
 8005636:	370c      	adds	r7, #12
 8005638:	46bd      	mov	sp, r7
 800563a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563e:	4770      	bx	lr

08005640 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005640:	b480      	push	{r7}
 8005642:	b085      	sub	sp, #20
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005648:	2300      	movs	r3, #0
 800564a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	3301      	adds	r3, #1
 8005650:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	4a13      	ldr	r2, [pc, #76]	; (80056a4 <USB_CoreReset+0x64>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d901      	bls.n	800565e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800565a:	2303      	movs	r3, #3
 800565c:	e01b      	b.n	8005696 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	691b      	ldr	r3, [r3, #16]
 8005662:	2b00      	cmp	r3, #0
 8005664:	daf2      	bge.n	800564c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005666:	2300      	movs	r3, #0
 8005668:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	691b      	ldr	r3, [r3, #16]
 800566e:	f043 0201 	orr.w	r2, r3, #1
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	3301      	adds	r3, #1
 800567a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	4a09      	ldr	r2, [pc, #36]	; (80056a4 <USB_CoreReset+0x64>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d901      	bls.n	8005688 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005684:	2303      	movs	r3, #3
 8005686:	e006      	b.n	8005696 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	691b      	ldr	r3, [r3, #16]
 800568c:	f003 0301 	and.w	r3, r3, #1
 8005690:	2b01      	cmp	r3, #1
 8005692:	d0f0      	beq.n	8005676 <USB_CoreReset+0x36>

  return HAL_OK;
 8005694:	2300      	movs	r3, #0
}
 8005696:	4618      	mov	r0, r3
 8005698:	3714      	adds	r7, #20
 800569a:	46bd      	mov	sp, r7
 800569c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a0:	4770      	bx	lr
 80056a2:	bf00      	nop
 80056a4:	00030d40 	.word	0x00030d40

080056a8 <__libc_init_array>:
 80056a8:	b570      	push	{r4, r5, r6, lr}
 80056aa:	4d0d      	ldr	r5, [pc, #52]	; (80056e0 <__libc_init_array+0x38>)
 80056ac:	4c0d      	ldr	r4, [pc, #52]	; (80056e4 <__libc_init_array+0x3c>)
 80056ae:	1b64      	subs	r4, r4, r5
 80056b0:	10a4      	asrs	r4, r4, #2
 80056b2:	2600      	movs	r6, #0
 80056b4:	42a6      	cmp	r6, r4
 80056b6:	d109      	bne.n	80056cc <__libc_init_array+0x24>
 80056b8:	4d0b      	ldr	r5, [pc, #44]	; (80056e8 <__libc_init_array+0x40>)
 80056ba:	4c0c      	ldr	r4, [pc, #48]	; (80056ec <__libc_init_array+0x44>)
 80056bc:	f000 f820 	bl	8005700 <_init>
 80056c0:	1b64      	subs	r4, r4, r5
 80056c2:	10a4      	asrs	r4, r4, #2
 80056c4:	2600      	movs	r6, #0
 80056c6:	42a6      	cmp	r6, r4
 80056c8:	d105      	bne.n	80056d6 <__libc_init_array+0x2e>
 80056ca:	bd70      	pop	{r4, r5, r6, pc}
 80056cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80056d0:	4798      	blx	r3
 80056d2:	3601      	adds	r6, #1
 80056d4:	e7ee      	b.n	80056b4 <__libc_init_array+0xc>
 80056d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80056da:	4798      	blx	r3
 80056dc:	3601      	adds	r6, #1
 80056de:	e7f2      	b.n	80056c6 <__libc_init_array+0x1e>
 80056e0:	08005740 	.word	0x08005740
 80056e4:	08005740 	.word	0x08005740
 80056e8:	08005740 	.word	0x08005740
 80056ec:	08005744 	.word	0x08005744

080056f0 <memset>:
 80056f0:	4402      	add	r2, r0
 80056f2:	4603      	mov	r3, r0
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d100      	bne.n	80056fa <memset+0xa>
 80056f8:	4770      	bx	lr
 80056fa:	f803 1b01 	strb.w	r1, [r3], #1
 80056fe:	e7f9      	b.n	80056f4 <memset+0x4>

08005700 <_init>:
 8005700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005702:	bf00      	nop
 8005704:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005706:	bc08      	pop	{r3}
 8005708:	469e      	mov	lr, r3
 800570a:	4770      	bx	lr

0800570c <_fini>:
 800570c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800570e:	bf00      	nop
 8005710:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005712:	bc08      	pop	{r3}
 8005714:	469e      	mov	lr, r3
 8005716:	4770      	bx	lr
